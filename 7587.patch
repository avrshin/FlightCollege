# HG changeset patch
# User mjmckay <michael.mckay@sympatico.ca>
# Date 1392084533 18000
#      Mon Feb 10 21:08:53 2014 -0500
# Branch release/3.7.0
# Node ID 26ba5a0188661a157573eb56b9484550189b0503
# Parent  09ae44c5cfa6e779345db99b76aac760770736fc
# Parent  f7d9cb1ebfcfae113357af63d7a85f34a8993c25
Merge with feature/ADEMPIERE-72

diff -r 09ae44c5cfa6 -r 26ba5a018866 .classpath
--- a/.classpath	Mon Feb 03 23:37:35 2014 -0500
+++ b/.classpath	Mon Feb 10 21:08:53 2014 -0500
@@ -1,140 +1,332 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="base/src"/>
-	<classpathentry kind="src" path="glassfishfacet/src"/>
-	<classpathentry kind="src" path="jbossfacet/src"/>
-	<classpathentry kind="src" path="client/src"/>
-	<classpathentry kind="src" path="sqlj/src"/>
-	<classpathentry kind="src" path="install/src"/>
-	<classpathentry kind="src" path="extend/src"/>
-	<classpathentry kind="src" path="serverRoot/src/main/ejb"/>
-	<classpathentry kind="src" path="serverRoot/src/main/server"/>
-	<classpathentry kind="src" path="serverRoot/src/main/servlet"/>
-	<classpathentry kind="src" path="interfaces/src"/>
-	<classpathentry kind="src" path="serverApps/src/main/servlet"/>
-	<classpathentry kind="src" path="zkwebui/WEB-INF/src"/>
-	<classpathentry excluding="org/compiere/interfaces/" kind="src" path="JasperReports/src"/>
-	<classpathentry excluding="org/compiere/utils/DigestOfFile.java" kind="src" path="JasperReportsWebApp/src"/>
-	<classpathentry kind="src" path="tools/src"/>
-	<classpathentry kind="src" path="webCM/src/main/servlet"/>
-	<classpathentry kind="src" path="migration/src"/>
-	<classpathentry kind="src" path="posterita/posterita/src/main"/>
-	<classpathentry exported="true" kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/jstl.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/log4j.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/mail.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/standard.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/Verisign.jar"/>
-	<classpathentry exported="true" kind="lib" path="jboss/lib/commons-httpclient.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/ant-commons-net.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/ant-launcher.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/ant.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/jsp-api.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/servlet-api.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/ojdbc6.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/jpayment.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/jnlp.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/commons-collections-3.1.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/commons-logging.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/commons-net-1.4.0.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/jgraph.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/postgresql.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/c3p0-0.9.1.2.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/c3p0-oracle-thin-extras-0.9.1.2.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/activemq-core-5.0.0.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/looks-2.0.4.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/xercesImpl.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/xjavadoc-1.1.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/xml-apis.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/jpedal.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/swingx-1.6.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/bsh-2.0b5.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/bsh-engine.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/groovy-all-1.5.1.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/groovy-engine.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/jython.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/jython-engine.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/script-api.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/barbecue-1.5-beta1.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/javaee.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/jcommon-1.0.16.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/jfreechart-1.0.13.jar"/>
-	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-beanutils.jar"/>
-	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-beanutils-bean-collections.jar"/>
-	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-beanutils-core.jar"/>
-	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-codec-1.3.jar"/>
-	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-digester-1.7.jar"/>
-	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-fileupload.jar"/>
-	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-lang-2.1.jar"/>
-	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-validator-1.2.0.jar"/>
-	<classpathentry exported="true" kind="lib" path="JasperReportsTools/lib/iReport.jar"/>
-	<classpathentry exported="true" kind="lib" path="jboss/client/jbosssx-client.jar"/>
-	<classpathentry exported="true" kind="lib" path="jboss/client/jnp-client.jar"/>
-	<classpathentry exported="true" kind="lib" path="jboss/client/jbossall-client.jar"/>
-	<classpathentry exported="true" kind="lib" path="glassfishfacet/lib/appserv-rt.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/cglib.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zcommon.jar" sourcepath="zkwebui/WEB-INF/lib/zcommon-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zk.jar" sourcepath="zkwebui/WEB-INF/lib/zk-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zul.jar" sourcepath="zkwebui/WEB-INF/lib/zul-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/asm.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/commons-el.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/commons-io.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/fckez.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/Filters.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/gmapsz.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/jruby.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/js.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/json_simple.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/jxl.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/mvel.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/ognl.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/timelinez.jar" sourcepath="zkwebui/WEB-INF/lib/timelinez-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zcommons-el.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zhtml.jar" sourcepath="zkwebui/WEB-INF/lib/zhtml-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zhtml-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zkex.jar" sourcepath="zkwebui/WEB-INF/lib/zkex-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zkmax.jar" sourcepath="zkwebui/WEB-INF/lib/zkmax-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zkmax-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zkplus.jar" sourcepath="zkwebui/WEB-INF/lib/zkplus-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zml.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/bsh.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/commons-fileupload.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/jython.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/timelinez-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zcommon-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zkex-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zk-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zml-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zul-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zweb-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="posterita/reference/aspectJ/aspectjlib.jar"/>
-	<classpathentry exported="true" kind="lib" path="posterita/reference/aspectJ/aspectjtools.jar"/>
-	<classpathentry exported="true" kind="lib" path="posterita/reference/aspectJ/aspectjweaver.jar"/>
-	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/struts.jar"/>
-	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/aop.jar"/>
-	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/aspectjrt.jar"/>
-	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/barcode4j.jar"/>
-	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/commons-validator.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/testing/spiffy-with_source-all-0.05.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/testing/SuperCSV-with_src-1.52.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/keylistener.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/junit.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/junit.jar"/>
-	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/displaytag-1.1.1.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zweb.jar"/>
-	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/commons-fileupload.jar"/>
-	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zkplus-sources.jar"/>
-	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/displaytag-export-poi-1.1.1.jar"/>
-	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/log4j-1.2.13.jar"/>
-	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/servlet.jar"/>
-	<classpathentry exported="true" kind="lib" path="packages/liberoHR.jar" sourcepath="/adempiereLiberoHR"/>
-	<classpathentry exported="true" kind="lib" path="packages/liberoMFG.jar" sourcepath="/adempiereLibero"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/iText-2.1.7.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/miglayout-3.7.1-swing.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/payflow.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/cron4j-2.2.1.jar"/>
-	<classpathentry exported="true" kind="lib" path="JasperReportsTools/lib/jasperreports-3.7.3.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/poi-3.5-FINAL-20090928.jar"/>
-	<classpathentry exported="true" kind="lib" path="tools/lib/mysql-connector-java-5.1.13-bin.jar"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="base/src"/>
+	<classpathentry kind="src" path="glassfishfacet/src"/>
+	<classpathentry kind="src" path="jbossfacet/src"/>
+	<classpathentry kind="src" path="client/src"/>
+	<classpathentry kind="src" path="sqlj/src"/>
+	<classpathentry kind="src" path="install/src"/>
+	<classpathentry kind="src" path="extend/src"/>
+	<classpathentry kind="src" path="serverRoot/src/main/ejb"/>
+	<classpathentry kind="src" path="serverRoot/src/main/server"/>
+	<classpathentry kind="src" path="serverRoot/src/main/servlet"/>
+	<classpathentry kind="src" path="interfaces/src"/>
+	<classpathentry kind="src" path="serverApps/src/main/servlet"/>
+	<classpathentry kind="src" path="zkwebui/WEB-INF/src"/>
+	<classpathentry excluding="org/compiere/interfaces/" kind="src" path="JasperReports/src"/>
+	<classpathentry excluding="org/compiere/utils/DigestOfFile.java" kind="src" path="JasperReportsWebApp/src"/>
+	<classpathentry kind="src" path="tools/src"/>
+	<classpathentry kind="src" path="webCM/src/main/servlet"/>
+	<classpathentry kind="src" path="migration/src"/>
+	<classpathentry kind="src" path="posterita/posterita/src/main"/>
+	<classpathentry exported="true" kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+	<classpathentry exported="true" kind="lib" path="tools/lib/jstl.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/log4j.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/mail.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/standard.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/Verisign.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="jboss/lib/commons-httpclient.jar"/>
+	<classpathentry exported="true" kind="lib" path="tools/lib/ant-commons-net.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/ant-launcher.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/ant.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/jsp-api.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/servlet-api.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/ojdbc6.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/jpayment.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/jnlp.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/commons-collections-3.1.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/commons-logging.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/commons-net-1.4.0.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/jgraph.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/postgresql.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/c3p0-0.9.1.2.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/c3p0-oracle-thin-extras-0.9.1.2.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/activemq-core-5.0.0.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/looks-2.0.4.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/xercesImpl.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/xjavadoc-1.1.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/xml-apis.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/jpedal.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/swingx-1.6.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/bsh-2.0b5.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/bsh-engine.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/groovy-all-1.5.1.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/groovy-engine.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/jython.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/jython-engine.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/script-api.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/barbecue-1.5-beta1.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/javaee.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/jcommon-1.0.16.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/jfreechart-1.0.13.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-beanutils.jar"/>
+	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-beanutils-bean-collections.jar"/>
+	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-beanutils-core.jar"/>
+	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-codec-1.3.jar"/>
+	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-digester-1.7.jar"/>
+	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-fileupload.jar"/>
+	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-lang-2.1.jar"/>
+	<classpathentry exported="true" kind="lib" path="serverApps/src/web/WEB-INF/lib/commons-validator-1.2.0.jar"/>
+	<classpathentry exported="true" kind="lib" path="JasperReportsTools/lib/iReport.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="jboss/client/jbosssx-client.jar"/>
+	<classpathentry exported="true" kind="lib" path="jboss/client/jnp-client.jar"/>
+	<classpathentry exported="true" kind="lib" path="jboss/client/jbossall-client.jar"/>
+	<classpathentry exported="true" kind="lib" path="glassfishfacet/lib/appserv-rt.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/cglib.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zcommon.jar" sourcepath="zkwebui/WEB-INF/lib/zcommon-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zk.jar" sourcepath="zkwebui/WEB-INF/lib/zk-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zul.jar" sourcepath="zkwebui/WEB-INF/lib/zul-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/asm.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/commons-el.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/commons-io.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/fckez.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/Filters.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/gmapsz.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/jruby.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/js.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/json_simple.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/jxl.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/mvel.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/ognl.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/timelinez.jar" sourcepath="zkwebui/WEB-INF/lib/timelinez-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zcommons-el.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zhtml.jar" sourcepath="zkwebui/WEB-INF/lib/zhtml-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zhtml-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zkex.jar" sourcepath="zkwebui/WEB-INF/lib/zkex-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zkmax.jar" sourcepath="zkwebui/WEB-INF/lib/zkmax-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zkmax-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zkplus.jar" sourcepath="zkwebui/WEB-INF/lib/zkplus-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zml.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/bsh.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/commons-fileupload.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/jython.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/timelinez-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zcommon-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zkex-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zk-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zml-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zul-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zweb-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="posterita/reference/aspectJ/aspectjlib.jar"/>
+	<classpathentry exported="true" kind="lib" path="posterita/reference/aspectJ/aspectjtools.jar"/>
+	<classpathentry exported="true" kind="lib" path="posterita/reference/aspectJ/aspectjweaver.jar"/>
+	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/struts.jar"/>
+	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/aop.jar"/>
+	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/aspectjrt.jar"/>
+	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/barcode4j.jar"/>
+	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/commons-validator.jar"/>
+	<classpathentry exported="true" kind="lib" path="tools/lib/testing/spiffy-with_source-all-0.05.jar"/>
+	<classpathentry exported="true" kind="lib" path="tools/lib/testing/SuperCSV-with_src-1.52.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/keylistener.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/junit.jar"/>
+	<classpathentry exported="true" kind="lib" path="tools/lib/junit.jar"/>
+	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/displaytag-1.1.1.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zweb.jar"/>
+	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/commons-fileupload.jar"/>
+	<classpathentry exported="true" kind="lib" path="zkwebui/WEB-INF/lib/zkplus-sources.jar"/>
+	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/displaytag-export-poi-1.1.1.jar"/>
+	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/log4j-1.2.13.jar"/>
+	<classpathentry exported="true" kind="lib" path="posterita/posterita/web/WEB-INF/lib/servlet.jar"/>
+	<classpathentry exported="true" kind="lib" path="packages/liberoHR.jar" sourcepath="/adempiereLiberoHR">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="packages/liberoMFG.jar" sourcepath="/adempiereLibero">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/iText-2.1.7.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/miglayout-3.7.1-swing.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/payflow.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/cron4j-2.2.1.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="JasperReportsTools/lib/jasperreports-3.7.3.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/poi-3.5-FINAL-20090928.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry exported="true" kind="lib" path="tools/lib/mysql-connector-java-5.1.13-bin.jar">
+		<attributes>
+			<attribute name="org.eclipse.jst.component.dependency" value="/WEB-INF/lib"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
diff -r 09ae44c5cfa6 -r 26ba5a018866 .flow
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/.flow	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,8 @@
+[branchname]
+master = master
+develop = development
+feature = feature/
+release = release/
+hotfix = hotfix/
+support = support/
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 .hgignore
--- a/.hgignore	Mon Feb 03 23:37:35 2014 -0500
+++ b/.hgignore	Mon Feb 10 21:08:53 2014 -0500
@@ -1,6 +1,7 @@
 syntax: glob
 build
 
+extend/test.properties
 syntax: regexp
 ^.DS_Store$
 ^tools/.DS_Store$
@@ -47,3 +48,4 @@
 ^zkwebui/dist$
 ^zkwebui/WEB-INF/classes$
 ^migration/my_processes_post_migration$
+Adempiere.*\.properties
diff -r 09ae44c5cfa6 -r 26ba5a018866 .hgtags
--- a/.hgtags	Mon Feb 03 23:37:35 2014 -0500
+++ b/.hgtags	Mon Feb 10 21:08:53 2014 -0500
@@ -15,7 +15,20 @@
 cfa9f61de111590f7ce301c0b35a4a5fd87ddb6b adempiere315
 d9ca7180f2effbc9ff22a48721d5ac4762002274 adempiere353a
 e1f7a9ee225c570f0de45c0f61b1f7aa8c0bc74a adempiere342
-6a99423fdff9b08b811410dffe89adb537fd80d1 adempiere360lts
-2dbc5fdef25d9c151bfab0b01cd5f0dc55d5fa24 adempiere370lts
-16a9d4709ea634da66d5f80b0ee31e59d22cad47 3.7.0
-c2fe7bed9e2daaedbc3d31bb1726f372f9330cce BF3450248
+6a99423fdff9b08b811410dffe89adb537fd80d1 adempiere360lts
+2dbc5fdef25d9c151bfab0b01cd5f0dc55d5fa24 adempiere370lts
+16a9d4709ea634da66d5f80b0ee31e59d22cad47 3.7.0
+c2fe7bed9e2daaedbc3d31bb1726f372f9330cce BF3450248
+3456ba6aef10c6c964b2dc90ce5e67ea17aad88d BF3441324
+38c16de744f2b2b9efe6bc5b6f4aa53730ea455f BF3442826
+c2fe7bed9e2daaedbc3d31bb1726f372f9330cce BF3450248
+0000000000000000000000000000000000000000 BF3450248
+38c16de744f2b2b9efe6bc5b6f4aa53730ea455f BF3442826
+0000000000000000000000000000000000000000 BF3442826
+3456ba6aef10c6c964b2dc90ce5e67ea17aad88d BF3441324
+0000000000000000000000000000000000000000 BF3441324
+5270b51a39d690fbf93db2df6fbf36b12353ed61 BF3431195
+0000000000000000000000000000000000000000 BF3431195
+a759b79e452cb45796e52553f3f3f8e03cc75d8e BF3423098
+a759b79e452cb45796e52553f3f3f8e03cc75d8e BF3423098
+0000000000000000000000000000000000000000 BF3423098
diff -r 09ae44c5cfa6 -r 26ba5a018866 .settings/org.eclipse.wst.common.component
--- a/.settings/org.eclipse.wst.common.component	Mon Feb 03 23:37:35 2014 -0500
+++ b/.settings/org.eclipse.wst.common.component	Mon Feb 10 21:08:53 2014 -0500
@@ -1,8 +1,9 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project-modules id="moduleCoreId" project-version="1.5.0">
-<wb-module deploy-name="Adempiere_trunk">
-<wb-resource deploy-path="/" source-path="/zkwebui"/>
-<property name="java-output-path" value="build/classes"/>
-<property name="context-root" value="webui"/>
-</wb-module>
-</project-modules>
+<?xml version="1.0" encoding="UTF-8"?>
+<project-modules id="moduleCoreId" project-version="1.5.0">
+	<wb-module deploy-name="Adempiere_trunk">
+		<wb-resource deploy-path="/" source-path="/zkwebui"/>
+		<wb-resource deploy-path="/WEB-INF/classes" source-path="/JasperReports/src"/>
+		<property name="java-output-path" value="build/classes"/>
+		<property name="context-root" value="webui"/>
+	</wb-module>
+</project-modules>
diff -r 09ae44c5cfa6 -r 26ba5a018866 JasperReports/src/org/compiere/report/ReportStarter.java
--- a/JasperReports/src/org/compiere/report/ReportStarter.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/JasperReports/src/org/compiere/report/ReportStarter.java	Mon Feb 10 21:08:53 2014 -0500
@@ -563,7 +563,7 @@
             try {
             	conn = getConnection();
                 jasperPrint = JasperFillManager.fillReport( jasperReport, params, conn);
-                if (reportData.isDirectPrint() || !processInfo.isPrintPreview())
+                if (reportData.isDirectPrint() && !processInfo.isPrintPreview())
                 {
                     log.info( "ReportStarter.startProcess print report -" + jasperPrint.getName());
                     //RF 1906632
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/adempiere/impexp/AbstractExcelExporter.java
--- a/base/src/org/adempiere/impexp/AbstractExcelExporter.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/adempiere/impexp/AbstractExcelExporter.java	Mon Feb 10 21:08:53 2014 -0500
@@ -469,4 +469,18 @@
 		if (autoOpen && Ini.isClient())
 			Env.startBrowser(file.toURI().toString());
 	}
+
+	/**
+	 * Export to file
+	 * @throws Exception
+	 */
+	public File export()
+	throws Exception
+	{
+		m_lang = Env.getLanguage(getCtx());
+		File file = File.createTempFile("Report_", ".xls");
+		FileOutputStream out = new FileOutputStream(file);
+		export(out);
+		return file;
+	}
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/acct/DocLine.java
--- a/base/src/org/compiere/acct/DocLine.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/acct/DocLine.java	Mon Feb 10 21:08:53 2014 -0500
@@ -728,7 +728,7 @@
 	 */
 	public BigDecimal getProductCosts (MAcctSchema as, int AD_Org_ID, boolean zeroCostsOK, String whereClause)
 	{
-		if (whereClause != null)
+		if (whereClause != null && !as.getCostingMethod().equals(MAcctSchema.COSTINGMETHOD_StandardCosting))
 		{
 			MCostDetail cd = MCostDetail.get (Env.getCtx(), whereClause, 
 					get_ID(), getM_AttributeSetInstance_ID(), as.getC_AcctSchema_ID(), p_po.get_TrxName());
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/acct/DocLine_Cash.java
--- a/base/src/org/compiere/acct/DocLine_Cash.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/acct/DocLine_Cash.java	Mon Feb 10 21:08:53 2014 -0500
@@ -20,6 +20,7 @@
 
 import org.compiere.model.MCashLine;
 import org.compiere.model.MInvoice;
+import org.compiere.model.MPayment;
 import org.compiere.util.Env;
 
 /**
@@ -27,6 +28,9 @@
  *
  *  @author Jorg Janke
  *  @version  $Id: DocLine_Cash.java,v 1.3 2006/07/30 00:53:33 jjanke Exp $
+ *  
+ *  @author Michael McKey
+ *  	<li>BF3441324 Cash Lines from Payments don't add BPartner dimension
  */
 public class DocLine_Cash extends DocLine
 {
@@ -41,6 +45,8 @@
 		m_CashType = line.getCashType();
 		m_C_BankAccount_ID = line.getC_BankAccount_ID();
 		m_C_Invoice_ID = line.getC_Invoice_ID();
+		m_C_Payment_ID = line.getC_Payment_ID();
+
 		//
 		if (m_C_Invoice_ID != 0)
 		{
@@ -49,6 +55,13 @@
 		}
 
 		//
+		if (m_C_Payment_ID != 0)
+		{
+			MPayment payment = new MPayment(line.getCtx(),m_C_Payment_ID,null);
+			setC_BPartner_ID(payment.getC_BPartner_ID());
+		}
+
+		//
 		m_Amount = line.getAmount();
 		m_DiscountAmt = line.getDiscountAmt();
 		m_WriteOffAmt = line.getWriteOffAmt();
@@ -77,6 +90,7 @@
 	//  References
 	private int     m_C_BankAccount_ID = 0;
 	private int     m_C_Invoice_ID = 0;
+	private int     m_C_Payment_ID = 0;
 
 	//  Amounts
 	private BigDecimal      m_Amount = Env.ZERO;
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/model/AccessSqlParser.java
--- a/base/src/org/compiere/model/AccessSqlParser.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/model/AccessSqlParser.java	Mon Feb 10 21:08:53 2014 -0500
@@ -34,6 +34,10 @@
  * 			<li>BF [ 1964496 ] AccessSqlParser is not parsing well JOIN CLAUSE
  * 			<li>BF [ 2840157 ] AccessSqlParser is not parsing well ON keyword
  * 				https://sourceforge.net/tracker/?func=detail&aid=2840157&group_id=176962&atid=879332
+ * 
+ * @author Michael McKay
+ * 			<li>ADEMPIERE-70 AccessSqlParser confused by subordinate Select statements in From 
+ * 				when using joins to other tables.  https://adempiere.atlassian.net/browse/ADEMPIERE-70 
  */
 public class AccessSqlParser
 {
@@ -236,14 +240,20 @@
 			from = from.replaceAll("[\r\n\t ]+RIGHT[\r\n\t ]+OUTER[\r\n\t ]+JOIN[\r\n\t ]+", ", ");
 			from = from.replaceAll("[\r\n\t ]+FULL[\r\n\t ]+JOIN[\r\n\t ]+", ", ");
 			from = from.replaceAll("[\r\n\t ]+[Oo][Nn][\r\n\t ]+", ON); // teo_sarca, BF [ 2840157 ]
-			//	Remove ON clause - assumes that there is no IN () in the clause
+
+			//	Remove ON clause
 			index = from.indexOf(ON);
 			while (index != -1)
 			{
-				int indexClose = from.indexOf(')');		//	does not catch "IN (1,2)" in ON
+				//  ADEMPIERE-70: FROM clause can have subordinate queries in the form (##) so 
+				//  start the search from the index, not the beginning and search between "ON"
+				//  Assume the ON clause has multiple nested clauses like (a OR (b AND c))
+				int indexClose = -1;  
 				int indexNextOn = from.indexOf(ON, index+4);
 				if (indexNextOn != -1)
-					indexClose = from.lastIndexOf(')', indexNextOn);
+					indexClose = from.lastIndexOf(')', indexNextOn);  // Search between "ON" keywords
+				else 
+					indexClose = from.lastIndexOf(')', from.length());  // Its the last clause.  Search from the end.
 				if (indexClose != -1)
 				{
 					if (index > indexClose)
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/model/CalloutInvoice.java
--- a/base/src/org/compiere/model/CalloutInvoice.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/model/CalloutInvoice.java	Mon Feb 10 21:08:53 2014 -0500
@@ -302,16 +302,15 @@
 	public String product (Properties ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
 	{
 		Integer M_Product_ID = (Integer)value;
+		Integer M_AttributeSetInstance_ID = 0;
+
 		if (M_Product_ID == null || M_Product_ID.intValue() == 0)
 			return "";
 		mTab.setValue("C_Charge_ID", null);
-		
-		//	Set Attribute
-		if (Env.getContextAsInt(ctx, WindowNo, Env.TAB_INFO, "M_Product_ID") == M_Product_ID.intValue()
-			&& Env.getContextAsInt(ctx, WindowNo, Env.TAB_INFO, "M_AttributeSetInstance_ID") != 0)
-			mTab.setValue("M_AttributeSetInstance_ID", Env.getContextAsInt(ctx, WindowNo, Env.TAB_INFO, "M_AttributeSetInstance_ID"));
-		else
-			mTab.setValue("M_AttributeSetInstance_ID", null);
+				
+		//	Get Model and check the Attribute Set Instance from the context
+		MProduct m_product = MProduct.get(Env.getCtx(), M_Product_ID);
+		mTab.setValue("M_AttributeSetInstance_ID", m_product.getEnvAttributeSetInstance(ctx, WindowNo));
 
 		/*****	Price Calculation see also qty	****/
 		boolean IsSOTrx = Env.getContext(ctx, WindowNo, "IsSOTrx").equals("Y");
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/model/CalloutOrder.java
--- a/base/src/org/compiere/model/CalloutOrder.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/model/CalloutOrder.java	Mon Feb 10 21:08:53 2014 -0500
@@ -694,17 +694,28 @@
 	public String product (Properties ctx, int WindowNo, GridTab mTab, GridField mField, Object value)
 	{
 		Integer M_Product_ID = (Integer)value;
+		Integer M_AttributeSetInstance_ID = 0;
+		//
 		if (M_Product_ID == null || M_Product_ID.intValue() == 0)
+		{
+			//  If the product information is deleted, zero the other items as well
+			mTab.setValue("M_AttributeSetInstance_ID", null);
+			mTab.setValue("PriceList", new BigDecimal(0));
+			mTab.setValue("PriceLimit", new BigDecimal(0));
+			mTab.setValue("PriceActual", new BigDecimal(0));
+			mTab.setValue("PriceEntered", new BigDecimal(0));
+			mTab.setValue("C_Currency_ID", null);
+			mTab.setValue("Discount", new BigDecimal(0));
+			mTab.setValue("C_UOM_ID", null);
 			return "";
+		}
 		if (steps) log.warning("init");
 		//
 		mTab.setValue("C_Charge_ID", null);
-		//	Set Attribute
-		if (Env.getContextAsInt(ctx, WindowNo, Env.TAB_INFO, "M_Product_ID") == M_Product_ID.intValue()
-			&& Env.getContextAsInt(ctx, WindowNo, Env.TAB_INFO, "M_AttributeSetInstance_ID") != 0)
-			mTab.setValue("M_AttributeSetInstance_ID", Env.getContextAsInt(ctx, WindowNo, Env.TAB_INFO, "M_AttributeSetInstance_ID"));
-		else
-			mTab.setValue("M_AttributeSetInstance_ID", null);
+
+		//	Get Model and check the Attribute Set Instance from the context
+		MProduct m_product = MProduct.get(Env.getCtx(), M_Product_ID);
+		mTab.setValue("M_AttributeSetInstance_ID", m_product.getEnvAttributeSetInstance(ctx, WindowNo));
 			
 		/*****	Price Calculation see also qty	****/
 		int C_BPartner_ID = Env.getContextAsInt(ctx, WindowNo, "C_BPartner_ID");
@@ -761,7 +772,7 @@
 			{
 				BigDecimal QtyOrdered = (BigDecimal)mTab.getValue("QtyOrdered");
 				int M_Warehouse_ID = Env.getContextAsInt(ctx, WindowNo, "M_Warehouse_ID");
-				int M_AttributeSetInstance_ID = Env.getContextAsInt(ctx, WindowNo, "M_AttributeSetInstance_ID");
+				M_AttributeSetInstance_ID = Env.getContextAsInt(ctx, WindowNo, "M_AttributeSetInstance_ID");
 				BigDecimal available = MStorage.getQtyAvailable
 					(M_Warehouse_ID, M_Product_ID.intValue(), M_AttributeSetInstance_ID, null);
 				if (available == null)
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/model/I_M_Product.java
--- a/base/src/org/compiere/model/I_M_Product.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/model/I_M_Product.java	Mon Feb 10 21:08:53 2014 -0500
@@ -18,6 +18,8 @@
 
 import java.math.BigDecimal;
 import java.sql.Timestamp;
+import java.util.Properties;
+
 import org.compiere.util.KeyNamePair;
 
 /** Generated Interface for M_Product
@@ -822,4 +824,14 @@
 	  * Weight of a product
 	  */
 	public BigDecimal getWeight();
+	
+	/**
+	 * Get the Attribute Set Instance.  This is called by callouts to fill the M_AttributeSetInstance_ID
+	 * field.  The ASI should override the context if the product has a defined ASI or if the 
+	 * context ASI does not use the same attribute set.
+	 * @param context
+	 * @param window number
+	 */
+	public Integer getEnvAttributeSetInstance(Properties ctx, int WindowNo);
+
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/model/Lookup.java
--- a/base/src/org/compiere/model/Lookup.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/model/Lookup.java	Mon Feb 10 21:08:53 2014 -0500
@@ -505,7 +505,7 @@
 	}
 	
 	/**
-	 * Get custom info factory class
+	 * Get custom info factory class (swing)
 	 * @return info factory class name
 	 */
 	public String getInfoFactoryClass() 
@@ -513,4 +513,13 @@
 		return "";
 	}
 
+	/**
+	 * Get custom info panel factory class (ZK)
+	 * @return info factory class name
+	 */
+	public String getInfoPanelFactoryClass() 
+	{
+		return "";
+	}
+
 }	//	Lookup
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/model/MLookup.java
--- a/base/src/org/compiere/model/MLookup.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/model/MLookup.java	Mon Feb 10 21:08:53 2014 -0500
@@ -29,7 +29,6 @@
 import org.compiere.util.DB;
 import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
-import org.compiere.util.Ini;
 import org.compiere.util.KeyNamePair;
 import org.compiere.util.NamePair;
 import org.compiere.util.ValueNamePair;
@@ -692,9 +691,10 @@
 				{
 					log.fine(m_info.KeyColumn + ": Loader NOT Validated: " + m_info.ValidationCode);
 					// Bug 1843862 - Lookups not working on Report Viewer window
-					// globalqss - when called from Viewer window ignore error about unparsabe context variables
+					// globalqss - when called from Viewer window ignore error about not parseable context variables
 					// there is no context in report viewer windows
-					if (Ini.isClient() == false || !Env.getWindow(m_info.WindowNo).getClass().getName().equals("org.compiere.print.Viewer")) {
+					boolean isReportViewer = Env.getContext(m_info.ctx, m_info.WindowNo, "_WinInfo_IsReportViewer").equals("Y");
+					if (!isReportViewer) {
 						m_lookup.clear();
 						return;
 					}
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/model/MOrder.java
--- a/base/src/org/compiere/model/MOrder.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/model/MOrder.java	Mon Feb 10 21:08:53 2014 -0500
@@ -1284,6 +1284,12 @@
 		m_justPrepared = true;
 	//	if (!DOCACTION_Complete.equals(getDocAction()))		don't set for just prepare 
 	//		setDocAction(DOCACTION_Complete);
+		
+		for(final MOrderLine ol:getLines())
+		{
+				Util.assume(ol.getQtyReserved().compareTo(ol.getQtyOrdered()) == 0, 
+						"After prepareIt, reservations have been made");
+		}
 		return DocAction.STATUS_InProgress;
 	}	//	prepareIt
 	
@@ -2321,6 +2327,14 @@
 		
 		setDocAction(DOCACTION_Complete);
 		setProcessed(false);
+		
+		for(final MOrderLine ol: getLines())
+		{
+			Util.assume(ol.getQtyInvoiced().signum() == 0, 
+					"After reactivateIt, QtyInvoiced is zero");
+			Util.assume(ol.getQtyReserved().compareTo(ol.getQtyOrdered()) == 0, 
+					"After reactivateIt, reservations are still in place");
+		}
 		return true;
 	}	//	reActivateIt
 	
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/model/MPaymentTerm.java
--- a/base/src/org/compiere/model/MPaymentTerm.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/model/MPaymentTerm.java	Mon Feb 10 21:08:53 2014 -0500
@@ -24,6 +24,7 @@
 import java.util.logging.Level;
 
 import org.adempiere.exceptions.AdempiereException;
+import org.compiere.model.MPaySchedule;
 import org.compiere.util.DB;
 import org.compiere.util.Env;
 import org.compiere.util.Msg;
@@ -179,7 +180,7 @@
 		String msg = "@OK@";
 		if (!valid)
 			msg = "@Total@ = " + total + " - @Difference@ = " + HUNDRED.subtract(total); 
-		return Msg.parseTranslation(getCtx(), msg);
+		return msg;
 	}	//	validate
 
 
@@ -287,6 +288,7 @@
 	 * 	String Representation
 	 *	@return info
 	 */
+	@Override
 	public String toString ()
 	{
 		StringBuffer sb = new StringBuffer ("MPaymentTerm[");
@@ -301,6 +303,7 @@
 	 *	@param newRecord new
 	 *	@return true
 	 */
+	@Override
 	protected boolean beforeSave (boolean newRecord)
 	{
 		if (isDueFixed())
@@ -330,4 +333,14 @@
 		return true;
 	}	//	beforeSave
 	
+	@Override
+	protected boolean beforeDelete ()
+	{
+		for (MPaySchedule line : getSchedule(true))
+		{
+			line.deleteEx(true);
+		}
+		return true;
+	}
+	
 }	//	MPaymentTerm
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/model/MProduct.java
--- a/base/src/org/compiere/model/MProduct.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/model/MProduct.java	Mon Feb 10 21:08:53 2014 -0500
@@ -906,4 +906,37 @@
 		}
 		return costingMethod;
 	}
+	
+	/**
+	 * Get the Attribute Set Instance.  This is called by callouts to fill the M_AttributeSetInstance_ID
+	 * field.  The ASI should override the context if the product has a defined ASI or if the 
+	 * context ASI does not use the same attribute set.
+	 * @param context
+	 * @param window number
+	 */
+	public Integer getEnvAttributeSetInstance(Properties ctx, int WindowNo)
+	{
+		Integer M_AttributeSetInstance_ID = 0;
+
+		//	Set Attribute Instance from the context
+		M_AttributeSetInstance_ID = Env.getContextAsInt(ctx, WindowNo, Env.TAB_INFO, "M_AttributeSetInstance_ID");
+		//	Get Model and check if it has a product attribute instance
+		if (getM_AttributeSetInstance_ID() > 0)
+		{
+			//  If the product has a product instance associated with it. Use it regardless of the context.
+			//  Product Attributes and Instance Attributes are exclusive
+				M_AttributeSetInstance_ID = new Integer(getM_AttributeSetInstance_ID());
+		} 
+		else if (getM_AttributeSet_ID() > 0 && M_AttributeSetInstance_ID > 0)
+		{
+			// Check compatibility of the instance with the product - they have to use the same set.
+			MAttributeSetInstance masi = MAttributeSetInstance.get(Env.getCtx(),M_AttributeSetInstance_ID,this.getM_Product_ID());
+			if (masi.getMAttributeSet().get_ID() != this.getAttributeSet().get_ID())
+				M_AttributeSetInstance_ID = 0;  
+		}
+		if (M_AttributeSetInstance_ID != 0)
+			return M_AttributeSetInstance_ID;
+		else
+			return null;
+	}
 }	//	MProduct
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/model/MStorage.java
--- a/base/src/org/compiere/model/MStorage.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/model/MStorage.java	Mon Feb 10 21:08:53 2014 -0500
@@ -29,6 +29,7 @@
 import org.compiere.util.CLogger;
 import org.compiere.util.DB;
 import org.compiere.util.Env;
+import org.compiere.util.Util;
 
 /**
  * 	Inventory Storage Model
@@ -463,11 +464,18 @@
 		if (diffQtyReserved != null && diffQtyReserved.signum() != 0)
 		{
 			if (storage0 == null)
-				storage.setQtyReserved (storage.getQtyReserved().add (diffQtyReserved));
+			{
+				storage.setQtyReserved(storage.getQtyReserved().add(diffQtyReserved));
+				Util.assume(storage.getQtyReserved().signum() >= 0, "QtyReserved should be >=0 for " + storage);
+			}
 			else
-				storage0.setQtyReserved (storage0.getQtyReserved().add (diffQtyReserved));
+			{
+				storage0.setQtyReserved(storage0.getQtyReserved().add(diffQtyReserved));
+				Util.assume(storage0.getQtyReserved().signum() >= 0, "QtyReserved should be >=0 for " + storage0);
+			}
 			diffText.append(" Reserved=").append(diffQtyReserved);
 			changed = true;
+			
 		}
 		if (diffQtyOrdered != null && diffQtyOrdered.signum() != 0)
 		{
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/model/X_M_Product.java
--- a/base/src/org/compiere/model/X_M_Product.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/model/X_M_Product.java	Mon Feb 10 21:08:53 2014 -0500
@@ -1308,4 +1308,9 @@
 			 return Env.ZERO;
 		return bd;
 	}
+	
+	public Integer getEnvAttributeSetInstance(Properties ctx, int WindowNo)
+	{
+		return null;
+	}
 }
\ No newline at end of file
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/process/M_Production_Run.java
--- a/base/src/org/compiere/process/M_Production_Run.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/process/M_Production_Run.java	Mon Feb 10 21:08:53 2014 -0500
@@ -111,6 +111,7 @@
 						MProduct product = MProduct.get(getCtx(), pp.getM_Product_ID());
 			
 						X_M_ProductionLine pl = new X_M_ProductionLine(getCtx(), 0 , get_TrxName());
+						pl.setAD_Org_ID(pp.getAD_Org_ID());
 						pl.setLine(line);
 						pl.setDescription(pp.getDescription());
 						pl.setM_Product_ID(pp.getM_Product_ID());
@@ -238,6 +239,7 @@
 			{	
 				line += 1;
 				X_M_ProductionLine pl = new X_M_ProductionLine(getCtx(), 0 , get_TrxName());
+				pl.setAD_Org_ID(pp.getAD_Org_ID());
 				pl.setLine(line);
 				pl.setDescription(bomline.getDescription());
 				pl.setM_Product_ID(bomline.getM_Product_ID());
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/process/PaymentTermValidate.java
--- a/base/src/org/compiere/process/PaymentTermValidate.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/process/PaymentTermValidate.java	Mon Feb 10 21:08:53 2014 -0500
@@ -32,6 +32,7 @@
 	/**
 	 *  Prepare - e.g., get Parameters.
 	 */
+	@Override
 	protected void prepare()
 	{
 		ProcessInfoParameter[] para = getParameter();
@@ -50,6 +51,7 @@
 	 *  @return Message
 	 *  @throws Exception if not successful
 	 */
+	@Override
 	protected String doIt() throws Exception
 	{
 		log.info ("C_PaymentTerm_ID=" + getRecord_ID());
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/swing/CComboBox.java
--- a/base/src/org/compiere/swing/CComboBox.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/swing/CComboBox.java	Mon Feb 10 21:08:53 2014 -0500
@@ -17,16 +17,32 @@
 package org.compiere.swing;
 
 import java.awt.Color;
+import java.awt.event.FocusEvent;
+import java.awt.event.FocusListener;
+import java.awt.event.InputEvent;
+import java.awt.event.KeyAdapter;
+import java.awt.event.KeyEvent;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
 import java.awt.event.MouseListener;
+import java.util.ArrayList;
 import java.util.Vector;
 
 import javax.swing.ComboBoxModel;
 import javax.swing.DefaultComboBoxModel;
+import javax.swing.FocusManager;
 import javax.swing.Icon;
 import javax.swing.JButton;
 import javax.swing.JComboBox;
 import javax.swing.JComponent;
+import javax.swing.JTextField;
+import javax.swing.MutableComboBoxModel;
+import javax.swing.SwingUtilities;
+import javax.swing.event.EventListenerList;
+import javax.swing.event.ListDataEvent;
+import javax.swing.event.ListDataListener;
 import javax.swing.plaf.ComboBoxUI;
+import javax.swing.text.JTextComponent;
 
 import org.adempiere.plaf.AdempierePLAF;
 import org.compiere.plaf.CompiereComboBoxUI;
@@ -45,7 +61,7 @@
 	/**
 	 * 
 	 */
-	private static final long serialVersionUID = 4605625077881909766L;
+	private static final long serialVersionUID = 5918151626085721856L;
 
 	/**
 	 * Creates a <code>JComboBox</code> that takes it's items from an
@@ -140,6 +156,21 @@
 	
 	/** Field Height 				 */
 	public static int     		FIELD_HIGHT = 0;
+	   
+	/** Property key for auto-reduction.             */
+	public static final String AUTO_REDUCIBLE_PROPERTY = "autoReducible";
+
+	/** Property key for case sensitive auto-reduction.             */
+	public static final String CASE_SENSITIVE_PROPERTY = "caseSensitive";
+
+	/** View model for hiding showing only filtered data             */
+	ReducibleModel m_reducibleModel;
+
+	/** Key listener for triggering an update the filtering model .             */
+	private ReducibleKeyListener reducibleKeyListener = new ReducibleKeyListener();
+
+	/** Reference Field         */
+	private static  JTextField  s_text = new JTextField(15);
 
 	/**
 	 *  Common Init
@@ -147,6 +178,67 @@
 	private void init()
 	{
 		FIELD_HIGHT = getPreferredSize().height;
+
+		setEditable(true);
+		setAutoReducible(true);
+
+		addMouseListener(new MouseAdapter()
+		{
+			public void mousePressed(MouseEvent me) {
+				if (SwingUtilities.isLeftMouseButton(me) && isAutoReducible())
+					updateReducibleModel(false);
+			}
+		});
+
+		// when auto-reducing, the focus listener will ensure all data choices
+		// are shown on initial focus, and that a valid selection is in place
+		// when focus is lost
+		final JTextComponent textComponent =
+			(JTextComponent)getEditor().getEditorComponent();
+		textComponent.addFocusListener(new FocusListener()
+		{
+			public void focusGained(FocusEvent fe)
+			{
+				if (isEditable())
+					textComponent.selectAll();
+				textComponent.repaint();
+			}
+
+			public void focusLost(FocusEvent fe)
+			{
+				if (isAutoReducible())
+				{
+					Object item = m_reducibleModel.getSelectedItem();
+					item = (item == null && m_reducibleModel.getSize() != 0) ?
+							m_reducibleModel.getElementAt(0) : item;
+							if (item == null)
+							{
+								updateReducibleModel(false);
+								if (m_reducibleModel.getSize() != 0)
+									item = m_reducibleModel.getElementAt(0);
+								else
+									return;
+							}
+							m_reducibleModel.setSelectedItem(item);
+				}
+				textComponent.setCaretPosition(0);
+				hidePopup();
+				textComponent.repaint();
+			}
+		});
+
+		textComponent.addMouseListener(new MouseAdapter()
+		{
+			public void mouseClicked(MouseEvent me) {
+				if (SwingUtilities.isLeftMouseButton(me) && 
+						isAutoReducible() &&
+						!isPopupVisible())
+				{
+					updateReducibleModel(false);
+					showPopup();
+				}
+			}
+		});
 	}   //  init
 
 
@@ -166,6 +258,23 @@
 		m_icon = defaultIcon;
 	}   //  setIcon
 
+	   
+	public ComboBoxModel getCompleteComboBoxModel()
+	{
+		return m_reducibleModel.getModel();
+	}   //   getCompleteComboBoxModel
+	
+	/**
+	 * @see javax.swing.JComboBox#setModel(javax.swing.ComboBoxModel)
+	 */
+	public void setModel(ComboBoxModel aModel) 
+	{
+		m_reducibleModel = (m_reducibleModel == null) ? new ReducibleModel() : m_reducibleModel;
+		m_reducibleModel.setModel(aModel);
+
+		super.setModel(m_reducibleModel);
+	}   //   setModel
+
 	/**
 	 *  Set UI and re-set Icon for arrow button
 	 *  @param ui
@@ -345,4 +454,535 @@
 			setName(actionCommand);
 	}	//	setActionCommand
 
+	/**
+	 * Called only when auto-reducing.  By default, does a case insensitive
+	 * string search for a match in the string representation of the given
+	 * element.
+	 * 
+	 * @param element an element in the combo box model
+	 * 
+	 * @return true if the choice is to be displayed in the popup menu
+	 */
+	protected boolean isMatchingFilter(Object element) 
+	{
+		String str = (element != null) ? element.toString().trim() : "";
+		str = isCaseSensitive() ? str : str.toLowerCase();
+
+		return str.indexOf(m_reducibleModel.getMatchingFilter()) > -1;
+	}
+
+	/**
+	 * Is the combo box auto-reducible?
+	 * 
+	 * @return true if isAutoReducible()
+	 */
+	public boolean isAutoReducible()
+	{
+		Boolean b = (Boolean)getClientProperty(AUTO_REDUCIBLE_PROPERTY);
+		return (b != null) && b.booleanValue();
+	}
+
+	/**
+	 * Set whether the combo box is auto-reducible.  The combo box must also be editable
+	 * for auto-reduction to fully functional.  Auto-reduction of data will preclude
+	 * the ability for users to enter in their own choices.
+	 * 
+	 * @param autoreducible true will activate auto-reduction of choices when user enters text
+	 */
+	public void setAutoReducible(boolean autoreducible)
+	{
+		if (isAutoReducible() != autoreducible)
+		{
+			putClientProperty(AUTO_REDUCIBLE_PROPERTY, Boolean.valueOf(autoreducible));
+			updateReducibleModel(false);
+
+			JTextComponent textComponent =
+				(JTextComponent)getEditor().getEditorComponent();
+			if (autoreducible)
+				textComponent.addKeyListener(reducibleKeyListener);
+			else
+				textComponent.removeKeyListener(reducibleKeyListener);
+		}
+	}
+
+	/**
+	 * Is the auto-reduction case sensitive?
+	 * 
+	 * @return true if case sensitive
+	 */
+	public boolean isCaseSensitive()
+	{
+		Boolean b = (Boolean)getClientProperty(CASE_SENSITIVE_PROPERTY);
+		return (b != null) && b.booleanValue();
+	}
+
+	/* (non-Javadoc)
+	 * @see javax.swing.JComboBox#removeAllItems()
+	 */
+	public void removeAllItems()
+	{
+		m_reducibleModel.removeAllElements();
+	}
+
+	/**
+	 * Set whether auto-reduction is case sensitive.
+	 * 
+	 * @param caseSensitive true will make auto-reduction is case sensitive
+	 */
+	public void setCaseSensitive(boolean caseSensitive)
+	{
+		putClientProperty(CASE_SENSITIVE_PROPERTY, Boolean.valueOf(caseSensitive));
+	}
+
+	/**
+	 * Updates the auto-reduction model.
+	 * 
+	 * @param filtering true if the underlying data model should be filtered
+	 */
+	void updateReducibleModel(boolean filtering)
+	{
+		if (filtering ||
+				m_reducibleModel.getSize() != m_reducibleModel.getModel().getSize())
+		{
+			if (getParent() != null)
+				hidePopup();
+
+			// remember to caret position
+			JTextComponent textComponent =
+				(JTextComponent)getEditor().getEditorComponent();
+			int pos = textComponent.getCaretPosition();
+			m_reducibleModel.setFilter(textComponent.getText());
+
+			// update the model
+			m_reducibleModel.updateModel(filtering);
+
+			// reset the caret
+			textComponent.setText(m_reducibleModel.getFilter());
+			textComponent.setCaretPosition(pos);
+
+			// ensure the combo box is resized to match the popup, if necessary
+			if (getParent() != null)
+			{
+				getParent().validate();
+				getParent().repaint();
+
+				if (isShowing() && m_reducibleModel.getSize() > 0) {
+					// only show the popup if there is something to show
+					showPopup();
+				}
+			}
+		}
+	}
+
+	/**
+	 * A view adapter model to hide filtered choices in the underlying combo box model.
+	 */
+	private class ReducibleModel implements MutableComboBoxModel, ListDataListener 
+	{
+		/**
+		 * Default constructor.  Creates a ReducibleModel.
+		 */
+		public ReducibleModel()
+		{
+		}
+
+		/** The wrapped data model. */
+		private ComboBoxModel m_model;
+
+		/** The wrapped data model. */
+		private EventListenerList m_listenerList = new EventListenerList();
+
+		/** The filtered data. */
+		private ArrayList<Object> m_visibleData = new ArrayList<Object>();
+
+		/** The filtered data. */
+		private ArrayList<Object> m_modelData = new ArrayList<Object>();
+
+		/** The current filter. */
+		private String m_filter = "";
+
+		/** The cached filter for case insensitive filtering. */
+		private String m_lcFilter = "";
+
+		/**
+		 * Pass through to the wrapped model if underlying model is MutableComboBoxModel.
+		 * 
+		 * @see javax.swing.DefaultComboBoxModel#addElement(java.lang.Object)
+		 */
+		public void addElement(Object anObject)
+		{
+			checkMutableComboBoxModel();
+			m_modelData.add(anObject);
+			((MutableComboBoxModel)m_model).addElement(anObject);
+		}
+
+		/* (non-Javadoc)
+		 * @see javax.swing.ListModel#addListDataListener(javax.swing.event.ListDataListener)
+		 */
+		public void addListDataListener(ListDataListener ldl)
+		{
+			m_listenerList.remove(ListDataListener.class, ldl);
+			m_listenerList.add(ListDataListener.class, ldl);
+		}
+
+		/** 
+		 * Checks that the <code>dataModel</code> is an instance of 
+		 * <code>MutableComboBoxModel</code>.  If not, it throws an exception.
+		 * 
+		 * @exception RuntimeException if <code>dataModel</code> is not an
+		 *      instance of <code>MutableComboBoxModel</code>.
+		 */
+		void checkMutableComboBoxModel()
+		{
+			if ( !(m_model instanceof MutableComboBoxModel) )
+				throw new RuntimeException("Cannot use this method with a non-Mutable data model.");
+		}
+
+		/* (non-Javadoc)
+		 * @see javax.swing.event.ListDataListener#contentsChanged(javax.swing.event.ListDataEvent)
+		 */
+		public void contentsChanged(ListDataEvent lde)
+		{
+			updateDataModel();
+			updateModel(false);
+
+			if (isPopupVisible())
+			{
+				hidePopup();
+				showPopup();
+			}
+		}
+
+		/**
+		 * 
+		 */
+		private void fireContentsChanged()
+		{
+			ListDataEvent lde = null;
+			for (ListDataListener ldl : getListDataListeners())
+			{
+				lde = (lde == null) ?
+						new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, 0, getSize()) : lde;
+						ldl.contentsChanged(lde);
+			}
+		}
+
+		/* (non-Javadoc)
+		 * @see javax.swing.ListModel#getElementAt(int)
+		 */
+		public Object getElementAt(int index)
+		{
+			return m_visibleData.get(index);
+		}
+
+		/**
+		 * Return the current filter.
+		 * 
+		 * @return the filter
+		 */
+		public String getFilter()
+		{
+			return m_filter;
+		}
+
+		/**
+		 * 
+		 */
+		public ListDataListener[] getListDataListeners()
+		{
+			return (ListDataListener[])m_listenerList.getListeners(ListDataListener.class);
+		}
+
+		/**
+		 * @return the filter to use for matching; hecks case sensistivity
+		 */
+		protected String getMatchingFilter()
+		{
+			return isCaseSensitive() ? m_filter : m_lcFilter;
+		}
+
+		/**
+		 * @return the wrapped model
+		 */
+		public ComboBoxModel getModel()
+		{
+			return m_model;
+		}
+
+		/**
+		 * @return the selected item in the wrapped model
+		 * 
+		 * @see javax.swing.DefaultComboBoxModel#getSelectedItem()
+		 */
+		public Object getSelectedItem()
+		{
+			return m_model.getSelectedItem();
+		}
+
+		/* (non-Javadoc)
+		 * @see javax.swing.ListModel#getSize()
+		 */
+		public int getSize()
+		{
+			return m_visibleData.size(); 
+		}
+
+		/**
+		 * Pass through to the wrapped model if underlying model is MutableComboBoxModel.
+		 * 
+		 * @see javax.swing.DefaultComboBoxModel#insertElementAt(java.lang.Object, int)
+		 */
+		public void insertElementAt(Object anObject, int index)
+		{
+			checkMutableComboBoxModel();
+			m_modelData.add(index, anObject);
+			((MutableComboBoxModel)m_model).insertElementAt(anObject, index);
+		}
+
+		/**
+		 * Pass through to the wrapped model if underlying model is MutableComboBoxModel.
+		 * 
+		 * @see javax.swing.event.ListDataListener#intervalAdded(javax.swing.event.ListDataEvent)
+		 */
+		public void intervalAdded(ListDataEvent lde)
+		{
+			updateDataModel();
+			updateModel(false);
+		}
+
+		/**
+		 * Pass through to the wrapped model if underlying model is MutableComboBoxModel.
+		 * 
+		 * @see javax.swing.event.ListDataListener#intervalRemoved(javax.swing.event.ListDataEvent)
+		 */
+		public void intervalRemoved(ListDataEvent lde)
+		{
+			updateDataModel();
+			updateModel(false);
+		}
+
+		/**
+		 * 
+		 */
+		public void removeAllElements()
+		{
+			checkMutableComboBoxModel();
+
+			ListDataListener[] listeners = getListDataListeners();
+			for (int i = 0; i < listeners.length; i++)
+				removeListDataListener(listeners[i]);
+			m_model.removeListDataListener(this);
+
+			m_modelData.clear();
+			m_visibleData.clear();
+			while (m_model.getSize() > 0)
+				((MutableComboBoxModel)m_model).removeElementAt(0);
+
+			for (ListDataListener ldl : listeners)
+				addListDataListener(ldl);
+			m_model.addListDataListener(this);
+
+			updateModel(false);
+		}
+
+		/**
+		 * Pass through to the wrapped model if underlying model is MutableComboBoxModel.
+		 * 
+		 * @see javax.swing.DefaultComboBoxModel#removeElement(java.lang.Object)
+		 */
+		public void removeElement(Object anObject)
+		{
+			checkMutableComboBoxModel();
+			m_modelData.remove(anObject);
+			m_visibleData.clear();
+			((MutableComboBoxModel)m_model).removeElement(anObject);
+		}
+
+		/**
+		 * Pass through to the wrapped model if underlying model is MutableComboBoxModel.
+		 * 
+		 * @see javax.swing.DefaultComboBoxModel#removeElementAt(int)
+		 */
+		public void removeElementAt(int index)
+		{
+			checkMutableComboBoxModel();
+			m_modelData.remove(index);
+			m_visibleData.clear();
+			((MutableComboBoxModel)m_model).removeElementAt(index);
+		}
+
+		/* (non-Javadoc)
+		 * @see javax.swing.ListModel#removeListDataListener(javax.swing.event.ListDataListener)
+		 */
+		public void removeListDataListener(ListDataListener ldl)
+		{
+			m_listenerList.remove(ListDataListener.class, ldl);
+		}
+
+		/**
+		 * @param filter the filter to set
+		 */
+		public void setFilter(String filter)
+		{
+			this.m_filter = (filter != null) ? filter : "";
+			m_lcFilter = filter.trim().toLowerCase();
+		}
+
+		/**
+		 * Set the wrapped combo box model.
+		 * 
+		 * @param model the model to set
+		 */
+		public void setModel(ComboBoxModel model)
+		{
+			if (this.m_model != null)
+				this.m_model.removeListDataListener(this);
+
+			this.m_model = model;
+			updateDataModel();
+			m_filter = "";
+
+			model.addListDataListener(this);
+			updateModel(false);
+		}
+
+		/**
+		 * Set the selected item in the wrapped model.
+		 * 
+		 * @see javax.swing.DefaultComboBoxModel#setSelectedItem(java.lang.Object)
+		 */
+		public void setSelectedItem(Object anObject)
+		{
+			if (anObject == null || m_modelData.contains(anObject))
+				m_model.setSelectedItem(anObject);
+		}
+
+		/**
+		 * Updates the view model based on whether filtering or not.
+		 * 
+		 * @param filtering true if the underlying model is to be filtered
+		 */
+		public void updateDataModel()
+		{
+			m_modelData.clear();
+			int size = m_model.getSize();
+			for (int i = 0; i < size; i++)
+				m_modelData.add(m_model.getElementAt(i));
+		}
+
+		/**
+		 * Updates the view model based on whether filtering or not.
+		 * 
+		 * @param filtering true if the underlying model is to be filtered
+		 */
+		public void updateModel(boolean filtering)
+		{
+			boolean includeAll = !filtering || !isAutoReducible() || "".equals(m_lcFilter);
+			if (includeAll)
+			{
+				m_visibleData.clear();
+				m_visibleData.addAll(m_modelData);
+			}
+			else
+			{
+				m_visibleData.clear();
+				Object selected = getSelectedItem();
+				ListDataListener[] listeners = getListDataListeners();
+				for (int i = 0; i < listeners.length; i++)
+					removeListDataListener(listeners[i]);
+				m_model.removeListDataListener(this);
+
+
+				int size = m_model.getSize();
+
+				for (int i = 0; i < size; i++)
+				{
+					Object element = m_model.getElementAt(i);
+					if (element == null || isMatchingFilter(element))
+					{
+						m_visibleData.add(element);
+					}
+				}
+
+				if (m_visibleData.contains(selected) || selected == null)
+					setSelectedItem(selected);
+
+				for (ListDataListener ldl : listeners)
+					addListDataListener(ldl);
+				m_model.addListDataListener(this);
+			}
+
+			fireContentsChanged();
+		}
+	}   //   ReducibleModel
+
+	/**
+	 * Key listener for editor's text compontent to trigger auto-reduction.  Only
+	 * used when auto-reduction is enabled.
+	 */
+	class ReducibleKeyListener extends KeyAdapter
+	{
+		/** Invokes autoreduction. */
+		private Runnable m_invoker = new Runnable()
+		{
+			public void run()
+			{
+				updateReducibleModel(true);
+			}
+		};
+
+		/** Visibly updates the popup menu. */
+		private Runnable m_updateMenu = new Runnable()
+		{
+			public void run()
+			{
+				hidePopup();
+				getParent().validate();
+				getParent().repaint();
+				showPopup();
+			}
+		};
+
+		/* (non-Javadoc)
+		 * @see java.awt.event.KeyAdapter#keyPressed(java.awt.event.KeyEvent)
+		 */
+		public void keyPressed(KeyEvent ke) 
+		{   
+			if (ke.getKeyCode() != KeyEvent.VK_CONTROL &&
+					ke.getKeyCode() != KeyEvent.VK_ALT &&
+					ke.getKeyCode() != KeyEvent.VK_SHIFT && 
+					( ke.getModifiersEx() & InputEvent.ALT_DOWN_MASK ) == 0 )
+			{
+				if (ke.getKeyCode() == KeyEvent.VK_ENTER ||
+						ke.getKeyCode() == KeyEvent.VK_TAB)
+				{
+					// enter key pressed, so complete editing and select item
+					Object selObject = getSelectedItem();
+					selObject = (selObject == null && getItemCount() > 0) ? getItemAt(0) : selObject;
+					setSelectedItem(selObject);
+					getEditor().setItem(getSelectedItem());
+				}
+				else if (ke.getKeyCode() == KeyEvent.VK_ESCAPE)
+				{
+					// escape key ends editing and rejects focus of text editor
+					FocusManager.getCurrentManager().upFocusCycle();
+				}
+				else if (ke.getKeyCode() == KeyEvent.VK_UP ||
+						ke.getKeyCode() == KeyEvent.VK_KP_UP ||
+						ke.getKeyCode() == KeyEvent.VK_DOWN ||
+						ke.getKeyCode() == KeyEvent.VK_KP_DOWN)
+				{
+					// up or down selects new value
+					SwingUtilities.invokeLater(m_updateMenu);
+				}
+				else
+				{
+					// key typed, so filter
+					SwingUtilities.invokeLater(m_invoker);
+					setSelectedItem(null);
+				}
+			}
+		}
+	}   //   ReducibleKeyListener
+
 }   //  CComboBox
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/swing/CTable.java
--- a/base/src/org/compiere/swing/CTable.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/swing/CTable.java	Mon Feb 10 21:08:53 2014 -0500
@@ -60,6 +60,10 @@
  * @version	$Id: CTable.java,v 1.2 2006/07/30 00:52:24 jjanke Exp $
  * 
  * @author	Teo Sarca, SC ARHIPAC SERVICE SRL - BF [ 1585369 ], FR [ 1753943 ]
+ * 
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class CTable extends JTable
 {
@@ -138,7 +142,6 @@
     
 	/**
 	 * 	Set Model index of Key Column.
-	 *  Used for identifying previous selected row after fort complete to set as selected row.
 	 *  If not set, column 0 is used.
 	 * 	@param keyColumnIndex model index
 	 */
@@ -153,6 +156,8 @@
 	 */
 	public int getKeyColumnIndex()
 	{
+		if (p_keyColumnIndex == -1)  // Not set
+			return 0;
 		return p_keyColumnIndex;
 	}	//	getKeyColumnIndex
 
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/swing/CTextField.java
--- a/base/src/org/compiere/swing/CTextField.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/swing/CTextField.java	Mon Feb 10 21:08:53 2014 -0500
@@ -30,6 +30,10 @@
  *
  *  @author     Jorg Janke
  *  @version    $Id: CTextField.java,v 1.2 2006/07/30 00:52:24 jjanke Exp $
+ * 
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class CTextField extends JTextField 
 	implements CEditor, KeyListener
@@ -124,12 +128,16 @@
 	private void init()
 	{
 		setBackground (false);
+		set_oldValue();
 	}   //  init
 
 	/*************************************************************************/
 
 	/** Mandatory (default false)   */
 	private boolean m_mandatory = false;
+	
+	/** Old value - for future comparison */
+	private Object m_oldValue;
 
 	/**
 	 *	Set Editor Mandatory
@@ -256,4 +264,38 @@
 	{
 	}	//	keyTyped
 
+	/**
+	 * Set the old value of the field.  For use in future comparisons.
+	 * The old value must be explicitly set though this call.
+	 * @param m_oldValue
+	 */
+	public void set_oldValue() {
+		this.m_oldValue = getValue();
+	}
+
+	/**
+	 * Get the old value of the field explicitly set in the past
+	 * @return
+	 */
+	public Object get_oldValue() {
+		return m_oldValue;
+	}
+	/**
+	 * Has the field changed over time?
+	 * @return true if the old value is different than the current.
+	 */
+	public boolean hasChanged() {
+		// Both or either could be null
+		if(getValue() != null)
+			if(m_oldValue != null)
+				return !m_oldValue.equals(getValue());
+			else
+				return true;
+		else  // getValue() is null
+			if(m_oldValue != null)
+				return true;
+			else
+				return false;
+	}
+
 }   //  CTextField
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/util/Util.java
--- a/base/src/org/compiere/util/Util.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/util/Util.java	Mon Feb 10 21:08:53 2014 -0500
@@ -34,6 +34,8 @@
 import javax.swing.JComponent;
 import javax.swing.KeyStroke;
 
+import org.adempiere.exceptions.AdempiereException;
+
 /**
  *  General Utilities
  *
@@ -41,6 +43,7 @@
  *  @version    $Id: Util.java,v 1.3 2006/07/30 00:52:23 jjanke Exp $
  *  
  *  @author     Teo Sarca, SC ARHIPAC SERVICE SRL - BF [ 1748346 ]
+ *  @author     t.schoeneberg@metas.de - FR [ 3407104 ] Explicit Assumptions
  */
 public class Util
 {
@@ -683,4 +686,25 @@
 		/* */
 	}
 
+	/**
+	 * Little method that throws an {@link AdempiereException} if the given boolean condition is false. It might be a
+	 * good idea to use "assume" over the assert keyword, because
+	 * <ul>
+	 * <li>assert is globally switched on and off and you never know what else libs are using assert</li>
+	 * <li>there are critical assumptions that should always be validated. Not only during development time or when
+	 * someone minds to use the -ea cmdline parameter</li>
+	 * </ul>
+	 * 
+	 * @param cond
+	 * @param errMsg
+	 *            the error message to pass to the adempiere exception, if the condition is <code>false</code>
+	 */
+	public static void assume(final boolean cond, final String errMsg)
+	{
+		if (!cond)
+		{
+			throw new AdempiereException("Assumtion failure: " + errMsg);
+		}
+	}
+	
 }   //  Util
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/compiere/wf/MWFActivity.java
--- a/base/src/org/compiere/wf/MWFActivity.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/compiere/wf/MWFActivity.java	Mon Feb 10 21:08:53 2014 -0500
@@ -13,6 +13,10 @@
  * For the text or an alternative of this public license, you may reach us    *
  * ComPiere, Inc., 2620 Augustine Dr. #245, Santa Clara, CA 95054, USA        *
  * or via info@compiere.org or http://www.compiere.org/license.html           *
+ *                                                                            *
+ * @author: Jorg Janke                                                        *
+ * @author: Kitti U. Fix[3409739]DocValueWorkflow_cannot_set_var_ID_Column    *
+ *                                                                            *               
  *****************************************************************************/
 package org.compiere.wf;
 
@@ -66,9 +70,9 @@
  *	Workflow Activity Model.
  *	Controlled by WF Process: 
  *		set Node - startWork 
- *	
- *  @author Jorg Janke
- *  @version $Id: MWFActivity.java,v 1.4 2006/07/30 00:51:05 jjanke Exp $
+ * 
+ * @author Jorg Janke
+ * @author Kitti U. Fix[3409739]DocValueWorkflow_cannot_set_var_ID_Column
  */
 public class MWFActivity extends X_AD_WF_Activity implements Runnable
 {
@@ -1150,6 +1154,8 @@
 			dbValue = new Boolean("Y".equals(value));
 		else if (DisplayType.isNumeric(displayType))
 			dbValue = new BigDecimal (value);
+		else if (DisplayType.isID(displayType)) // Fix[3409739]DocValueWorkflow_cannot_set_var_ID_Column
+			dbValue = new Integer (value);
 		else
 			dbValue = value;
 		m_po.set_ValueOfColumn(getNode().getAD_Column_ID(), dbValue);
diff -r 09ae44c5cfa6 -r 26ba5a018866 base/src/org/eevolution/model/CalloutBOM.java
--- a/base/src/org/eevolution/model/CalloutBOM.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/base/src/org/eevolution/model/CalloutBOM.java	Mon Feb 10 21:08:53 2014 -0500
@@ -63,10 +63,11 @@
              throw new AdempiereException("@ValidComponent@ - Error Parent not be Component");				
         }
         // Set BOM Line defaults
-        I_M_Product product = MProduct.get(ctx, M_Product_ID);
+        I_M_Product product = MProduct.get(ctx, M_Product_ID);  // May be the parent;
         bomLine.setDescription(product.getDescription());
         bomLine.setHelp(product.getHelp());
         bomLine.setC_UOM_ID(product.getC_UOM_ID());
+        bomLine.setM_AttributeSetInstance_ID(product.getEnvAttributeSetInstance(ctx,WindowNo));
 		return "";
 	}
         
@@ -126,6 +127,7 @@
         bom.setDescription(product.getDescription());
         bom.setHelp(product.getHelp());
         bom.setC_UOM_ID(product.getC_UOM_ID());
+        bom.setM_AttributeSetInstance_ID(product.getEnvAttributeSetInstance(ctx,WindowNo));
         
 		return "";
 	}	//	getdefaults
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/acct/AcctViewer.java
--- a/client/src/org/compiere/acct/AcctViewer.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/acct/AcctViewer.java	Mon Feb 10 21:08:53 2014 -0500
@@ -73,6 +73,10 @@
  * 			BF [ 1778534 ] Info Account: can't find product
  * @author Colin Rooney (croo) 
  * 			BF [ 2006668 ] Selection of Product in the Accounting Viewer
+ *
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class AcctViewer extends CFrame 
 	implements ActionListener, ChangeListener
@@ -436,6 +440,11 @@
 			m_data.AD_Table_ID = AD_Table_ID;
 			m_data.Record_ID = Record_ID;
 			actionQuery();
+			String keyColumn = selRecord.getActionCommand();
+			String tableName = keyColumn.substring(0, keyColumn.length()-3);
+			String selectSQL = keyColumn + "=" + Record_ID;
+			m_data.buttonRecordID.put(keyColumn,Record_ID);
+			selRecord.setText(m_data.getButtonText(tableName, keyColumn, selectSQL));
 		}
 	}   //  dynInit
 
@@ -692,6 +701,8 @@
 		log.info(keyColumn);
 		String whereClause = "(IsSummary='N' OR IsSummary IS NULL)";
 		String lookupColumn = keyColumn;
+		int record_id = m_data.getButtonRecordID(keyColumn);
+
 		if (keyColumn.equals("Account_ID"))
 		{
 			lookupColumn = "C_ElementValue_ID";
@@ -722,37 +733,67 @@
 		}
 		else if (selDocument.isSelected())
 			whereClause = "";
+		
+		if (button == selRecord)                            //  Record_ID
+			record_id = m_data.Record_ID;
+		else
+			record_id = m_data.getButtonRecordID(keyColumn);
+
 		String tableName = lookupColumn.substring(0, lookupColumn.length()-3);
-		Info info = Info.create(this, true, m_data.WindowNo, tableName, lookupColumn, "", false, whereClause);
+		Info info = Info.create(this, true, m_data.WindowNo, tableName, lookupColumn, record_id, "", false, true, whereClause);
 		if (!info.loadedOK())
 		{
 			info.dispose();
 			info = null;
 			button.setText("");
 			m_data.whereInfo.put(keyColumn, "");
+			m_data.buttonRecordID.put(keyColumn, null);
 			return 0;
 		}
 		info.setVisible(true);
-		String selectSQL = info.getSelectedSQL();       //  C_Project_ID=100 or ""
-		Integer key = (Integer)info.getSelectedKey();
+
+		boolean isCancelled = info.isCancelled();
+		boolean isOK = info.isOk();
+		Integer key = 0;
+		
+		if (isCancelled && !isOK) // Delete the saved info
+		{
+			key = 0;
+			if (button == selRecord)                            //  Record_ID
+				m_data.Record_ID = key.intValue();
+			else
+			{
+				m_data.whereInfo.put(keyColumn, "");    //  no query
+				m_data.buttonRecordID.put(keyColumn, key.intValue());
+			}
+			button.setText("");
+		}
+		else if(!isCancelled && isOK)
+		{
+			//  Save for query
+			String selectSQL = info.getSelectedSQL();       //  C_Project_ID=100 or ""
+			key = (Integer)info.getSelectedKey();
+			log.config(keyColumn + " - " + key);
+			if (button == selRecord)                            //  Record_ID
+				m_data.Record_ID = key.intValue();
+			else
+			{
+				m_data.whereInfo.put(keyColumn, keyColumn + "=" + key.intValue());  //  Add to query
+				m_data.buttonRecordID.put(keyColumn, key.intValue());
+			}
+			//  Display Selection and resize
+			button.setText(m_data.getButtonText(tableName, lookupColumn, selectSQL));
+			pack();
+		}
+		else if(!(isCancelled ^ isOK)) // xor: window closed or error - no change
+		{
+			// m_data not changed
+			if (button == selRecord)                            //  Record_ID
+				key = m_data.Record_ID = key.intValue();
+			else
+				key = m_data.getButtonRecordID(keyColumn);
+		}
 		info = null;
-		if (selectSQL == null || selectSQL.length() == 0 || key == null)
-		{
-			button.setText("");
-			m_data.whereInfo.put(keyColumn, "");    //  no query
-			return 0;
-		}
-
-		//  Save for query
-		log.config(keyColumn + " - " + key);
-		if (button == selRecord)                            //  Record_ID
-			m_data.Record_ID = key.intValue();
-		else
-			m_data.whereInfo.put(keyColumn, keyColumn + "=" + key.intValue());
-
-		//  Display Selection and resize
-		button.setText(m_data.getButtonText(tableName, lookupColumn, selectSQL));
-		pack();
 		return key.intValue();
 	}   //  actionButton
 
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/acct/AcctViewerData.java
--- a/client/src/org/compiere/acct/AcctViewerData.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/acct/AcctViewerData.java	Mon Feb 10 21:08:53 2014 -0500
@@ -55,6 +55,10 @@
  *  @author Teo Sarca, SC ARHIPAC SERVICE SRL
  *  			<li>BF [ 1748449 ] Info Account - Posting Type is not translated
  * 				<li>BF [ 1778373 ] AcctViewer: data is not sorted proper
+ *
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 class AcctViewerData
 {
@@ -110,6 +114,8 @@
 
 	/** Containing Column and Query     */
 	public HashMap<String,String>	whereInfo = new HashMap<String,String>();
+	/** Containing Column and selected record_id     */
+	public HashMap<String,Integer>	buttonRecordID = new HashMap<String,Integer>();
 	/** Containing TableName and AD_Table_ID    */
 	public HashMap<String,Integer>	tableInfo = new HashMap<String,Integer>();
 
@@ -278,6 +284,22 @@
 		}
 		return retValue;
 	}   //  getButtonText
+
+	/**
+	 *  Get Button Record ID
+	 *
+	 *  @param tableName table
+	 *  @param columnName column
+	 *  @param selectSQL sql
+	 *  @return Text on button
+	 */
+	protected int getButtonRecordID (String keyColumn)
+	{
+		Integer record_id = buttonRecordID.get(keyColumn);
+		if (record_id == null || record_id.intValue() == 0)
+			return 0;
+		return record_id.intValue();
+	}   //  getButtonRecordID
 
 	/**************************************************************************
 
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/Attachment.java
--- a/client/src/org/compiere/apps/Attachment.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/Attachment.java	Mon Feb 10 21:08:53 2014 -0500
@@ -17,6 +17,7 @@
 package org.compiere.apps;
 
 import java.awt.BorderLayout;
+import java.awt.Desktop;
 import java.awt.Dimension;
 import java.awt.FlowLayout;
 import java.awt.Frame;
@@ -28,6 +29,7 @@
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.io.File;
+import java.io.IOException;
 import java.util.logging.Level;
 
 import javax.swing.JFileChooser;
@@ -555,8 +557,19 @@
             //	p.waitFor();
                 return true;
             }
-            else	//	other OS
+            else	//	other OS. originally nothing here. add the following codes
             {
+            	try {
+            		Desktop desktop = null;
+            		if (Desktop.isDesktopSupported()) {
+            			desktop = Desktop.getDesktop();
+            			File file = new File(tempFile.getAbsolutePath());
+            			desktop.open(file);
+            			return true;
+            		}               
+            	} catch (IOException e) {
+            		e.printStackTrace();
+            	}
             }
         } 
         catch (Exception e) 
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/ProcessParameterPanel.java
--- a/client/src/org/compiere/apps/ProcessParameterPanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/ProcessParameterPanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -58,6 +58,8 @@
  * @author Teo Sarca, www.arhipac.ro
  * 			<li>BF [ 2548216 ] Process Param Panel is not showing any parameter if error 
  * @version 	2006-12-01
+ * @author Michael McKay (mjmckay)
+ * 			<li>BF3423098 - Labels for process parameters with display logic false are still displayed
  */
 public class ProcessParameterPanel extends CPanel implements VetoableChangeListener, IProcessParameter {
 	/**
@@ -440,8 +442,9 @@
 			Component[] comps = centerPanel.getComponents();
 			for (int i = 0; i < comps.length; i++) {
 				Component comp = comps[i];
-				if (comp instanceof CLabel)
-					continue;
+				// BF3423098 - Labels for process parameters with display logic false are still shown 
+				//if (comp instanceof CLabel)
+				//	continue;
 				String columnName = comp.getName();
 
 				if (columnName != null && columnName.length() > 0) {
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/form/Allocation.java
--- a/client/src/org/compiere/apps/form/Allocation.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/form/Allocation.java	Mon Feb 10 21:08:53 2014 -0500
@@ -24,6 +24,7 @@
 import java.util.logging.Level;
 
 import org.adempiere.exceptions.AdempiereException;
+import org.compiere.minigrid.IDColumn;
 import org.compiere.minigrid.IMiniTable;
 import org.compiere.model.MAllocationHdr;
 import org.compiere.model.MAllocationLine;
@@ -40,6 +41,12 @@
 import org.compiere.util.TimeUtil;
 import org.compiere.util.Util;
 
+/**
+ * 
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
+ */
 public class Allocation
 {
 	public DecimalFormat format = DisplayType.getNumberFormat(DisplayType.Amount);
@@ -151,10 +158,9 @@
 			while (rs.next())
 			{
 				Vector<Object> line = new Vector<Object>();
-				line.add(new Boolean(false));       //  0-Selection
+				line.add(new IDColumn(rs.getInt(3))); //  0-C_Payment_ID
 				line.add(rs.getTimestamp(1));       //  1-TrxDate
-				KeyNamePair pp = new KeyNamePair(rs.getInt(3), rs.getString(2));
-				line.add(pp);                       //  2-DocumentNo
+				line.add(rs.getString(2));          //  2-DocumentNo
 				if (isMultiCurrency)
 				{
 					line.add(rs.getString(4));      //  3-Currency
@@ -203,19 +209,21 @@
 	
 	public void setPaymentColumnClass(IMiniTable paymentTable, boolean isMultiCurrency)
 	{
+		Vector<String> names = getPaymentColumnNames(isMultiCurrency);
 		int i = 0;
-		paymentTable.setColumnClass(i++, Boolean.class, false);         //  0-Selection
-		paymentTable.setColumnClass(i++, Timestamp.class, true);        //  1-TrxDate
-		paymentTable.setColumnClass(i++, String.class, true);           //  2-Value
+		paymentTable.setKeyColumnIndex(i);
+		paymentTable.setColumnClass(i, IDColumn.class, true, names.get(i++));         //  0-Selection
+		paymentTable.setColumnClass(i, Timestamp.class, true, names.get(i++));        //  1-TrxDate
+		paymentTable.setColumnClass(i, String.class, true, names.get(i++));           //  2-Value
 		if (isMultiCurrency)
 		{
-			paymentTable.setColumnClass(i++, String.class, true);       //  3-Currency
-			paymentTable.setColumnClass(i++, BigDecimal.class, true);   //  4-PayAmt
+			paymentTable.setColumnClass(i, String.class, true, names.get(i++));       //  3-Currency
+			paymentTable.setColumnClass(i, BigDecimal.class, true, names.get(i++));   //  4-PayAmt
 		}
-		paymentTable.setColumnClass(i++, BigDecimal.class, true);       //  5-ConvAmt
-		paymentTable.setColumnClass(i++, BigDecimal.class, true);       //  6-ConvOpen
-		paymentTable.setColumnClass(i++, BigDecimal.class, false);      //  7-Allocated
-//		paymentTable.setColumnClass(i++, BigDecimal.class, true);      	//  8-Multiplier
+		paymentTable.setColumnClass(i, BigDecimal.class, true, names.get(i++));       //  5-ConvAmt
+		paymentTable.setColumnClass(i, BigDecimal.class, true, names.get(i++));       //  6-ConvOpen
+		paymentTable.setColumnClass(i, BigDecimal.class, false, names.get(i));      //  7-Allocated
+//		paymentTable.setColumnClass(i, BigDecimal.class, true, names.get(i++));      	//  8-Multiplier
 
 		//
 		i_payment = isMultiCurrency ? 7 : 5;
@@ -281,10 +289,9 @@
 			while (rs.next())
 			{
 				Vector<Object> line = new Vector<Object>();
-				line.add(new Boolean(false));       //  0-Selection
+				line.add(new IDColumn(rs.getInt(3))); //  0-C_Invoice_ID
 				line.add(rs.getTimestamp(1));       //  1-TrxDate
-				KeyNamePair pp = new KeyNamePair(rs.getInt(3), rs.getString(2));
-				line.add(pp);                       //  2-Value
+				line.add(rs.getString(2));          //  2-Value
 				if (isMultiCurrency)
 				{
 					line.add(rs.getString(4));      //  3-Currency
@@ -296,7 +303,7 @@
 					open = Env.ZERO;
 				line.add(open);      				//  4/6-ConvOpen
 				BigDecimal discount = rs.getBigDecimal(8);
-				if (discount == null)	//	no concersion rate
+				if (discount == null)	//	no conversion rate
 					discount = Env.ZERO;
 				line.add(discount);					//  5/7-ConvAllowedDisc
 				line.add(Env.ZERO);      			//  6/8-WriteOff
@@ -344,22 +351,24 @@
 	
 	public void setInvoiceColumnClass(IMiniTable invoiceTable, boolean isMultiCurrency)
 	{
+		Vector<String> names = getInvoiceColumnNames(isMultiCurrency);
 		int i = 0;
-		invoiceTable.setColumnClass(i++, Boolean.class, false);         //  0-Selection
-		invoiceTable.setColumnClass(i++, Timestamp.class, true);        //  1-TrxDate
-		invoiceTable.setColumnClass(i++, String.class, true);           //  2-Value
+		invoiceTable.setKeyColumnIndex(i);
+		invoiceTable.setColumnClass(i, IDColumn.class, true, names.get(i++));        //  0-C_Invoice_ID
+		invoiceTable.setColumnClass(i, Timestamp.class, true, names.get(i++));        //  1-TrxDate
+		invoiceTable.setColumnClass(i, String.class, true, names.get(i++));           //  2-Value
 		if (isMultiCurrency)
 		{
-			invoiceTable.setColumnClass(i++, String.class, true);       //  3-Currency
-			invoiceTable.setColumnClass(i++, BigDecimal.class, true);   //  4-Amt
+			invoiceTable.setColumnClass(i, String.class, true, names.get(i++));       //  3-Currency
+			invoiceTable.setColumnClass(i, BigDecimal.class, true, names.get(i++));   //  4-Amt
 		}
-		invoiceTable.setColumnClass(i++, BigDecimal.class, true);       //  5-ConvAmt
-		invoiceTable.setColumnClass(i++, BigDecimal.class, true);       //  6-ConvAmt Open
-		invoiceTable.setColumnClass(i++, BigDecimal.class, false);      //  7-Conv Discount
-		invoiceTable.setColumnClass(i++, BigDecimal.class, false);      //  8-Conv WriteOff
-		invoiceTable.setColumnClass(i++, BigDecimal.class, false);      //  9-Conv OverUnder
-		invoiceTable.setColumnClass(i++, BigDecimal.class, true);		//	10-Conv Applied
-//		invoiceTable.setColumnClass(i++, BigDecimal.class, true);      	//  10-Multiplier
+		invoiceTable.setColumnClass(i, BigDecimal.class, true, names.get(i++));       //  5-ConvAmt
+		invoiceTable.setColumnClass(i, BigDecimal.class, true, names.get(i++));       //  6-ConvAmt Open
+		invoiceTable.setColumnClass(i, BigDecimal.class, false, names.get(i++));      //  7-Conv Discount
+		invoiceTable.setColumnClass(i, BigDecimal.class, false, names.get(i++));      //  8-Conv WriteOff
+		invoiceTable.setColumnClass(i, BigDecimal.class, false, names.get(i++));      //  9-Conv Applied
+		invoiceTable.setColumnClass(i, BigDecimal.class, true, names.get(i++));		//	10-Conv OverUnder
+//		invoiceTable.setColumnClass(i, BigDecimal.class, true, names.get(i++));      	//  10-Multiplier
 		//  Table UI
 		invoiceTable.autoSize();
 	}
@@ -390,13 +399,13 @@
 		//  Payments
 		if (!isInvoice)
 		{
-			BigDecimal open = (BigDecimal)payment.getValueAt(row, i_open);
-			BigDecimal applied = (BigDecimal)payment.getValueAt(row, i_payment);
+			BigDecimal open = (BigDecimal)payment.getValueAt(row, payment.convertColumnIndexToView(i_open));
+			BigDecimal applied = (BigDecimal)payment.getValueAt(row, payment.convertColumnIndexToView(i_payment));
 			
 			if (col == 0)
 			{
 				// selection of payment row
-				if (((Boolean)payment.getValueAt(row, 0)).booleanValue())
+				if (payment.isRowChecked(row))
 				{
 					applied = open;   //  Open Amount
 					if (totalDiff.abs().compareTo(applied.abs()) < 0			// where less is available to allocate than open
@@ -409,7 +418,7 @@
 			}
 			
 			
-			if (col == i_payment)
+			if (col == payment.convertColumnIndexToView(i_payment))
 			{
 				if ( applied.signum() == -open.signum() )
 					applied = applied.negate();
@@ -417,18 +426,18 @@
 							applied = open;
 			}
 			
-			payment.setValueAt(applied, row, i_payment);
+			payment.setValueAt(applied, row, payment.convertColumnIndexToView(i_payment));
 		}
 
 		//  Invoice
 		else 
 		{
-			boolean selected = ((Boolean) invoice.getValueAt(row, 0)).booleanValue();
-			BigDecimal open = (BigDecimal)invoice.getValueAt(row, i_open);
-			BigDecimal discount = (BigDecimal)invoice.getValueAt(row, i_discount);
-			BigDecimal applied = (BigDecimal)invoice.getValueAt(row, i_applied);
-			BigDecimal writeOff = (BigDecimal) invoice.getValueAt(row, i_writeOff);
-			BigDecimal overUnder = (BigDecimal) invoice.getValueAt(row, i_overUnder);
+			boolean selected = invoice.isRowChecked(row);
+			BigDecimal open = (BigDecimal)invoice.getValueAt(row, invoice.convertColumnIndexToView(i_open));
+			BigDecimal discount = (BigDecimal)invoice.getValueAt(row, invoice.convertColumnIndexToView(i_discount));
+			BigDecimal applied = (BigDecimal)invoice.getValueAt(row, invoice.convertColumnIndexToView(i_applied));
+			BigDecimal writeOff = (BigDecimal) invoice.getValueAt(row, invoice.convertColumnIndexToView(i_writeOff));
+			BigDecimal overUnder = (BigDecimal) invoice.getValueAt(row, invoice.convertColumnIndexToView(i_overUnder));
 			int openSign = open.signum();
 			
 			if (col == 0)  //selection
@@ -495,7 +504,7 @@
 										
 				if ( diffWOD.signum() == open.signum() )  // writeOff and discount are too large
 				{
-					if ( col == i_discount )       // then edit writeoff
+					if ( col == invoice.convertColumnIndexToView(i_discount) )       // then edit writeoff
 					{
 						writeOff = writeOff.subtract(diffWOD);
 					} 
@@ -508,7 +517,7 @@
 				}
 				
 				// rule 1
-				if ( col == i_applied )
+				if ( col == invoice.convertColumnIndexToView(i_applied) )
 					overUnder = overUnder.subtract(difference);
 				else
 					applied = applied.subtract(difference);
@@ -519,10 +528,10 @@
 			if (isAutoWriteOff && writeOff.doubleValue()/open.doubleValue() > .30)
 				msg = "AllocationWriteOffWarn";
 
-			invoice.setValueAt(discount, row, i_discount);
-			invoice.setValueAt(applied, row, i_applied);
-			invoice.setValueAt(writeOff, row, i_writeOff);
-			invoice.setValueAt(overUnder, row, i_overUnder);
+			invoice.setValueAt(discount, row, invoice.convertColumnIndexToView(i_discount));
+			invoice.setValueAt(applied, row, invoice.convertColumnIndexToView(i_applied));
+			invoice.setValueAt(writeOff, row, invoice.convertColumnIndexToView(i_writeOff));
+			invoice.setValueAt(overUnder, row, invoice.convertColumnIndexToView(i_overUnder));
 			
 			invoice.repaint(); //  update r/o
 		}
@@ -545,12 +554,12 @@
 		m_noPayments = 0;
 		for (int i = 0; i < rows; i++)
 		{
-			if (((Boolean)payment.getValueAt(i, 0)).booleanValue())
+			if (payment.isRowChecked(i))
 			{
-				Timestamp ts = (Timestamp)payment.getValueAt(i, 1);
+				Timestamp ts = (Timestamp)payment.getValueAt(i, payment.convertColumnIndexToView(1));
 				if ( !isMultiCurrency )  // the converted amounts are only valid for the selected date
 					allocDate = TimeUtil.max(allocDate, ts);
-				BigDecimal bd = (BigDecimal)payment.getValueAt(i, i_payment);
+				BigDecimal bd = (BigDecimal)payment.getValueAt(i, payment.convertColumnIndexToView(i_payment));
 				totalPay = totalPay.add(bd);  //  Applied Pay
 				m_noPayments++;
 				log.fine("Payment_" + i + " = " + bd + " - Total=" + totalPay);
@@ -569,12 +578,12 @@
 
 		for (int i = 0; i < rows; i++)
 		{
-			if (((Boolean)invoice.getValueAt(i, 0)).booleanValue())
+			if (invoice.isRowChecked(i))
 			{
-				Timestamp ts = (Timestamp)invoice.getValueAt(i, 1);
+				Timestamp ts = (Timestamp)invoice.getValueAt(i, invoice.convertColumnIndexToView(1));
 				if ( !isMultiCurrency )  // converted amounts only valid for selected date
 					allocDate = TimeUtil.max(allocDate, ts);
-				BigDecimal bd = (BigDecimal)invoice.getValueAt(i, i_applied);
+				BigDecimal bd = (BigDecimal)invoice.getValueAt(i, invoice.convertColumnIndexToView(i_applied));
 				totalInv = totalInv.add(bd);  //  Applied Inv
 				m_noInvoices++;
 				log.fine("Invoice_" + i + " = " + bd + " - Total=" + totalPay);
@@ -615,22 +624,19 @@
 		ArrayList<Integer> paymentList = new ArrayList<Integer>(pRows);
 		ArrayList<BigDecimal> amountList = new ArrayList<BigDecimal>(pRows);
 		BigDecimal paymentAppliedAmt = Env.ZERO;
+		
+		paymentList = payment.getSelectedKeys();
+		// Sum up the payment and applied amounts.
 		for (int i = 0; i < pRows; i++)
 		{
-			//  Payment line is selected
-			if (((Boolean)payment.getValueAt(i, 0)).booleanValue())
+			if (payment.isRowChecked(i))
 			{
-				KeyNamePair pp = (KeyNamePair)payment.getValueAt(i, 2);   //  Value
-				//  Payment variables
-				int C_Payment_ID = pp.getKey();
-				paymentList.add(new Integer(C_Payment_ID));
-				//
 				BigDecimal PaymentAmt = (BigDecimal)payment.getValueAt(i, i_payment);  //  Applied Payment
 				amountList.add(PaymentAmt);
 				//
 				paymentAppliedAmt = paymentAppliedAmt.add(PaymentAmt);
 				//
-				log.fine("C_Payment_ID=" + C_Payment_ID 
+				log.fine("C_Payment_ID=" + payment.getRowKey(i) 
 					+ " - PaymentAmt=" + PaymentAmt); // + " * " + Multiplier + " = " + PaymentAmtAbs);
 			}
 		}
@@ -650,12 +656,11 @@
 		for (int i = 0; i < iRows; i++)
 		{
 			//  Invoice line is selected
-			if (((Boolean)invoice.getValueAt(i, 0)).booleanValue())
+			if (invoice.isRowChecked(i))
 			{
 				invoiceLines++;
-				KeyNamePair pp = (KeyNamePair)invoice.getValueAt(i, 2);    //  Value
 				//  Invoice variables
-				int C_Invoice_ID = pp.getKey();
+				int C_Invoice_ID = ((IDColumn) invoice.getValueAt(i, invoice.getKeyColumnIndex())).getRecord_ID();
 				BigDecimal AppliedAmt = (BigDecimal)invoice.getValueAt(i, i_applied);
 				//  semi-fixed fields (reset after first invoice)
 				BigDecimal DiscountAmt = (BigDecimal)invoice.getValueAt(i, i_discount);
@@ -746,11 +751,10 @@
 		for (int i = 0; i < iRows; i++)
 		{
 			//  Invoice line is selected
-			if (((Boolean)invoice.getValueAt(i, 0)).booleanValue())
+			if (invoice.isRowChecked(i))
 			{
-				KeyNamePair pp = (KeyNamePair)invoice.getValueAt(i, 2);    //  Value
 				//  Invoice variables
-				int C_Invoice_ID = pp.getKey();
+				int C_Invoice_ID = ((IDColumn) invoice.getValueAt(i, invoice.getKeyColumnIndex())).getRecord_ID();
 				String sql = "SELECT invoiceOpen(C_Invoice_ID, 0) "
 					+ "FROM C_Invoice WHERE C_Invoice_ID=?";
 				BigDecimal open = DB.getSQLValueBD(trxName, sql, C_Invoice_ID);
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/form/Charge.java
--- a/client/src/org/compiere/apps/form/Charge.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/form/Charge.java	Mon Feb 10 21:08:53 2014 -0500
@@ -19,6 +19,7 @@
 import java.util.Vector;
 import java.util.logging.Level;
 
+import org.compiere.minigrid.IDColumn;
 import org.compiere.minigrid.IMiniTable;
 import org.compiere.model.MAccount;
 import org.compiere.model.MAcctSchema;
@@ -35,6 +36,11 @@
  *
  *  @author Jorg Janke
  *  @version $Id: Charge.java,v 1.3 2006/07/30 00:51:28 jjanke Exp $
+ *  
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
+ *  
  */
 public class Charge
 {
@@ -84,9 +90,8 @@
 			while (rs.next())
 			{
 				Vector<Object> line = new Vector<Object>(4);
-				line.add(new Boolean(false));       //  0-Selection
-				KeyNamePair pp = new KeyNamePair(rs.getInt(1), rs.getString(2));
-				line.add(pp);                       //  1-Value
+				line.add(new IDColumn(rs.getInt(1)));  //  0-C_ElementValue_ID
+				line.add(rs.getString(2));          //  1-Value
 				line.add(rs.getString(3));          //  2-Name
 				boolean isExpenseType = rs.getString(4).equals("E");
 				line.add(new Boolean(isExpenseType));   //  3-Expense
@@ -137,7 +142,7 @@
 	{
 		//  Header Info
 		Vector<String> columnNames = new Vector<String>(4);
-		columnNames.add(Msg.getMsg(Env.getCtx(), "Select"));
+		columnNames.add(Msg.getMsg(Env.getCtx(), " "));
 		columnNames.add(Msg.translate(Env.getCtx(), "Value"));
 		columnNames.add(Msg.translate(Env.getCtx(), "Name"));
 		columnNames.add(Msg.getMsg(Env.getCtx(), "Expense"));
@@ -147,7 +152,9 @@
 	
 	public void setColumnClass(IMiniTable dataTable)
 	{
-		dataTable.setColumnClass(0, Boolean.class, false);      //  0-Selection
+		//  Have to include the name string to avoid auto sizing
+		dataTable.setKeyColumnIndex(0);
+		dataTable.setColumnClass(0, IDColumn.class, true);      //  0-Selection & key column
 		dataTable.setColumnClass(1, String.class, true);        //  1-Value
 		dataTable.setColumnClass(2, String.class, true);        //  2-Name
 		dataTable.setColumnClass(3, Boolean.class, true);       //  3-Expense
@@ -201,6 +208,7 @@
 				MElementValue.ACCOUNTSIGN_Natural,
 				false, false, null);
 		ev.setAD_Org_ID(m_AD_Org_ID);
+		ev.setC_Element_ID(m_C_Element_ID);
 		if (!ev.save())
 			log.log(Level.WARNING, "C_ElementValue_ID not created");
 		return ev.getC_ElementValue_ID();
@@ -367,11 +375,10 @@
 		int rows = dataTable.getRowCount();
 		for (int i = 0; i < rows; i++)
 		{
-			if (((Boolean)dataTable.getValueAt(i, 0)).booleanValue())
+			if (dataTable.isRowChecked(i))
 			{
-				KeyNamePair pp = (KeyNamePair)dataTable.getValueAt(i, 1);
-				int C_ElementValue_ID = pp.getKey();
-				String name = (String)dataTable.getValueAt(i, 2);
+				int C_ElementValue_ID = dataTable.getRowKey(i);
+				String name = (String)dataTable.getValueAt(i, dataTable.convertColumnIndexToModel(2));
 				//
 				int C_Charge_ID = createCharge(name, C_ElementValue_ID);
 				if (C_Charge_ID == 0)
@@ -387,7 +394,7 @@
 					listCreated.append(name);
 				}
 				//  reset selection
-				dataTable.setValueAt(new Boolean(false), i, 0);
+				dataTable.setRowChecked(i, false);
 			}
 		}
 	}   //  createAccount
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/form/PayPrint.java
--- a/client/src/org/compiere/apps/form/PayPrint.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/form/PayPrint.java	Mon Feb 10 21:08:53 2014 -0500
@@ -43,6 +43,8 @@
 	public int				m_C_BankAccount_ID = -1;
 	/**	Export Class for Bank Account	*/
 	public String			m_PaymentExportClass = null;
+	/**	Payment Selection	*/
+	public int         		m_C_PaySelection_ID = 0;
 
 	/** Payment Information */
 	public MPaySelectionCheck[]     m_checks = null;
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/form/PaySelect.java
--- a/client/src/org/compiere/apps/form/PaySelect.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/form/PaySelect.java	Mon Feb 10 21:08:53 2014 -0500
@@ -15,6 +15,8 @@
  *  @author Michael McKay                                                     * 
  *  	<li>BF3441324  - Partially paid invoice does not appear in payment    *
  *                       selection                                            *
+ * 		<li>ADEMPIERE-72 VLookup and Info Window improvements				  *
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72		  *
  *****************************************************************************/
 package org.compiere.apps.form;
 
@@ -31,6 +33,7 @@
 import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
 import org.compiere.minigrid.IMiniTable;
+import org.compiere.minigrid.MiniTable;
 import org.compiere.model.MLookupFactory;
 import org.compiere.model.MLookupInfo;
 import org.compiere.model.MPaySelection;
@@ -211,7 +214,7 @@
 
 		m_sql = miniTable.prepareTable(new ColumnInfo[] {
 			//  0..5
-			new ColumnInfo(" ", "i.C_Invoice_ID", IDColumn.class, false, false, null),
+			new ColumnInfo(" ", "i.C_Invoice_ID", IDColumn.class, true, false, null),
 			new ColumnInfo(Msg.translate(ctx, "DueDate"), "COALESCE(ips.duedate,paymentTermDueDate(i.C_PaymentTerm_ID, i.DateInvoiced)) AS DateDue", Timestamp.class, true, true, null),
 			new ColumnInfo(Msg.translate(ctx, "C_BPartner_ID"), "bp.Name", KeyNamePair.class, true, false, "i.C_BPartner_ID"),
 			new ColumnInfo(Msg.translate(ctx, "DocumentNo"), "i.DocumentNo", String.class),
@@ -378,6 +381,8 @@
 		BigDecimal invoiceAmt = new BigDecimal(0.0);
 
 		int rows = miniTable.getRowCount();
+		if (miniTable.getShowTotals())
+			rows = rows - 1;
 		for (int i = 0; i < rows; i++)
 		{
 			IDColumn id = (IDColumn)miniTable.getValueAt(i, 0);
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/form/VAllocation.java
--- a/client/src/org/compiere/apps/form/VAllocation.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/form/VAllocation.java	Mon Feb 10 21:08:53 2014 -0500
@@ -54,6 +54,13 @@
 import org.compiere.util.Trx;
 import org.compiere.util.TrxRunnable;
 
+/**
+ * 
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
+ *
+ */
 public class VAllocation extends Allocation
 	implements FormPanel, ActionListener, TableModelListener, VetoableChangeListener
 {
@@ -132,6 +139,10 @@
 	{
 		CompiereColor.setBackground(panel);
 		//
+		paymentTable.setMultiSelection(true);  // Should be performed before the class is set.
+		invoiceTable.setMultiSelection(true);  // Should be performed before the class is set.
+		invoiceTable.setSurrendersFocusOnKeystroke(true);
+		//
 		mainPanel.setLayout(mainLayout);
 		dateLabel.setText(Msg.getMsg(Env.getCtx(), "Date"));
 		dateLabel.setToolTipText(Msg.getMsg(Env.getCtx(), "AllocDate", false));
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/form/VCharge.java
--- a/client/src/org/compiere/apps/form/VCharge.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/form/VCharge.java	Mon Feb 10 21:08:53 2014 -0500
@@ -48,6 +48,10 @@
  *
  *  @author Jorg Janke
  *  @version $Id: VCharge.java,v 1.3 2006/07/30 00:51:28 jjanke Exp $
+ *  
+ *  @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class VCharge extends Charge
 	implements FormPanel, ActionListener
@@ -174,7 +178,10 @@
 			dispose();
 		//  new Account
 		else if (e.getSource().equals(newButton))
+		{
 			createNew();
+			refresh();
+		}
 		else if (e.getSource().equals(accountButton))
 			createAccount();
 	}   //  actionPerformed
@@ -242,4 +249,10 @@
 		findTaxCategoryID();
 	}
 
+	private void refresh()
+	{
+		DefaultTableModel model = new DefaultTableModel(getData(), getColumnNames());
+		dataTable.setModel(model);
+		setColumnClass(dataTable);	
+	}
 }   //  VCharge
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/form/VPayPrint.java
--- a/client/src/org/compiere/apps/form/VPayPrint.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/form/VPayPrint.java	Mon Feb 10 21:08:53 2014 -0500
@@ -24,6 +24,9 @@
 import java.awt.Insets;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyVetoException;
+import java.beans.VetoableChangeListener;
 import java.util.ArrayList;
 import java.util.logging.Level;
 
@@ -32,7 +35,10 @@
 
 import org.compiere.apps.ADialog;
 import org.compiere.apps.ConfirmPanel;
+import org.compiere.grid.ed.VLookup;
 import org.compiere.grid.ed.VNumber;
+import org.compiere.model.MLookup;
+import org.compiere.model.MLookupFactory;
 import org.compiere.model.MPaySelectionCheck;
 import org.compiere.model.MPaymentBatch;
 import org.compiere.plaf.CompiereColor;
@@ -45,7 +51,6 @@
 import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
 import org.compiere.util.Ini;
-import org.compiere.util.KeyNamePair;
 import org.compiere.util.Msg;
 import org.compiere.util.PaymentExport;
 import org.compiere.util.ValueNamePair;
@@ -59,7 +64,7 @@
  *  Contributors:
  *    Carlos Ruiz - GlobalQSS - FR 3132033 - Make payment export class configurable per bank
  */
-public class VPayPrint extends PayPrint implements FormPanel, ActionListener
+public class VPayPrint extends PayPrint implements FormPanel, ActionListener, VetoableChangeListener
 {
 	private CPanel panel = new CPanel();
 
@@ -75,8 +80,8 @@
 		m_frame = frame;
 		try
 		{
+			dynInit();
 			jbInit();
-			dynInit();
 			frame.getContentPane().add(centerPanel, BorderLayout.CENTER);
 			frame.getContentPane().add(southPanel, BorderLayout.SOUTH);
 		}
@@ -100,7 +105,7 @@
 	private JButton bCancel = ConfirmPanel.createCancelButton(true);
 	private JButton bProcess = ConfirmPanel.createProcessButton(Msg.getMsg(Env.getCtx(), "VPayPrintProcess"));
 	private CLabel lPaySelect = new CLabel();
-	private CComboBox fPaySelect = new CComboBox();
+	private VLookup paySelectSearch = null;
 	private CLabel lBank = new CLabel();
 	private CLabel fBank = new CLabel();
 	private CLabel lPaymentRule = new CLabel();
@@ -135,7 +140,6 @@
 		bProcess.addActionListener(this);
 		//
 		lPaySelect.setText(Msg.translate(Env.getCtx(), "C_PaySelection_ID"));
-		fPaySelect.addActionListener(this);
 		//
 		lBank.setText(Msg.translate(Env.getCtx(), "C_BankAccount_ID"));
 		//
@@ -158,7 +162,7 @@
 		//
 		centerPanel.add(lPaySelect,  new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0
 			,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(12, 12, 5, 5), 0, 0));
-		centerPanel.add(fPaySelect,    new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0
+		centerPanel.add(paySelectSearch, new GridBagConstraints(1, 0, 3, 1, 0.0, 0.0
 			,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(12, 0, 5, 12), 0, 0));
 		centerPanel.add(lBank,   new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0
 			,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(0, 12, 5, 5), 0, 0));
@@ -191,17 +195,13 @@
 	 */
 	private void dynInit()
 	{
-		ArrayList<KeyNamePair> data = getPaySelectionData();
-		for(KeyNamePair pp : data)
-			fPaySelect.addItem(pp);
 		
-		if (fPaySelect.getItemCount() == 0)
-			ADialog.info(m_WindowNo, panel, "VPayPrintNoRecords");
-		else
-		{
-			fPaySelect.setSelectedIndex(0);
-			loadPaySelectInfo();
-		}
+		//  C_PaySelection_ID
+		int AD_Column_ID = 7670;        //  C_PaySelectionCheck.C_PaySelection_ID
+		MLookup lookupPS = MLookupFactory.get (Env.getCtx(), m_WindowNo, 0, AD_Column_ID, DisplayType.Search);
+		paySelectSearch = new VLookup("C_PaySelection_ID", true, false, true, lookupPS);
+		paySelectSearch.addVetoableChangeListener(this);
+		
 	}   //  dynInit
 
 	/**
@@ -222,33 +222,25 @@
 	{
 		if (C_PaySelection_ID == 0)
 			return;
-		//
-		for (int i = 0; i < fPaySelect.getItemCount(); i++)
-		{
-			KeyNamePair pp = (KeyNamePair)fPaySelect.getItemAt(i);
-			if (pp.getKey() == C_PaySelection_ID)
-			{
-				fPaySelect.setSelectedIndex(i);
-				return;
-			}
-		}
+
+		m_C_PaySelection_ID = C_PaySelection_ID;
+		paySelectSearch.setValue(new Integer(m_C_PaySelection_ID));
+		loadPaySelectInfo();
 	}	//	setsetPaySelection
 
-	
 	/**************************************************************************
 	 *  Action Listener
 	 *  @param e event
 	 */
 	public void actionPerformed(ActionEvent e)
 	{
-	//	log.config( "VPayPrint.actionPerformed" + e.toString());
-		if (e.getSource() == fPaySelect)
-			loadPaySelectInfo();
+		//	log.config( "VPayPrint.actionPerformed" + e.toString());
+		if (e.getSource() == bCancel)
+			dispose();
+		else if (m_C_PaySelection_ID <= 0)
+			return;
 		else if (e.getSource() == fPaymentRule)
 			loadPaymentRuleInfo();
-		//
-		else if (e.getSource() == bCancel)
-			dispose();
 		else if (e.getSource() == bExport)
 			cmd_export();
 		else if (e.getSource() == bProcess)
@@ -263,16 +255,17 @@
 	private void loadPaySelectInfo()
 	{
 		log.info( "VPayPrint.loadPaySelectInfo");
-		if (fPaySelect.getSelectedIndex() == -1)
+		if (m_C_PaySelection_ID <= 0)
 			return;
 		
-		int C_PaySelection_ID = ((KeyNamePair)fPaySelect.getSelectedItem()).getKey();
-		loadPaySelectInfo(C_PaySelection_ID);
+		loadPaySelectInfo(m_C_PaySelection_ID);
 		
 		fBank.setText(bank);
 		fCurrency.setText(currency);
 		fBalance.setValue(balance);
 		
+		m_frame.pack();
+		
 		loadPaymentRule();
 	}   //  loadPaySelectInfo
 
@@ -287,8 +280,7 @@
 		
 		fPaymentRule.removeAllItems();
 		
-		int C_PaySelection_ID = ((KeyNamePair)fPaySelect.getSelectedItem()).getKey();
-		ArrayList<ValueNamePair> data = loadPaymentRule(C_PaySelection_ID);
+		ArrayList<ValueNamePair> data = loadPaymentRule(m_C_PaySelection_ID);
 		for(ValueNamePair pp : data)
 			fPaymentRule.addItem(pp);
 		
@@ -312,8 +304,7 @@
 		log.info("PaymentRule=" + PaymentRule);
 		fNoPayments.setText(" ");
 		
-		int C_PaySelection_ID = ((KeyNamePair)fPaySelect.getSelectedItem()).getKey();
-		String msg = loadPaymentRuleInfo(C_PaySelection_ID, PaymentRule);
+		String msg = loadPaymentRuleInfo(m_C_PaySelection_ID, PaymentRule);
 		
 		if(noPayments != null)
 			fNoPayments.setText(noPayments);
@@ -333,7 +324,10 @@
 	 */
 	private void cmd_export()
 	{
-		String PaymentRule = ((ValueNamePair)fPaymentRule.getSelectedItem()).getValue();
+		ValueNamePair pp = (ValueNamePair)fPaymentRule.getSelectedItem();
+		if (pp == null)
+			return;
+		String PaymentRule = pp.getValue();
 		log.info(PaymentRule);
 		if (!getChecks(PaymentRule))
 			return;
@@ -395,7 +389,10 @@
 	 */
 	private void cmd_EFT()
 	{
-		String PaymentRule = ((ValueNamePair)fPaymentRule.getSelectedItem()).getValue();
+		ValueNamePair pp = (ValueNamePair)fPaymentRule.getSelectedItem();
+		if (pp == null)
+			return;
+		String PaymentRule = pp.getValue();
 		log.info(PaymentRule);
 		if (!getChecks(PaymentRule))
 			return;
@@ -407,7 +404,10 @@
 	 */
 	private void cmd_print()
 	{
-		String PaymentRule = ((ValueNamePair)fPaymentRule.getSelectedItem()).getValue();
+		ValueNamePair pp = (ValueNamePair)fPaymentRule.getSelectedItem();
+		if (pp == null)
+			return;
+		String PaymentRule = pp.getValue();
 		log.info(PaymentRule);
 		if (!getChecks(PaymentRule))
 			return;
@@ -462,7 +462,7 @@
 	private boolean getChecks(String PaymentRule)
 	{
 		//  do we have values
-		if (fPaySelect.getSelectedIndex() == -1 || m_C_BankAccount_ID == -1
+		if (m_C_PaySelection_ID <= 0 || m_C_BankAccount_ID == -1
 			|| fPaymentRule.getSelectedIndex() == -1 || fDocumentNo.getValue() == null)
 		{
 			ADialog.error(m_WindowNo, panel, "VPayPrintNoRecords",
@@ -471,15 +471,14 @@
 		}
 
 		//  get data
-		int C_PaySelection_ID = ((KeyNamePair)fPaySelect.getSelectedItem()).getKey();
 		int startDocumentNo = ((Number)fDocumentNo.getValue()).intValue();
 
-		log.config("C_PaySelection_ID=" + C_PaySelection_ID + ", PaymentRule=" +  PaymentRule + ", DocumentNo=" + startDocumentNo);
+		log.config("C_PaySelection_ID=" + m_C_PaySelection_ID + ", PaymentRule=" +  PaymentRule + ", DocumentNo=" + startDocumentNo);
 		//
 		panel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
 
-		//	get Slecetions
-		m_checks = MPaySelectionCheck.get(C_PaySelection_ID, PaymentRule, startDocumentNo, null);
+		//	get Selections
+		m_checks = MPaySelectionCheck.get(m_C_PaySelection_ID, PaymentRule, startDocumentNo, null);
 
 		panel.setCursor(Cursor.getDefaultCursor());
 		//
@@ -489,8 +488,32 @@
 				"(" + Msg.translate(Env.getCtx(), "C_PaySelectionLine_ID") + " #0");
 			return false;
 		}
-		m_batch = MPaymentBatch.getForPaySelection (Env.getCtx(), C_PaySelection_ID, null);
+		m_batch = MPaymentBatch.getForPaySelection (Env.getCtx(), m_C_PaySelection_ID, null);
 		return true;
 	}   //  getChecks
 
+	/**
+	 *  Vetoable Change Listener.
+	 *  - Payment Selection
+	 *  @param evt event
+	 */
+	@Override
+	public void vetoableChange(PropertyChangeEvent e)
+			throws PropertyVetoException {
+		String name = e.getPropertyName();
+		Object value = e.getNewValue();
+		log.config(name + "=" + value);
+		
+		if (value == null)
+			return;
+		
+		//  Payment Selection
+		if (name.equals("C_PaySelection_ID"))
+		{
+			paySelectSearch.setValue(value);
+			m_C_PaySelection_ID = ((Integer)value).intValue();
+			loadPaySelectInfo();
+		}
+	}
+
 }   //  PayPrint
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/form/VPaySelect.java
--- a/client/src/org/compiere/apps/form/VPaySelect.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/form/VPaySelect.java	Mon Feb 10 21:08:53 2014 -0500
@@ -25,6 +25,8 @@
 import java.awt.Insets;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.logging.Level;
@@ -32,8 +34,6 @@
 import javax.swing.JButton;
 import javax.swing.JLabel;
 import javax.swing.JScrollPane;
-import javax.swing.event.TableModelEvent;
-import javax.swing.event.TableModelListener;
 
 import org.compiere.apps.ADialog;
 import org.compiere.apps.AEnv;
@@ -55,6 +55,7 @@
 import org.compiere.util.KeyNamePair;
 import org.compiere.util.Msg;
 import org.compiere.util.ValueNamePair;
+import org.jboss.util.property.PropertyListener;
 
 /**
  *  Create Manual Payments From (AP) Invoices or (AR) Credit Memos.
@@ -64,8 +65,12 @@
  *
  *  @author Jorg Janke
  *  @version $Id: VPaySelect.java,v 1.2 2008/07/11 08:20:12 cruiz Exp $
+ *  
+ *  @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
-public class VPaySelect extends PaySelect implements FormPanel, ActionListener, TableModelListener, ASyncProcess
+public class VPaySelect extends PaySelect implements FormPanel, ActionListener, ASyncProcess, PropertyChangeListener
 {
 	/** @todo withholding */
 	private CPanel panel = new CPanel();
@@ -155,6 +160,8 @@
 		bGenerate.addActionListener(this);
 		bCancel.addActionListener(this);
 		//
+		miniTable.addPropertyChangeListener(this);
+		//
 		mainPanel.add(parameterPanel, BorderLayout.NORTH);
 		parameterPanel.add(labelBankAccount,  new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0
 			,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
@@ -234,7 +241,6 @@
 		
 		prepareTable(miniTable);
 		
-		miniTable.getModel().addTableModelListener(this);
 		//
 		fieldPayDate.setMandatory(true);
 		fieldPayDate.setValue(new Timestamp(System.currentTimeMillis()));
@@ -318,14 +324,15 @@
 	}   //  actionPerformed
 
 	/**
-	 *  Table Model Listener
-	 *  @param e event
+	 * Property Change Listener
+	 * @param e event
 	 */
-	public void tableChanged(TableModelEvent e)
+	public void propertyChange(PropertyChangeEvent e)
 	{
-		if (e.getColumn() == 0)
+		// Respond to updates to the table
+		if (e.getPropertyName() == "p_table_update")
 			calculateSelection();
-	}   //  valueChanged
+	}   
 
 	/**
 	 *  Calculate selected rows.
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/Find.java
--- a/client/src/org/compiere/apps/search/Find.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/Find.java	Mon Feb 10 21:08:53 2014 -0500
@@ -13,6 +13,12 @@
  * For the text or an alternative of this public license, you may reach us    *
  * ComPiere, Inc., 2620 Augustine Dr. #245, Santa Clara, CA 95054, USA        *
  * or via info@compiere.org or http://www.compiere.org/license.html           *
+ *                                                                            *
+ * @Author Michael McKay (mjmckay)                                            *
+ *		<li>BF3431195 Advanced Lookup not working in ZK                       *
+ *      See https://sourceforge.net/tracker/                                  *
+ *      ?func=detail&aid=3431195&group_id=176962&atid=955896                  *
+ *                                                                            *
  *****************************************************************************/
 package org.compiere.apps.search;
 
@@ -68,7 +74,6 @@
 import org.compiere.apps.AEnv;
 import org.compiere.apps.ConfirmPanel;
 import org.compiere.apps.StatusBar;
-import org.compiere.grid.ed.AutoCompletion;
 import org.compiere.grid.ed.VEditor;
 import org.compiere.grid.ed.VEditorFactory;
 import org.compiere.grid.ed.VLookup;
@@ -110,6 +115,11 @@
  * 
  * @author Teo Sarca, www.arhipac.ro
  * 			<li>BF [ 2564070 ] Saving user queries can produce unnecessary db errors
+ *
+ * @Author Michael McKay (mjmckay)                                            
+ * @date	December 21, 2011                                            
+ *		<li>BF3431195 Advanced Lookup not working in ZK                       
+ *      See https://sourceforge.net/tracker/?func=detail&aid=3431195&group_id=176962&atid=955896                  
  */
 public final class Find extends CDialog
 		implements ActionListener, ChangeListener, DataStatusListener
@@ -144,6 +154,8 @@
 		m_tableName = tableName;
 		m_whereExtended = whereExtended;
 		m_findFields = findFields;
+		m_sLast = "** ".concat(Msg.getMsg(Env.getCtx(), "Last Query")).concat(" **");
+		m_sNew = "** ".concat(Msg.getMsg(Env.getCtx(), "New Query")).concat(" **");
 		//
 		m_query = new MQuery (tableName);
 		m_query.addRestriction(Env.parseContext(Env.getCtx(), m_targetWindowNo, whereExtended, false));
@@ -211,6 +223,10 @@
 	/** Reference ID for Yes/No	*/
 	public static final int		AD_REFERENCE_ID_YESNO = 319;
 	
+	/** Search messages using translation */
+	private String				m_sLast;
+	private String				m_sNew;
+	
 	
 	//
 	private CPanel southPanel = new CPanel();
@@ -467,7 +483,6 @@
 		for (int i = 0; i < m_findFields.length; i++)
 		{
 			GridField mField = m_findFields[i];
-			String columnName = mField.getColumnName();
 			
 			// Make Yes-No searchable as list
 			if (mField.getVO().displayType == DisplayType.YesNo)
@@ -765,15 +780,8 @@
 		//AutoCompletion.enable(operators);
 		
 		//user query
-		userQueries = MUserQuery.get(Env.getCtx(), m_AD_Tab_ID);
-		String[] queries = new String[userQueries.length];
-		for (int i = 0; i < userQueries.length; i++)
-			queries[i] = userQueries[i].getName();
-		fQueryName.setModel(new DefaultComboBoxModel(queries));
-		fQueryName.setValue("");
-
-		//	No Row - Create one
-		cmd_new();
+		refreshUserQueries();
+		
 	}   //  initFindAdvanced
 
 	/**
@@ -866,19 +874,20 @@
 		}
 		else if (e.getSource() == fQueryName) 
 		{
-			Object o = fQueryName.getSelectedItem();
-			if (userQueries != null && o != null)
-			{
-				String selected = o.toString();
-				for (int i = 0; i < userQueries.length; i++) 
-				{
-					if (userQueries[i].getName().equals(selected))
-					{
-						parseUserQuery(userQueries[i]);
-						return;
-					}
+			int index = fQueryName.getSelectedIndex();
+			if(index < 0) return;
+			if(index == 0) { // no query - wipe and start over.
+				advancedTable.stopEditor(false);
+				DefaultTableModel model = (DefaultTableModel)advancedTable.getModel();
+				int cnt = model.getRowCount();
+				if (cnt > 0){
+					for (int i = cnt - 1; i >=0; i--)
+						model.removeRow(i);
+					cmd_new();  // No row - create one.
 				}
+				advancedTable.requestFocusInWindow();
 			}
+			else parseUserQuery(userQueries[index-1]);
 		}
 		else    // ConfirmPanel.A_OK and enter in fields
 		{
@@ -1204,110 +1213,146 @@
 			}
 			else 
 			{
-			Object parsedValue = parseValue(field, value);
-			if (parsedValue == null)
-				continue;
-			String infoDisplay = value.toString();
-			if (field.isLookup())
-				infoDisplay = field.getLookup().getDisplay(value);
-			else if (field.getDisplayType() == DisplayType.YesNo)
-				infoDisplay = Msg.getMsg(Env.getCtx(), infoDisplay);
-			//	Value2	******
-			Object value2 = null;
-			if (MQuery.OPERATORS[MQuery.BETWEEN_INDEX].equals(op))
-			{
-				value2 = advancedTable.getValueAt(row, INDEX_VALUE2);
-				if (value2 == null)
+				Object parsedValue = parseValue(field, value);
+				if (parsedValue == null)
 					continue;
-				Object parsedValue2 = parseValue(field, value2);
-				String infoDisplay_to = value2.toString();
-				if (parsedValue2 == null)
-					continue;
-				m_query.addRangeRestriction(ColumnSQL, parsedValue, parsedValue2,
-							infoName, infoDisplay, infoDisplay_to, and, openBrackets);
-			}
-			else if (isProductCategoryField && MQuery.OPERATORS[MQuery.EQUAL_INDEX].equals(op)) {
-				if (!(parsedValue instanceof Integer)) {
-					continue;
+				String infoDisplay = value.toString();
+				if (field.isLookup())
+					infoDisplay = field.getLookup().getDisplay(value);
+				else if (field.getDisplayType() == DisplayType.YesNo)
+					infoDisplay = Msg.getMsg(Env.getCtx(), infoDisplay);
+				//	Value2	******
+				Object value2 = null;
+				if (MQuery.OPERATORS[MQuery.BETWEEN_INDEX].equals(op))
+				{
+					value2 = advancedTable.getValueAt(row, INDEX_VALUE2);
+					if (value2 == null)
+						continue;
+					Object parsedValue2 = parseValue(field, value2);
+					String infoDisplay_to = value2.toString();
+					if (parsedValue2 == null)
+						continue;
+					m_query.addRangeRestriction(ColumnSQL, parsedValue, parsedValue2,
+								infoName, infoDisplay, infoDisplay_to, and, openBrackets);
 				}
-					m_query
-
-					.addRestriction(getSubCategoryWhereClause(((Integer) parsedValue).intValue()), and, openBrackets);
-			}
-			else
-				m_query.addRestriction(ColumnSQL, Operator, parsedValue,
-							infoName, infoDisplay, and, openBrackets);
-			
-			if (code.length() > 0)
-				code.append(SEGMENT_SEPARATOR);
-			code.append(ColumnName)
-				.append(FIELD_SEPARATOR)
-				.append(Operator)
-				.append(FIELD_SEPARATOR)
-				.append(value.toString())
-				.append(FIELD_SEPARATOR)
-				.append(value2 != null ? value2.toString() : "")
-				.append(FIELD_SEPARATOR)
-				.append( and ? "AND" : "OR")
-				.append(FIELD_SEPARATOR)
-				.append(lBrackets != null ? lBrackets : "")
-				.append(FIELD_SEPARATOR)
-				.append(rBrackets != null ? rBrackets : "");
-			
+				else if (isProductCategoryField && MQuery.OPERATORS[MQuery.EQUAL_INDEX].equals(op)) {
+					if (!(parsedValue instanceof Integer)) {
+						continue;
+					}
+					m_query.addRestriction(getSubCategoryWhereClause(((Integer) parsedValue).intValue()), 
+							and, openBrackets);
+				}
+				else
+					m_query.addRestriction(ColumnSQL, Operator, parsedValue,
+								infoName, infoDisplay, and, openBrackets);
+				
+				if (code.length() > 0)
+					code.append(SEGMENT_SEPARATOR);
+				code.append(ColumnName)
+					.append(FIELD_SEPARATOR)
+					.append(Operator)
+					.append(FIELD_SEPARATOR)
+					.append(value.toString())
+					.append(FIELD_SEPARATOR)
+					.append(value2 != null ? value2.toString() : "")
+					.append(FIELD_SEPARATOR)
+					.append( and ? "AND" : "OR")
+					.append(FIELD_SEPARATOR)
+					.append(lBrackets != null ? lBrackets : "")
+					.append(FIELD_SEPARATOR)
+					.append(rBrackets != null ? rBrackets : "");
+				
 			}
 		}
 		Object selected = fQueryName.getSelectedItem();
-		if (selected != null && saveQuery) {
+		
+		if (selected != null) {
 			String name = selected.toString();
-			if (Util.isEmpty(name, true))
-			{
+			if ((fQueryName.getSelectedIndex() == 0 || name.equals(m_sLast) || Util.isEmpty(name, true)) && saveQuery){ // New query - needs a name
+
 				ADialog.warn(m_targetWindowNo, this, "FillMandatory", Msg.translate(Env.getCtx(), "Name"));
 				return;
 			}
-			MUserQuery uq = MUserQuery.get(Env.getCtx(), m_AD_Tab_ID, name);
-			if (uq == null && code.length() > 0)
-			{				
-				uq = new MUserQuery (Env.getCtx(), 0, null);
-				uq.setName (name);
-				uq.setAD_Tab_ID(m_AD_Tab_ID); //red1 UserQuery [ 1798539 ] taking in new field from Compiere
-				uq.setAD_User_ID(Env.getAD_User_ID(Env.getCtx())); //red1 - [ 1798539 ] missing in Compiere delayed source :-)
-			}			
-			else if (uq != null && code.length() == 0) 
-			{
-				if (uq.delete(true))
+			if (saveQuery){
+				MUserQuery uq = MUserQuery.get(Env.getCtx(), m_AD_Tab_ID, name);
+				if (code.length() > 0) { // New or updated
+					if (uq == null) // Create a new record
+					{				
+						uq = new MUserQuery (Env.getCtx(), 0, null);
+						uq.setName (name);
+						uq.setAD_Table_ID(m_AD_Table_ID);
+						uq.setAD_Tab_ID(m_AD_Tab_ID); //red1 UserQuery [ 1798539 ] taking in new field from Compiere
+						uq.setAD_User_ID(Env.getAD_User_ID(Env.getCtx())); //red1 - [ 1798539 ] missing in Compiere delayed source :-)
+					}			
+					uq.setCode (code.toString());  // Update the query code
+					
+				} else	if (code.length() <= 0){ // Delete the query
+					if (uq.delete(true))
+					{
+						ADialog.info (m_targetWindowNo, this, "Deleted", name);
+						refreshUserQueries();
+					}
+					else
+						ADialog.warn (m_targetWindowNo, this, "DeleteError", name);
+					return;
+				}
+				//
+				if (uq.save())
 				{
-					ADialog.info (m_targetWindowNo, this, "Deleted", name);
+					ADialog.info (m_targetWindowNo, this, "Saved", name);
 					refreshUserQueries();
 				}
 				else
+					ADialog.warn (m_targetWindowNo, this, "SaveError", name);
+			}
+			//
+			MUserQuery last = MUserQuery.get(Env.getCtx(), m_AD_Tab_ID, m_sLast);
+			if (code.length() > 0) { // New or update				
+				if (last == null) // Create a new record
+				{
+					last = new MUserQuery (Env.getCtx(), 0, null);
+					last.setName (m_sLast);
+					last.setAD_Table_ID (m_AD_Table_ID);
+					last.setAD_Tab_ID(m_AD_Tab_ID);
+					last.setAD_User_ID(Env.getAD_User_ID(Env.getCtx())); 
+				}
+				last.setCode (code.toString());  // Update the query code
+			} else	if (code.length() <= 0){ // Delete the query
+				if (!last.delete(true))
 					ADialog.warn (m_targetWindowNo, this, "DeleteError", name);
 				return;
 			}
-			
-			uq.setCode (code.toString());
-			uq.setAD_Table_ID (m_AD_Table_ID);
-			//
-			if (uq.save())
-			{
-				ADialog.info (m_targetWindowNo, this, "Saved", name);
-				refreshUserQueries();
-			}
-			else
+
+			if (!last.save())
 				ADialog.warn (m_targetWindowNo, this, "SaveError", name);
+
 		}
 	}	//	cmd_save
 
 	private void refreshUserQueries() 
 	{
-		Object selected = fQueryName.getSelectedItem();
+		String value = m_sLast; 
+		if (fQueryName.getItemCount()>0){ // The list is initialized
+			value = fQueryName.getValue().toString();
+		}
 		userQueries = MUserQuery.get(Env.getCtx(), m_AD_Tab_ID);
-		String[] queries = new String[userQueries.length];
+		fQueryName.removeAllItems();
+		boolean selected = false;
+		fQueryName.addItem(m_sNew);  // "** New **"
 		for (int i = 0; i < userQueries.length; i++)
-			queries[i] = userQueries[i].getName();
-		fQueryName.setModel(new DefaultComboBoxModel(queries));
-		fQueryName.setSelectedItem(selected);
-		if (fQueryName.getSelectedIndex() < 0)
-			fQueryName.setValue("");
+		{
+			fQueryName.addItem(userQueries[i].getName());
+			if(value.equals(userQueries[i].getName()))
+			{
+				fQueryName.setSelectedItem(userQueries[i].getName());
+				parseUserQuery(userQueries[i]);
+				selected = true;
+			}
+		}
+
+		if(!selected) fQueryName.setSelectedIndex(0);
+
+		
 	}
 	
 	/**
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/Info.java
--- a/client/src/org/compiere/apps/search/Info.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/Info.java	Mon Feb 10 21:08:53 2014 -0500
@@ -17,12 +17,17 @@
 package org.compiere.apps.search;
 
 import java.awt.BorderLayout;
+import java.awt.Container;
 import java.awt.Cursor;
 import java.awt.Dimension;
+import java.awt.FlowLayout;
 import java.awt.Frame;
 import java.awt.Toolkit;
 import java.awt.event.ActionEvent;
+
 import java.awt.event.MouseEvent;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
 import java.math.BigDecimal;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -31,35 +36,50 @@
 import java.util.ArrayList;
 import java.util.logging.Level;
 
+import javax.swing.AbstractAction;
+import javax.swing.Action;
 import javax.swing.ImageIcon;
 import javax.swing.JButton;
 import javax.swing.JFrame;
 import javax.swing.JPopupMenu;
 import javax.swing.JScrollPane;
-import javax.swing.SwingUtilities;
+import javax.swing.KeyStroke;
+import javax.swing.ListSelectionModel;
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
+import javax.swing.plaf.ColorUIResource;
+import javax.swing.table.*;
 
+import org.adempiere.plaf.AdempiereTaskPaneUI;
 import org.compiere.apps.ADialog;
 import org.compiere.apps.AEnv;
+import org.compiere.apps.ALayout;
 import org.compiere.apps.AWindow;
+import org.compiere.apps.AppsAction;
 import org.compiere.apps.ConfirmPanel;
 import org.compiere.apps.PrintScreenPainter;
 import org.compiere.apps.StatusBar;
 import org.compiere.grid.ed.Calculator;
+import org.compiere.grid.ed.VCheckBox;
+import org.compiere.grid.ed.VComboBox;
+import org.compiere.grid.ed.VLookup;
+import org.compiere.grid.ed.VPAttribute;
 import org.compiere.minigrid.IDColumn;
 import org.compiere.minigrid.MiniTable;
 import org.compiere.model.MQuery;
 import org.compiere.model.MRole;
 import org.compiere.model.MSysConfig;
+import org.compiere.swing.CButton;
 import org.compiere.swing.CDialog;
 import org.compiere.swing.CMenuItem;
 import org.compiere.swing.CPanel;
+import org.compiere.swing.CTextField;
 import org.compiere.util.CLogger;
 import org.compiere.util.DB;
 import org.compiere.util.Env;
 import org.compiere.util.KeyNamePair;
 import org.compiere.util.Msg;
+import org.jdesktop.swingx.JXTaskPane;
 
 /**
  *	Search Information and return selection - Base Class.
@@ -83,19 +103,41 @@
  * 				https://sourceforge.net/tracker/?func=detail&aid=2847305&group_id=176962&atid=879335
  * 			<li>BF [ 2860556 ] Info class throws false error
  * 				https://sourceforge.net/tracker/?func=detail&aid=2860556&group_id=176962&atid=879332
+ *
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public abstract class Info extends CDialog
-	implements ListSelectionListener
+	implements ListSelectionListener, PropertyChangeListener
 {
 	/**
 	 * 
 	 */
 	private static final long serialVersionUID = -5606614040914295869L;
 	
-	public static final String SYSCONFIG_INFO_DEFAULTSELECTED = "INFO_DEFAULTSELECTED";
-	public static final String SYSCONFIG_INFO_DOUBLECLICKTOGGLESSELECTION = "INFO_DOUBLECLICKTOGGLESSELECTION";
-
-
+	/**
+	 *  Factory Constructor (Depreciated)
+	 *  @param  frame   parent frame
+	 *  @param  modal   new window is modal
+	 *  @param  WindowNo	window no
+	 *  @param  tableName   table name of the search
+	 *  @param  keyColumn   key column of the search
+	 *  @param value query value to find, exclusive of record_id
+	 *  @param  multiSelection  allow to select more than one row
+	 *  @param  whereClause fully qualified where clause for the search
+	 *  @return special or general Info Window
+	 */
+	@Deprecated
+	public static Info create (Frame frame, boolean modal, int WindowNo,
+		String tableName, String keyColumn, String value,
+		boolean multiSelection, String whereClause)	
+	{
+		return create (frame, modal, WindowNo,
+				tableName, keyColumn, 0, value,
+				multiSelection, true, whereClause);
+	}
+	
 	/**
 	 *  Factory Constructor
 	 *  @param  frame   parent frame
@@ -103,48 +145,50 @@
 	 *  @param  WindowNo	window no
 	 *  @param  tableName   table name of the search
 	 *  @param  keyColumn   key column of the search
-	 *  @param	value		query value
+	 *  @param record_id The record ID to find
+	 *  @param value query value to find, exclusive of record_id
 	 *  @param  multiSelection  allow to select more than one row
+	 *  @param  saveResults  True if results will be saved, false for info only
 	 *  @param  whereClause fully qualified where clause for the search
 	 *  @return special or general Info Window
 	 */
-	public static Info create (Frame frame, boolean modal, int WindowNo,
-		String tableName, String keyColumn, String value,
-		boolean multiSelection, String whereClause)
+	public static Info create (Frame frame, boolean modal, int windowNo,
+		String tableName, String keyColumn, int record_id, String value,
+		boolean multiSelection, boolean saveResult, String whereClause)
 	{
 		Info info = null;
 
 		if (tableName.equals("C_BPartner"))
-			info = new InfoBPartner (frame, modal, WindowNo,  value, !Env.getContext(Env.getCtx(),"IsSOTrx").equals("N"),
-					multiSelection, whereClause);
+			info = new InfoBPartner (frame, modal, windowNo, record_id, value, !Env.getContext(Env.getCtx(),"IsSOTrx").equals("N"),
+					false, multiSelection, saveResult, whereClause);
 		else if (tableName.equals("M_Product"))
-			info = new InfoProduct (frame, modal, WindowNo,  0,0, value,
-					multiSelection, whereClause);
+			info = new InfoProduct (frame, modal, windowNo, 0, 0, record_id, value,
+					multiSelection, saveResult, whereClause);
 		else if (tableName.equals("C_Invoice"))
-			info = new InfoInvoice (frame, modal, WindowNo, value,
-					multiSelection, whereClause);
+			info = new InfoInvoice (frame, modal, windowNo, record_id, value,
+					multiSelection, saveResult, whereClause);
 		else if (tableName.equals("A_Asset"))
-			info = new InfoAsset (frame, modal, WindowNo, 0, value,
-					multiSelection, whereClause);
+			info = new InfoAsset (frame, modal, windowNo, record_id, value,
+					multiSelection, saveResult, whereClause);
 		else if (tableName.equals("C_Order"))
-			info = new InfoOrder (frame, modal, WindowNo, value,
-					multiSelection, whereClause);
+			info = new InfoOrder (frame, modal, windowNo, record_id, value,
+					multiSelection, saveResult, whereClause);
 		else if (tableName.equals("M_InOut"))
-			info = new InfoInOut (frame, modal, WindowNo, value,
-					multiSelection, whereClause);
+			info = new InfoInOut (frame, modal, windowNo, record_id, value,
+					multiSelection, saveResult, whereClause);
 		else if (tableName.equals("C_Payment"))
-			info = new InfoPayment (frame, modal, WindowNo, value,
-					multiSelection, whereClause);
+			info = new InfoPayment (frame, modal, windowNo, record_id, value,
+					multiSelection, saveResult, whereClause);
 		else if (tableName.equals("C_CashLine"))
-			info = new InfoCashLine (frame, modal, WindowNo, value,
-					multiSelection, whereClause);
+			info = new InfoCashLine (frame, modal, windowNo, record_id, value,
+					multiSelection, saveResult, whereClause);
 		else if (tableName.equals("S_ResourceAssigment"))
-			info = new InfoAssignment (frame, modal, WindowNo, value,
-					multiSelection, whereClause);
+			info = new InfoAssignment (frame, modal, windowNo, record_id, value,
+					multiSelection, saveResult, whereClause);
 		else
-			info = new InfoGeneral (frame, modal, WindowNo, value, 
+			info = new InfoGeneral (frame, modal, windowNo, record_id, value, 
 				tableName, keyColumn, 
-				multiSelection, whereClause);
+				multiSelection, saveResult, whereClause);
 		//
 		AEnv.positionCenterWindow(frame, info);
 		return info;
@@ -157,8 +201,8 @@
 	 */
 	public static void showBPartner (Frame frame, int WindowNo)
 	{
-		Info info = new InfoBPartner (frame, false, WindowNo,  "",
-			!Env.getContext(Env.getCtx(),"IsSOTrx").equals("N"), false, "");
+		Info info = new InfoBPartner (frame, false, WindowNo,  0, "",
+			!Env.getContext(Env.getCtx(),"IsSOTrx").equals("N"), false, false, false, "");
 		AEnv.showCenterWindow(frame, info);
 	}   //  showBPartner
 
@@ -169,8 +213,7 @@
 	 */
 	public static void showAsset (Frame frame, int WindowNo)
 	{
-		Info info = new InfoAsset (frame, false, WindowNo,  
-			0, "", false, "");
+		Info info = new InfoAsset (frame, false, WindowNo, 0, "", false, false, "");
 		AEnv.showCenterWindow(frame, info);
 	}   //  showBPartner
 
@@ -181,11 +224,12 @@
 	 */
 	public static void showProduct (Frame frame, int WindowNo)
 	{
-		Info info = new InfoProduct (frame, false, WindowNo,
+		Info info = new InfoProduct (frame, false, WindowNo, 
 			Env.getContextAsInt(Env.getCtx(), WindowNo, "M_Warehouse_ID"),
 			Env.getContextAsInt(Env.getCtx(), WindowNo, "M_PriceList_ID"), 
+			0,		// Record ID
 			"",		//	value 
-			false, "");
+			false, false, "");
 		AEnv.showCenterWindow(frame, info);
 	}   //  showProduct
 
@@ -197,8 +241,8 @@
 	 */
 	public static void showOrder (Frame frame, int WindowNo, String value)
 	{
-		Info info = new InfoOrder (frame, false, WindowNo, value,
-			false, "");
+		Info info = new InfoOrder (frame, false, WindowNo, 0, value,
+			false, false, "");
 		AEnv.showCenterWindow(frame, info);
 	}   //  showOrder
 
@@ -210,8 +254,8 @@
 	 */
 	public static void showInvoice (Frame frame, int WindowNo, String value)
 	{
-		Info info = new InfoInvoice (frame, false, WindowNo, value,
-			false, "");
+		Info info = new InfoInvoice (frame, false, WindowNo, 0, value,
+			false, false, "");
 		AEnv.showCenterWindow(frame, info);
 	}   //  showInvoice
 
@@ -223,8 +267,8 @@
 	 */
 	public static void showInOut (Frame frame, int WindowNo, String value)
 	{
-		Info info = new InfoInOut (frame, false, WindowNo, value,
-			false, "");
+		Info info = new InfoInOut (frame, false, WindowNo, 0, value,
+			false, false, "");
 		AEnv.showCenterWindow(frame, info);
 	}   //  showInOut
 
@@ -236,8 +280,8 @@
 	 */
 	public static void showPayment (Frame frame, int WindowNo, String value)
 	{
-		Info info = new InfoPayment (frame, false, WindowNo, value,
-			false, "");
+		Info info = new InfoPayment (frame, false, WindowNo, 0, value,
+			false, false, "");
 		AEnv.showCenterWindow(frame, info);
 	}   //  showPayment
 
@@ -249,8 +293,8 @@
 	 */
 	public static void showCashLine (Frame frame, int WindowNo, String value)
 	{
-		Info info = new InfoCashLine (frame, false, WindowNo, value,
-			false, "");
+		Info info = new InfoCashLine (frame, false, WindowNo, 0, value,
+			false, false, "");
 		AEnv.showCenterWindow(frame, info);
 	}   //  showCashLine
 
@@ -262,8 +306,8 @@
 	 */
 	public static void showAssignment (Frame frame, int WindowNo, String value)
 	{
-		Info info = new InfoAssignment (frame, false, WindowNo, value,
-			false, "");
+		Info info = new InfoAssignment (frame, false, WindowNo, 0, value,
+			false, false, "");
 		AEnv.showCenterWindow(frame, info);
 	}   //  showAssignment
 
@@ -273,6 +317,7 @@
 
 	protected final int        INFO_WIDTH = screensize.width > 1500 ? 1500 : screensize.width - 100;
 	protected final int        SCREEN_HEIGHT = screensize.height;
+
 	
 	/**************************************************************************
 	 *	Detail Constructor
@@ -281,26 +326,39 @@
 	 *  @param WindowNo window no
 	 *  @param tableName table name
 	 *  @param keyColumn key column name
+	 *  @param saveResults flag if the results will be saved in context
 	 *  @param multiSelection multiple selection
 	 *  @param whereClause where clause
 	 */
 	protected Info (Frame frame, boolean modal, int WindowNo,
 		String tableName, String keyColumn,
-		boolean multiSelection, String whereClause)
+		boolean multiSelection, boolean saveResults, String whereClause)
 	{
+
 		super (frame, modal);
 		log.info("WinNo=" + p_WindowNo + " " + whereClause);
-		p_WindowNo = WindowNo;
+		p_saveResults = saveResults;
 		p_tableName = tableName;
 		p_keyColumn = keyColumn;
-		p_multiSelection = multiSelection;
+		p_table.setMultiSelection(multiSelection);
+		p_WindowNo = WindowNo;
+		//
+		Class<?> frameClass = frame.getClass();
+		if (frameClass == AWindow.class)
+		{
+			//  Activated from a window - find the active tab to limit the context
+			p_TabNo = ((AWindow) frame).getAPanel().getCurrentTab().getTabNo();
+		}
+		//
 		if (whereClause == null || whereClause.indexOf('@') == -1)
-			p_whereClause = whereClause;
+			setWhereClause(whereClause);
 		else
 		{
-			p_whereClause = Env.parseContext(Env.getCtx(), p_WindowNo, whereClause, false, false);
-			if (p_whereClause.length() == 0)
+			String tempClause = "";
+			tempClause = Env.parseContext(Env.getCtx(), p_WindowNo, whereClause, false, false);
+			if (tempClause.length() == 0)
 				log.log(Level.SEVERE, "Cannot parse context= " + whereClause);
+			setWhereClause(tempClause);
 		}
 
 		try
@@ -313,41 +371,58 @@
 		}
 	}	//	Info
 
+	private static String SYSCONFIG_INFO_AUTO_WILDCARD = "INFO_AUTO_WILDCARD";
+	private static String SYSCONFIG_INFO_AUTO_QUERY = "INFO_AUTO_QUERY";
 
 	/** Master (owning) Window  */
 	protected int				p_WindowNo;
+	/** Tab No to limit context */
+	protected int				p_TabNo;
 	/** Table Name              */
 	protected String            p_tableName;
 	/** Key Column Name         */
 	protected String            p_keyColumn;
-	/** Enable more than one selection  */
-	protected boolean			p_multiSelection;
-	/** Specify if the records should be checked(selected) by default (multi selection mode only) */
-	private boolean				p_isDefaultSelected = MSysConfig.getBooleanValue(SYSCONFIG_INFO_DEFAULTSELECTED, false, Env.getAD_Client_ID(Env.getCtx()));
-	/** True if double click on a row toggles if row is selected (multi selection mode only) */
-	private boolean				p_doubleClickTogglesSelection = MSysConfig.getBooleanValue(SYSCONFIG_INFO_DOUBLECLICKTOGGLESSELECTION, false, Env.getAD_Client_ID(Env.getCtx()));
 	/** Initial WHERE Clause    */
 	protected String			p_whereClause = "";
+	/** Will the results of the search be saved?	*/
+	protected boolean 			p_saveResults = true;
+	/** Does the layout need to be rebuilt. True by default (1st time always) */
+	protected boolean 			p_resetColumns = true;
+	boolean p_triggerRefresh = false;
+	boolean p_refreshNow = false;
+	
+	/** Table                   */
+	protected MiniTable         p_table = new MiniTable(); //  p_table
+	/** Tracking for previously selected record				*/
+	protected int 				p_selectedRecordKey = 0;
 
-	/** Table                   */
-	protected MiniTable         p_table = new MiniTable();
-	/** Model Index of Key Column   */
-	private int                 m_keyColumnIndex = -1;
 	/** OK pressed                  */
 	private boolean			    m_ok = false;
 	/** Cancel pressed - need to differentiate between OK - Cancel - Exit	*/
 	private boolean			    m_cancel = false;
+	/** Reset the record ID - false on load, reset by any action that reruns the query   */
+	protected boolean				m_resetRecordID = false;
 	/** Result IDs              */
 	private ArrayList<Integer>	m_results = new ArrayList<Integer>(3);
 
 	/** Layout of Grid          */
 	protected Info_Column[]     p_layout;
+	/** SQL FROM Clause          */
+	protected String		    p_sqlFrom;
+	/** SQL Where Clause          */
+	protected String		    p_sqlWhere;
+	/** SQL Where Clause          */
+	protected String		    p_sqlOrder;
 	/** Main SQL Statement      */
 	private String              m_sqlMain;
 	/** Count SQL Statement		*/
 	private String              m_sqlCount;
 	/** Order By Clause         */
 	private String              m_sqlOrder;
+	/** 
+	 *  Tracking the last list selection event
+	 */
+	ListSelectionEvent m_lse = new ListSelectionEvent(this, 0, 0, true);
 
 	/** Loading success indicator       */
 	protected boolean	        p_loadedOK = false;
@@ -358,23 +433,37 @@
 
 	/** Worker                  */
 	private Worker              m_worker = null;
+	/** Ignore events                  */
+	protected Boolean   		m_ignoreEvents = false;
 	
 	/**	Logger			*/
 	protected CLogger log = CLogger.getCLogger(getClass());
 
 	/** Static Layout           */
+	private CButton bReset = new CButton();
+	private VCheckBox checkAutoQuery = new VCheckBox();
 	private CPanel southPanel = new CPanel();
 	private BorderLayout southLayout = new BorderLayout();
 	ConfirmPanel confirmPanel = new ConfirmPanel(true, true, true, true, true, true, true);
-	//Begin - [FR 1823612 ] Product Info Screen Improvements
+
+	private CPanel buttonPanel = new CPanel();
+	protected CPanel p_criteriaGrid = new CPanel();
+
+	protected JXTaskPane p_detailTaskPane = new JXTaskPane();
 	protected CPanel addonPanel = new CPanel();
-	//End - [FR 1823612 ] Product Info Screen Improvements
 	protected StatusBar statusBar = new StatusBar();
 	protected CPanel parameterPanel = new CPanel();
 	private JScrollPane scrollPane = new JScrollPane();
 	//
 	private JPopupMenu popup = new JPopupMenu();
 	private CMenuItem calcMenu = new CMenuItem();
+	private CMenuItem zoomMenu = new CMenuItem();
+
+	protected Object m_heldLastFocus = null;
+	protected int m_leadSelection;
+	private int m_popupRow = -1;
+	private int m_popupColumn = -1;
+	protected Container m_parentPanel;
 
 	/**
 	 *	Static Init
@@ -382,16 +471,45 @@
 	 */
 	protected void jbInit() throws Exception
 	{
+		this.getContentPane().add(parameterPanel, BorderLayout.NORTH);
+		this.getContentPane().add(scrollPane, BorderLayout.CENTER);
+		this.getContentPane().add(southPanel, BorderLayout.SOUTH);
 		this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
+		//
+		AppsAction aa = new AppsAction (ConfirmPanel.A_RESET, null, "reset");
+		bReset = (CButton)aa.getButton();
+		bReset.setMargin(ConfirmPanel.s_insets);
+		bReset.setSize(bReset.getHeight(), bReset.getHeight());
+		Dimension bSize = bReset.getSize();
+		bSize.height = bReset.getHeight();
+		bSize.width = bReset.getHeight();
+		bReset.setMaximumSize(bSize);  // Make it square
+		bReset.addActionListener(this);
+		//
+		buttonPanel = new CPanel(new FlowLayout(FlowLayout.LEFT));
+		buttonPanel.add(bReset,FlowLayout.LEFT);
+		//
+		// p_criteriaGrid is filled by the subordinate class
+		p_criteriaGrid.setLayout(new ALayout());
+		//
+		parameterPanel.setLayout(new BorderLayout());
+		parameterPanel.add(buttonPanel, BorderLayout.WEST);
+		parameterPanel.add(p_criteriaGrid,BorderLayout.CENTER);
+		//
+		// Setup the detail panel if used
+		p_detailTaskPane.setVisible(false);
+        p_detailTaskPane.setCollapsed(true);
+        p_detailTaskPane.setLayout(new BorderLayout());
+        p_detailTaskPane.setUI(new AdempiereTaskPaneUI());
+        p_detailTaskPane.getContentPane().setBackground(new ColorUIResource(251,248,241));
+        p_detailTaskPane.getContentPane().setForeground(new ColorUIResource(251,0,0));
+        addonPanel.setLayout(new BorderLayout());
+        addonPanel.add(p_detailTaskPane, BorderLayout.CENTER); // Allow auto resizing of the panel
+
 		southPanel.setLayout(southLayout);
-		//Begin - [FR 1823612 ] Product Info Screen Improvements
 		southPanel.add(addonPanel, BorderLayout.NORTH);
-		//End - [FR 1823612 ] Product Info Screen Improvements
 		southPanel.add(confirmPanel, BorderLayout.CENTER);
 		southPanel.add(statusBar, BorderLayout.SOUTH);
-		getContentPane().add(southPanel, BorderLayout.SOUTH);
-		this.getContentPane().add(parameterPanel, BorderLayout.NORTH);
-		this.getContentPane().add(scrollPane, BorderLayout.CENTER);
 		scrollPane.getViewport().add(p_table, null);
 		//
 		confirmPanel.addActionListener(this);
@@ -399,17 +517,53 @@
 		confirmPanel.getCustomizeButton().setVisible(hasCustomize());
 		confirmPanel.getHistoryButton().setVisible(hasHistory());
 		confirmPanel.getZoomButton().setVisible(hasZoom());
+		confirmPanel.setOKVisible(p_saveResults);  //  Only show the OK button if we intend to save
 		//
 		JButton print = ConfirmPanel.createPrintButton(true);
 		print.addActionListener(this);
 		confirmPanel.addButton(print);
 		//
+		checkAutoQuery.setText(Msg.getMsg(Env.getCtx(), "AutoRefresh"));
+		checkAutoQuery.setToolTipText(Msg.getMsg(Env.getCtx(), "AutoRefresh"));
+		checkAutoQuery.setName("AutoQuery");
+		checkAutoQuery.setSelected(MSysConfig.getValue(SYSCONFIG_INFO_AUTO_QUERY,"Y",Env.getAD_Client_ID(Env.getCtx())).equals("Y"));  
+		checkAutoQuery.addActionListener(this);
+		CPanel leftButtons = (CPanel) confirmPanel.getComponent(1);  // Index 0 is OK-Cancel on the right
+		leftButtons.add(checkAutoQuery, 0); // Add the check box on the very left before the refresh icon
+		//
+		popup.add(zoomMenu);
+		zoomMenu.setText(Msg.getMsg(Env.getCtx(), "Zoom"));
+		zoomMenu.setIcon(new ImageIcon(org.compiere.Adempiere.class.getResource("images/Zoom16.gif")));
+		zoomMenu.addActionListener(this);
+		//
 		popup.add(calcMenu);
 		calcMenu.setText(Msg.getMsg(Env.getCtx(), "Calculator"));
 		calcMenu.setIcon(new ImageIcon(org.compiere.Adempiere.class.getResource("images/Calculator16.gif")));
 		calcMenu.addActionListener(this);
 		//
-		p_table.getSelectionModel().addListSelectionListener(this);
+		//  Table Selection (Invoked before setting column class so that row selection is enabled)
+		p_table.setKeyColumnIndex(-1);
+		p_table.setCellSelectionEnabled(false);
+		p_table.setColumnSelectionAllowed(false);
+		p_table.setRowSelectionAllowed(true);
+		//  Override the Enter key input and action map
+		if(p_saveResults)
+		{
+			p_table.getInputMap().put(KeyStroke.getKeyStroke("ENTER"), "doDispose");
+		}
+		else
+		{
+			p_table.getInputMap().put(KeyStroke.getKeyStroke("ENTER"), "doNothing");
+		}
+		p_table.getActionMap().put("doDispose", doDispose);
+		((ListSelectionModel) p_table.getSelectionModel()).addListSelectionListener(this); // To enable buttons
+		p_table.addMouseListener(this);
+		// Listen to changes in the table
+		p_table.addPropertyChangeListener("p_table_update", this);
+		((ListSelectionModel) p_table.getSelectionModel()).addListSelectionListener(this);
+		//
+		m_parentPanel = p_criteriaGrid;  //  Set default location where focus will go. See property change listener.
+		//
 		enableButtons();
 	}	//	jbInit
 
@@ -454,7 +608,33 @@
 	 */
 	protected void prepareTable (Info_Column[] layout, String from, String staticWhere, String orderBy)
 	{
+		if (p_table == null)
+			return;
+		
 		p_layout = layout;
+		
+		//  For dynamic columns, we need to wipe the table.
+		if (p_resetColumns)
+		{
+			//  First, stop auto-updates
+			boolean flag = p_table.getAutoCreateColumnsFromModel();
+			p_table.setAutoCreateColumnsFromModel(false);
+			p_table.setRowCount(0);
+			//  Wipe the columns
+			DefaultTableColumnModel tc = new DefaultTableColumnModel();
+			p_table.setColumnModel(tc);
+			//  Wipe the table data
+			DefaultTableModel tm = new DefaultTableModel();
+			p_table.setModel(tm);
+			//  Zero out the indexes
+			p_table.setColorColumn(0);
+			//  Re-establish the auto-updates
+			p_table.setAutoCreateColumnsFromModel(flag);
+			
+			//  Prevent repeats
+			p_resetColumns = false;
+		}
+		
 		StringBuffer sql = new StringBuffer ("SELECT ");
 		//  add columns & sql
 		for (int i = 0; i < layout.length; i++)
@@ -470,15 +650,9 @@
 			if (layout[i].isColorColumn())
 				p_table.setColorColumn(i);
 			if (layout[i].getColClass() == IDColumn.class)
-				m_keyColumnIndex = i;
+				p_table.setKeyColumnIndex(i);
 		}
-		
-		//  Table Selection (Invoked before setting column class so that row selection is enabled)
-		p_table.setRowSelectionAllowed(true);
-		p_table.addMouseListener(this);
-		p_table.setMultiSelection(p_multiSelection);
-		p_table.setShowTotals(true);
-		
+				
 		//  set editors (two steps)
 		for (int i = 0; i < layout.length; i++)
 			p_table.setColumnClass(i, layout[i].getColClass(), layout[i].isReadOnly(), layout[i].getColHeader());
@@ -493,7 +667,7 @@
 		if (orderBy != null && orderBy.length() > 0)
 			m_sqlOrder = " ORDER BY " + orderBy;
 
-		if (m_keyColumnIndex == -1)
+		if (p_table.getKeyColumnIndex() == -1)
 			log.log(Level.SEVERE, "No KeyColumn - " + sql);
 		
 		//  Window Sizing
@@ -512,6 +686,13 @@
 		//  ignore when running
 		if (m_worker != null && m_worker.isAlive())
 			return;
+
+		//  ignore if we`re about to be closed
+		if (m_ok)
+			return;
+		
+		//  Get ready
+		prepForRequery();
 		//
 		if (!testCount())
 			return;
@@ -585,7 +766,7 @@
 		}
 
 		//	Multi Selection
-		if (p_multiSelection)
+		if (p_table.isMultiSelection())
 		{
 			m_results.addAll(getSelectedRowKeys());
 		}
@@ -604,6 +785,7 @@
 		p_table = null;
 	}	//	saveSelection
 
+
 	/**
 	 *  Get the key of currently selected row
 	 *  @return selected key
@@ -630,12 +812,12 @@
     {
         ArrayList<Integer> selectedDataList = new ArrayList<Integer>();
         
-        if (m_keyColumnIndex == -1)
+        if (p_table.getKeyColumnIndex() == -1)
         {
             return selectedDataList;
         }
         
-        if (p_multiSelection)
+        if (p_table.isMultiSelection())
         {
         	int rows = p_table.getRowCount();
             for (int row = 0; row < rows; row++)
@@ -645,7 +827,7 @@
                 {
                 	continue;
                 }
-                Object data = p_table.getModel().getValueAt(row, m_keyColumnIndex);
+                Object data = p_table.getModel().getValueAt(row, p_table.getKeyColumnIndex());
                 if (data instanceof IDColumn)
                 {
                     IDColumn dataColumn = (IDColumn)data;
@@ -663,10 +845,14 @@
         
         if (selectedDataList.size() == 0)
         {
-        	int row = p_table.getSelectedRow();
-    		if (row != -1 && m_keyColumnIndex != -1)
+        	int row;
+        	if (p_table == null || p_table.getRowCount() <= 0) //  Trap NPE
+        		row = -1;
+    		else
+    			row = p_table.getSelectedRow();
+    		if (row != -1 && p_table.getKeyColumnIndex() != -1)
     		{
-    			Object data = p_table.getModel().getValueAt(row, m_keyColumnIndex);
+    			Object data = p_table.getModel().getValueAt(row, p_table.getKeyColumnIndex());
     			if (data instanceof IDColumn)
     				selectedDataList.add(((IDColumn)data).getRecord_ID());
     			if (data instanceof Integer)
@@ -700,7 +886,85 @@
 			return null;
 		return m_results.get(0);
 	}	//	getSelectedKey
+	
+	/**
+     *  Set the selected row to a particular key if found
+     *  @returns true if successful
+     */
+    protected boolean setSelectedRow(int record_id)
+    {
+    	// Is there a key column?
+        if (p_table.getKeyColumnIndex() == -1)
+        {
+            return false;
+        }
+        
+        if (p_table == null)
+        {
+        	return false;
+        }
+    	// If the query is empty, return
+        if (p_table.getRowCount() == 0)
+        {
+            return false;
+        }
 
+		if (p_table.isMultiSelection() && p_table.isDefaultSelected()) // Select all by default
+		{
+			return false; // All rows will be selected by default
+		}
+
+        if (record_id <= 0)
+        {
+        	//  Select the first record
+        	p_table.changeSelection(0,p_table.getKeyColumnIndex(), false, false);
+        	log.fine("Selected the first record shown");
+        	return true;
+        }
+        
+        //  Is the record already selected?
+        Integer selectedKey = (Integer) getSelectedKey();
+        if(selectedKey != null && selectedKey.intValue() == record_id)  //  We're already there
+        	return true;
+        
+        //  Nothing or the wrong row selected - try to find the record in the table
+    	int rows = p_table.getRowCount();
+    	
+    	//  Ignore the total row
+        if (p_table.getShowTotals())
+        	rows = rows - 1;
+
+    	for (int row = 0; row < rows; row++)
+        {
+            Object data = p_table.getModel().getValueAt(row, p_table.getKeyColumnIndex());
+            if (data instanceof IDColumn)
+            {
+                IDColumn dataColumn = (IDColumn)data;
+                if (dataColumn.getRecord_ID() == record_id)
+                {
+                	p_table.changeSelection(row,p_table.getKeyColumnIndex(), false, false);
+                	log.fine("Record_ID = " + record_id + " found at row " + row);
+                	return true;
+                }
+            }
+        }
+    	
+    	//  record_id not found in the current list.  Select the first shown.
+    	p_table.changeSelection(0,p_table.getKeyColumnIndex(), false, false);
+    	log.fine("Record_ID = " + record_id + " not found in the current table. Selecting the first record.");
+        return true;
+        
+    }   //  setSelectedRow
+
+	/**
+	 *	autoQuery?
+	 *	- yes if true
+	 *  @return true for automatic queries, else must refresh
+	 */
+	public boolean autoQuery()
+	{
+		return checkAutoQuery.isSelected();
+	}	//	autoQuery
 	/**
 	 *	Is cancelled?
 	 *	- if pressed Cancel = true
@@ -748,66 +1012,388 @@
 		return sb.toString();
 	}	//	getSelectedSQL;
 
+	/**
+	 *  Test SQL WHERE parameter for validity
+	 *  @param f CText field
+	 *  @return Upper case text with wild cards as configured
+	 */
+	public static boolean isValidSQLText (CTextField f)
+	{
+		if (f != null && f.getText() != null)
+			return isValidSQLText(f.getText());
+		return false;
+	}   //  isValidSQLText
+
+	/**
+	 *  Test SQL WHERE parameter for validity
+	 *  @param s string
+	 *  @return Upper case text with wild cards as configured
+	 */
+	public static boolean isValidSQLText (String s)
+	{
+		// Don't trap single "%".  These can be used to find
+		// all non-null values.
+		if (s.length() > 0)
+			return true;
+		return false;
+	}   //  isValidSQLText
+
+	/**
+	 *  Get SQL WHERE parameter
+	 *  @param f CText field
+	 *  @return Upper case text with wild cards as configured
+	 */
+	public static String getSQLText (CTextField f)
+	{
+		String s = f.getText();
+		return getSQLText(s);
+	}   //  getSQLText
+
+	/**
+	 *  Get SQL WHERE parameter
+	 *  @param s string
+	 *  @return Upper case text with wild cards as configured
+	 */
+	public static String getSQLText (String s)
+	{
+		s = s.toUpperCase();
+		
+		//  Check the configuration for the wild card pattern to apply
+		//  It can be "%*" for first-only, "*%" for last-only, "%*%" for both or "*" for none.
+		//  The pattern string must start and/or end with a "%" symbol.  The "*" symbol can be any string.
+		//  The default is last-only.  "%" or "%%" are valid and will be interpreted as both.
+		String wildCardPattern = MSysConfig.getValue(SYSCONFIG_INFO_AUTO_WILDCARD,"*%",Env.getAD_Client_ID(Env.getCtx()));
+		
+		if (wildCardPattern.startsWith("%"))
+		{
+			if (!s.startsWith("%"))
+				s = "%" + s;
+		}
+
+		if (wildCardPattern.endsWith("%"))
+		{
+			if (!s.endsWith("%"))
+				s += "%";
+		}
+		
+		// Need static logger
+		CLogger mlog = CLogger.get();
+		mlog.fine("String with wild cards: " + s);
+
+		return s;
+	}   //  getSQLText
+
+	/**
+	 * Property Change Listener for lookup fields
+	 * @param e event
+	 */
+	public void propertyChange(PropertyChangeEvent e)
+	{
+		// Respond to updates to the table
+		if (e.getPropertyName() == "p_table_update")
+		{
+			//  One query has been performed.  From now on, ignore the record_id and use the search criteria.
+			m_resetRecordID = true; //  A new record ID will be selected
+
+			//  Try to reselect the record
+			if(!setSelectedRow(p_selectedRecordKey))		
+			{
+				//  Nothing was selected, or the query is empty
+				noRecordSelected();
+			}
+			else  //  Found and selected the same record or selected the first record
+			{
+				recordSelected(p_table.getLeadRowKey());
+			}
+			
+			p_selectedRecordKey = 0;
+
+			//
+			int no = p_table.getRowCount();
+			setStatusLine(Integer.toString(no) + " " 
+				+ Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
+			setStatusDB(Integer.toString(no));
+
+			//  Return focus to where it is expected to be
+			m_parentPanel.requestFocus();
+			if (m_heldLastFocus instanceof CTextField)
+				((CTextField) m_heldLastFocus).requestFocus();
+			if (m_heldLastFocus instanceof VLookup)
+				((VLookup) m_heldLastFocus).requestFocus();
+			if (m_heldLastFocus instanceof VCheckBox)
+				((VCheckBox) m_heldLastFocus).requestFocus();
+			
+			enableButtons();
+		}
+	}
 	
+	/**
+	 * A record was selected - take action to sync subordinate tables if any
+	 * @param key of the selected record
+	 */
+	protected void recordSelected(int key)
+	{
+		return;
+	}
+	/**
+	 * No record was selected - take action to sync subordinate tables if any
+	 */
+	protected void noRecordSelected()
+	{
+		return;
+	}
+
 	/**************************************************************************
 	 *	(Button) Action Listener & Popup Menu
 	 *  @param e event
 	 */
 	public void actionPerformed(ActionEvent e)
 	{
-		//  Popup => Calculator
-		if (e.getSource().equals(calcMenu))
+		if(!p_loadedOK)
+			return;
+
+		String cmd = e.getActionCommand();
+		if (cmd.equals("CausedFocusEvent"))
 		{
-			BigDecimal number = null;
-			Object data = p_table.getSelectedValue();
-			try
+			return;
+		}
+		
+		Object source = null;
+		
+		if(e.getSource() != null)
+		{
+			source = e.getSource();
+			
+			//  Keep the focus on the source field if the table updates
+			m_heldLastFocus = this.getFocusOwner();
+
+			//  Popup => Calculator
+			if (source.equals(calcMenu))
 			{
-				if (data != null)
+				BigDecimal number = null;
+				if (m_popupRow >= 0 && m_popupColumn >= 0)
 				{
-					if (data instanceof BigDecimal)
-						number = (BigDecimal)data;
-					else
-						number = new BigDecimal(data.toString());
+					Object data = p_table.getValueAt(m_popupRow, m_popupColumn);
+					try
+					{
+						if (data != null)
+						{
+							if (data instanceof BigDecimal)
+								number = (BigDecimal)data;
+							else
+								number = new BigDecimal(data.toString());
+						}
+					}
+					catch (Exception ex) {}
+					Calculator c = new Calculator(null, number);
+					c.setVisible(true);
+				}
+				return;
+			}
+			//  Popup => zoom
+			else if (e.getSource().equals(zoomMenu))
+			{
+				if (m_popupRow >= 0 && m_popupColumn >= 0)
+				{
+					zoom(p_table.getRowKey(m_popupRow));
+				}
+				return;
+			}   //  zoom
+
+			else if (cmd.equals(ConfirmPanel.A_OK))
+			{
+				//  The enter key is mapped to the Ok button which will close the dialog.
+				//  Don't let this happen if there are outstanding changes to any of the 
+				//  VLookup fields in the criteria
+				if (hasOutstandingChanges())
+				{
+					return;
+				}
+				else
+				{
+					// We might close
+					p_triggerRefresh = false;
+				}
+			} 
+			else if (source instanceof VComboBox)
+			{
+				if (((VComboBox) source).getParent() instanceof VLookup)
+				{
+					source = ((VComboBox) source).getParent();
+					VLookup vl = ((VLookup)source);
+					m_heldLastFocus = vl;
+					
+					//  Discard changes from mouse movements and keyboard entries
+					//  Respond only to the Enter key which causes "comboBoxEdited"
+					//  VLookups trigger multiple events in search mode. Reject 
+					//  events that don't have changes from the last action.
+					if(cmd.equals("comboBoxChanged"))		
+					{
+						if (!vl.hasChanged())
+							return;
+						else
+							p_triggerRefresh = true;
+					}
+					else if(cmd.equals("comboBoxEdited"))
+					{
+						if (!vl.hasChanged() && !hasOutstandingChanges())
+						{
+							vl.requestFocus();
+							return;
+						}
+						p_triggerRefresh = true;						
+					}
 				}
 			}
-			catch (Exception ex) {}
-			Calculator c = new Calculator(null, number);
-			c.setVisible(true);
-			return;
-		}   //  popup
+			else if (source instanceof CTextField)
+			{
+				CTextField tf = ((CTextField) source);
 
-		//  Confirm Panel
-		String cmd = e.getActionCommand();
+				if (tf.getParent() instanceof VLookup)
+				{
+					// Ignore it.  User typed into the VLookup text field.
+					// Look for events form the VLookup VComboBox component
+					// instead.
+					return;
+				}
+				else if (tf.hasChanged() || hasOutstandingChanges())  //  The change may have come from another field
+				{
+					p_triggerRefresh = true;
+				}
+				else
+				{
+					// Special case where text fields don't change but cause an event
+					// Interpret this as a click of the OK button and close EXCEPT
+					// if the dialog was opened from a menu.
+					if (p_TabNo == 0)
+						return;
+					else
+						dispose(true);  //  Save the selection and close;
+				}
+			}
+			else if (e.getSource() instanceof VCheckBox)
+			{
+				//  Check box changes generally always cause a refresh
+				//  Capture changes that don't 
+				p_triggerRefresh = true;
+				
+				VCheckBox cb = (VCheckBox) e.getSource();
+				if (cb.getName().equals("AutoQuery"))
+				{
+					//  Only trigger a refresh if the check box is selected
+					if(!cb.isSelected())
+					{
+						return;
+					}
+				}
+			}
+
+			// Check if we need to reset the table.  The flag is reset when
+			// the table is reset.  The first change triggers the reset.
+			p_resetColumns = p_resetColumns || columnIsDynamic(source);
+
+		} //  e.getSource() is null
+								
 		if (cmd.equals(ConfirmPanel.A_OK))
 		{
-			dispose(true);
+			dispose(p_saveResults);
 		}
 		else if (cmd.equals(ConfirmPanel.A_CANCEL))
 		{
 			m_cancel = true;
 			dispose(false);
 		}
-		//
+		else if (cmd.equals(ConfirmPanel.A_REFRESH))
+		{
+			//  Refresh always causes a requery in case there are
+			//  changes to the underlying tables - even if the 
+			//  criteria haven't changed.
+			p_resetColumns = true;
+			p_triggerRefresh = true;
+			p_refreshNow = true;
+		}
 		else if (cmd.equals(ConfirmPanel.A_HISTORY))
-			showHistory();
+			showHistory(p_table.getLeadRowKey());
 		else if (cmd.equals(ConfirmPanel.A_CUSTOMIZE))
 			customize();
 		else if (cmd.equals(ConfirmPanel.A_ZOOM))
-			zoom();
+			zoom(p_table.getLeadRowKey());
 		else if (cmd.equals(ConfirmPanel.A_RESET))
-			doReset();
+		{
+			//  Go back to the defaults
+			p_loadedOK = false;  // Prevent other actions
+			initInfo();
+			p_loadedOK = true;
+			//
+			p_resetColumns = true;
+			p_triggerRefresh = true;
+		}
 		else if (cmd.equals(ConfirmPanel.A_PRINT))
 			PrintScreenPainter.printScreen(this);
-		//	Default
-		else
+		
+        // Refresh if the autoquery feature is selected or the refresh button is clicked.
+		if (p_triggerRefresh && (p_refreshNow || autoQuery()))
+		{
+			//  Something changed so save the state and prepare for the query
 			executeQuery();
+		}
+		
+		//  Reset the flags
+		p_triggerRefresh = false;
+    	p_refreshNow = false;
+
 	}	//	actionPerformed
 
 	/**
+	 * Prepare for Requery of the table.  If dynamic changes are pending, prepare the table.
+	 */
+	protected void prepForRequery()
+	{
+		// Capture the state
+		setFieldOldValues();
+		//  Find what is currently selected
+		//  Re-selection of the column happens in the propertyChange listener
+		Integer selectedKey = (Integer) getSelectedRowKey();
+        if(selectedKey != null && selectedKey.intValue() != 0)
+        	this.p_selectedRecordKey = selectedKey.intValue();  
+		//
+		if (this.p_resetColumns)  //  Reset the table
+		{
+			prepareTable(getTableLayout(),
+					getFromClause(),
+					getWhereClause(),
+					getOrderClause());
+			this.p_table.setShowTotals(getShowTotals());
+			p_resetColumns = false;
+		}
+	}
+	
+	/**************************************************************************
+	 *  Table Selection Changed
+	 *  @param e event
+	 */
+	public void valueChanged(ListSelectionEvent lse)
+	{
+		// ValueChanged triggered by count can be ignored.  Event is fired in the info worker run()
+		// when the table is cleared.
+		if (m_ignoreEvents || p_table.getRowCount() == 0)
+			return;
+		
+		//  Mouse events cause duplicate firings of the valueChanged event.  Trap the duplicate.
+		if (m_lse.equals(lse))
+			return;
+		m_lse = lse;
+		//
+		recordSelected(p_table.getLeadRowKey());
+		enableButtons();		
+	}   //  ValueChanged
+
+	/**
 	 *	Zoom to target
 	 *  @param AD_Window_ID window id
 	 *  @param zoomQuery zoom query
 	 */
+	@SuppressWarnings("deprecation")
 	protected void zoom (int AD_Window_ID, MQuery zoomQuery)
 	{
 		setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
@@ -868,6 +1454,7 @@
 		}
 		m_worker = null;
 		//
+		p_loadedOK = false; // In case there are other events in the queue.
 		saveSelection();
 		removeAll();
 		super.dispose();
@@ -892,32 +1479,30 @@
 	}   //  getKeyColumn
 
 	
-	/**************************************************************************
-	 *  Table Selection Changed
-	 *  @param e event
-	 */
-	public void valueChanged(ListSelectionEvent e)
-	{
-		if (e.getValueIsAdjusting())
-			return;
-		enableButtons();
-	}   //  calueChanged
-
 	/**
 	 *  Enable OK, History, Zoom if row/s selected
      *  ---
-     *  Changes: Changed the logic for accomodating multiple selection
+     *  Changes: Changed the logic for accommodating multiple selection
      *  @author ashley
 	 */
 	protected void enableButtons ()
 	{
-		boolean enable = (p_table.getSelectedRowCount() == 1);
-		confirmPanel.getOKButton().setEnabled(p_table.getSelectedRowCount() > 0);
+		boolean enable = false;
+		try
+		{
+			enable = (p_table.getLeadRowKey()>0);
+		}
+		catch (Exception e) {}
+		
+		confirmPanel.getOKButton().setEnabled(p_saveResults && p_table.getSelectedRowCount() > 0);
 		
 		if (hasHistory())
 			confirmPanel.getHistoryButton().setEnabled(enable);
 		if (hasZoom())
+		{
 			confirmPanel.getZoomButton().setEnabled(enable);
+			zoomMenu.setEnabled(enable);
+		}	
 	}   //  enableButtons
 
 	
@@ -938,6 +1523,7 @@
 	protected abstract void setParameters (PreparedStatement pstmt, boolean forCount) 
 		throws SQLException;
 
+	
 	/**
 	 *  Reset Parameters
 	 *	To be overwritten by concrete classes
@@ -953,7 +1539,7 @@
 	 *  History dialog
 	 *	To be overwritten by concrete classes
 	 */
-	protected void showHistory()					{}
+	protected void showHistory(int record_id)					{}
 	/**
 	 *  Has History (false)
 	 *	To be overwritten by concrete classes
@@ -974,14 +1560,16 @@
 	/**
 	 *  Zoom action
 	 *	To be overwritten by concrete classes
+	 *  @param record ID to zoom to
 	 */
-	protected void zoom()							{}
+	protected void zoom(int record_id)							{}
 	/**
 	 *  Has Zoom (false)
 	 *	To be overwritten by concrete classes
 	 *  @return true if it has zoom (default false)
 	 */
 	protected boolean hasZoom()					{return false;}
+	
 	/**
 	 *  Save Selection Details
 	 *	To be overwritten by concrete classes
@@ -1029,68 +1617,51 @@
 		return m_SO_Window_ID;
 	}	//	getAD_Window_ID
 	
-	/**
-	 * 
-	 * @return Index of Key Column
-	 */
-	protected int getKeyColumnIndex()
-	{
-		return m_keyColumnIndex;
-	}
 	
 	/**
 	 * 
 	 * @return true if OK button was pressed
 	 */
-	public boolean isOkPressed()
+	public boolean isOk()
 	{
 		return m_ok;
 	}
+		
 	
 	/**
-	 * 
-	 * @return true if Cancel button was pressed
+	 * Reset the record id
 	 */
-	public boolean isCancelPressed()
+	public boolean isResetRecordID()
 	{
-		return m_cancel;
+		return m_resetRecordID;
 	}
 	
 	/**
-	 * Specify if the records should be checked(selected) by default.
-	 * (for multi-selection only)
-	 * @param value
+	 * Test the object for existence and valid data 
+	 * @param o - one of a VLookup, VAttributeInstance
+	 * @return
 	 */
-	public void setDefaultSelected(boolean value)
+	public boolean isValidVObject(Object o)
 	{
-		p_isDefaultSelected = value;
-	}
-	
-	/**
-	 * (for multi-selection only)
-	 * @return true if records are selected by default
-	 */
-	public boolean isDefaultSelected()
-	{
-		return p_isDefaultSelected;
-	}
-	
-	/**
-	 * (for multi-selection only)
-	 * @param value true if double click should toggle record selection
-	 */
-	public void setDoubleClickTogglesSelection(boolean value)
-	{
-		p_doubleClickTogglesSelection = value;
-	}
-	
-	/**
-	 * (for multi-selection only)
-	 * @return true if double click should toggle record selection
-	 */
-	public boolean isDoubleClickTogglesSelection()
-	{
-		return p_doubleClickTogglesSelection;
+		if (o != null)
+		{
+			try 
+			{
+				if (o instanceof VLookup)
+				{
+					return 	(((VLookup) o).getValue() != null && ((Integer)((VLookup) o).getValue()).intValue() != 0);
+				}
+				else if (o instanceof VPAttribute)
+				{
+					return 	(((VPAttribute) o).getValue() != null && ((Integer)((VPAttribute) o).getValue()).intValue() != 0);
+				}
+			}
+			catch(ClassCastException e)
+			{
+				return false;
+			}
+		}
+		return false;
 	}
 
 
@@ -1099,39 +1670,68 @@
 	 *  @param e event
 	 */
 	public void mouseClicked(MouseEvent e)
-	{
-	//	log.fine( "Info.mouseClicked",
-	//		"ClickCount=" + e.getClickCount() + ", Right=" + SwingUtilities.isRightMouseButton(e)
-	//		+ ", r=" + m_table.getSelectedRow() + ", c=" + m_table.getSelectedColumn());
+	{		
+		//  If we want to save results, double click in a row will cause save and exit
+		//  The miniTable class will trap double clicks when multiselection is enabled
+		//  and the configuration is set to toggle the selection on double clicks
+		if (p_saveResults && e.getID() == MouseEvent.MOUSE_CLICKED && e.getClickCount() > 1 && p_table.getSelectedRow() != -1)
+		{
+			dispose(p_saveResults);
+		}
 
-		//  Double click with selected row => exit/zoom
-		if (e.getClickCount() > 1 && p_table.getSelectedRow() != -1)
-		{
-			if (p_multiSelection && isDoubleClickTogglesSelection())
-			{
-				if (m_keyColumnIndex >= 0)
-				{
-					Object data = p_table.getValueAt(p_table.getSelectedRow(), m_keyColumnIndex);
-					if (data instanceof IDColumn)
-					{
-						IDColumn id = (IDColumn)data;
-						id.setSelected(!id.isSelected());
-						p_table.setValueAt(data, p_table.getSelectedRow(), m_keyColumnIndex);
-					}
-				}
-			}
-			else
-				dispose(true);
-		}
-		//  Right Click => start Calculator
-		else if (SwingUtilities.isRightMouseButton(e))
-		{
-			popup.show(e.getComponent(), e.getX(), e.getY());
-		}
 	}   //  mouseClicked
 
+	/**
+	 *  Mouse Pressed
+	 *  @param e event
+	 */
+	public void mousePressed(MouseEvent e)
+	{		
+		//  Has a popup trigger occurred? Need to test both pressed and released for cross-platform
+		//  compatibility
+		if (e.isPopupTrigger())
+		{
+			if (e.getSource().equals(p_table))
+			{
+				m_popupRow = p_table.rowAtPoint(e.getPoint());
+				m_popupColumn = p_table.columnAtPoint(e.getPoint());
+				popup.show(e.getComponent(), e.getX(), e.getY());
+			}
+			return;
+		}
+	}
+	
+	/**
+	 *  Mouse Released
+	 *  @param e event
+	 */
+	public void mouseReleased(MouseEvent e)
+	{		
+		//  Has a popup trigger occurred? Need to test both pressed and released for cross-platform
+		//  compatibility
+		if (e.isPopupTrigger())
+		{
+			if (e.getSource().equals(p_table))
+			{
+				m_popupRow = p_table.rowAtPoint(e.getPoint());
+				m_popupColumn = p_table.columnAtPoint(e.getPoint());
+				popup.show(e.getComponent(), e.getX(), e.getY());
+			}
+			return;
+		}
+	}
 
-	/**
+    private Action doDispose = new AbstractAction() {
+		private static final long serialVersionUID = 1L;
+
+		public void actionPerformed(ActionEvent e) {
+			dispose(p_saveResults);
+        }
+    };
+	private boolean m_showTotals;
+
+
+    /**
 	 *  Worker
 	 */
 	class Worker extends Thread
@@ -1139,15 +1739,25 @@
 		private PreparedStatement m_pstmt = null;
 		private ResultSet m_rs = null;
 		
+		public Worker()
+		{
+			// Basic constructor
+		}
+		
 		/**
 		 *  Do Work (load data)
 		 */
 		public void run()
 		{
+			if(p_table == null)
+				return;
+
 		//	setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
 		//	setStatusLine(Msg.getMsg(Env.getCtx(), "StartSearch"), false);
-			long start = System.currentTimeMillis();
-
+			long start = System.currentTimeMillis();			
+			
+			// Try to prevent unnecessary activity.
+			m_ignoreEvents = true;
 			//  Clear Table
 			p_table.setRowCount(0);
 			//
@@ -1186,8 +1796,21 @@
 						if (c == IDColumn.class)
 						{
 							data = new IDColumn(m_rs.getInt(colIndex));
-							if (p_multiSelection)
-								((IDColumn)data).setSelected(isDefaultSelected());
+							
+							//  Selection
+							((IDColumn)data).setSelected(false); // Default
+							if (p_table.isMultiSelection())  // Multiple rows can be selected
+							{
+								if (p_table.isDefaultSelected()) // Select all by default
+								{
+									p_table.changeSelection(row, 0, false, (row != 0));  // Anchor at the first row, extend to all others
+								}
+								else
+								{
+									//  Default to no selection
+									p_table.clearSelection();
+								}
+							}
 						}
 						else if (c == Boolean.class)
 							data = new Boolean("Y".equals(m_rs.getString(colIndex)));
@@ -1209,9 +1832,17 @@
 						else
 							data = m_rs.getString(colIndex);
 						//  store
-						p_table.setValueAt(data, row, col);
-					//	log.fine( "r=" + row + ", c=" + col + " " + m_layout[col].getColHeader(),
-					//  	"data=" + data.toString() + " " + data.getClass().getName() + " * " + m_table.getCellRenderer(row, col));
+						/*
+					 	if (data != null)
+						 
+							log.fine( "r=" + row + ", c=" + col + " " + p_layout[col].getColHeader() + 
+									" data=" + data.toString() + " " + data.getClass().getName() + " * " + p_table.getCellRenderer(row, col));
+						else
+							log.fine( "r=" + row + ", c=" + col + " " + p_layout[col].getColHeader() + 
+									" data=" + null + " String * " + p_table.getCellRenderer(row, col));
+						*/
+							
+						p_table.setValueAt(data, p_table.convertRowIndexToView(row), p_table.convertColumnIndexToView(col));
 					}
 				}
 			}
@@ -1234,9 +1865,16 @@
 				log.fine(dataSql);
 			else
 			{
-				p_table.getSelectionModel().setSelectionInterval(0, 0);
+				if(!p_table.isMultiSelection())
+					p_table.getSelectionModel().setSelectionInterval(0, 0); // Select the first row only.
 				p_table.requestFocus();
 			}
+			p_table.matchCheckWithSelectedRows();
+			p_table.clearSelection();
+			p_table.getSelectionModel().setSelectionInterval(0, 0);
+			p_table.getSelectionModel().setLeadSelectionIndex(0);
+			m_ignoreEvents = false;
+			p_table.firePropertyChange("p_table_update", 0, 1);  // Inform the subclass of the change
 		}   //  run
 		
 		/**
@@ -1265,4 +1903,131 @@
 		}
 	}   //  Worker
 
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		//  fieldValue.set_oldValue();
+		return;
+	}
+
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?  Override with specific tests.
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
+	{
+		return false;
+	}
+	
+	/**
+	 *  Clear all fields and set default values in check boxes
+	 */
+	protected void clearParameters()
+	{
+		return;
+	}
+
+	/**
+	 * Generic init call invoked by the event handler to reset the criteria panel.  
+	 * Used to call class specific initInfo function with reset parameters.
+	 */
+	protected void initInfo ()
+	{
+		clearParameters();
+		initInfo(0,"");
+	}
+
+	/**
+	 *	Dynamic Init
+	 *  @param record_id The ID of the record to display or zero
+	 *  @param value value 
+	 */
+	protected void initInfo(int record_id, String value)
+	{
+		return;
+	}
+
+	/**
+	 * Determine if the column causes dynamic changes in the table layout
+	 * @param o
+	 * @return true if changes result
+	 */
+	protected boolean columnIsDynamic(Object o)
+	{
+		return false;
+	}
+
+	protected void setShowTotals(boolean showTotals)
+	{
+		m_showTotals = showTotals;
+	}
+
+	protected boolean getShowTotals()
+	{
+		return m_showTotals;
+	}
+
+	/**
+	 * @return the p_layout
+	 */
+	protected Info_Column[] getTableLayout() {
+		return p_layout;
+	}
+
+	/**
+	 * @param p_layout the p_layout to set
+	 */
+	protected void setTableLayout(Info_Column[] p_layout) {
+		this.p_layout = p_layout;
+	}
+
+	/**
+	 * @return the p_sqlFrom
+	 */
+	protected String getFromClause() {
+		return p_sqlFrom;
+	}
+
+	/**
+	 * @param from the p_sqlFrom to set
+	 */
+	protected void setFromClause(String from) {
+		p_sqlFrom = from;
+	}
+
+	/**
+	 * @return the p_sqlWhere
+	 */
+	protected String getWhereClause() {
+		return p_whereClause;
+	}
+
+	/**
+	 * @param where the p_sqlWhere to set
+	 */
+	protected void setWhereClause(String where) {
+		p_whereClause = where;
+	}
+
+	/**
+	 * @return the p_sqlOrder
+	 */
+	protected String getOrderClause() {
+		return p_sqlOrder;
+	}
+
+	/**
+	 * @param order the p_sqlOrder to set
+	 */
+	protected void setOrderClause(String order) {
+		p_sqlOrder = order;
+	}
+	
+	protected boolean isMultipleResults() {
+		return m_results.size() > 1;
+	}
 }	//	Info
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/InfoAsset.java
--- a/client/src/org/compiere/apps/search/InfoAsset.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/InfoAsset.java	Mon Feb 10 21:08:53 2014 -0500
@@ -23,10 +23,11 @@
 
 import org.adempiere.plaf.AdempierePLAF;
 import org.compiere.apps.AEnv;
-import org.compiere.apps.ALayout;
 import org.compiere.apps.ALayoutConstraint;
 import org.compiere.grid.ed.VLookup;
 import org.compiere.minigrid.IDColumn;
+import org.compiere.model.MAsset;
+import org.compiere.model.MColumn;
 import org.compiere.model.MLookupFactory;
 import org.compiere.model.MQuery;
 import org.compiere.swing.CLabel;
@@ -40,6 +41,10 @@
  *	
  *  @author Jorg Janke
  *  @version $Id: InfoAsset.java,v 1.2 2006/07/30 00:51:27 jjanke Exp $
+ *
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class InfoAsset extends Info
 {
@@ -59,38 +64,68 @@
 	 * @param multiSelection multiple selections
 	 * @param whereClause where clause
 	 */
+	@Deprecated
 	public InfoAsset (Frame frame, boolean modal, int WindowNo,
 		int A_Asset_ID, String value,
 		boolean multiSelection, String whereClause)
 	{
-		super (frame, modal, WindowNo, "a", "A_Asset_ID", multiSelection, whereClause);
-		log.info(value + ", ID=" + A_Asset_ID + ", WHERE=" + whereClause);
+		this(frame, modal, WindowNo,
+				0, value,
+				multiSelection, true, whereClause);
+	}
+	
+	/**
+	 *	Standard Constructor
+
+	 * @param frame frame
+	 * @param modal modal
+	 * @param WindowNo window no
+	 * @param record_id The record ID to find
+	 * @param value query value to find, exclusive of record_id
+	 * @param multiSelection multiple selections
+	 * @param saveResults  True if results will be saved, false for info only
+	 * @param whereClause where clause
+	 */
+	public InfoAsset (Frame frame, boolean modal, int WindowNo,
+		int record_id, String value,
+		boolean multiSelection, boolean saveResults, String whereClause)
+	{
+		super (frame, modal, WindowNo, "a", "A_Asset_ID", multiSelection, saveResults, whereClause);
+		log.info(value + ", ID=" + record_id + ", WHERE=" + whereClause);
 		setTitle(Msg.getMsg(Env.getCtx(), "InfoAsset"));
 		//
+		StringBuffer where = new StringBuffer();
+		where.append("a.IsActive='Y'");
+		if (whereClause != null && whereClause.length() > 0)
+			where.append(" AND ").append(whereClause);
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause("a.Value");
+		//
 		statInit();
-		initInfo (value, A_Asset_ID, whereClause);
-		//
-		int no = p_table.getRowCount();
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
+		initInfo (record_id, value);
+
+		//  To get the focus after the table update
+		m_heldLastFocus = fieldValue;
+		
 		//	AutoQuery
-		if (value != null && value.length() > 0)
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
 			executeQuery();
+		
 		p_loadedOK = true;
-		//	Focus
-	//	fieldValue.requestFocus();
 
 		AEnv.positionCenterWindow(frame, this);
 	}	//	InfoProduct
 
 	/** From Clause             */
-	private static String s_assetFROM = "A_ASSET a"
+	private static String s_From = "A_ASSET a"
 		+ " LEFT OUTER JOIN M_Product p ON (a.M_Product_ID=p.M_Product_ID)"
 		+ " LEFT OUTER JOIN C_BPartner bp ON (a.C_BPartner_ID=bp.C_BPartner_ID)"
 		+ " LEFT OUTER JOIN AD_User u ON (a.AD_User_ID=u.AD_User_ID)";
 
 	/**  Array of Column Info    */
-	private static final Info_Column[] s_assetLayout = {
+	private static final Info_Column[] s_Layout = {
 		new Info_Column(" ", "a.A_Asset_ID", IDColumn.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "Value"), "a.Value", String.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "Name"), "a.Name", String.class),
@@ -103,6 +138,7 @@
 	};
 	
 	//
+	private int fieldID = 0;
 	private CLabel labelValue = new CLabel();
 	private CTextField fieldValue = new CTextField(10);
 	private CLabel labelName = new CLabel();
@@ -126,50 +162,73 @@
 		fieldName.addActionListener(this);
 		//	From A_Asset.
 		fBPartner_ID = new VLookup("C_BPartner_ID", false, false, true,
-			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 8065, DisplayType.Search));
+			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+					MColumn.getColumn_ID(MAsset.Table_Name, MAsset.COLUMNNAME_C_BPartner_ID), 
+					DisplayType.Search));
 		lBPartner_ID.setLabelFor(fBPartner_ID);
 		fBPartner_ID.setBackground(AdempierePLAF.getInfoBackground());
 		fProduct_ID = new VLookup("M_Product_ID", false, false, true,
-			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 8047, DisplayType.Search));
+			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+					MColumn.getColumn_ID(MAsset.Table_Name, MAsset.COLUMNNAME_M_Product_ID), 
+					DisplayType.Search));
 		lProduct_ID.setLabelFor(fProduct_ID);
 		fProduct_ID.setBackground(AdempierePLAF.getInfoBackground());
 		//
-		parameterPanel.setLayout(new ALayout());
-		//
-		parameterPanel.add(labelValue, new ALayoutConstraint(0,0));
-		parameterPanel.add(fieldValue, null);
-		parameterPanel.add(lBPartner_ID, null);
-		parameterPanel.add(fBPartner_ID, null);
+		p_criteriaGrid.add(labelValue, new ALayoutConstraint(0,0));
+		p_criteriaGrid.add(fieldValue, null);
+		p_criteriaGrid.add(lBPartner_ID, null);
+		p_criteriaGrid.add(fBPartner_ID, null);
 		//		
-		parameterPanel.add(labelName, new ALayoutConstraint(1,0));
-		parameterPanel.add(fieldName, null);
-		parameterPanel.add(lProduct_ID, null);
-		parameterPanel.add(fProduct_ID, null);
+		p_criteriaGrid.add(labelName, new ALayoutConstraint(1,0));
+		p_criteriaGrid.add(fieldName, null);
+		p_criteriaGrid.add(lProduct_ID, null);
+		p_criteriaGrid.add(fProduct_ID, null);
 	}	//	statInit
 
 	/**
 	 *	Dynamic Init
-	 *  @param value value
-	 *  @param whereClause where clause
 	 */
-	private void initInfo (String value, int A_Asset_ID, String whereClause)
+	protected void initInfo (int record_id, String value)
 	{
-		//	Create Grid
-		StringBuffer where = new StringBuffer();
-		where.append("a.IsActive='Y'");
-		if (whereClause != null && whereClause.length() > 0)
-			where.append(" AND ").append(whereClause);
-		//
-		prepareTable(s_assetLayout, s_assetFROM,
-			where.toString(),
-			"a.Value");
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
 
-		//  Set Value
-		if (value == null)
-			value = "%";
-		if (!value.endsWith("%"))
-			value += "%";
-		fieldValue.setText(value);
+		//  Set Value and boolean criteria (if any)
+		if (!(record_id == 0))
+		{
+			fieldID = record_id;
+		}
+		else
+		{	
+			// Use the value if any
+			if (value != null && value.length() > 0)
+			{
+				fieldValue.setText(value);
+			}
+			else
+			{
+				//  Try to find the context - A_Asset_ID
+	        	String aid = Env.getContext(Env.getCtx(), p_WindowNo, "A_Asset_ID");
+				if (aid != null && aid.length() != 0)
+				{
+					fieldID = new Integer(aid).intValue();
+				}
+				//  C_BPartner_ID
+				String bp = Env.getContext(Env.getCtx(), p_WindowNo, "C_BPartner_ID");
+				if (bp != null && bp.length() != 0)
+				{
+					fBPartner_ID.setValue(new Integer(bp).intValue());
+				}
+				//  M_Product_ID
+				String pid = Env.getContext(Env.getCtx(), p_WindowNo, "M_Product_ID");
+				if (pid != null && pid.length() != 0)
+				{
+					fProduct_ID.setValue(new Integer(pid).intValue());
+				}
+			}
+		}
 	}	//	initInfo
 
 	/*************************************************************************/
@@ -183,13 +242,16 @@
 	protected String getSQLWhere()
 	{
 		StringBuffer sql = new StringBuffer();
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if (!(fieldID == 0))
+			sql.append(" AND a.A_Asset_ID = ?");
 		//	=> Value
-		String value = fieldValue.getText().toUpperCase();
-		if (!(value.equals("") || value.equals("%")))
+		if (isValidSQLText(fieldValue))
 			sql.append(" AND UPPER(a.Value) LIKE ?");
 		//	=> Name
-		String name = fieldName.getText().toUpperCase();
-		if (!(name.equals("") || name.equals("%")))
+		if (isValidSQLText(fieldName))
 			sql.append (" AND UPPER(a.Name) LIKE ?");
 		//	C_BPartner_ID
 		Integer C_BPartner_ID = (Integer)fBPartner_ID.getValue();
@@ -214,23 +276,23 @@
 	protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
 	{
 		int index = 1;
+		//  => ID
+		if(!(fieldID ==0))
+		{
+			pstmt.setInt(index++, fieldID);
+			log.fine("Record_ID: " + fieldID);
+		}
 		//	=> Value
-		String value = fieldValue.getText().toUpperCase();
-		if (!(value.equals("") || value.equals("%")))
+		if (isValidSQLText(fieldValue))
 		{
-			if (!value.endsWith("%"))
-				value += "%";
-			pstmt.setString(index++, value);
-			log.fine("Value: " + value);
+			pstmt.setString(index++, getSQLText(fieldValue));
+			log.fine("Value: " + fieldValue.getText());
 		}
 		//	=> Name
-		String name = fieldName.getText().toUpperCase();
-		if (!(name.equals("") || name.equals("%")))
+		if (isValidSQLText(fieldName))
 		{
-			if (!name.endsWith("%"))
-				name += "%";
-			pstmt.setString(index++, name);
-			log.fine("Name: " + name);
+			pstmt.setString(index++, getSQLText(fieldName));
+			log.fine("Name: " + fieldName.getText());
 		}
 	}	//	setParameters
 
@@ -272,10 +334,10 @@
 	/**
 	 *	Zoom
 	 */
-	protected void zoom()
+	protected void zoom(int record_ID)
 	{
 		log.info( "InfoAsset.zoom");
-		Integer A_Asset_ID = getSelectedRowKey();
+		Integer A_Asset_ID = record_ID;
 		if (A_Asset_ID == null)
 			return;
 		MQuery query = new MQuery("A_Asset");
@@ -311,4 +373,42 @@
 		return false;	//	for now
 	}	//	hasCustomize
 
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
+	{
+		//  All the tracked fields
+		return(
+				fieldValue.hasChanged()	||
+				fieldName.hasChanged()	||
+				fProduct_ID.hasChanged()	||
+				fBPartner_ID.hasChanged());
+	}
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		fieldValue.set_oldValue();
+		fieldName.set_oldValue();
+		fProduct_ID.set_oldValue();
+		fBPartner_ID.set_oldValue();
+		return;
+	}
+	/**
+	 *  Clear all fields and set default values in check boxes
+	 */
+	protected void clearParameters()
+	{
+		//  Clear fields and set defaults
+		fieldValue.setText("");
+		fieldName.setText("");
+    	fProduct_ID.setValue(null);
+    	fBPartner_ID.setValue(null);
+	}
+
 }	//	InfoAsset
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/InfoAssignment.java
--- a/client/src/org/compiere/apps/search/InfoAssignment.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/InfoAssignment.java	Mon Feb 10 21:08:53 2014 -0500
@@ -21,7 +21,6 @@
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 import java.sql.Timestamp;
-import java.util.logging.Level;
 
 import org.compiere.apps.AEnv;
 import org.compiere.apps.ALayout;
@@ -29,9 +28,10 @@
 import org.compiere.grid.ed.VDate;
 import org.compiere.grid.ed.VLookup;
 import org.compiere.minigrid.IDColumn;
-import org.compiere.model.Lookup;
+import org.compiere.model.MColumn;
 import org.compiere.model.MLookupFactory;
-import org.compiere.swing.CButton;
+import org.compiere.model.MResource;
+import org.compiere.model.MResourceType;
 import org.compiere.swing.CLabel;
 import org.compiere.util.DB;
 import org.compiere.util.DisplayType;
@@ -40,10 +40,14 @@
 
 
 /**
- *  View Assignments and optionally create Resource Assigments
+ *  View Assignments and optionally create Resource Assignments
  *
  *  @author     Jorg Janke
  *  @version    $Id: InfoAssignment.java,v 1.2 2006/07/30 00:51:27 jjanke Exp $
+ *
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class InfoAssignment extends Info
 {
@@ -61,31 +65,58 @@
 	 *  @param multiSelection multiple selection
 	 *  @param whereClause where clause
 	 */
+	@Deprecated
 	public InfoAssignment (Frame frame, boolean modal, int WindowNo,
 		String value, boolean multiSelection, String whereClause)
 	{
+		this(frame, modal, WindowNo, 0,
+				value, multiSelection, true, whereClause);
+	}
+
+	/**
+	 *  Constructor
+	 *  @param frame frame
+	 *  @param modal modal
+	 *  @param WindowNo WindowNo
+	 *  @param record_id The record ID to find
+	 *  @param value query value to find, exclusive of record_id
+	 *  @param multiSelection multiple selection
+	 *  @param saveResults  True if results will be saved, false for info only
+	 *  @param whereClause where clause
+	 */
+	public InfoAssignment (Frame frame, boolean modal, int WindowNo, int record_id,
+		String value, boolean multiSelection, boolean saveResults, String whereClause)
+	{
 		super (frame, modal, WindowNo, "ra", "S_ResourceAssigment_ID",
-			multiSelection, whereClause);
+			multiSelection, saveResults, whereClause);
 		log.info(value);
 		setTitle(Msg.getMsg(Env.getCtx(), "InfoAssignment"));
 		//
-		if (!initLookups())
-			return;
+		StringBuffer where = new StringBuffer(s_Where);
+		if (whereClause != null && whereClause.length() > 0)
+			where.append(" AND ").append(whereClause);
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause(s_Order);
+		//
 		statInit();
-		initInfo (value, whereClause);
-		//
-		int no = p_table.getRowCount();
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
+		initInfo (record_id, value);
+
+		//  To get the focus after the table update
+		m_heldLastFocus = fieldResourceType;
+
 		//	AutoQuery
-	//	if (value != null && value.length() > 0)
-	//		executeQuery();
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
+			executeQuery();
+		
 		p_loadedOK = true;
 
 		AEnv.positionCenterWindow(frame, this);
 	}   //  InfoAssignment
 
 	//
+	private int fieldID = 0;
 	private CLabel	labelResourceType = new CLabel(Msg.translate(Env.getCtx(), "S_ResourceType_ID"));
 	private VLookup	fieldResourceType;
 	private CLabel	labelResource = new CLabel(Msg.translate(Env.getCtx(), "S_Resource_ID"));
@@ -94,32 +125,8 @@
 	private VDate	fieldFrom = new VDate(DisplayType.Date);
 	private CLabel	labelTo = new CLabel(Msg.translate(Env.getCtx(), "DateTo"));
 	private VDate	fieldTo = new VDate(DisplayType.Date);
-	private CButton bNew = new CButton();
+	//private CButton bNew = new CButton();
 
-	/**
-	 * 	Initialize Lookups
-	 * 	@return true if OK
-	 */
-	private boolean initLookups()
-	{
-		try
-		{
-			int AD_Column_ID = 6851;	//	S_Resource.S_ResourceType_ID
-			Lookup lookup = MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, AD_Column_ID, DisplayType.TableDir);
-			fieldResourceType = new VLookup ("S_ResourceType_ID", false, false, true, lookup);
-			AD_Column_ID = 6826;		//	S_ResourceAssignment.S_Resource_ID
-			lookup = MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, AD_Column_ID, DisplayType.TableDir);
-			fieldResource = new VLookup ("S_Resource_ID", false, false, true, lookup);
-		}
-		catch (Exception e)
-		{
-			log.log(Level.SEVERE, "InfoAssignment.initLookup");
-			return false;
-		}
-		//
-		bNew.setIcon(Env.getImageIcon("New16.gif"));
-		return true;
-	}	//	initLookups
 
 	/**
 	 *	Static Setup - add fields to parameterPanel.
@@ -129,20 +136,31 @@
 	 */
 	private void statInit()
 	{
-		parameterPanel.setLayout(new ALayout());
-		parameterPanel.add(labelResourceType, new ALayoutConstraint(0,0));
-		parameterPanel.add(labelResource, null);
-		parameterPanel.add(labelFrom, null);
-		parameterPanel.add(labelTo, null);
-	//	parameterPanel.add(labelPhone, null);
-	//	parameterPanel.add(checkFuzzy, null);
+		fieldResourceType = new VLookup ("S_ResourceType_ID", false, false, true, 
+				MLookupFactory.get(Env.getCtx(), p_WindowNo, 0, 
+						MColumn.getColumn_ID(MResourceType.Table_Name, MResourceType.COLUMNNAME_S_ResourceType_ID), 
+						DisplayType.TableDir)); 
+		fieldResourceType.addActionListener(this);
+		fieldResource = new VLookup ("S_Resource_ID", false, false, true, 				
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0,
+						MColumn.getColumn_ID(MResource.Table_Name, MResource.COLUMNNAME_S_Resource_ID), 
+						DisplayType.TableDir));
+		fieldResource.addActionListener(this);
 		//
-		parameterPanel.add(fieldResourceType, new ALayoutConstraint(1,0));
-		parameterPanel.add(fieldResource, null);
-		parameterPanel.add(fieldFrom, null);
-		parameterPanel.add(fieldTo, null);
-		parameterPanel.add(bNew, null);
-	//	parameterPanel.add(checkCustomer, null);
+		fieldFrom.addActionListener(this);
+		fieldTo.addActionListener(this);
+		//
+		p_criteriaGrid.setLayout(new ALayout());
+		p_criteriaGrid.add(labelResourceType, new ALayoutConstraint(0,0));
+		p_criteriaGrid.add(fieldResourceType, null);
+		p_criteriaGrid.add(labelResource, null);
+		p_criteriaGrid.add(fieldResource, null);
+		//
+		p_criteriaGrid.add(labelFrom, new ALayoutConstraint(1,0));
+		p_criteriaGrid.add(fieldFrom, null);
+		p_criteriaGrid.add(labelTo, null);
+		p_criteriaGrid.add(fieldTo, null);
+		//parameterPanel.add(bNew, null);
 	}	//	statInit
 
 	/**
@@ -155,14 +173,18 @@
 	 */
 
 	/** From Clause             */
-	private static String s_assignmentFROM =
+	private static String s_From =
 		"S_ResourceAssignment ra, S_ResourceType rt, S_Resource r, C_UOM uom";
-	private static String s_assignmentWHERE =
+	/** Where Clause             */
+	private static String s_Where =
 		"ra.IsActive='Y' AND ra.S_Resource_ID=r.S_Resource_ID "
 		+ "AND r.S_ResourceType_ID=rt.S_ResourceType_ID AND rt.C_UOM_ID=uom.C_UOM_ID";
+	/** Order Clause             */
+	private static String s_Order =
+		"rt.Name, r.Name";
 
 	/**  Array of Column Info    */
-	private static Info_Column[] s_assignmentLayout = {
+	private static Info_Column[] s_Layout = {
 		new Info_Column(" ", "ra.S_ResourceAssignment_ID", IDColumn.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "S_ResourceType_ID"), "rt.Name", String.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "S_Resource_ID"), "r.Name", String.class),
@@ -173,24 +195,59 @@
 		new Info_Column(Msg.translate(Env.getCtx(), "IsConfirmed"), "ra.IsConfirmed", Boolean.class)
 	};
 
-
 	/**
 	 *	Dynamic Init
-	 *  @param value value
-	 *  @param whereClause where clause
+	 *  @param record_id The ID of the record to display or zero
+	 *  @param value value 
 	 */
-	private void initInfo(String value, String whereClause)
+	protected void initInfo(int record_id, String value)
 	{
-		//  C_BPartner bp, AD_User c, C_BPartner_Location l, C_Location a
+		//
+		prepareTable(getTableLayout(),
+				getFromClause(),
+				getWhereClause(),
+				getOrderClause());
+		//
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
 
-		//	Create Grid
-		StringBuffer where = new StringBuffer(s_assignmentWHERE);
-		if (whereClause != null && whereClause.length() > 0)
-			where.append(" AND ").append(whereClause);
-		//
-		prepareTable(s_assignmentLayout, s_assignmentFROM,
-			where.toString(),
-			"rt.Name,r.Name,ra.AssignDateFrom");
+		if (!(record_id == 0))  // A record is defined
+        {
+        	fieldID = record_id;
+        }
+        else
+        {
+			if (value != null && value.length() > 0)
+			{
+				//	Nowhere to use the value in this info dialog
+			}
+			else
+			{
+				//  Try to find the fieldID from the context
+	        	String sra = Env.getContext(Env.getCtx(), p_WindowNo, "S_ResourceAssignment_ID");
+				if (sra != null && sra.length() != 0)
+				{
+					fieldID = new Integer(sra).intValue();
+				}
+				//  Find the criteria in the context
+				//  S_Resource_Type_ID
+	        	String srt = Env.getContext(Env.getCtx(), p_WindowNo, "S_ResourceType_ID");
+				if (srt != null && srt.length() > 0)
+				{
+		    			fieldResourceType.setValue(new Integer(srt));
+				}
+				//  S_Resource_ID
+	        	String sr = Env.getContext(Env.getCtx(), p_WindowNo, "S_Resource_ID");
+				if (sr != null && sr.length() > 0)
+				{
+		    			fieldResource.setValue(new Integer(sr));
+				}
+			}
+        }
+
+		
 	}	//	initInfo
 
 	/*************************************************************************/
@@ -218,6 +275,11 @@
 	protected String getSQLWhere()
 	{
 		StringBuffer sql = new StringBuffer();
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if(!(fieldID == 0))
+			sql.append(" AND ra.S_ResourceAssignment_ID=").append(fieldID);
 		//
 		Integer S_ResourceType_ID = (Integer)fieldResourceType.getValue();
 		if (S_ResourceType_ID != null)
@@ -249,65 +311,42 @@
 	}
 
 	/**
-	 *  History dialog
-	 *	To be overwritten by concrete classes
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
 	 */
-	protected void showHistory()
+	protected boolean hasOutstandingChanges()
 	{
+		//  All the tracked fields
+		return(
+				fieldFrom.hasChanged()	||
+				fieldResource.hasChanged()	||
+				fieldResourceType.hasChanged()	||
+				fieldTo.hasChanged());
 	}
-
 	/**
-	 *  Has History (false)
-	 *	To be overwritten by concrete classes
-	 *  @return true if it has history (default false)
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
 	 */
-	protected boolean hasHistory()
+	protected void setFieldOldValues()
 	{
-		return false;
+		fieldFrom.set_oldValue();
+		fieldResource.set_oldValue();
+		fieldResourceType.set_oldValue();
+		fieldTo.set_oldValue();
+		return;
 	}
-
 	/**
-	 *  Customize dialog
-	 *	To be overwritten by concrete classes
+	 *  Clear all fields and set default values in check boxes
 	 */
-	protected void customize()
+	protected void clearParameters()
 	{
-	}
-
-	/**
-	 *  Has Customize (false)
-	 *	To be overwritten by concrete classes
-	 *  @return true if it has customize (default false)
-	 */
-	protected boolean hasCustomize()
-	{
-		return false;
-	}
-
-	/**
-	 *  Zoom action
-	 *	To be overwritten by concrete classes
-	 */
-	protected void zoom()
-	{
-	}
-
-	/**
-	 *  Has Zoom (false)
-	 *	To be overwritten by concrete classes
-	 *  @return true if it has zoom (default false)
-	 */
-	protected boolean hasZoom()
-	{
-		return false;
-	}
-
-	/**
-	 *  Save Selection Details
-	 *	To be overwritten by concrete classes
-	 */
-	protected void saveSelectionDetail()
-	{
+		Object nullObject = null;
+		fieldFrom.setValue(nullObject);
+		fieldResource.setValue(nullObject);
+		fieldResourceType.setValue(nullObject);
+		fieldTo.setValue(nullObject);
+		return;
 	}
 
 }   //  InfoAssignment
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/InfoBPartner.java
--- a/client/src/org/compiere/apps/search/InfoBPartner.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/InfoBPartner.java	Mon Feb 10 21:08:53 2014 -0500
@@ -16,32 +16,53 @@
  *****************************************************************************/
 package org.compiere.apps.search;
 
+import java.awt.BorderLayout;
+import java.awt.Dimension;
 import java.awt.Frame;
+import java.awt.event.ActionListener;
+import java.beans.PropertyChangeListener;
 import java.math.BigDecimal;
 import java.sql.PreparedStatement;
+import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.ArrayList;
+import java.util.logging.Level;
+
+import javax.swing.JScrollPane;
+import javax.swing.SwingUtilities;
+import javax.swing.event.ListSelectionListener;
+import javax.swing.plaf.ColorUIResource;
 
 import org.adempiere.plaf.AdempierePLAF;
 import org.compiere.apps.AEnv;
-import org.compiere.apps.ALayout;
 import org.compiere.apps.ALayoutConstraint;
 import org.compiere.grid.ed.VCheckBox;
+import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
+import org.compiere.minigrid.MiniTable;
+import org.compiere.model.MLocation;
 import org.compiere.model.MQuery;
 import org.compiere.swing.CLabel;
+import org.compiere.swing.CPanel;
+import org.compiere.swing.CTabbedPane;
 import org.compiere.swing.CTextField;
+import org.compiere.util.DB;
 import org.compiere.util.Env;
 import org.compiere.util.KeyNamePair;
 import org.compiere.util.Msg;
+import org.compiere.util.Trx;
 
 /**
  *	Search Business Partner and return selection
  *
  * 	@author 	Jorg Janke
  * 	@version 	$Id: InfoBPartner.java,v 1.3 2006/07/30 00:51:27 jjanke Exp $
+ *
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
-public class InfoBPartner extends Info
+public class InfoBPartner extends Info implements PropertyChangeListener, ActionListener, ListSelectionListener
 {
 	/**
 	 * 
@@ -58,62 +79,90 @@
 	 *  @param multiSelection multiple selection
 	 *  @param whereClause where clause
 	 */
+	@Deprecated
 	public InfoBPartner(Frame frame, boolean modal, int WindowNo,
 		String value, boolean isSOTrx,
 		boolean multiSelection, String whereClause)
 	{
-		super (frame, modal, WindowNo, "C_BPartner", "C_BPartner_ID", multiSelection, whereClause);
-		log.info(value);
+		this(frame, modal, WindowNo, 0,
+				value, isSOTrx, true,
+				multiSelection, true, whereClause);
+	}
+	
+	/**
+	 *	Standard Constructor
+	 *  @param frame frame
+	 *  @param modal modal
+	 *  @param WindowNo WindowNo
+	 *  @param record_id  The record_id of the calling field
+	 *  @param  value   Query value Name or Value if contains numbers
+	 *  @param isSOTrx  if false, query vendors only
+	 *  @param isSOMatch true if the record_id status matches isSOTrx
+	 *  @param multiSelection multiple selection
+	 *  @param saveResults  True if results will be saved, false for info only
+	 *  @param whereClause where clause
+	 */
+	public InfoBPartner(Frame frame, boolean modal, int WindowNo, int record_id,
+		String value, boolean isSOTrx, boolean isSOMatch,
+		boolean multiSelection, boolean saveResults, String whereClause)
+	{
+		super (frame, modal, WindowNo, "C_BPartner", "C_BPartner_ID", multiSelection, saveResults, whereClause);
+			log.info(value);
 		setTitle(Msg.getMsg(Env.getCtx(), "InfoBPartner"));
 		m_isSOTrx = isSOTrx;
+		m_isSOMatch = isSOMatch;
+		//
+		StringBuffer where = new StringBuffer();
+		where.append("C_BPartner.IsSummary='N' AND C_BPartner.IsActive='Y'");
+		if (whereClause != null && whereClause.length() > 0)
+			where.append(" AND ").append(whereClause);
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause(s_Order);
+		//
+		setShowTotals(true);
 		//
 		statInit();
-		initInfo (value, whereClause);
-		//
-		int no = p_table.getRowCount();
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
+		initInfo (record_id, value);
+
 		//	AutoQuery
-		if (value != null && value.length() > 0)
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
+		{
 			executeQuery();
+		}
+
 		p_loadedOK = true;
-		//	Focus
-		fieldValue.requestFocus();
 
 		AEnv.positionCenterWindow(frame, this);
 	}	//	InfoBPartner
 
 	/** SalesOrder Trx          */
 	private boolean 		m_isSOTrx = false;
+	private boolean			m_isSOMatch = true;
 
 	private int m_AD_User_ID_index = -1;
 	private int m_C_BPartner_Location_ID_index = -1;
 
 	/** From Clause             */
-	private static String s_partnerFROM = "C_BPartner"
-		+ " LEFT OUTER JOIN C_BPartner_Location l ON (C_BPartner.C_BPartner_ID=l.C_BPartner_ID AND l.IsActive='Y')"
-		+ " LEFT OUTER JOIN AD_User c ON (C_BPartner.C_BPartner_ID=c.C_BPartner_ID AND (c.C_BPartner_Location_ID IS NULL OR c.C_BPartner_Location_ID=l.C_BPartner_Location_ID) AND c.IsActive='Y')" 
-		+ " LEFT OUTER JOIN C_Location a ON (l.C_Location_ID=a.C_Location_ID)";
+	private static String s_From = "C_BPartner";
+	/** Order Clause             */
+	private static String s_Order = "C_BPartner.Value";
 	
 	/**  Array of Column Info    */
-	private static Info_Column[] s_partnerLayout = {
+	private static Info_Column[] s_Layout = {
 		new Info_Column(" ", "C_BPartner.C_BPartner_ID", IDColumn.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "Value"), "C_BPartner.Value", String.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "Name"), "C_BPartner.Name", String.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "Contact"), "c.Name AS Contact", KeyNamePair.class, "c.AD_User_ID"),
+		new Info_Column(Msg.translate(Env.getCtx(), "C_BP_Group_ID"), "(SELECT bpg.Name FROM C_BP_Group bpg WHERE bpg.C_BP_Group_ID = C_BPartner.C_BP_Group_ID)", String.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "TotalOpenBalance"), "C_BPartner.TotalOpenBalance", BigDecimal.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "SO_CreditAvailable"), "C_BPartner.SO_CreditLimit-C_BPartner.SO_CreditUsed AS SO_CreditAvailable", BigDecimal.class, true, true, null),
 		new Info_Column(Msg.translate(Env.getCtx(), "SO_CreditUsed"), "C_BPartner.SO_CreditUsed", BigDecimal.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "Phone"), "c.Phone", String.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "Postal"), "a.Postal", KeyNamePair.class, "l.C_BPartner_Location_ID"),
-		new Info_Column(Msg.translate(Env.getCtx(), "City"), "a.City", String.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "TotalOpenBalance"), "C_BPartner.TotalOpenBalance", BigDecimal.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "Revenue"), "C_BPartner.ActualLifetimeValue", BigDecimal.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "Address1"), "a.Address1", String.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "IsShipTo"), "l.IsShipTo", Boolean.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "IsBillTo"), "l.IsBillTo", Boolean.class)
+		new Info_Column(Msg.translate(Env.getCtx(), "Revenue"), "C_BPartner.ActualLifetimeValue", BigDecimal.class)
 	};
 
 	//
+	private int fieldID = 0;
 	private CLabel labelValue = new CLabel();
 	private CTextField fieldValue = new CTextField(10);
 	private CLabel labelName = new CLabel();
@@ -128,6 +177,16 @@
 	private CTextField fieldPhone = new CTextField(10);
 	private VCheckBox checkAND = new VCheckBox();
 	private VCheckBox checkCustomer = new VCheckBox();
+	//
+	private CPanel tablePanel = new CPanel();
+	private CTabbedPane jTab  = new CTabbedPane();
+	private MiniTable contactTbl = new MiniTable();
+	private MiniTable addressTbl = new MiniTable();
+	private String m_sqlContact;
+	private String m_sqlAddress;
+
+	private int m_C_BPartner_ID = 0;
+	private static int ADDRESS_INDEX;
 
 	/**
 	 *	Static Setup - add fields to parameterPanel
@@ -166,85 +225,235 @@
 			checkCustomer.setText(Msg.getMsg(Env.getCtx(), "OnlyCustomers"));
 		else
 			checkCustomer.setText(Msg.getMsg(Env.getCtx(), "OnlyVendors"));
-		checkCustomer.setSelected(true);
-		checkCustomer.setFocusable(false);
-		checkCustomer.setRequestFocusEnabled(false);
+		checkCustomer.setSelected(m_isSOMatch);
 		checkCustomer.addActionListener(this);
 		//
-		parameterPanel.setLayout(new ALayout());
-		//
-		parameterPanel.add(labelValue, new ALayoutConstraint(0,0));
-		parameterPanel.add(fieldValue, null);
-		parameterPanel.add(labelContact, null);
-		parameterPanel.add(fieldContact, null);
-		parameterPanel.add(labelPhone, null);
-		parameterPanel.add(fieldPhone, null);
-		parameterPanel.add(checkCustomer, null);
+		p_criteriaGrid.add(labelValue, new ALayoutConstraint(0,0));
+		p_criteriaGrid.add(fieldValue, null);
+		p_criteriaGrid.add(labelContact, null);
+		p_criteriaGrid.add(fieldContact, null);
+		p_criteriaGrid.add(labelPhone, null);
+		p_criteriaGrid.add(fieldPhone, null);
+		p_criteriaGrid.add(checkCustomer, null);
 		//		
-		parameterPanel.add(labelName, new ALayoutConstraint(1,0));
-		parameterPanel.add(fieldName, null);
-		parameterPanel.add(labelEMail, null);
-		parameterPanel.add(fieldEMail, null);
-		parameterPanel.add(labelPostal, null);
-		parameterPanel.add(fieldPostal, null);
-		parameterPanel.add(checkAND, null);
+		p_criteriaGrid.add(labelName, new ALayoutConstraint(1,0));
+		p_criteriaGrid.add(fieldName, null);
+		p_criteriaGrid.add(labelEMail, null);
+		p_criteriaGrid.add(fieldEMail, null);
+		p_criteriaGrid.add(labelPostal, null);
+		p_criteriaGrid.add(fieldPostal, null);
+		p_criteriaGrid.add(checkAND, null);
+
+        //  Contact Tab
+        ColumnInfo[] s_layoutContact = new ColumnInfo[]{
+        		new ColumnInfo(" ", "AD_User_ID", IDColumn.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "C_Greeting_ID"), "(SELECT g.Greeting from C_Greeting g WHERE g.C_Greeting_ID = AD_User.C_Greeting_ID)", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Name"), "Name", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Title"), "Title", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "C_Location_ID"), "(SELECT a.Name from C_BPartner_Location a WHERE AD_User.C_BPartner_Location_ID=a.C_BPartner_Location_ID)", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Phone"), "Phone", String.class),
+           		new ColumnInfo(Msg.translate(Env.getCtx(), "Phone2"), "Phone2", String.class),
+           		new ColumnInfo(Msg.translate(Env.getCtx(), "Fax"), "Fax", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "EMail"), "EMail", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "LastContact"), "LastContact", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "LastResult"), "LastResult", String.class)};
+        //  From Clause
+        String s_sqlFrom = "AD_User";
+        //  Where Clause					
+        String s_sqlWhere = "C_BPartner_ID = ?  and IsActive = 'Y'";
+        m_sqlContact = contactTbl.prepareTable(s_layoutContact, s_sqlFrom, s_sqlWhere, false, "AD_User");
+		contactTbl.setPreferredSize(new Dimension(INFO_WIDTH, SCREEN_HEIGHT > 600 ? 255 : 110));
+		contactTbl.setRowSelectionAllowed(true);
+		contactTbl.setMultiSelection(false);
+		contactTbl.addMouseListener(this);
+		contactTbl.getSelectionModel().addListSelectionListener(this);
+		contactTbl.setShowTotals(false);
+		contactTbl.autoSize();
+        contactTbl.setBackground(new ColorUIResource(251,248,241));
+        contactTbl.setForeground(new ColorUIResource(251,0,0));
+
+        //  Location Tab
+        ColumnInfo[] s_layoutAddress = new ColumnInfo[]{
+        		new ColumnInfo(" ", "l.C_BPartner_Location_ID", IDColumn.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Name"), "l.Name", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Phone"), "l.Phone", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Phone2"), "l.Phone2", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Fax"), "l.Fax", String.class),        		
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Address"), "a.Address1", String.class), // Replaced with parsed value
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "IsShipTo"), "l.IsShipTo", Boolean.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "IsBillTo"), "l.IsBillTo", Boolean.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "IsRemitTo"), "l.IsRemitTo", Boolean.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "IsPayFrom"), "l.IsPayFrom", Boolean.class)};
+        ADDRESS_INDEX = 5;
+        /**	From Clause							*/
+        String s_locationFrom = "C_BPartner_Location l" 
+    		+ " LEFT OUTER JOIN C_Location a ON (l.C_Location_ID=a.C_Location_ID)";
+        /** Where Clause						*/
+        String s_locationWhere = "l.C_BPartner_ID = ? and l.IsActive = 'Y'";
+        m_sqlAddress = addressTbl.prepareTable(s_layoutAddress, s_locationFrom, s_locationWhere, false, "l");
+		addressTbl.setPreferredSize(new Dimension(INFO_WIDTH, SCREEN_HEIGHT > 600 ? 255 : 110));
+		addressTbl.setRowSelectionAllowed(true);
+		addressTbl.setMultiSelection(false);
+		addressTbl.addMouseListener(this);
+		addressTbl.getSelectionModel().addListSelectionListener(this);
+		addressTbl.setShowTotals(false);
+		addressTbl.autoSize();
+		addressTbl.setBackground(new ColorUIResource(251,248,241));
+		addressTbl.setForeground(new ColorUIResource(251,0,0));
+        
+        jTab.addTab(Msg.translate(Env.getCtx(), "Contact"), new JScrollPane(contactTbl));
+        jTab.addTab(Msg.translate(Env.getCtx(), "Location"), new JScrollPane(addressTbl));
+        jTab.setPreferredSize(new Dimension(INFO_WIDTH, SCREEN_HEIGHT > 600 ? 250 : 105));
+        tablePanel.setPreferredSize(new Dimension(INFO_WIDTH, SCREEN_HEIGHT > 600 ? 255 : 110));
+        tablePanel.setLayout(new BorderLayout());
+        tablePanel.add(jTab, BorderLayout.CENTER);
+        
+		//  Details Panel
+        p_detailTaskPane.setTitle(Msg.translate(Env.getCtx(), "ContactAndAddress"));
+        p_detailTaskPane.add(tablePanel, BorderLayout.CENTER);
+		p_detailTaskPane.setVisible(true);
 	}	//	statInit
 
 	/**
 	 *	Dynamic Init
+	 *  @param record_id The ID of the record to display.
 	 *  @param value value
-	 *  @param whereClause where clause
 	 */
-	private void initInfo(String value, String whereClause)
+	protected void initInfo(int record_id, String value)
 	{
-		/**	From
-			C_BPartner
-			 LEFT OUTER JOIN C_BPartner_Location l ON (C_BPartner.C_BPartner_ID=l.C_BPartner_ID AND l.IsActive='Y') 
-			 LEFT OUTER JOIN AD_User c ON (C_BPartner.C_BPartner_ID=c.C_BPartner_ID AND (c.C_BPartner_Location_ID IS NULL OR c.C_BPartner_Location_ID=l.C_BPartner_Location_ID) AND c.IsActive='Y') 
-			 LEFT OUTER JOIN C_Location a ON (l.C_Location_ID=a.C_Location_ID)
-		**/
-
-		//	Create Grid
-		StringBuffer where = new StringBuffer();
-		where.append("C_BPartner.IsSummary='N' AND C_BPartner.IsActive='Y'");
-		if (whereClause != null && whereClause.length() > 0)
-			where.append(" AND ").append(whereClause);
-		//
-		prepareTable(s_partnerLayout, s_partnerFROM,
-			where.toString(),
-			"C_BPartner.Value");
-
 		//  Get indexes
-		for (int i = 0; i < p_layout.length; i++)
+		for (int i = 0; i < s_Layout.length; i++)
 		{
-			if (p_layout[i].getIDcolSQL().indexOf("AD_User_ID") != -1)
+			if (s_Layout[i].getIDcolSQL().indexOf("AD_User_ID") != -1)
 				m_AD_User_ID_index = i;
-			if (p_layout[i].getIDcolSQL().indexOf("C_BPartner_Location_ID") != -1)
+			if (s_Layout[i].getIDcolSQL().indexOf("C_BPartner_Location_ID") != -1)
 				m_C_BPartner_Location_ID_index = i;
 		}
 
-		//  Set Value
-		if (value == null)
-			value = "%";
-		if (!value.endsWith("%"))
-			value += "%";
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
 
-		//	Put query string in Name if not numeric
-		if (value.equals("%"))
-			fieldName.setText(value);
-		//	No Numbers entered
-		else if ((value.indexOf('0')+value.indexOf('1')+value.indexOf('2')+value.indexOf('3')+value.indexOf('4') +value.indexOf('5')
-			+value.indexOf('6')+value.indexOf('7')+value.indexOf('8')+value.indexOf('9')) == -10)
+        if (!(record_id == 0))  // A record is defined
+        {
+        	fieldID = record_id;
+        }
+        else
+        {
+			if (value != null && value.length() > 0)
+			{
+				//	Put query string in Name if not fully numeric
+	    		if (!value.matches(".*\\D+.*")) // If value has no non-digit characters, use the Value
+	    			fieldValue.setText(value);
+	    		else
+	    			fieldName.setText(value);  // A few non-digit characters might be in the name. E.g. 451Group, 1st Choice, ...
+			}
+			else
+			{
+				//  Try to find the fieldID from the context
+	        	String bp = Env.getContext(Env.getCtx(), p_WindowNo, "C_BPartner_ID");
+				if (bp != null && bp.length() != 0)
+				{
+					fieldID = new Integer(bp).intValue();
+				}
+			}
+        }
+	}	//	initInfo
+
+	/**
+	 * 	Refresh Query
+	 */
+	private void refresh()
+	{
+		//  Invoke later to not delay events.
+		SwingUtilities.invokeLater(new Runnable(){public void run()
 		{
-			if (value.startsWith("%"))
-				fieldName.setText(value);
-			else
-				fieldName.setText("%" + value);
-		}
-		//	Number entered
-		else
-			fieldValue.setText(value);
-	}	//	initInfo
+					
+			PreparedStatement pstmt = null;
+			ResultSet rs = null;
+	    	
+			//  Contact tab	
+			log.finest(m_sqlContact);
+			try
+			{
+				pstmt = DB.prepareStatement(m_sqlContact, null);
+				pstmt.setInt(1, m_C_BPartner_ID);
+				rs = pstmt.executeQuery();
+				contactTbl.loadTable(rs);
+				rs.close();
+			}
+			catch (Exception e)
+			{
+				log.log(Level.WARNING, m_sqlContact, e);
+			}
+			finally
+			{
+				DB.close(rs, pstmt);
+				rs = null; pstmt = null;
+			}
+			
+			//  Address tab	
+			log.finest(m_sqlAddress);
+			try
+			{
+				pstmt = DB.prepareStatement(m_sqlAddress, null);
+				pstmt.setInt(1, m_C_BPartner_ID);
+				rs = pstmt.executeQuery();
+				addressTbl.loadTable(rs);
+				rs.close();
+			}
+			catch (Exception e)
+			{
+				log.log(Level.WARNING, m_sqlContact, e);
+			}
+			finally
+			{
+				DB.close(rs, pstmt);
+				rs = null; pstmt = null;
+			}
+
+			String trxName = Trx.createTrxName();
+            for (int row=0; row < addressTbl.getRowCount(); row++)
+			{
+				int loc_id = 0;
+				Object loc_data = addressTbl.getValueAt(row, addressTbl.getKeyColumnIndex());
+	            if (loc_data != null && loc_data instanceof IDColumn)
+	            {
+	            	IDColumn dataColumn = (IDColumn) loc_data;
+	        		loc_id = dataColumn.getRecord_ID();
+	            }
+
+				MLocation loc = MLocation.getBPLocation(Env.getCtx(), loc_id, trxName);
+				addressTbl.setValueAt(loc.toString(), row, ADDRESS_INDEX);
+			}
+			Trx.get(trxName, false).close();
+			addressTbl.autoSize();
+		}});
+		
+	}	//	refresh
+
+	/**
+	 * A record was selected - take action to sync subordinate tables if any
+	 */
+	protected void recordSelected(int key)
+	{
+		m_C_BPartner_ID = getSelectedRowKey();
+		refresh();
+		p_detailTaskPane.setCollapsed(false);
+		return;
+	}
+	/**
+	 * No record was selected - take action to sync subordinate tables if any
+	 */
+	protected void noRecordSelected()
+	{
+		//  Nothing was selected, or the query is empty
+		//  - close the panel
+		m_C_BPartner_ID = 0;
+		p_detailTaskPane.setCollapsed(true);
+		return;
+	}
 
 	/*************************************************************************/
 
@@ -257,30 +466,30 @@
 	protected String getSQLWhere()
 	{
 		ArrayList<String> list = new ArrayList<String>();
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if(!(fieldID == 0))
+			list.add("C_BPartner.C_BPartner_ID = ?");
 		//	=> Value
-		String value = fieldValue.getText().toUpperCase();
-		if (!(value.equals("") || value.equals("%")))
+		if (isValidSQLText(fieldValue))
 			list.add ("UPPER(C_BPartner.Value) LIKE ?");
 		//	=> Name
-		String name = fieldName.getText().toUpperCase();
-		if (!(name.equals("") || name.equals("%")))
+		if (isValidSQLText(fieldName))
 			list.add ("UPPER(C_BPartner.Name) LIKE ?");
 		//	=> Contact
-		String contact = fieldContact.getText().toUpperCase();
-		if (!(contact.equals("") || contact.equals("%")))
-			list.add ("UPPER(c.Name) LIKE ?");
+		if (isValidSQLText(fieldContact))
+			list.add ("C_BPartner.C_BPartner_ID IN (SELECT C_BPartner_ID from AD_User c WHERE UPPER(c.Name) LIKE ?)");
 		//	=> EMail
-		String email = fieldEMail.getText().toUpperCase();
-		if (!(email.equals("") || email.equals("%")))
-			list.add ("UPPER(c.EMail) LIKE ?");
+		if (isValidSQLText(fieldEMail))
+			list.add ("C_BPartner.C_BPartner_ID IN (SELECT C_BPartner_ID from AD_User c WHERE UPPER(c.EMail) LIKE ?)");
 		//	=> Phone
-		String phone = fieldPhone.getText().toUpperCase();
-		if (!(phone.equals("") || phone.equals("%")))
-			list.add ("UPPER(c.Phone) LIKE ?");
+		if (isValidSQLText(fieldPhone))
+			list.add ("C_BPartner.C_BPartner_ID IN (SELECT C_BPartner_ID from AD_User c WHERE UPPER(c.Phone) LIKE ?)");
 		//	=> Postal
-		String postal = fieldPostal.getText().toUpperCase();
-		if (!(postal.equals("") || postal.equals("%")))
-			list.add ("UPPER(a.Postal) LIKE ?");
+		if (isValidSQLText(fieldPostal))
+			list.add ("C_BPartner_ID IN (Select C_BPartner_ID FROM C_BPartner_Location bpl, "
+					+ "C_Location l where l.C_Location_ID = bpl.C_Location_ID AND UPPER(Postal) LIKE ?)");
 
 		StringBuffer sql = new StringBuffer();
 		int size = list.size();
@@ -324,60 +533,49 @@
 	 */
 	protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
 	{
+		
 		int index = 1;
+		//  => ID
+		if (!(fieldID == 0))
+		{
+			pstmt.setInt(index++, fieldID);
+			log.fine("Record ID: " + fieldID);
+		}
 		//	=> Value
-		String value = fieldValue.getText().toUpperCase();
-		if (!(value.equals("") || value.equals("%")))
+		if (isValidSQLText(fieldValue))
 		{
-			if (!value.endsWith("%"))
-				value += "%";
-			pstmt.setString(index++, value);
-			log.fine("Value: " + value);
+			pstmt.setString(index++, getSQLText(fieldValue));
+			log.fine("Value: " + fieldValue.getText());
 		}
 		//	=> Name
-		String name = fieldName.getText().toUpperCase();
-		if (!(name.equals("") || name.equals("%")))
+		if (isValidSQLText(fieldName))
 		{
-			if (!name.endsWith("%"))
-				name += "%";
-			pstmt.setString(index++, name);
-			log.fine("Name: " + name);
+			pstmt.setString(index++, getSQLText(fieldName));
+			log.fine("Name: " + fieldName.getText());
 		}
 		//	=> Contact
-		String contact = fieldContact.getText().toUpperCase();
-		if (!(contact.equals("") || contact.equals("%")))
+		if (isValidSQLText(fieldContact))
 		{
-			if (!contact.endsWith("%"))
-				contact += "%";
-			pstmt.setString(index++, contact);
-			log.fine("Contact: " + contact);
+			pstmt.setString(index++, getSQLText(fieldContact));
+			log.fine("Contact: " + fieldContact.getText());
 		}
 		//	=> EMail
-		String email = fieldEMail.getText().toUpperCase();
-		if (!(email.equals("") || email.equals("%")))
+		if (isValidSQLText(fieldEMail))
 		{
-			if (!email.endsWith("%"))
-				email += "%";
-			pstmt.setString(index++, email);
-			log.fine("EMail: " + email);
+			pstmt.setString(index++, getSQLText(fieldEMail));
+			log.fine("EMail: " + fieldEMail.getText());
 		}
 		//	=> Phone
-		String phone = fieldPhone.getText().toUpperCase();
-		if (!(phone.equals("") || phone.equals("%")))
+		if (isValidSQLText(fieldPhone))
 		{
-			if (!phone.endsWith("%"))
-				phone += "%";
-			pstmt.setString(index++, phone);
-			log.fine("Phone: " + phone);
+			pstmt.setString(index++, getSQLText(fieldPhone));
+			log.fine("Phone: " + fieldPhone.getText());
 		}
 		//	=> Postal
-		String postal = fieldPostal.getText().toUpperCase();
-		if (!(postal.equals("") || postal.equals("%")))
+		if (isValidSQLText(fieldPostal))
 		{
-			if (!postal.endsWith("%"))
-				postal += "%";
-			pstmt.setString(index++, postal);
-			log.fine("Postal: " + postal);
+			pstmt.setString(index++, getSQLText(fieldPostal));
+			log.fine("Postal: " + fieldPostal);
 		}
 	}   //  setParameters
 
@@ -419,14 +617,13 @@
 	/**************************************************************************
 	 *	Show History
 	 */
-	protected void showHistory()
+	protected void showHistory(int record_id)
 	{
 		log.info("");
-		Integer C_BPartner_ID = getSelectedRowKey();
-		if (C_BPartner_ID == null)
+		int C_BPartner_ID = record_id;
+		if (C_BPartner_ID <= 0)
 			return;
-		InvoiceHistory ih = new InvoiceHistory (this, C_BPartner_ID.intValue(), 
-			0, 0, 0);
+		InvoiceHistory ih = new InvoiceHistory (this, C_BPartner_ID, 0, 0, 0);
 		ih.setVisible(true);
 		ih = null;
 	}	//	showHistory
@@ -443,10 +640,10 @@
 	/**
 	 *	Zoom
 	 */
-	protected void zoom()
+	protected void zoom(int record_ID)
 	{
 		log.info( "InfoBPartner.zoom");
-		Integer C_BPartner_ID = getSelectedRowKey();
+		Integer C_BPartner_ID = record_ID;
 		if (C_BPartner_ID == null)
 			return;
 	//	AEnv.zoom(MBPartner.Table_ID, C_BPartner_ID.intValue(), true);	//	SO
@@ -468,20 +665,61 @@
 	}	//	hasZoom
 
 	/**
-	 *	Customize
+	 * Override the context for isSOTrx
+	 * @param trx the m_isSOTrx to set
 	 */
-	protected void customize()
-	{
-		log.info( "InfoBPartner.customize");
-	}	//	customize
+	protected void set_isSOTrx(boolean trx) {
+		m_isSOTrx = trx;
+	}
 
 	/**
-	 *	Has Customize
-	 *  @return false
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
 	 */
-	protected boolean hasCustomize()
+	protected boolean hasOutstandingChanges()
 	{
-		return false;	//	for now
-	}	//	hasCustomize
-
+		//  All the tracked fields
+		return(
+				fieldValue.hasChanged()	||
+				fieldName.hasChanged()	||
+				fieldContact.hasChanged()	||
+				fieldEMail.hasChanged()	||
+				fieldPostal.hasChanged()	||
+				fieldPhone.hasChanged()	||
+				checkAND.hasChanged()	||
+				checkCustomer.hasChanged());
+	}
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		fieldValue.set_oldValue();
+		fieldName.set_oldValue();
+		fieldContact.set_oldValue();
+		fieldEMail.set_oldValue();
+		fieldPostal.set_oldValue();
+		fieldPhone.set_oldValue();
+		checkAND.set_oldValue();
+		checkCustomer.set_oldValue();
+		return;
+	}
+	/**
+	 *  Clear all fields and set default values in check boxes
+	 */
+	protected void clearParameters()
+	{
+		fieldValue.setValue("");
+		fieldName.setValue("");
+		fieldContact.setValue("");
+		fieldEMail.setValue("");
+		fieldPostal.setValue("");
+		fieldPhone.setValue("");
+		checkCustomer.setSelected(m_isSOMatch);  	//  Customers Only
+		checkAND.setSelected(true); 		//  Use AND
+		return;
+	}
+	
 }	//	InfoBPartner
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/InfoCashLine.java
--- a/client/src/org/compiere/apps/search/InfoCashLine.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/InfoCashLine.java	Mon Feb 10 21:08:53 2014 -0500
@@ -23,18 +23,21 @@
 import java.sql.Timestamp;
 
 import org.adempiere.plaf.AdempierePLAF;
+import org.compiere.apps.AEnv;
 import org.compiere.apps.ALayout;
 import org.compiere.apps.ALayoutConstraint;
+import org.compiere.grid.ed.VCheckBox;
 import org.compiere.grid.ed.VDate;
 import org.compiere.grid.ed.VLookup;
 import org.compiere.grid.ed.VNumber;
 import org.compiere.minigrid.IDColumn;
+import org.compiere.model.MCash;
 import org.compiere.model.MCashLine;
 import org.compiere.model.MColumn;
 import org.compiere.model.MLookupFactory;
-import org.compiere.swing.CCheckBox;
+import org.compiere.model.MQuery;
 import org.compiere.swing.CLabel;
-import org.compiere.swing.CTextField;
+import org.compiere.swing.CPanel;
 import org.compiere.util.DB;
 import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
@@ -49,6 +52,10 @@
  * 
  * @author Teo Sarca, SC ARHIPAC SERVICE SRL
  * 			<li>FR [ 1976044 ] Info Cash Line: search by Charge
+ *
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class InfoCashLine extends Info
 {
@@ -58,7 +65,7 @@
 	private static final long serialVersionUID = -3315036454469996930L;
 
 	/**
-	 *  Detail Protected Contructor
+	 *  Detail Protected Constructor
 	 *  @param frame parent frame
 	 *  @param modal modal
 	 *  @param WindowNo window no
@@ -66,75 +73,101 @@
 	 *  @param multiSelection multiple selections
 	 *  @param whereClause whwre clause
 	 */
+	@Deprecated
 	protected InfoCashLine(Frame frame, boolean modal, int WindowNo, String value,
 		boolean multiSelection, String whereClause)
 	{
-		super (frame, modal, WindowNo, "cl", "C_CashLine_ID", multiSelection, whereClause);
+		this(frame, modal, WindowNo, 0, value,
+				multiSelection, true, whereClause);
+	}
+	
+	/**
+	 *  Detail Protected Constructor
+	 *  @param frame parent frame
+	 *  @param modal modal
+	 *  @param WindowNo window no
+	 *  @param record_id The record ID to find
+	 *  @param value query value to find, exclusive of record_id
+	 *  @param multiSelection multiple selections
+	 *  @param saveResults  True if results will be saved, false for info only
+	 *  @param whereClause where clause
+	 */
+	protected InfoCashLine(Frame frame, boolean modal, int WindowNo, int record_id, String value,
+		boolean multiSelection, boolean saveResults, String whereClause)
+	{
+		super (frame, modal, WindowNo, "cl", "C_CashLine_ID", multiSelection, saveResults, whereClause);
 		log.info( "InfoCashLine");
 		setTitle(Msg.getMsg(Env.getCtx(), "InfoCashLine"));
 		//
-		try
-		{
-			statInit();
-			p_loadedOK = initInfo ();
-		}
-		catch (Exception e)
-		{
-			return;
-		}
+		StringBuffer where = new StringBuffer("cl.IsActive='Y'");	
+		if (p_whereClause.length() > 0)
+			where.append(" AND ").append(Util.replace(p_whereClause, "C_CashLine.", "cl."));
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause(s_Order);		
 		//
-		int no = p_table.getRowCount();
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
-		if (value != null && value.length() > 0)
-		{
-			fName.setValue(value);
+		setShowTotals(true);
+		//
+		statInit();
+		initInfo (record_id, value);
+
+		//  To get the focus after the table update
+		m_heldLastFocus = fCash_ID;
+		
+		//	AutoQuery
+		if(autoQuery() || record_id != 0)
 			executeQuery();
-		}
-		//
-		pack();
-		//	Focus
-		fName.requestFocus();
+		
+		p_loadedOK = true;
+
+		AEnv.positionCenterWindow(frame, this);
 	}   //  InfoCashLine
 
-
 	//  Static Info
-	private CLabel lName = new CLabel(Msg.translate(Env.getCtx(), "Name"));
-	private CTextField fName = new CTextField(10);
+	private int fieldID = 0;
+	private CLabel lCash_ID = new CLabel(Msg.translate(Env.getCtx(), "Name"));
+	private VLookup fCash_ID;
 	private CLabel lCashBook_ID = new CLabel(Msg.translate(Env.getCtx(), "C_CashBook_ID"));
 	private VLookup fCashBook_ID;
-//	private CLabel lOrg_ID = new CLabel(Msg.translate(Env.getCtx(), "AD_Org_ID"));
-//	private VLookup fOrg_ID;
 	private CLabel lInvoice_ID = new CLabel(Msg.translate(Env.getCtx(), "C_Invoice_ID"));
 	private VLookup fInvoice_ID;
+	private CLabel lPayment_ID = new CLabel(Msg.translate(Env.getCtx(), "C_Payment_ID"));
+	private VLookup fPayment_ID;
 	private CLabel lCharge_ID = new CLabel(Msg.translate(Env.getCtx(), "C_Charge_ID"));
 	private VLookup fCharge_ID;
 	private CLabel lBankAccount_ID = new CLabel(Msg.translate(Env.getCtx(), "C_BankAccount_ID"));
 	private VLookup fBankAccount_ID;
-	private CCheckBox cbAbsolute = new CCheckBox (Msg.translate(Env.getCtx(), "AbsoluteAmt"));
+	private VCheckBox cbAbsolute = new VCheckBox();
 	//
 	private CLabel lDateFrom = new CLabel(Msg.translate(Env.getCtx(), "StatementDate"));
 	private VDate fDateFrom = new VDate("DateFrom", false, false, true, DisplayType.Date, Msg.translate(Env.getCtx(), "DateFrom"));
-	private CLabel lDateTo = new CLabel("-");
+	private CLabel lDateTo = new CLabel("-  ");
 	private VDate fDateTo = new VDate("DateTo", false, false, true, DisplayType.Date, Msg.translate(Env.getCtx(), "DateTo"));
 	private CLabel lAmtFrom = new CLabel(Msg.translate(Env.getCtx(), "Amount"));
 	private VNumber fAmtFrom = new VNumber("AmtFrom", false, false, true, DisplayType.Amount, Msg.translate(Env.getCtx(), "AmtFrom"));
-	private CLabel lAmtTo = new CLabel("-");
+	private CLabel lAmtTo = new CLabel("-  ");
 	private VNumber fAmtTo = new VNumber("AmtTo", false, false, true, DisplayType.Amount, Msg.translate(Env.getCtx(), "AmtTo"));
+	
+	/** From Clause             */
+	private static String s_From = "C_CashLine cl INNER JOIN C_Cash c ON (cl.C_Cash_ID=c.C_Cash_ID)";
+	/** Order Clause             */
+	private static String s_Order = "2,3,cl.Line";
 
 	/**  Array of Column Info    */
-	private static final Info_Column[] s_cashLayout = {
+	private static final Info_Column[] s_Layout = {
 		new Info_Column(" ", "cl.C_CashLine_ID", IDColumn.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "C_CashBook_ID"),
 			"(SELECT cb.Name FROM C_CashBook cb WHERE cb.C_CashBook_ID=c.C_CashBook_ID)", String.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "Name"),
+		new Info_Column(Msg.translate(Env.getCtx(), "C_Cash_ID"),
 			"c.Name", String.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "StatementDate"),
 			"c.StatementDate", Timestamp.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "Line"),
 			"cl.Line", Integer.class),
-	//	new Info_Column(Msg.translate(Env.getCtx(), "C_Currency_ID"),
-	//		"(SELECT ISO_Code FROM C_Currency c WHERE c.C_Currency_ID=cl.C_Currency_ID)", String.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "CashType"),
+			"(SELECT arl.Name AS list_value FROM AD_Ref_List arl, AD_Reference ar WHERE"
+				+ " arl.AD_Reference_ID = ar.AD_Reference_ID AND ar.Name = 'C_Cash Trx Type' AND arl.Value = cl.CashType)", String.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "Amount"),
 			"cl.Amount",  BigDecimal.class, true, true, null),
 		//
@@ -142,10 +175,14 @@
 			"(SELECT i.DocumentNo||'_'||" + DB.TO_CHAR("i.DateInvoiced",DisplayType.Date,Env.getAD_Language(Env.getCtx()))
 				+ "||'_'||" + DB.TO_CHAR("i.GrandTotal",DisplayType.Amount,Env.getAD_Language(Env.getCtx()))
 				+ " FROM C_Invoice i WHERE i.C_Invoice_ID=cl.C_Invoice_ID)", String.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "C_Payment_ID"),
+				"(SELECT p.DocumentNo||'_'||" + DB.TO_CHAR("p.DateTrx",DisplayType.Date,Env.getAD_Language(Env.getCtx()))
+					+ "||'_'||" + DB.TO_CHAR("p.PayAmt",DisplayType.Amount,Env.getAD_Language(Env.getCtx()))
+					+ " FROM C_Payment p WHERE p.C_Payment_ID=cl.C_Payment_ID)", String.class),
+					new Info_Column(Msg.translate(Env.getCtx(), "C_Charge_ID"),
+							"(SELECT ca.Name FROM C_Charge ca WHERE ca.C_Charge_ID=cl.C_Charge_ID)", String.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "C_BankAccount_ID"),
 			"(SELECT b.Name||' '||ba.AccountNo FROM C_Bank b, C_BankAccount ba WHERE b.C_Bank_ID=ba.C_Bank_ID AND ba.C_BankAccount_ID=cl.C_BankAccount_ID)", String.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "C_Charge_ID"),
-			"(SELECT ca.Name FROM C_Charge ca WHERE ca.C_Charge_ID=cl.C_Charge_ID)", String.class),
 		//
 		new Info_Column(Msg.translate(Env.getCtx(), "DiscountAmt"),
 			"cl.DiscountAmt",  BigDecimal.class),
@@ -157,94 +194,220 @@
 
 	/**
 	 *	Static Setup - add fields to parameterPanel
-	 *  @throws Exception if Lookups cannot be created
 	 */
-	private void statInit() throws Exception
+	private void statInit()
 	{
-		lName.setLabelFor(fName);
-		fName.setBackground(AdempierePLAF.getInfoBackground());
-		fName.addActionListener(this);
-		//
+		//  5241 - C_Cash.C_Cash_ID
+		fCash_ID = new VLookup("C_Cash_ID", false, false, true,
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, p_TabNo, 
+				MColumn.getColumn_ID(MCash.Table_Name, MCash.COLUMNNAME_C_Cash_ID), 
+				DisplayType.Search));
+		lCash_ID.setLabelFor(fCash_ID);
+		fCash_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fCash_ID.addActionListener(this);;
 		//	5249 - C_Cash.C_CashBook_ID
 		fCashBook_ID = new VLookup("C_CashBook_ID", false, false, true,
-			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 5249, DisplayType.TableDir));
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+				MColumn.getColumn_ID(MCash.Table_Name, MCash.COLUMNNAME_C_CashBook_ID),
+				DisplayType.TableDir));
 		lCashBook_ID.setLabelFor(fCashBook_ID);
 		fCashBook_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fCashBook_ID.addActionListener(this);
 		//	5354 - C_CashLine.C_Invoice_ID
 		fInvoice_ID = new VLookup("C_Invoice_ID", false, false, true,
-			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 5354, DisplayType.Search));
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+				MColumn.getColumn_ID(MCashLine.Table_Name, MCashLine.COLUMNNAME_C_Invoice_ID), 
+				DisplayType.Search));
 		lInvoice_ID.setLabelFor(fInvoice_ID);
 		fInvoice_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fInvoice_ID.addActionListener(this);
+		//  54090 - C_CashLine.C_Payment_ID
+		fPayment_ID = new VLookup("C_Payment_ID", false, false, true,
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+				MColumn.getColumn_ID(MCashLine.Table_Name, MCashLine.COLUMNNAME_C_Payment_ID),
+				DisplayType.Search));
+		lPayment_ID.setLabelFor(fPayment_ID);
+		fPayment_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fPayment_ID.addActionListener(this);
 		//	5295 - C_CashLine.C_BankAccount_ID
 		fBankAccount_ID = new VLookup("C_BankAccount_ID", false, false, true,
-			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 5295, DisplayType.TableDir));
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0,  
+				MColumn.getColumn_ID(MCashLine.Table_Name, MCashLine.COLUMNNAME_C_BankAccount_ID), 
+				DisplayType.TableDir));
 		lBankAccount_ID.setLabelFor(fBankAccount_ID);
 		fBankAccount_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fBankAccount_ID.addActionListener(this);
 		//	5296 - C_CashLine.C_Charge_ID
 		fCharge_ID = new VLookup(MCashLine.COLUMNNAME_C_Charge_ID, false, false, true,
 				MLookupFactory.get(Env.getCtx(), p_WindowNo, 0,
-						MColumn.getColumn_ID(MCashLine.Table_Name, MCashLine.COLUMNNAME_C_Charge_ID),
-						DisplayType.TableDir) );
-		//	5291 - C_CashLine.C_Cash_ID
+				MColumn.getColumn_ID(MCashLine.Table_Name, MCashLine.COLUMNNAME_C_Charge_ID),
+				DisplayType.TableDir) );
+		fCharge_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fCharge_ID.addActionListener(this);
 		//
 		lDateFrom.setLabelFor(fDateFrom);
 		fDateFrom.setBackground(AdempierePLAF.getInfoBackground());
 		fDateFrom.setToolTipText(Msg.translate(Env.getCtx(), "DateFrom"));
+		fDateFrom.addActionListener(this);
 		lDateTo.setLabelFor(fDateTo);
 		fDateTo.setBackground(AdempierePLAF.getInfoBackground());
 		fDateTo.setToolTipText(Msg.translate(Env.getCtx(), "DateTo"));
+		fDateTo.addActionListener(this);
 		lAmtFrom.setLabelFor(fAmtFrom);
 		fAmtFrom.setBackground(AdempierePLAF.getInfoBackground());
 		fAmtFrom.setToolTipText(Msg.translate(Env.getCtx(), "AmtFrom"));
+		fAmtFrom.addActionListener(this);
 		lAmtTo.setLabelFor(fAmtTo);
 		fAmtTo.setBackground(AdempierePLAF.getInfoBackground());
 		fAmtTo.setToolTipText(Msg.translate(Env.getCtx(), "AmtTo"));
+		fAmtTo.addActionListener(this);
 		//
-		parameterPanel.setLayout(new ALayout());
+		cbAbsolute.setText(Msg.translate(Env.getCtx(), "AbsoluteAmt"));
+		cbAbsolute.setName("AbsoluteAmt");
+		cbAbsolute.setToolTipText(Msg.getMsg(Env.getCtx(), "AbsoluteAmt"));
+		cbAbsolute.setSelected(false); 
+		cbAbsolute.addActionListener(this);
+		//
+		CPanel amtPanel = new CPanel();
+		CPanel datePanel = new CPanel();
+		
+		amtPanel.setLayout(new ALayout(0, 0, true));
+		amtPanel.add(fAmtFrom, new ALayoutConstraint(0,0));
+		amtPanel.add(lAmtTo, null);
+		amtPanel.add(fAmtTo, null);
+
+		datePanel.setLayout(new ALayout(0, 0, true));
+		datePanel.add(fDateFrom, new ALayoutConstraint(0,0));
+		datePanel.add(lDateTo, null);
+		datePanel.add(fDateTo, null);
+		
 		//  First Row
-		parameterPanel.add(lCashBook_ID, new ALayoutConstraint(0,0));
-		parameterPanel.add(fCashBook_ID, null);
-		parameterPanel.add(lName, null);
-		parameterPanel.add(fName, null);
-		parameterPanel.add(cbAbsolute, new ALayoutConstraint(0,5));
+		p_criteriaGrid.setLayout(new ALayout());
+		p_criteriaGrid.add(lCashBook_ID, new ALayoutConstraint(0,0));
+		p_criteriaGrid.add(fCashBook_ID, null);
+		p_criteriaGrid.add(lCash_ID, null); 
+		p_criteriaGrid.add(fCash_ID, null);
 		//  2nd Row
-		parameterPanel.add(lInvoice_ID, new ALayoutConstraint(1,0));
-		parameterPanel.add(fInvoice_ID, null);
-		parameterPanel.add(lDateFrom, null);
-		parameterPanel.add(fDateFrom, null);
-		parameterPanel.add(lDateTo, null);
-		parameterPanel.add(fDateTo, null);
+		p_criteriaGrid.add(lInvoice_ID, new ALayoutConstraint(1,0));
+		p_criteriaGrid.add(fInvoice_ID, null);
+		p_criteriaGrid.add(lPayment_ID, null);
+		p_criteriaGrid.add(fPayment_ID, null);
 		//  3rd Row
-		parameterPanel.add(lBankAccount_ID, new ALayoutConstraint(2,0));
-		parameterPanel.add(fBankAccount_ID, null);
-		parameterPanel.add(lAmtFrom, null);
-		parameterPanel.add(fAmtFrom, null);
-		parameterPanel.add(lAmtTo, null);
-		parameterPanel.add(fAmtTo, null);
+		p_criteriaGrid.add(lBankAccount_ID, new ALayoutConstraint(2,0));
+		p_criteriaGrid.add(fBankAccount_ID, null);
+		p_criteriaGrid.add(lDateFrom, null);
+		p_criteriaGrid.add(datePanel, null);
 		// 4th Row
-		parameterPanel.add(lCharge_ID, new ALayoutConstraint(3,0));
-		parameterPanel.add(fCharge_ID, null);
+		p_criteriaGrid.add(lCharge_ID, new ALayoutConstraint(3,0));
+		p_criteriaGrid.add(fCharge_ID, null);
+		p_criteriaGrid.add(lAmtFrom, null);
+		p_criteriaGrid.add(amtPanel, null);
+		p_criteriaGrid.add(cbAbsolute, new ALayoutConstraint(3,5));
 	}	//	statInit
 
 	/**
 	 *	General Init
 	 *	@return true, if success
 	 */
-	private boolean initInfo ()
+	protected void initInfo (int record_id, String value)
 	{
-		//  prepare table
-		StringBuffer where = new StringBuffer("cl.IsActive='Y'");
-		if (p_whereClause.length() > 0)
-			where.append(" AND ").append(Util.replace(p_whereClause, "C_CashLine.", "cl."));
-		prepareTable (s_cashLayout,
-			"C_CashLine cl INNER JOIN C_Cash c ON (cl.C_Cash_ID=c.C_Cash_ID)",
-			where.toString(),
-			"2,3,cl.Line");
 
-		return true;
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
+
+		//  Set values
+        if (!(record_id == 0))  // A record is defined
+        {
+        	fieldID = record_id;
+        } 
+        else
+        {
+			if (value != null && value.length() > 0)
+			{
+				//  Have nothing to do with a value
+			}
+			else
+			{
+				// Try to find other criteria in the context
+				String id;
+				//  C_CashLine_ID - only if visible
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_CashLine_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fieldID = new Integer(id).intValue();
+				}
+				//  C_Cash_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Cash_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fCash_ID.setValue(new Integer(id).intValue());
+				}
+				//  C_Invoice_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Invoice_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fInvoice_ID.setValue(new Integer(id).intValue());
+				}
+				//  C_Payment_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Payment_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fPayment_ID.setValue(new Integer(id).intValue());
+				}
+				//  C_Cashbook_ID - general - as a default
+				id = Env.getContext(Env.getCtx(), p_WindowNo, "C_CashBook_ID");
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fCashBook_ID.setValue(new Integer(id).intValue());
+				}
+				//  C_BankAccount_ID - window only
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BankAccount_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fBankAccount_ID.setValue(new Integer(id).intValue());
+				}
+				//  C_Charge_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Charge_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fCharge_ID.setValue(new Integer(id).intValue());
+				}
+			}
+		}        
+		//
+		return;
 	}	//	initInfo
 
-	
+	/**
+	 *	Zoom
+	 */
+	protected void zoom(int record_ID)
+	{
+		log.info( "InfoCashLine.zoom");
+		Integer C_CashLine_ID = record_ID;
+		if (C_CashLine_ID == null)
+			return;
+		MQuery query = new MQuery("C_CashLine");
+		query.setZoomTableName("C_CashLine");
+		query.setZoomColumnName("C_CashLine_ID");
+		query.setZoomValue(C_CashLine_ID);
+		query.addRestriction("C_CashLine_ID", MQuery.EQUAL, C_CashLine_ID);
+		query.setRecordCount(1);
+		int AD_WindowNo = getAD_Window_ID("C_Cash", true);	//	SO
+		zoom (AD_WindowNo, query);
+	}	//	zoom
+
+	/**
+	 *	Has Zoom
+	 *  @return true
+	 */
+	protected boolean hasZoom()
+	{
+		return true;
+	}	//	hasZoom
+
 	/**************************************************************************
 	 *	Construct SQL Where Clause and define parameters
 	 *  (setParameters needs to set parameters)
@@ -254,14 +417,35 @@
 	protected String getSQLWhere()
 	{
 		StringBuffer sql = new StringBuffer();
-		if (fName.getText().length() > 0)
-			sql.append(" AND UPPER(c.Name) LIKE ?");
+		//
+		if(isResetRecordID())
+			fieldID = 0;
+		if (!(fieldID ==0))
+			sql.append(" AND cl.C_CashLine_ID = ?");
+		//
+		if (fCash_ID.getValue() != null)
+			sql.append(" AND c.C_Cash_ID=?");
 		//
 		if (fCashBook_ID.getValue() != null)
 			sql.append(" AND c.C_CashBook_ID=?");
 		//
-		if (fInvoice_ID.getValue() != null)
+		if (fBankAccount_ID.getValue() != null)
+			sql.append(" AND cl.C_BankAccount_ID=?");
+		//
+		if (fCharge_ID.getValue() != null)
+			sql.append(" AND cl.C_Charge_ID=?");
+		//
+		if (fInvoice_ID.getValue() != null && fPayment_ID.getValue() == null)
 			sql.append(" AND cl.C_Invoice_ID=?");
+		else 
+			if (fInvoice_ID.getValue() == null && fPayment_ID.getValue() != null)
+				sql.append(" AND cl.C_Payment_ID=?");
+			else
+				if (fInvoice_ID.getValue() != null && fPayment_ID.getValue() != null)
+				{
+					sql.append(" AND (cl.C_Invoice_ID=?");
+					sql.append(" OR cl.C_Payment_ID=?)");
+				}
 		//
 		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
 		{
@@ -296,9 +480,6 @@
 					sql.append(" BETWEEN ? AND ?");
 			}
 		}
-		if (fCharge_ID.getValue() != null) {
-			sql.append(" AND cl.").append(MCashLine.COLUMNNAME_C_Charge_ID).append("=?");
-		}
 
 		log.fine(sql.toString());
 		return sql.toString();
@@ -314,14 +495,35 @@
 	protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
 	{
 		int index = 1;
-		if (fName.getText().length() > 0)
-			pstmt.setString(index++, getSQLText(fName));
+		if (!(fieldID == 0))
+			pstmt.setInt(index++, fieldID);
+		//
+		if (fCash_ID.getValue() != null)
+		{
+			Integer i = (Integer)fCash_ID.getValue();
+			pstmt.setInt(index++, i.intValue());
+			log.fine("Cash Journal=" + i);
+		}
 		//
 		if (fCashBook_ID.getValue() != null)
 		{
-			Integer cb = (Integer)fCashBook_ID.getValue();
-			pstmt.setInt(index++, cb.intValue());
-			log.fine("CashBook=" + cb);
+			Integer i = (Integer)fCashBook_ID.getValue();
+			pstmt.setInt(index++, i.intValue());
+			log.fine("CashBook=" + i);
+		}
+		//
+		if (fBankAccount_ID.getValue() != null)
+		{
+			Integer i = (Integer)fBankAccount_ID.getValue();
+			pstmt.setInt(index++, i.intValue());
+			log.fine("BankAccount=" + i);
+		}
+		//
+		if (fCharge_ID.getValue() != null)
+		{
+			Integer i = (Integer)fCharge_ID.getValue();
+			pstmt.setInt(index++, i.intValue());
+			log.fine("Charge=" + i);
 		}
 		//
 		if (fInvoice_ID.getValue() != null)
@@ -331,6 +533,13 @@
 			log.fine("Invoice=" + i);
 		}
 		//
+		if (fPayment_ID.getValue() != null)
+		{
+			Integer i = (Integer)fPayment_ID.getValue();
+			pstmt.setInt(index++, i.intValue());
+			log.fine("Payment=" + i);
+		}
+		//
 		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
 		{
 			Timestamp from = (Timestamp)fDateFrom.getValue();
@@ -374,24 +583,69 @@
 				}
 			}
 		}
-		if (fCharge_ID.getValue() != null) {
-			Integer i = (Integer)fCharge_ID.getValue();
-			pstmt.setInt(index++, i.intValue());
-			log.fine("Charge=" + i);
-		}
 	}   //  setParameters
 
 	/**
-	 *  Get SQL WHERE parameter
-	 *  @param f field
-	 *  @return Upper case text with % at the end
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
 	 */
-	private String getSQLText (CTextField f)
+	protected boolean hasOutstandingChanges()
 	{
-		String s = f.getText().toUpperCase();
-		if (!s.endsWith("%"))
-			s += "%";
-		log.fine( "String=" + s);
-		return s;
-	}   //  getSQLText
+		//  All the tracked fields
+		return(
+			fAmtFrom.hasChanged()	||
+			fAmtTo.hasChanged() ||
+			fBankAccount_ID.hasChanged() ||
+			fCash_ID.hasChanged() ||
+			fCashBook_ID.hasChanged() ||
+			fCharge_ID.hasChanged() ||
+			fDateFrom.hasChanged() ||
+			fDateTo.hasChanged() ||
+			fInvoice_ID.hasChanged() ||
+			fPayment_ID.hasChanged() ||
+			cbAbsolute.hasChanged()
+			);
+			
+	}
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		fAmtFrom.set_oldValue();
+		fAmtTo.set_oldValue();
+		fBankAccount_ID.set_oldValue();
+		fCash_ID.set_oldValue();
+		fCashBook_ID.set_oldValue();
+		fCharge_ID.set_oldValue();
+		fDateFrom.set_oldValue();
+		fDateTo.set_oldValue();
+		fInvoice_ID.set_oldValue();
+		fPayment_ID.set_oldValue();
+		cbAbsolute.set_oldValue();
+		return;
+	}
+	
+    /**
+	 *  Clear all fields and set default values in check boxes
+	 */
+	protected void clearParameters()
+	{
+		//  Clear fields and set defaults
+		Object nullObject = null;
+		fAmtFrom.setValue(nullObject);
+		fAmtTo.setValue(nullObject);
+		fBankAccount_ID.setValue(null);
+		fCash_ID.setValue(null);
+		fCashBook_ID.setValue(null);
+		fCharge_ID.setValue(null);
+		fDateFrom.setValue(null);
+		fDateTo.setValue(null);
+		fInvoice_ID.setValue(null);
+		fPayment_ID.setValue(null);
+		cbAbsolute.setSelected(false);
+	}
+
 }   //  InfoCashLine
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/InfoFactory.java
--- a/client/src/org/compiere/apps/search/InfoFactory.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/InfoFactory.java	Mon Feb 10 21:08:53 2014 -0500
@@ -16,7 +16,30 @@
 	 *  @param  whereClause fully qualified where clause for the search
 	 *  @return special or general Info Window
 	 */
+	@Deprecated
 	public Info create (Frame frame, boolean modal, int WindowNo,
 		String tableName, String keyColumn, String value,
 		boolean multiSelection, String whereClause);
+	
+	/**
+	 *  Factory Constructor
+	 *  @param  frame   parent frame
+	 *  @param  modal   new window is modal
+	 *  @param  WindowNo	window no
+	 *  @param  tableName   table name of the search
+	 *  @param  keyColumn   key column of the search
+	 *  @param  record_id The record ID to find
+	 *  @param  value query value to find, exclusive of record_id
+	 *  @param  multiSelection  allow to select more than one row
+	 *  @param  whereClause fully qualified where clause for the search
+	 *  @return special or general Info Window
+	 *  
+	 *
+	 * @author Michael McKay, 
+	 * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+	 * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
+	 */
+	public Info create (Frame frame, boolean modal, int WindowNo,
+		String tableName, String keyColumn, int record_id, String value,
+		boolean multiSelection, String whereClause);
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/InfoGeneral.java
--- a/client/src/org/compiere/apps/search/InfoGeneral.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/InfoGeneral.java	Mon Feb 10 21:08:53 2014 -0500
@@ -29,6 +29,7 @@
 
 import org.adempiere.plaf.AdempierePLAF;
 import org.compiere.apps.ADialog;
+import org.compiere.apps.AEnv;
 import org.compiere.apps.ALayout;
 import org.compiere.apps.ALayoutConstraint;
 import org.compiere.minigrid.IDColumn;
@@ -49,6 +50,10 @@
  * 
  * 	@author 	Jorg Janke
  * 	@version 	$Id: InfoGeneral.java,v 1.3 2006/10/06 00:42:38 jjanke Exp $
+ *
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class InfoGeneral extends Info
 {
@@ -69,26 +74,63 @@
 	 * 	@param multiSelection multiple selections
 	 * 	@param whereClause where clause
 	 */
+	@Deprecated
 	protected InfoGeneral (Frame frame, boolean modal, int WindowNo, String value,
 		String tableName, String keyColumn,
 		boolean multiSelection, String whereClause)
 	{
-		super (frame, modal, WindowNo, tableName, keyColumn, multiSelection, whereClause);
+		this(frame, modal, WindowNo, 0, value,
+		tableName, keyColumn,
+		multiSelection, true, whereClause);
+	}
+	
+	/**
+	 *	Detail Protected Constructor.
+	 *
+	 * 	@param frame parent
+	 * 	@param modal modal
+	 * 	@param WindowNo window no
+	 *  @param record_id The record ID to find
+	 *  @param value query value to find, exclusive of record_id
+	 * 	@param tableName table name
+	 * 	@param keyColumn key column (ignored)
+	 * 	@param multiSelection multiple selections
+	 *  @param saveResults  True if results will be saved, false for info only
+	 * 	@param whereClause where clause
+	 */
+	protected InfoGeneral (Frame frame, boolean modal, int WindowNo, int record_id, String value,
+		String tableName, String keyColumn,
+		boolean multiSelection, boolean saveResults, String whereClause)
+	{
+		super (frame, modal, WindowNo, tableName, keyColumn, multiSelection, saveResults, whereClause);
 		log.info(tableName + " - " + keyColumn + " - " + whereClause);
 		setTitle(Msg.getMsg(Env.getCtx(), "Info"));
 		//
+		if (!initInfoTable())  // Populates m_generalLayout
+			return;
+		//
+		setTableLayout(m_generalLayout);
+		setFromClause(tableName);
+		setOrderClause("2");
+		StringBuffer where = new StringBuffer("IsActive='Y'");
+		if (whereClause.length() > 0)
+			where.append(" AND ").append(p_whereClause);
+		setWhereClause(where.toString());
+		//
 		statInit();
-		p_loadedOK = initInfo ();
-		//
-		int no = p_table.getRowCount();
-		setStatusLine(Integer.toString(no) + " " 
-			+ Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
-		//	Focus
-		textField1.setValue(value);
-		textField1.requestFocus();
-		if (value != null && value.length() > 0)
+		initInfo (record_id, value);
+
+		//  To get the focus after the table update
+		m_heldLastFocus = textField1;
+		
+		//	AutoQuery
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
 			executeQuery();
+		
+		p_loadedOK = true;
+
+		AEnv.positionCenterWindow(frame, this);
+		
 	}	//	InfoGeneral
 
 	/**  String Array of Column Info    */
@@ -99,6 +141,7 @@
 	private ArrayList<String>	m_queryColumnsSql = new ArrayList<String>();
 
 	//  Static data
+	private int fieldID = 0;
 	private CLabel label1 = new CLabel();
 	private CTextField textField1 = new CTextField(10);
 	private CLabel label2 = new CLabel();
@@ -130,36 +173,24 @@
 		label4.setHorizontalAlignment(JLabel.LEADING);
 		textField4.setBackground(AdempierePLAF.getInfoBackground());
 		//
-		parameterPanel.setLayout(new ALayout());
-		parameterPanel.add(label1, new ALayoutConstraint(0,0));
-		parameterPanel.add(label2, null);
-		parameterPanel.add(label3, null);
-		parameterPanel.add(label4, null);
+		p_criteriaGrid.setLayout(new ALayout());
+		p_criteriaGrid.add(label1, new ALayoutConstraint(0,0));
+		p_criteriaGrid.add(label2, null);
+		p_criteriaGrid.add(label3, null);
+		p_criteriaGrid.add(label4, null);
 		//
-		parameterPanel.add(textField1, new ALayoutConstraint(1,0));
-		parameterPanel.add(textField2, null);
-		parameterPanel.add(textField3, null);
-		parameterPanel.add(textField4, null);
+		p_criteriaGrid.add(textField1, new ALayoutConstraint(1,0));
+		p_criteriaGrid.add(textField2, null);
+		p_criteriaGrid.add(textField3, null);
+		p_criteriaGrid.add(textField4, null);
 	}	//	statInit
 
 	/**
 	 *	General Init
 	 *	@return true, if success
 	 */
-	private boolean initInfo ()
+	protected void initInfo (int record_id, String value)
 	{
-		if (!initInfoTable())
-			return false;
-
-		//  prepare table
-		StringBuffer where = new StringBuffer("IsActive='Y'");
-		if (p_whereClause.length() > 0)
-			where.append(" AND ").append(p_whereClause);
-		prepareTable(m_generalLayout,
-			p_tableName,
-			where.toString(),
-			"2");
-
 		//	Set & enable Fields
 		label1.setText(Msg.translate(Env.getCtx(), m_queryColumns.get(0).toString()));
 		textField1.addActionListener(this);
@@ -193,7 +224,21 @@
 			label4.setVisible(false);
 			textField4.setVisible(false);
 		}
-		return true;
+		
+		//  Set values
+		if (record_id != 0)
+		{
+			fieldID = record_id;
+		}
+		else
+		{
+			if (value != null && value.length() > 0)
+			{
+				textField1.setValue(value);
+			}
+		}
+
+		return;
 	}	//	initInfo
 
 
@@ -372,6 +417,8 @@
 		//  Convert ArrayList to Array
 		m_generalLayout = new Info_Column[list.size()];
 		list.toArray(m_generalLayout);
+		
+		setTableLayout(m_generalLayout);
 		return true;
 	}	//	initInfoTable
 
@@ -385,10 +432,16 @@
 	protected String getSQLWhere()
 	{
 		StringBuffer sql = new StringBuffer();
-		addSQLWhere (sql, 0, textField1.getText().toUpperCase());
-		addSQLWhere (sql, 1, textField2.getText().toUpperCase());
-		addSQLWhere (sql, 2, textField3.getText().toUpperCase());
-		addSQLWhere (sql, 3, textField4.getText().toUpperCase());
+		if(isResetRecordID())  // Set in Info.java.
+			fieldID = 0;
+		if(!(fieldID==0))
+		{
+			sql.append(" AND ").append(getTableName()).append(".").append(getKeyColumn()).append(" = ?");
+		}
+		addSQLWhere (sql, 0, textField1.getText());
+		addSQLWhere (sql, 1, textField2.getText());
+		addSQLWhere (sql, 2, textField3.getText());
+		addSQLWhere (sql, 3, textField4.getText());
 		return sql.toString();
 	}	//	getSQLWhere
 
@@ -400,26 +453,13 @@
 	 */
 	private void addSQLWhere(StringBuffer sql, int index, String value)
 	{
-		if (!(value.equals("") || value.equals("%")) && index < m_queryColumns.size())
+		if (isValidSQLText(value) && index < m_queryColumns.size())
 		{
 			// Angelo Dabala' (genied) nectosoft: [2893220] avoid to append string parameters directly because of special chars like quote(s)
 			sql.append(" AND UPPER(").append(m_queryColumnsSql.get(index).toString()).append(") LIKE ?");
 		}
 	}	//	addSQLWhere
 
-	/**
-	 *  Get SQL WHERE parameter
-	 *  @param f field
-	 *  @return sql part
-	 */
-	private String getSQLText (CTextField f)
-	{
-		String s = f.getText().toUpperCase();
-		if (!s.endsWith("%"))
-			s += "%";
-		log.fine( "String=" + s);
-		return s;
-	}   //  getSQLText
 
 	/**
 	 *  Set Parameters for Query.
@@ -431,14 +471,53 @@
 	protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
 	{
 		int index = 1;
-		if (textField1.getText().length() > 0)
+		if (!(fieldID == 0))
+			pstmt.setInt(index++, fieldID);
+		if (isValidSQLText(textField1))
 			pstmt.setString(index++, getSQLText(textField1));
-		if (textField2.getText().length() > 0)
+		if (isValidSQLText(textField2))
 			pstmt.setString(index++, getSQLText(textField2));
-		if (textField3.getText().length() > 0)
+		if (isValidSQLText(textField3))
 			pstmt.setString(index++, getSQLText(textField3));
-		if (textField4.getText().length() > 0)
+		if (isValidSQLText(textField4))
 			pstmt.setString(index++, getSQLText(textField4));
 	}   //  setParameters
 
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
+	{
+		//  All the tracked fields
+		return(
+				textField1.hasChanged()	||
+				textField2.hasChanged()	||
+				textField3.hasChanged()	||
+				textField4.hasChanged());
+	}
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		textField1.set_oldValue();
+		textField2.set_oldValue();
+		textField3.set_oldValue();
+		textField4.set_oldValue();
+		return;
+	}
+    /**
+	 *  Clear all fields and set default values in check boxes
+	 */
+	protected void clearParameters()
+	{
+		//  Clear fields and set defaults
+		textField1.setValue("");
+		textField2.setValue("");
+		textField3.setValue("");
+		textField4.setValue("");
+	}
 }	//	InfoGeneral
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/InfoInOut.java
--- a/client/src/org/compiere/apps/search/InfoInOut.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/InfoInOut.java	Mon Feb 10 21:08:53 2014 -0500
@@ -20,18 +20,21 @@
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 import java.sql.Timestamp;
-import java.util.ArrayList;
 
 import org.adempiere.plaf.AdempierePLAF;
+import org.compiere.apps.AEnv;
 import org.compiere.apps.ALayout;
 import org.compiere.apps.ALayoutConstraint;
 import org.compiere.grid.ed.VCheckBox;
 import org.compiere.grid.ed.VDate;
 import org.compiere.grid.ed.VLookup;
 import org.compiere.minigrid.IDColumn;
+import org.compiere.model.MColumn;
+import org.compiere.model.MInOut;
 import org.compiere.model.MLookupFactory;
 import org.compiere.model.MQuery;
 import org.compiere.swing.CLabel;
+import org.compiere.swing.CPanel;
 import org.compiere.swing.CTextField;
 import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
@@ -44,6 +47,10 @@
  *
  *  @author Jorg Janke
  *  @version  $Id: InfoInOut.java,v 1.2 2006/07/30 00:51:27 jjanke Exp $
+ *
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class InfoInOut extends Info
 {
@@ -53,7 +60,7 @@
 	private static final long serialVersionUID = -2066307179999903184L;
 
 	/**
-	 *  Detail Protected Contructor
+	 *  Detail Protected Constructor
 	 *  @param frame parent frame
 	 *  @param modal modal
 	 *  @param WindowNo window no
@@ -61,47 +68,59 @@
 	 *  @param multiSelection multiple selections
 	 *  @param whereClause where clause
 	 */
+	@Deprecated
 	protected InfoInOut(Frame frame, boolean modal, int WindowNo, String value,
 		boolean multiSelection, String whereClause)
 	{
-		super (frame, modal, WindowNo, "i", "M_InOut_ID", multiSelection, whereClause);
+		this(frame, modal, WindowNo, 0, value,
+				multiSelection, true, whereClause);
+	}
+
+	/**
+	 *  Detail Protected Constructor
+	 *  @param frame parent frame
+	 *  @param modal modal
+	 *  @param WindowNo window no
+	 *  @param record_id The record ID to find
+	 *  @param value query value to find, exclusive of record_id
+	 *  @param multiSelection multiple selections
+	 *  @param saveResults  True if results will be saved, false for info only
+	 *  @param whereClause where clause
+	 */
+	protected InfoInOut(Frame frame, boolean modal, int WindowNo, int record_id, String value,
+		boolean multiSelection, boolean saveResults, String whereClause)
+	{
+		super (frame, modal, WindowNo, "i", "M_InOut_ID", multiSelection, saveResults, whereClause);
 		log.info( "InfoInOut");
 		setTitle(Msg.getMsg(Env.getCtx(), "InfoInOut"));
 		//
-		try
-		{
-			statInit();
-			p_loadedOK = initInfo ();
-		}
-		catch (Exception e)
-		{
-			return;
-		}
+		StringBuffer where = new StringBuffer("i.IsActive='Y'");
+		if (whereClause.length() > 0)
+			where.append(" AND ").append(Util.replace(whereClause, "M_InOut.", "i."));
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause(s_Order);
 		//
-		int no = p_table.getRowCount();
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
-		if (value != null && value.length() > 0)
-		{
-			fDocumentNo.setValue(value);
+		statInit();
+		initInfo (record_id, value);
+
+		//  To get the focus after the table update
+		m_heldLastFocus = fDocumentNo;
+		
+		//	AutoQuery
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
 			executeQuery();
-		}
-		//
-		pack();
-		//	Focus
-		fDocumentNo.requestFocus();
+		
+		p_loadedOK = true;
+
+		AEnv.positionCenterWindow(frame, this);	
+		
 	}   //  InfoInOut
 
-	/**  String Array of Column Info    */
-	private Info_Column[] m_generalLayout;
-	/** list of query columns           */
-	private ArrayList 	m_queryColumns = new ArrayList();
-	/** Table Name              */
-	private String      m_tableName;
-	/** Key Column Name         */
-	private String      m_keyColumn;
 
 	//  Static Info
+	int fieldID = 0;
 	private CLabel lDocumentNo = new CLabel(Msg.translate(Env.getCtx(), "DocumentNo"));
 	private CTextField fDocumentNo = new CTextField(10);
 	private CLabel lDescription = new CLabel(Msg.translate(Env.getCtx(), "Description"));
@@ -109,33 +128,43 @@
 	private CLabel lPOReference = new CLabel(Msg.translate(Env.getCtx(), "POReference"));
 	private CTextField fPOReference = new CTextField(10);
 	//
-//	private CLabel lOrg_ID = new CLabel(Msg.translate(Env.getCtx(), "AD_Org_ID"));
-//	private VLookup fOrg_ID;
 	private CLabel lBPartner_ID = new CLabel(Msg.translate(Env.getCtx(), "BPartner"));
 	private VLookup fBPartner_ID;
+	private CLabel lShipper_ID = new CLabel(Msg.translate(Env.getCtx(), "Shipper"));
+	private VLookup fShipper_ID;
 	//
 	private CLabel lDateFrom = new CLabel(Msg.translate(Env.getCtx(), "MovementDate"));
 	private VDate fDateFrom = new VDate("DateFrom", false, false, true, DisplayType.Date, Msg.translate(Env.getCtx(), "DateFrom"));
-	private CLabel lDateTo = new CLabel("-");
+	private CLabel lDateTo = new CLabel("- ");
 	private VDate fDateTo = new VDate("DateTo", false, false, true, DisplayType.Date, Msg.translate(Env.getCtx(), "DateTo"));
 	private VCheckBox fIsSOTrx = new VCheckBox ("IsSOTrx", false, false, true, Msg.translate(Env.getCtx(), "IsSOTrx"), "", false);
 
+	/** From Clause             */
+	private static String s_From = " M_InOut i";
+	/** Order Clause             */
+	private static String s_Order = "2,3,4";
+
 	/**  Array of Column Info    */
-	private static final Info_Column[] s_invoiceLayout = {
+	private static final Info_Column[] s_Layout = {
 		new Info_Column(" ", "i.M_InOut_ID", IDColumn.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "C_BPartner_ID"), "(SELECT Name FROM C_BPartner bp WHERE bp.C_BPartner_ID=i.C_BPartner_ID)", String.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "MovementDate"), "i.MovementDate", Timestamp.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "DocumentNo"), "i.DocumentNo", String.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "Description"), "i.Description", String.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "POReference"), "i.POReference", String.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "IsSOTrx"), "i.IsSOTrx", Boolean.class)
+		new Info_Column(Msg.translate(Env.getCtx(), "M_Shipper_ID"), "(SELECT Name FROM M_Shipper ms WHERE ms.M_Shipper_ID = i.M_Shipper_ID)", String.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "ShipDate"), "i.ShipDate", Timestamp.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "TrackingNo"), "i.TrackingNo", String.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "IsDropShip"), "i.IsDropShip", Boolean.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "DropShip_BPartner_ID"), "(SELECT Name FROM C_BPartner bp WHERE bp.C_BPartner_ID=i.DropShip_BPartner_ID)", String.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "DocStatus"), "i.docstatus", String.class),
+
 	};
 
 	/**
 	 *	Static Setup - add fields to parameterPanel
-	 *  @throws Exception if Lookups cannot be initialized
 	 */
-	private void statInit() throws Exception
+	private void statInit()
 	{
 		lDocumentNo.setLabelFor(fDocumentNo);
 		fDocumentNo.setBackground(AdempierePLAF.getInfoBackground());
@@ -149,65 +178,102 @@
 		fIsSOTrx.setSelected(!"N".equals(Env.getContext(Env.getCtx(), p_WindowNo, "IsSOTrx")));
 		fIsSOTrx.addActionListener(this);
 		//
-	//	fOrg_ID = new VLookup("AD_Org_ID", false, false, true,
-	//		MLookupFactory.create(Env.getCtx(), 3486, m_WindowNo, DisplayType.TableDir, false),
-	//		DisplayType.TableDir, m_WindowNo);
-	//	lOrg_ID.setLabelFor(fOrg_ID);
-	//	fOrg_ID.setBackground(AdempierePLAF.getInfoBackground());
 		fBPartner_ID = new VLookup("C_BPartner_ID", false, false, true,
-			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 3499, DisplayType.Search));
+			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+					MColumn.getColumn_ID(MInOut.Table_Name, MInOut.COLUMNNAME_C_BPartner_ID),
+					DisplayType.Search));
 		lBPartner_ID.setLabelFor(fBPartner_ID);
 		fBPartner_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fBPartner_ID.addActionListener(this);
+		//
+		fShipper_ID = new VLookup("M_Shipper_ID", false, false, true,
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+						MColumn.getColumn_ID(MInOut.Table_Name, MInOut.COLUMNNAME_M_Shipper_ID),
+						DisplayType.TableDir));
+		lShipper_ID.setLabelFor(fShipper_ID);
+		fShipper_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fShipper_ID.addActionListener(this);
 		//
 		lDateFrom.setLabelFor(fDateFrom);
 		fDateFrom.setBackground(AdempierePLAF.getInfoBackground());
 		fDateFrom.setToolTipText(Msg.translate(Env.getCtx(), "DateFrom"));
+		fDateFrom.addActionListener(this);
 		lDateTo.setLabelFor(fDateTo);
 		fDateTo.setBackground(AdempierePLAF.getInfoBackground());
 		fDateTo.setToolTipText(Msg.translate(Env.getCtx(), "DateTo"));
+		fDateTo.addActionListener(this);
 		//
-		parameterPanel.setLayout(new ALayout());
+		CPanel datePanel = new CPanel();
+		datePanel.setLayout(new ALayout(0, 0, true));
+		datePanel.add(fDateFrom, new ALayoutConstraint(0,0));
+		datePanel.add(lDateTo, null);
+		datePanel.add(fDateTo, null);
 		//  First Row
-		parameterPanel.add(lDocumentNo, new ALayoutConstraint(0,0));
-		parameterPanel.add(fDocumentNo, null);
-		parameterPanel.add(lBPartner_ID, null);
-		parameterPanel.add(fBPartner_ID, null);
-		parameterPanel.add(fIsSOTrx, new ALayoutConstraint(0,5));
+		p_criteriaGrid.add(lDocumentNo, new ALayoutConstraint(0,0));
+		p_criteriaGrid.add(fDocumentNo, null);
+		p_criteriaGrid.add(lBPartner_ID, null);
+		p_criteriaGrid.add(fBPartner_ID, null);
+		p_criteriaGrid.add(fIsSOTrx, new ALayoutConstraint(0,5));
 		//  2nd Row
-		parameterPanel.add(lDescription, new ALayoutConstraint(1,0));
-		parameterPanel.add(fDescription, null);
-		parameterPanel.add(lDateFrom, null);
-		parameterPanel.add(fDateFrom, null);
-		parameterPanel.add(lDateTo, null);
-		parameterPanel.add(fDateTo, null);
+		p_criteriaGrid.add(lDescription, new ALayoutConstraint(1,0));
+		p_criteriaGrid.add(fDescription, null);
+		p_criteriaGrid.add(lDateFrom, null);
+		p_criteriaGrid.add(datePanel, null);
 		//  3rd Row
-		parameterPanel.add(lPOReference, new ALayoutConstraint(2,0));
-		parameterPanel.add(fPOReference, null);
-	//	parameterPanel.add(lOrg_ID, null);
-	//	parameterPanel.add(fOrg_ID, null);
+		p_criteriaGrid.add(lPOReference, new ALayoutConstraint(2,0));
+		p_criteriaGrid.add(fPOReference, null);
+		p_criteriaGrid.add(lShipper_ID, null);
+		p_criteriaGrid.add(fShipper_ID, null);
 	}	//	statInit
 
 	/**
 	 *	General Init
 	 *	@return true, if success
 	 */
-	private boolean initInfo ()
+	protected void initInfo (int record_id, String value)
 	{
-		//  Set Defaults
-		String bp = Env.getContext(Env.getCtx(), p_WindowNo, "C_BPartner_ID");
-		if (bp != null && bp.length() != 0)
-			fBPartner_ID.setValue(new Integer(bp));
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
+		//  Set values
+        if (!(record_id == 0))  // A record is defined
+        {
+        	fieldID = record_id;
+        } 
+        else
+        {
+			if (value != null && value.length() > 0)
+			{
+				fDocumentNo.setValue(value);
+			}
+			else
+			{
+				// Try to find other criteria in the context
+				String id;
+				//  M_InOut_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "M_InOut_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fieldID = new Integer(id).intValue();
+				}
 
-		//  prepare table
-		StringBuffer where = new StringBuffer("i.IsActive='Y'");
-		if (p_whereClause.length() > 0)
-			where.append(" AND ").append(Util.replace(p_whereClause, "M_InOut.", "i."));
-		prepareTable(s_invoiceLayout,
-			" M_InOut i",
-			where.toString(),
-			"2,3,4");
+				//  C_BPartner_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BPartner_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+					fBPartner_ID.setValue(new Integer(id));
 
-		return true;
+				//  M_Shipper_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "M_Shipper_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fShipper_ID.setValue(new Integer(id).intValue());
+				}
+
+			}
+        }
+
+        return;
 	}	//	initInfo
 
 	/*************************************************************************/
@@ -221,16 +287,27 @@
 	protected String getSQLWhere()
 	{
 		StringBuffer sql = new StringBuffer();
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if(!(fieldID == 0))
+			sql.append(" AND i.M_InOut_ID = ?");
+		//
 		if (fDocumentNo.getText().length() > 0)
 			sql.append(" AND UPPER(i.DocumentNo) LIKE ?");
+		//
 		if (fDescription.getText().length() > 0)
 			sql.append(" AND UPPER(i.Description) LIKE ?");
+		//
 		if (fPOReference.getText().length() > 0)
 			sql.append(" AND UPPER(i.POReference) LIKE ?");
 		//
 		if (fBPartner_ID.getValue() != null)
 			sql.append(" AND i.C_BPartner_ID=?");
 		//
+		if (fShipper_ID.getValue() != null)
+			sql.append(" AND i.M_Shipper_ID=?");
+		//
 		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
 		{
 			Timestamp from = (Timestamp)fDateFrom.getValue();
@@ -258,6 +335,10 @@
 	protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
 	{
 		int index = 1;
+		//  => ID
+		if (!(fieldID == 0))
+			pstmt.setInt(index++, fieldID);
+		//
 		if (fDocumentNo.getText().length() > 0)
 			pstmt.setString(index++, getSQLText(fDocumentNo));
 		if (fDescription.getText().length() > 0)
@@ -272,6 +353,13 @@
 			log.fine("BPartner=" + bp);
 		}
 		//
+		if (fShipper_ID.getValue() != null)
+		{
+			Integer bp = (Integer)fShipper_ID.getValue();
+			pstmt.setInt(index++, bp.intValue());
+			log.fine("Shipper=" + bp);
+		}
+		//
 		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
 		{
 			Timestamp from = (Timestamp)fDateFrom.getValue();
@@ -290,27 +378,14 @@
 		pstmt.setString(index++, fIsSOTrx.isSelected() ? "Y" : "N");
 	}   //  setParameters
 
-	/**
-	 *  Get SQL WHERE parameter
-	 *  @param f field
-	 *  @return sql part
-	 */
-	private String getSQLText (CTextField f)
-	{
-		String s = f.getText().toUpperCase();
-		if (!s.endsWith("%"))
-			s += "%";
-		log.fine( "String=" + s);
-		return s;
-	}   //  getSQLText
 
 	/**
 	 *	Zoom
 	 */
-	protected void zoom()
+	protected void zoom(int record_ID)
 	{
 		log.info( "InfoInOut.zoom");
-		Integer M_InOut_ID = getSelectedRowKey();
+		Integer M_InOut_ID = record_ID;
 		if (M_InOut_ID == null)
 			return;
 		MQuery query = new MQuery("M_InOut");
@@ -329,4 +404,55 @@
 		return true;
 	}	//	hasZoom
 
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
+	{
+		//  All the tracked fields
+		return(
+				fDocumentNo.hasChanged()	||
+				fDescription.hasChanged()	||
+				fPOReference.hasChanged()	||
+				fIsSOTrx.hasChanged()	||
+				fBPartner_ID.hasChanged()	||
+				fShipper_ID.hasChanged()	||
+				fDateFrom.hasChanged()	||
+				fDateTo.hasChanged());
+	}
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		fDocumentNo.set_oldValue();
+		fDescription.set_oldValue();
+		fPOReference.set_oldValue();
+		fIsSOTrx.set_oldValue();
+		fBPartner_ID.set_oldValue();
+		fShipper_ID.set_oldValue();
+		fDateFrom.set_oldValue();
+		fDateTo.set_oldValue();
+		return;
+	}
+    /**
+	 *  Clear all fields and set default values in check boxes
+	 */
+	protected void clearParameters()
+	{
+		//  Clear fields and set defaults
+		Object nullObject = null;
+		fDocumentNo.setValue("");
+		fDescription.setValue("");
+		fPOReference.setValue("");
+		fBPartner_ID.setValue(null);
+		fShipper_ID.setValue(null);
+		fDateFrom.setValue(nullObject);
+		fDateTo.setValue(nullObject);
+		fIsSOTrx.setSelected(!"N".equals(Env.getContext(Env.getCtx(), p_WindowNo, "IsSOTrx")));
+	}
+	
 }   //  InfoInOut
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/InfoInvoice.java
--- a/client/src/org/compiere/apps/search/InfoInvoice.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/InfoInvoice.java	Mon Feb 10 21:08:53 2014 -0500
@@ -16,29 +16,42 @@
  *****************************************************************************/
 package org.compiere.apps.search;
 
+import java.awt.BorderLayout;
+import java.awt.Dimension;
 import java.awt.Frame;
 import java.math.BigDecimal;
 import java.sql.PreparedStatement;
+import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Timestamp;
-import java.util.ArrayList;
+import java.util.logging.Level;
+
+import javax.swing.JScrollPane;
+import javax.swing.SwingUtilities;
 
 import org.adempiere.plaf.AdempierePLAF;
+import org.compiere.apps.AEnv;
 import org.compiere.apps.ALayout;
 import org.compiere.apps.ALayoutConstraint;
 import org.compiere.grid.ed.VCheckBox;
 import org.compiere.grid.ed.VDate;
 import org.compiere.grid.ed.VLookup;
 import org.compiere.grid.ed.VNumber;
+import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
+import org.compiere.minigrid.MiniTable;
+import org.compiere.model.MColumn;
+import org.compiere.model.MInvoice;
 import org.compiere.model.MLookupFactory;
 import org.compiere.model.MQuery;
 import org.compiere.swing.CLabel;
+import org.compiere.swing.CPanel;
 import org.compiere.swing.CTextField;
+import org.compiere.util.DB;
 import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
-import org.compiere.util.KeyNamePair;
 import org.compiere.util.Msg;
+import org.compiere.util.Trx;
 import org.compiere.util.Util;
 
 /**
@@ -49,6 +62,10 @@
  * 
  * @author Teo Sarca, SC ARHIPAC SERVICE SRL
  * 			FR [ 1926882 ] Info Invoice: display Due Date
+ *
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class InfoInvoice extends Info
 {
@@ -67,55 +84,62 @@
 	 *  @param multiSelection multiple selections
 	 *  @param whereClause where clause
 	 */
+	@Deprecated
 	protected InfoInvoice(Frame frame, boolean modal, int WindowNo, String value,
 		boolean multiSelection, String whereClause)
 	{
-		super (frame, modal, WindowNo, "i", "C_Invoice_ID", multiSelection, whereClause);
+		this(frame, modal, WindowNo, 0, value,
+				multiSelection, true, whereClause);
+	}
+	
+	/**
+	 *  Detail Protected Constructor
+	 *
+	 *  @param frame parent frame
+	 *  @param modal modal
+	 *  @param WindowNo window no
+	 *  @param record_id The record ID to find
+	 *  @param value query value to find, exclusive of record_id
+	 *  @param multiSelection multiple selections
+	 *  @param saveResults  True if results will be saved, false for info only
+	 *  @param whereClause where clause
+	 */
+	protected InfoInvoice(Frame frame, boolean modal, int WindowNo, int record_id, String value,
+		boolean multiSelection, boolean saveResults, String whereClause)
+	{
+		super (frame, modal, WindowNo, "i", "C_Invoice_ID", multiSelection, saveResults, whereClause);
 		setTitle(Msg.getMsg(Env.getCtx(), "InfoInvoice"));
 		//
-		try
-		{
-			statInit();
-			p_loadedOK = initInfo ();
-		}
-		catch (Exception e)
-		{
-			return;
-		}
+		StringBuffer where = new StringBuffer("i.IsActive='Y'");
+		if (whereClause.length() > 0)
+			where.append(" AND ").append(Util.replace(whereClause, "C_Invoice.", "i."));
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause(s_Order);
 		//
-		int no = p_table.getRowCount();
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
-		if (value != null && value.length() > 0)
-		{
-			fDocumentNo.setValue(value);
+		setShowTotals(true);
+		//
+		statInit();
+		initInfo (record_id, value);
+
+		//  To get the focus after the table update
+		m_heldLastFocus = fDocumentNo;
+		
+		//	AutoQuery
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
 			executeQuery();
-		}
-		//
-		pack();
-		//	Focus
-		fDocumentNo.requestFocus();
-	}   //  InfoInvoice
+		
+		p_loadedOK = true;
 
-	/**  String Array of Column Info    */
-	private Info_Column[] m_generalLayout;
-	/** list of query columns           */
-	private ArrayList 	m_queryColumns = new ArrayList();
-	/** Table Name              */
-	private String      m_tableName;
-	/** Key Column Name         */
-	private String      m_keyColumn;
+		AEnv.positionCenterWindow(frame, this);	}   //  InfoInvoice
 
 	//  Static Info
+	private int fieldID = 0;
 	private CLabel lDocumentNo = new CLabel(Msg.translate(Env.getCtx(), "DocumentNo"));
 	private CTextField fDocumentNo = new CTextField(10);
 	private CLabel lDescription = new CLabel(Msg.translate(Env.getCtx(), "Description"));
 	private CTextField fDescription = new CTextField(10);
-//	private CLabel lPOReference = new CLabel(Msg.translate(Env.getCtx(), "POReference"));
-//	private CTextField fPOReference = new CTextField(10);
-	//
-//	private CLabel lOrg_ID = new CLabel(Msg.translate(Env.getCtx(), "AD_Org_ID"));
-//	private VLookup fOrg_ID;
 	private CLabel lBPartner_ID = new CLabel(Msg.translate(Env.getCtx(), "BPartner"));
 	private VLookup fBPartner_ID;
 	private CLabel lOrder_ID = new CLabel(Msg.translate(Env.getCtx(), "C_Order_ID"));
@@ -125,37 +149,74 @@
 	//
 	private CLabel lDateFrom = new CLabel(Msg.translate(Env.getCtx(), "DateInvoiced"));
 	private VDate fDateFrom = new VDate("DateFrom", false, false, true, DisplayType.Date, Msg.translate(Env.getCtx(), "DateFrom"));
-	private CLabel lDateTo = new CLabel("-");
+	private CLabel lDateTo = new CLabel("-  ");
 	private VDate fDateTo = new VDate("DateTo", false, false, true, DisplayType.Date, Msg.translate(Env.getCtx(), "DateTo"));
 	private CLabel lAmtFrom = new CLabel(Msg.translate(Env.getCtx(), "GrandTotal"));
 	private VNumber fAmtFrom = new VNumber("AmtFrom", false, false, true, DisplayType.Amount, Msg.translate(Env.getCtx(), "AmtFrom"));
-	private CLabel lAmtTo = new CLabel("-");
+	private CLabel lAmtTo = new CLabel("-  ");
 	private VNumber fAmtTo = new VNumber("AmtTo", false, false, true, DisplayType.Amount, Msg.translate(Env.getCtx(), "AmtTo"));
 
+	private int 				m_C_Invoice_ID = 0;
+
+	private MiniTable scheduleTbl = new MiniTable();
+	private String m_sqlSchedule;
+	private CPanel tablePanel = new CPanel();
+
+	/** From Clause             */
+	private static String s_From = " C_Invoice i";
+	/** Order Clause             */
+	private static String s_Order = "2,3";
+
 	/**  Array of Column Info    */
-	private static final Info_Column[] s_invoiceLayout = {
+	private static final Info_Column[] s_Layout = {
 		new Info_Column(" ", "i.C_Invoice_ID", IDColumn.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "C_BPartner_ID"), "(SELECT Name FROM C_BPartner bp WHERE bp.C_BPartner_ID=i.C_BPartner_ID)", String.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "DateInvoiced"), "i.DateInvoiced", Timestamp.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "DueDate"), "i.DueDate", Timestamp.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "DocumentNo"), "i.DocumentNo", String.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "C_Currency_ID"), "(SELECT ISO_Code FROM C_Currency c WHERE c.C_Currency_ID=i.C_Currency_ID)", String.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "GrandTotal"), "i.GrandTotal",  BigDecimal.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "ConvertedAmount"), "currencyBase(i.GrandTotal, i.C_Currency_ID, i.DateAcct, i.AD_Client_ID, i.AD_Org_ID)", BigDecimal.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "OpenAmt"), "invoiceOpen(C_Invoice_ID,C_InvoicePaySchedule_ID)", BigDecimal.class, true, true, null),
+		new Info_Column(Msg.translate(Env.getCtx(), "OpenAmt"), "invoiceOpen(C_Invoice_ID,0)", BigDecimal.class, true, true, null),
+		new Info_Column(Msg.translate(Env.getCtx(), "C_PaymentTerm_ID"), "(SELECT pt.Name FROM C_PaymentTerm pt WHERE pt.C_PaymentTerm_ID = i.C_PaymentTerm_ID)", String.class),		
 		new Info_Column(Msg.translate(Env.getCtx(), "IsPaid"), "i.IsPaid", Boolean.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "IsSOTrx"), "i.IsSOTrx", Boolean.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "Description"), "i.Description", String.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "POReference"), "i.POReference", String.class),
-		new Info_Column("", "''", KeyNamePair.class, "i.C_InvoicePaySchedule_ID")
+		new Info_Column(Msg.translate(Env.getCtx(), "DocStatus"), "i.docstatus", String.class),
 	};
-	private static int INDEX_PAYSCHEDULE = s_invoiceLayout.length - 1;	//	last item
+
+	//  Invoice payment schedule info
+	/** From Clause             */
+	private static String s_subFrom = " C_Invoice_v i";
+    /** Where Clause						*/
+    private static String s_subWhere = "i.C_Invoice_ID = ?";
+	/**  Array of Column Info    */
+    private static ColumnInfo[] s_subLayout = new ColumnInfo[] {
+		new ColumnInfo(" ", "i.C_InvoicePaySchedule_ID", IDColumn.class),
+		new ColumnInfo(Msg.getMsg(Env.getCtx(), "Payment #"), "(SELECT ((SELECT COUNT(C_Invoice_ID) AS payno"
+				+			   " FROM C_Invoice_V"
+				+			   " WHERE C_Invoice_ID = civ.C_Invoice_ID"
+				+			   " AND duedate <= civ.duedate"
+				+			   " GROUP BY C_Invoice_ID) || ' / ' ||"
+				+			   " (SELECT COUNT(C_Invoice_ID) as numpmts"
+				+			   " FROM C_Invoice_V"
+				+			   " WHERE C_Invoice_ID = civ.C_Invoice_ID"
+				+			   " GROUP BY C_Invoice_ID)) as numpaymts"
+				+			   " FROM C_Invoice_v civ WHERE i.C_Invoice_ID=civ.C_Invoice_ID"
+				+														" AND (i.C_InvoicePaySchedule_ID IS NULL"
+				+														" OR i.C_InvoicePaySchedule_ID = civ.C_InvoicePaySchedule_ID))", String.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "DueDate"), "i.DueDate", Timestamp.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "C_Currency_ID"), "(SELECT ISO_Code FROM C_Currency c WHERE c.C_Currency_ID=i.C_Currency_ID)", String.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "GrandTotal"), "i.GrandTotal",  BigDecimal.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "ConvertedAmount"), "currencyBase(i.GrandTotal, i.C_Currency_ID, i.DateAcct, i.AD_Client_ID, i.AD_Org_ID)", BigDecimal.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "OpenAmt"), "invoiceOpen(C_Invoice_ID,C_InvoicePaySchedule_ID)", BigDecimal.class, true, true, null),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "IsPaid"), "CASE WHEN invoiceOpen(C_Invoice_ID,C_InvoicePaySchedule_ID) <= 0 THEN 'Y' ELSE 'N' END", Boolean.class)
+	};
 
 	/**
 	 *	Static Setup - add fields to parameterPanel
-	 *	@throws Exception
 	 */
-	private void statInit() throws Exception
+	private void statInit()
 	{
 		lDocumentNo.setLabelFor(fDocumentNo);
 		fDocumentNo.setBackground(AdempierePLAF.getInfoBackground());
@@ -163,29 +224,27 @@
 		lDescription.setLabelFor(fDescription);
 		fDescription.setBackground(AdempierePLAF.getInfoBackground());
 		fDescription.addActionListener(this);
-	//	lPOReference.setLabelFor(lPOReference);
-	//	fPOReference.setBackground(AdempierePLAF.getInfoBackground());
-	//	fPOReference.addActionListener(this);
 		fIsPaid.setSelected(false);
 		fIsPaid.addActionListener(this);
 		fIsSOTrx.setSelected(!"N".equals(Env.getContext(Env.getCtx(), p_WindowNo, "IsSOTrx")));
 		fIsSOTrx.addActionListener(this);
 		//
-	//	fOrg_ID = new VLookup("AD_Org_ID", false, false, true,
-	//		MLookupFactory.create(Env.getCtx(), 3486, m_WindowNo, DisplayType.TableDir, false),
-	//		DisplayType.TableDir, m_WindowNo);
-	//	lOrg_ID.setLabelFor(fOrg_ID);
-	//	fOrg_ID.setBackground(AdempierePLAF.getInfoBackground());
 		//	C_Invoice.C_BPartner_ID
 		fBPartner_ID = new VLookup("C_BPartner_ID", false, false, true,
-			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 3499, DisplayType.Search));
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0,  
+						MColumn.getColumn_ID(MInvoice.Table_Name, MInvoice.COLUMNNAME_C_BPartner_ID),
+						DisplayType.Search));
 		lBPartner_ID.setLabelFor(fBPartner_ID);
 		fBPartner_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fBPartner_ID.addPropertyChangeListener(this);
 		//	C_Invoice.C_Order_ID
-		fOrder_ID = new VLookup("C_Order_ID", false, false, true,
-			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 4247, DisplayType.Search));
+		fOrder_ID = new VLookup("C_Order_ID", false, false, true, 
+	        		MLookupFactory.get(Env.getCtx(), p_WindowNo,0, 
+	        				MColumn.getColumn_ID(MInvoice.Table_Name, MInvoice.COLUMNNAME_C_Order_ID), 
+	        				DisplayType.Search));
 		lOrder_ID.setLabelFor(fOrder_ID);
 		fOrder_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fOrder_ID.addPropertyChangeListener(this);
 		//
 		lDateFrom.setLabelFor(fDateFrom);
 		fDateFrom.setBackground(AdempierePLAF.getInfoBackground());
@@ -199,55 +258,127 @@
 		lAmtTo.setLabelFor(fAmtTo);
 		fAmtTo.setBackground(AdempierePLAF.getInfoBackground());
 		fAmtTo.setToolTipText(Msg.translate(Env.getCtx(), "AmtTo"));
+
 		//
-		parameterPanel.setLayout(new ALayout());
+		CPanel amtPanel = new CPanel();
+		CPanel datePanel = new CPanel();
+		
+		amtPanel.setLayout(new ALayout(0, 0, true));
+		amtPanel.add(fAmtFrom, new ALayoutConstraint(0,0));
+		amtPanel.add(lAmtTo, null);
+		amtPanel.add(fAmtTo, null);
+
+		datePanel.setLayout(new ALayout(0, 0, true));
+		datePanel.add(fDateFrom, new ALayoutConstraint(0,0));
+		datePanel.add(lDateTo, null);
+		datePanel.add(fDateTo, null);
+
 		//  First Row
-		parameterPanel.add(lDocumentNo, new ALayoutConstraint(0,0));
-		parameterPanel.add(fDocumentNo, null);
-		parameterPanel.add(lBPartner_ID, null);
-		parameterPanel.add(fBPartner_ID, null);
-		parameterPanel.add(fIsSOTrx, new ALayoutConstraint(0,5));
-		parameterPanel.add(fIsPaid, null);
+		p_criteriaGrid.add(lDocumentNo, new ALayoutConstraint(0,0));
+		p_criteriaGrid.add(fDocumentNo, null);
+		p_criteriaGrid.add(lBPartner_ID, null);
+		p_criteriaGrid.add(fBPartner_ID, null);
+		p_criteriaGrid.add(fIsSOTrx, new ALayoutConstraint(0,5));
 		//  2nd Row
-		parameterPanel.add(lDescription, new ALayoutConstraint(1,0));
-		parameterPanel.add(fDescription, null);
-		parameterPanel.add(lDateFrom, null);
-		parameterPanel.add(fDateFrom, null);
-		parameterPanel.add(lDateTo, null);
-		parameterPanel.add(fDateTo, null);
+		p_criteriaGrid.add(lDescription, new ALayoutConstraint(1,0));
+		p_criteriaGrid.add(fDescription, null);
+		p_criteriaGrid.add(lDateFrom, null);
+		p_criteriaGrid.add(datePanel, null);
+		p_criteriaGrid.add(fIsPaid, new ALayoutConstraint(1,5));
 		//  3rd Row
-		parameterPanel.add(lOrder_ID, new ALayoutConstraint(2,0));
-		parameterPanel.add(fOrder_ID, null);
-		parameterPanel.add(lAmtFrom, null);
-		parameterPanel.add(fAmtFrom, null);
-		parameterPanel.add(lAmtTo, null);
-		parameterPanel.add(fAmtTo, null);
-	//	parameterPanel.add(lOrg_ID, null);
-	//	parameterPanel.add(fOrg_ID, null);
+		p_criteriaGrid.add(lOrder_ID, new ALayoutConstraint(2,0));
+		p_criteriaGrid.add(fOrder_ID, null);
+		p_criteriaGrid.add(lAmtFrom, null);
+		p_criteriaGrid.add(amtPanel, null);
+		
+		m_sqlSchedule = scheduleTbl.prepareTable(s_subLayout, s_subFrom, s_subWhere, false, "i");
+		scheduleTbl.setRowSelectionAllowed(true);
+		scheduleTbl.setMultiSelection(false);
+		scheduleTbl.addMouseListener(this);
+		scheduleTbl.setShowTotals(true);
+		scheduleTbl.autoSize();
+
+        tablePanel.setPreferredSize(new Dimension(INFO_WIDTH, SCREEN_HEIGHT > 600 ? 255 : 110));
+        tablePanel.setLayout(new BorderLayout());
+        tablePanel.add(new JScrollPane(scheduleTbl), BorderLayout.CENTER);        
+
+        //  Add the details to the p_detailPanel
+		p_detailTaskPane.setTitle(Msg.translate(Env.getCtx(), "C_InvoicePaySchedule_ID"));        
+        p_detailTaskPane.add(tablePanel, BorderLayout.CENTER);
+        p_detailTaskPane.setVisible(true);
 	}	//	statInit
 
 	/**
 	 *	General Init
-	 *	@return true, if success
 	 */
-	private boolean initInfo ()
+	protected void initInfo (int record_id, String value)
 	{
-		//  Set Defaults
-		String bp = Env.getContext(Env.getCtx(), p_WindowNo, "C_BPartner_ID");
-		if (bp != null && bp.length() != 0)
-			fBPartner_ID.setValue(new Integer(bp));
+		//
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
 
-		//  prepare table
-		StringBuffer where = new StringBuffer("i.IsActive='Y'");
-		if (p_whereClause.length() > 0)
-			where.append(" AND ").append(Util.replace(p_whereClause, "C_Invoice.", "i."));
-		prepareTable(s_invoiceLayout,
-			" C_Invoice_v i",   //  corrected for CM
-			where.toString(),
-			"2,3,4,5");
-		//
-	//	MAllocationLine.setIsPaid(Env.getCtx(), 0, null);
-		return true;
+		//  Set values
+        if (!(record_id == 0))  // A record is defined
+        {
+        	fieldID = record_id;
+        	
+        	// Have to set isPaid and isSOTrx to match or the query will return no results
+			String trxName = Trx.createTrxName();
+			MInvoice mi = new MInvoice(Env.getCtx(),record_id,trxName);
+        	fIsPaid.setSelected(mi.isPaid());
+        	fIsSOTrx.setSelected(mi.isSOTrx());
+        	mi = null;
+        	Trx.get(trxName, false).close();
+        }
+        else  // Try to find other criteria in the context
+        {
+			String id;
+			
+			//  C_BPartner_ID
+			id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BPartner_ID", true);
+			if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				fBPartner_ID.setValue(new Integer(id));
+			
+			//  C_Order_ID
+			id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Order_ID", true);
+			if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				fOrder_ID.setValue(new Integer(id));
+
+			//  IsSOTrx - Window context
+			id = Env.getContext(Env.getCtx(), p_WindowNo, "IsSOTrx", true);
+			if (id != null && id.length() != 0 && (id == "Y" || id == "N"))
+			{
+				fIsSOTrx.setSelected(id == "Y");
+			}
+
+			//  The value passed in from the field
+			if (value != null && value.length() > 0)
+			{
+				fDocumentNo.setValue(value);			
+			}
+			else
+			{
+				//  C_Invoice_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Invoice_ID", true);
+				if (id != null && id.length() != 0  && (new Integer(id).intValue() > 0))
+				{
+					fieldID = new Integer(id).intValue();
+					
+		        	// Have to set isPaid and isSOTrx to match or the query will return no results
+					String trxName = Trx.createTrxName();
+					MInvoice mi = new MInvoice(Env.getCtx(),record_id,trxName);
+		        	fIsPaid.setSelected(mi.isPaid());
+		        	fIsSOTrx.setSelected(mi.isSOTrx());
+		        	mi = null;
+		        	Trx.get(trxName, false).close();
+				}
+				
+			}
+        }
+        
+		return;
 	}	//	initInfo
 
 	
@@ -260,12 +391,17 @@
 	protected String getSQLWhere()
 	{
 		StringBuffer sql = new StringBuffer();
-		if (fDocumentNo.getText().length() > 0)
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if(!(fieldID == 0))
+			sql.append(" AND i.C_Invoice_ID = ?");
+		//
+		if (isValidSQLText(fDocumentNo))
 			sql.append(" AND UPPER(i.DocumentNo) LIKE ?");
-		if (fDescription.getText().length() > 0)
+		//
+		if (isValidSQLText(fDescription))
 			sql.append(" AND UPPER(i.Description) LIKE ?");
-	//	if (fPOReference.getText().length() > 0)
-	//		sql.append(" AND UPPER(i.POReference) LIKE ?");
 		//
 		if (fBPartner_ID.getValue() != null)
 			sql.append(" AND i.C_BPartner_ID=?");
@@ -313,12 +449,13 @@
 	protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
 	{
 		int index = 1;
-		if (fDocumentNo.getText().length() > 0)
+		//  => ID
+		if (!(fieldID == 0))
+			pstmt.setInt(index++, fieldID);
+		if (isValidSQLText(fDocumentNo))
 			pstmt.setString(index++, getSQLText(fDocumentNo));
-		if (fDescription.getText().length() > 0)
+		if (isValidSQLText(fDescription))
 			pstmt.setString(index++, getSQLText(fDescription));
-	//	if (fPOReference.getText().length() > 0)
-	//		pstmt.setString(index++, getSQLText(fPOReference));
 		//
 		if (fBPartner_ID.getValue() != null)
 		{
@@ -365,31 +502,88 @@
 				pstmt.setBigDecimal(index++, to);
 			}
 		}
-		pstmt.setString(index++, fIsPaid.isSelected() ? "Y" : "N");
-		pstmt.setString(index++, fIsSOTrx.isSelected() ? "Y" : "N");
+			pstmt.setString(index++, fIsPaid.isSelected() ? "Y" : "N");
+			pstmt.setString(index++, fIsSOTrx.isSelected() ? "Y" : "N");
 	}   //  setParameters
 
 	/**
-	 *  Get SQL WHERE parameter
-	 *  @param f field
-	 *  @return sql
+	 * A record was selected - take action to sync subordinate tables if any
 	 */
-	private String getSQLText (CTextField f)
+	protected void recordSelected(int key)
 	{
-		String s = f.getText().toUpperCase();
-		if (!s.endsWith("%"))
-			s += "%";
-		log.fine( "String=" + s);
-		return s;
-	}   //  getSQLText
-	
+		//  Found and selected the same record or selected the first record
+    	if (m_C_Invoice_ID != key)
+    	{
+    		refresh();
+    	}
+		p_detailTaskPane.setCollapsed(false);
+		return;
+	}
+	/**
+	 * No record was selected - take action to sync subordinate tables if any
+	 */
+	protected void noRecordSelected()
+	{
+		//  Nothing was selected, or the query is empty
+		//  - close the panel
+		m_C_Invoice_ID = 0;
+		p_detailTaskPane.setCollapsed(true);
+		return;
+	}
+
+	/**
+	 * 	Refresh Query
+	 */
+	private void refresh()
+	{
+		//  Invoke later to not delay events.
+		SwingUtilities.invokeLater(new Runnable(){public void run()
+		{
+	    	String sql;
+			PreparedStatement pstmt = null;
+			ResultSet rs = null;
+
+			int leadRowKey = p_table.getLeadRowKey();
+			
+	    	if (m_C_Invoice_ID != leadRowKey)
+			{
+	    		m_C_Invoice_ID = leadRowKey;
+	    		
+	    		//  Payment Schedule table
+				sql = m_sqlSchedule;
+		
+				log.finest(sql);
+				try
+				{
+					pstmt = DB.prepareStatement(sql, null);
+					pstmt.setInt(1, m_C_Invoice_ID);
+					rs = pstmt.executeQuery();
+					scheduleTbl.loadTable(rs);
+					rs.close();
+				}
+				catch (Exception e)
+				{
+					log.log(Level.WARNING, sql, e);
+				}
+				finally
+				{
+					DB.close(rs, pstmt);
+					rs = null; pstmt = null;
+				}
+			}
+			
+		}});
+	}	//	refresh
+
+
 	/**
 	 *	Zoom
 	 */
-	protected void zoom()
+	protected void zoom(int record_ID)
 	{
 		log.info( "InfoInvoice.zoom");
-		Integer C_Invoice_ID = getSelectedRowKey();
+		// Integer C_Invoice_ID = getSelectedRowKey();
+		Integer C_Invoice_ID = record_ID;
 		if (C_Invoice_ID == null)
 			return;
 		MQuery query = new MQuery("C_Invoice");
@@ -417,19 +611,65 @@
 		Integer ID = getSelectedRowKey();
 		Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "C_Invoice_ID", ID == null ? "0" : ID.toString());
 		//
-		int C_InvoicePaySchedule_ID = 0;
-		int row = p_table.getSelectedRow();
-		if (row >= 0)
-		{
-			Object value = p_table.getValueAt(row, INDEX_PAYSCHEDULE);
-			if (value != null && value instanceof KeyNamePair)
-				C_InvoicePaySchedule_ID = ((KeyNamePair)value).getKey();
-		}
+		int C_InvoicePaySchedule_ID = scheduleTbl.getSelectedRowKey();
 		if (C_InvoicePaySchedule_ID <= 0)	//	not selected
 			Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "C_InvoicePaySchedule_ID", "0");
 		else
 			Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "C_InvoicePaySchedule_ID", String.valueOf(C_InvoicePaySchedule_ID));
 	}	//	saveSelectionDetail
 	
-	
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
+	{
+		//  All the tracked fields
+		return(
+				fDocumentNo.hasChanged()	||
+				fDescription.hasChanged()	||
+				fIsPaid.hasChanged()	||
+				fIsSOTrx.hasChanged()	||
+				fBPartner_ID.hasChanged()	||
+				fOrder_ID.hasChanged()	||
+				fAmtFrom.hasChanged() ||
+				fAmtTo.hasChanged() ||
+				fDateFrom.hasChanged()	||
+				fDateTo.hasChanged());
+	}
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		fAmtFrom.set_oldValue();
+		fAmtTo.set_oldValue();
+		fDocumentNo.set_oldValue();
+		fDescription.set_oldValue();
+		fIsPaid.set_oldValue();
+		fIsSOTrx.set_oldValue();
+		fBPartner_ID.set_oldValue();
+		fOrder_ID.set_oldValue();
+		fDateFrom.set_oldValue();
+		fDateTo.set_oldValue();
+		return;
+	}
+    /**
+	 *  Clear all fields and set default values in check boxes
+	 */
+	protected void clearParameters()
+	{
+		//  Clear fields and set defaults
+		Object nullObject = null;
+		fDocumentNo.setValue("");
+		fDescription.setValue("");
+		fIsPaid.setSelected(false);
+		fBPartner_ID.setValue(null);
+		fOrder_ID.setValue(null);
+		fDateFrom.setValue(nullObject);
+		fDateTo.setValue(nullObject);
+		fIsSOTrx.setSelected(!"N".equals(Env.getContext(Env.getCtx(), p_WindowNo, "IsSOTrx")));
+	}
 }   //  InfoInvoice
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/InfoOrder.java
--- a/client/src/org/compiere/apps/search/InfoOrder.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/InfoOrder.java	Mon Feb 10 21:08:53 2014 -0500
@@ -17,17 +17,15 @@
 package org.compiere.apps.search;
 
 import java.awt.Frame;
+import java.awt.event.ActionEvent;
 import java.math.BigDecimal;
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 import java.sql.Timestamp;
 import java.util.ArrayList;
 
-import javax.swing.JPanel;
-
-import net.miginfocom.swing.MigLayout;
-
 import org.adempiere.plaf.AdempierePLAF;
+import org.compiere.apps.AEnv;
 import org.compiere.apps.ALayout;
 import org.compiere.apps.ALayoutConstraint;
 import org.compiere.grid.ed.VCheckBox;
@@ -35,13 +33,17 @@
 import org.compiere.grid.ed.VLookup;
 import org.compiere.grid.ed.VNumber;
 import org.compiere.minigrid.IDColumn;
+import org.compiere.model.MColumn;
 import org.compiere.model.MLookupFactory;
+import org.compiere.model.MOrder;
 import org.compiere.model.MQuery;
 import org.compiere.swing.CLabel;
+import org.compiere.swing.CPanel;
 import org.compiere.swing.CTextField;
 import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
 import org.compiere.util.Msg;
+import org.compiere.util.Trx;
 import org.compiere.util.Util;
 
 /**
@@ -49,6 +51,10 @@
  *
  *  @author Jorg Janke
  *  @version  $Id: InfoOrder.java,v 1.2 2006/07/30 00:51:27 jjanke Exp $
+ *
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class InfoOrder extends Info
 {
@@ -58,7 +64,7 @@
 	private static final long serialVersionUID = 2246871771555208114L;
 
 	/**
-	 *  Detail Protected Contructor
+	 *  Detail Protected Constructor
 	 *  @param frame parent frame
 	 *  @param modal modal
 	 *  @param WindowNo window no
@@ -66,47 +72,60 @@
 	 *  @param multiSelection multiple selections
 	 *  @param whereClause where clause
 	 */
+	@Deprecated
 	protected InfoOrder(Frame frame, boolean modal, int WindowNo, String value,
 		boolean multiSelection, String whereClause)
 	{
-		super (frame, modal, WindowNo, "o", "C_Order_ID", multiSelection, whereClause);
+		this(frame, modal, WindowNo, 0, value,
+				multiSelection, true, whereClause);
+	}
+	
+	/**
+	 *  Detail Protected Constructor
+	 *  @param frame parent frame
+	 *  @param modal modal
+	 *  @param WindowNo window no
+	 *  @param record_id The record ID to find
+	 *  @param value query value to find, exclusive of record_id
+	 *  @param multiSelection multiple selections
+	 *  @param saveResults  True if results will be saved, false for info only
+	 *  @param whereClause where clause
+	 */
+	protected InfoOrder(Frame frame, boolean modal, int WindowNo, int record_id, String value,
+		boolean multiSelection, boolean saveResults, String whereClause)
+	{
+		super (frame, modal, WindowNo, "o", "C_Order_ID", multiSelection, saveResults, whereClause);
 		log.info( "InfoOrder");
 		setTitle(Msg.getMsg(Env.getCtx(), "InfoOrder"));
 		//
-		try
-		{
-			statInit();
-			p_loadedOK = initInfo ();
-		}
-		catch (Exception e)
-		{
-			return;
-		}
+		StringBuffer where = new StringBuffer("o.IsActive='Y'");
+		if (whereClause.length() > 0)
+			where.append(" AND ").append(Util.replace(whereClause, "C_Order.", "o."));
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause(s_Order);
 		//
-		int no = p_table.getRowCount();
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
-		if (value != null && value.length() > 0)
-		{
-			fDocumentNo.setValue(value);
+		setShowTotals(true);
+		//
+		statInit();
+		initInfo (record_id, value);
+
+		//  To get the focus after the table update
+		m_heldLastFocus = fDocumentNo;
+		
+		//	AutoQuery
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
 			executeQuery();
-		}
-		//
-		pack();
-		//	Focus
-		fDocumentNo.requestFocus();
+		
+		p_loadedOK = true;
+
+		AEnv.positionCenterWindow(frame, this);	
+		
 	}   //  InfoOrder
 
-	/**  String Array of Column Info    */
-	private Info_Column[] m_generalLayout;
-	/** list of query columns           */
-	private ArrayList 	m_queryColumns = new ArrayList();
-	/** Table Name              */
-	private String      m_tableName;
-	/** Key Column Name         */
-	private String      m_keyColumn;
-
 	//  Static Info
+	private int fieldID = 0;
 	private CLabel lDocumentNo = new CLabel(Msg.translate(Env.getCtx(), "DocumentNo"));
 	private CTextField fDocumentNo = new CTextField(10);
 	private CLabel lDescription = new CLabel(Msg.translate(Env.getCtx(), "Description"));
@@ -114,42 +133,31 @@
 	private CLabel lPOReference = new CLabel(Msg.translate(Env.getCtx(), "POReference"));
 	private CTextField fPOReference = new CTextField(10);
 	//
-//	private CLabel lOrg_ID = new CLabel(Msg.translate(Env.getCtx(), "AD_Org_ID"));
-//	private VLookup fOrg_ID;
 	private CLabel lBPartner_ID = new CLabel(Msg.translate(Env.getCtx(), "BPartner"));
 	private VLookup fBPartner_ID;
 	//
 	private CLabel lDateFrom = new CLabel(Msg.translate(Env.getCtx(), "DateOrdered"));
 	private VDate fDateFrom = new VDate("DateFrom", false, false, true, DisplayType.Date, Msg.translate(Env.getCtx(), "DateFrom"));
-	private CLabel lDateTo = new CLabel("-");
+	private CLabel lDateTo = new CLabel("- ");
 	private VDate fDateTo = new VDate("DateTo", false, false, true, DisplayType.Date, Msg.translate(Env.getCtx(), "DateTo"));
 	private CLabel lAmtFrom = new CLabel(Msg.translate(Env.getCtx(), "GrandTotal"));
 	private VNumber fAmtFrom = new VNumber("AmtFrom", false, false, true, DisplayType.Amount, Msg.translate(Env.getCtx(), "AmtFrom"));
-	private CLabel lAmtTo = new CLabel("-");
+	private CLabel lAmtTo = new CLabel("- ");
 	private VNumber fAmtTo = new VNumber("AmtTo", false, false, true, DisplayType.Amount, Msg.translate(Env.getCtx(), "AmtTo"));
 	private VCheckBox fIsSOTrx = new VCheckBox ("IsSOTrx", false, false, true, Msg.translate(Env.getCtx(), "IsSOTrx"), "", false);
 	private VCheckBox fIsDelivered = new VCheckBox("IsDelivered", false, false, true, Msg.translate(Env.getCtx(), "IsDelivered"), "", false);
 
+	/** From Clause             */
+	private static String s_From = " C_Order o";
+	/** Order Clause             */
+	private static String s_Order = "2,3,4";
 	/**  Array of Column Info    */
-	private static final Info_Column[] s_invoiceLayout = {
-		new Info_Column(" ", "o.C_Order_ID", IDColumn.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "C_BPartner_ID"), "(SELECT Name FROM C_BPartner bp WHERE bp.C_BPartner_ID=o.C_BPartner_ID)", String.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "DateOrdered"), "o.DateOrdered", Timestamp.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "DocumentNo"), "o.DocumentNo", String.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "C_Currency_ID"), "(SELECT ISO_Code FROM C_Currency c WHERE c.C_Currency_ID=o.C_Currency_ID)", String.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "GrandTotal"), "o.GrandTotal",  BigDecimal.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "ConvertedAmount"), "currencyBase(o.GrandTotal,o.C_Currency_ID,o.DateAcct, o.AD_Client_ID,o.AD_Org_ID)", BigDecimal.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "IsSOTrx"), "o.IsSOTrx", Boolean.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "Description"), "o.Description", String.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "POReference"), "o.POReference", String.class),
-		new Info_Column(Msg.translate(Env.getCtx(), "IsDelivered"), "o.IsDelivered", Boolean.class),
-	};
+	private static Info_Column[] s_Layout = null;
 
 	/**
 	 *	Static Setup - add fields to parameterPanel
-	 *  @throws Exception if Lookups cannot be initialized
 	 */
-	private void statInit() throws Exception
+	private void statInit()
 	{
 		lDocumentNo.setLabelFor(fDocumentNo);
 		fDocumentNo.setBackground(AdempierePLAF.getInfoBackground());
@@ -165,87 +173,199 @@
 		fIsDelivered.setSelected(false);
 		fIsDelivered.addActionListener(this);
 		//
-	//	fOrg_ID = new VLookup("AD_Org_ID", false, false, true,
-	//		MLookupFactory.create(Env.getCtx(), 3486, m_WindowNo, DisplayType.TableDir, false),
-	//		DisplayType.TableDir, m_WindowNo);
-	//	lOrg_ID.setLabelFor(fOrg_ID);
-	//	fOrg_ID.setBackground(AdempierePLAF.getInfoBackground());
 		fBPartner_ID = new VLookup("C_BPartner_ID", false, false, true,
-			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 3499, DisplayType.Search));
+			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+					MColumn.getColumn_ID(MOrder.Table_Name, MOrder.COLUMNNAME_C_BPartner_ID), 
+					DisplayType.Search));
 		lBPartner_ID.setLabelFor(fBPartner_ID);
 		fBPartner_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fBPartner_ID.addActionListener(this);
 		//
 		lDateFrom.setLabelFor(fDateFrom);
 		fDateFrom.setBackground(AdempierePLAF.getInfoBackground());
 		fDateFrom.setToolTipText(Msg.translate(Env.getCtx(), "DateFrom"));
+		fDateFrom.addActionListener(this);
 		lDateTo.setLabelFor(fDateTo);
 		fDateTo.setBackground(AdempierePLAF.getInfoBackground());
 		fDateTo.setToolTipText(Msg.translate(Env.getCtx(), "DateTo"));
+		fDateTo.addActionListener(this);
 		lAmtFrom.setLabelFor(fAmtFrom);
 		fAmtFrom.setBackground(AdempierePLAF.getInfoBackground());
 		fAmtFrom.setToolTipText(Msg.translate(Env.getCtx(), "AmtFrom"));
+		fAmtFrom.addActionListener(this);
+		fAmtFrom.setBorder(fDateFrom.getBorder());  // Not sure why this is necessary?  The border is not visible otherwise.
 		lAmtTo.setLabelFor(fAmtTo);
 		fAmtTo.setBackground(AdempierePLAF.getInfoBackground());
 		fAmtTo.setToolTipText(Msg.translate(Env.getCtx(), "AmtTo"));
+		fAmtTo.addActionListener(this);
+		fAmtTo.setBorder(fDateFrom.getBorder());  // Not sure why this is necessary?  The border is not visible otherwise.
 		//
-		parameterPanel.setLayout(new MigLayout("", "[100][140][120][250][100]"));
+		CPanel amtPanel = new CPanel();
+		CPanel datePanel = new CPanel();
+		
+		amtPanel.setLayout(new ALayout(0, 0, true));
+		amtPanel.add(fAmtFrom, new ALayoutConstraint(0,0));
+		amtPanel.add(lAmtTo, null);
+		amtPanel.add(fAmtTo, null);
+
+		datePanel.setLayout(new ALayout(0, 0, true));
+		datePanel.add(fDateFrom, new ALayoutConstraint(0,0));
+		datePanel.add(lDateTo, null);
+		datePanel.add(fDateTo, null);
+
 		//  First Row
-		parameterPanel.add(lDocumentNo, "align right");
-		parameterPanel.add(fDocumentNo, "growx");
-		parameterPanel.add(lBPartner_ID, "align right");
-		parameterPanel.add(fBPartner_ID, "growx");
-		parameterPanel.add(fIsSOTrx, "gapleft 15,wrap");
+		p_criteriaGrid.add(lDocumentNo, new ALayoutConstraint(0,0));
+		p_criteriaGrid.add(fDocumentNo, null);
+		p_criteriaGrid.add(lDescription, null);
+		p_criteriaGrid.add(fDescription, null);
+		p_criteriaGrid.add(fIsSOTrx, new ALayoutConstraint(0,4));
 
 		//  2nd Row
-		parameterPanel.add(lDescription, "align right");
-		parameterPanel.add(fDescription, "growx");
-		parameterPanel.add(lDateFrom, "align right");
-		
-		JPanel datePanel = new JPanel();
-		datePanel.setLayout(new MigLayout("insets 0","[120][min!][120]"));
-		datePanel.add(fDateFrom, "growx");
-		datePanel.add(lDateTo);
-		datePanel.add(fDateTo, "growx");
-		parameterPanel.add(datePanel);
-		parameterPanel.add(fIsDelivered, "gapleft 15,wrap");
+		p_criteriaGrid.add(lBPartner_ID, new ALayoutConstraint(1,0));
+		p_criteriaGrid.add(fBPartner_ID, null);
+		p_criteriaGrid.add(lDateFrom, null);
+		p_criteriaGrid.add(datePanel, null);
+		p_criteriaGrid.add(fIsDelivered, new ALayoutConstraint(1,4));
 
 		//  3rd Row
-		parameterPanel.add(lPOReference, "align right");
-		parameterPanel.add(fPOReference, "growx");
-		parameterPanel.add(lAmtFrom, "align right");
-		
-		JPanel amountPanel = new JPanel();
-		amountPanel.setLayout(new MigLayout("insets 0","[120][min!][120]"));
-		amountPanel.add(fAmtFrom, "growx");
-		amountPanel.add(lAmtTo);
-		amountPanel.add(fAmtTo, "growx");
-		parameterPanel.add(amountPanel);
+		p_criteriaGrid.add(lPOReference, new ALayoutConstraint(2,0));
+		p_criteriaGrid.add(fPOReference, null);
+		p_criteriaGrid.add(lAmtFrom, null);
+		p_criteriaGrid.add(amtPanel, null);
 	}	//	statInit
 
 	/**
 	 *	General Init
 	 *	@return true, if success
 	 */
-	private boolean initInfo ()
+	protected void initInfo (int record_id, String value)
 	{
-		//  Set Defaults
-		String bp = Env.getContext(Env.getCtx(), p_WindowNo, "C_BPartner_ID");
-		if (bp != null && bp.length() != 0)
-			fBPartner_ID.setValue(new Integer(bp));
+		//
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
 
-		//  prepare table
-		StringBuffer where = new StringBuffer("o.IsActive='Y'");
-		if (p_whereClause.length() > 0)
-			where.append(" AND ").append(Util.replace(p_whereClause, "C_Order.", "o."));
-		prepareTable(s_invoiceLayout,
-			" C_Order o",
-			where.toString(),
-			"2,3,4");
+		if (record_id != 0)
+		{
+			fieldID = record_id;
+			
+			// Have to set boolean fields in query
+			String trxName = Trx.createTrxName();
+			MOrder o = new MOrder(Env.getCtx(),record_id,trxName);
+			fIsSOTrx.setValue(o.isSOTrx());
+			fIsDelivered.setValue(o.isDelivered());
+			o = null;
+			Trx.get(trxName, false).close();	
+		}
+		else  // Try to find other criteria in the context
+		{
+			String id;
+			
+			//  C_BPartner_ID - restrict the search to the current BPartner
+			id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BPartner_ID", true);
+			if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				fBPartner_ID.setValue(new Integer(id));
 
-		return true;
+			//  The value passed in from the field
+			if (value != null && value.length() > 0)
+			{
+				fDocumentNo.setValue(value);
+			}
+			else
+			{
+				//  C_Order_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Order_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fieldID = new Integer(id).intValue();
+
+					// Have to set boolean fields in query
+					String trxName = Trx.createTrxName();
+					MOrder o = new MOrder(Env.getCtx(),record_id,trxName);
+					fIsSOTrx.setValue(o.isSOTrx());
+					fIsDelivered.setValue(o.isDelivered());
+					o = null;
+					Trx.get(trxName, false).close();	
+				}
+			}
+		}
+		
+		return;
 	}	//	initInfo
 
-	
+	/**
+	 *  Get Table Layout
+	 *
+	 * @return array of Column_Info
+	 */
+	protected Info_Column[] getTableLayout()
+	{
+
+		ArrayList<Info_Column> list = new ArrayList<Info_Column>();
+		list.add(new Info_Column(" ", "o.C_Order_ID", IDColumn.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "C_BPartner_ID"), "(SELECT Name FROM C_BPartner bp WHERE bp.C_BPartner_ID=o.C_BPartner_ID)", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "DateOrdered"), "o.DateOrdered", Timestamp.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "DocumentNo"), "o.DocumentNo", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "C_Currency_ID"), "(SELECT ISO_Code FROM C_Currency c WHERE c.C_Currency_ID=o.C_Currency_ID)", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "GrandTotal"), "o.GrandTotal",  BigDecimal.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "ConvertedAmount"), "currencyBase(o.GrandTotal,o.C_Currency_ID,o.DateAcct, o.AD_Client_ID,o.AD_Org_ID)", BigDecimal.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "IsSOTrx"), "o.IsSOTrx", Boolean.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "Description"), "o.Description", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "POReference"), "o.POReference", String.class));
+		if (fIsSOTrx.isSelected())
+		{
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "IsDelivered"), "o.IsDelivered", Boolean.class));
+		}
+		else
+		{
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "Received"), "o.IsDelivered", Boolean.class));
+		}
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "DocStatus"), "o.docstatus", String.class));
+		//
+		s_Layout = new Info_Column[list.size()];
+		list.toArray(s_Layout);
+		//
+		return s_Layout;
+	}   //  getTableLayout
+
+	/**************************************************************************
+	 *  Action Listener
+	 *	@param e event
+	 */
+	public void actionPerformed (ActionEvent e)
+	{
+		// Handle actions if possible or pass the event to the parent class
+
+		if(!p_loadedOK)
+			return;
+		
+		if(e.getSource() != null)
+		{
+			if (e.getSource() instanceof VCheckBox)
+			{
+				//  Check box changes generally always cause a refresh
+				//  Capture changes that don't 	
+				VCheckBox cb = (VCheckBox) e.getSource();
+				//  ShowDetail check box
+				if (cb.getName().equals("IsSOTrx"))
+				{
+					if (cb.isSelected())
+					{
+				        fIsDelivered.setText(Msg.translate(Env.getCtx(), "IsDelivered"));
+					}
+					else
+					{
+				        fIsDelivered.setText(Msg.translate(Env.getCtx(), "Received"));
+					}
+				}
+			}
+		} //  e.getSource() is null
+
+		super.actionPerformed(e);  //  Let the info class decide what to do.
+				
+	}   //  actionPerformed
+
 	/**************************************************************************
 	 *	Construct SQL Where Clause and define parameters.
 	 *  (setParameters needs to set parameters)
@@ -255,11 +375,19 @@
 	protected String getSQLWhere()
 	{
 		StringBuffer sql = new StringBuffer();
-		if (fDocumentNo.getText().length() > 0)
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if(!(fieldID == 0))
+			sql.append(" AND o.C_Order_ID = ?");
+		//
+		if (isValidSQLText(fDocumentNo))
 			sql.append(" AND UPPER(o.DocumentNo) LIKE ?");
-		if (fDescription.getText().length() > 0)
+		//
+		if (isValidSQLText(fDescription))
 			sql.append(" AND UPPER(o.Description) LIKE ?");
-		if (fPOReference.getText().length() > 0)
+		//
+		if (isValidSQLText(fPOReference))
 			sql.append(" AND UPPER(o.POReference) LIKE ?");
 		//
 		if (fBPartner_ID.getValue() != null)
@@ -305,11 +433,14 @@
 	protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
 	{
 		int index = 1;
-		if (fDocumentNo.getText().length() > 0)
+		//  => ID
+		if (!(fieldID == 0))
+			pstmt.setInt(index++, fieldID);
+		if (isValidSQLText(fDocumentNo))
 			pstmt.setString(index++, getSQLText(fDocumentNo));
-		if (fDescription.getText().length() > 0)
+		if (isValidSQLText(fDescription))
 			pstmt.setString(index++, getSQLText(fDescription));
-		if (fPOReference.getText().length() > 0)
+		if (isValidSQLText(fPOReference))
 			pstmt.setString(index++, getSQLText(fPOReference));
 		//
 		if (fBPartner_ID.getValue() != null)
@@ -354,28 +485,14 @@
 		pstmt.setString(index++, fIsDelivered.isSelected() ? "Y" : "N");
 	}   //  setParameters
 
-	/**
-	 *  Get SQL WHERE parameter
-	 *  @param f field
-	 *  @return sql
-	 */
-	private String getSQLText (CTextField f)
-	{
-		String s = f.getText().toUpperCase();
-		if (!s.endsWith("%"))
-			s += "%";
-		log.fine("String=" + s);
-		return s;
-	}   //  getSQLText
-	
 
 	/**
 	 *	Zoom
 	 */
-	protected void zoom()
+	protected void zoom(int record_ID)
 	{
 		log.info("");
-		Integer C_Order_ID = getSelectedRowKey();
+		Integer C_Order_ID = record_ID;
 		if (C_Order_ID == null)
 			return;
 		MQuery query = new MQuery("C_Order");
@@ -394,4 +511,61 @@
 		return true;
 	}	//	hasZoom
 	
+	/**
+	 * Determine if the column causes dynamic changes in the table layout
+	 * @param o
+	 * @return true if changes result
+	 */
+	protected boolean columnIsDynamic(Object o)
+	{
+		// List of search fields that cause changes to the table layout
+		// See getProductLayout()
+		if (o.equals(fIsSOTrx))
+		{
+			return true;
+		}
+		return false;
+	}
+
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
+	{
+		//  All the tracked fields
+		return(
+			fAmtFrom.hasChanged()	||
+			fAmtTo.hasChanged() ||
+			fBPartner_ID.hasChanged() ||
+			fDescription.hasChanged() ||
+			fDocumentNo.hasChanged() ||
+			fDateFrom.hasChanged() ||
+			fDateTo.hasChanged() ||
+			fIsDelivered.hasChanged() ||
+			fIsSOTrx.hasChanged() ||
+			fPOReference.hasChanged()
+			);
+			
+	}
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		fAmtFrom.set_oldValue();
+		fAmtTo.set_oldValue() ;
+		fBPartner_ID.set_oldValue() ;
+		fDescription.set_oldValue() ;
+		fDocumentNo.set_oldValue() ;
+		fDateFrom.set_oldValue() ;
+		fDateTo.set_oldValue() ;
+		fIsDelivered.set_oldValue() ;
+		fIsSOTrx.set_oldValue() ;
+		fPOReference.set_oldValue();
+		return;
+	}
+	
 }   //  InfoOrder
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/InfoPAttribute.java
--- a/client/src/org/compiere/apps/search/InfoPAttribute.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/InfoPAttribute.java	Mon Feb 10 21:08:53 2014 -0500
@@ -57,6 +57,10 @@
  *
  *  @author     Jorg Janke
  *  @version    $Id: InfoPAttribute.java,v 1.2 2006/07/30 00:51:27 jjanke Exp $
+ *
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class InfoPAttribute extends CDialog
 {
@@ -93,6 +97,8 @@
 
 	/**	Resulting Query			*/
 	private String		m_query = "";
+	/** String representation	*/
+	private String		m_display = "";
 	/**	Product Attribute Editors	*/
 	private ArrayList<Component>	m_productEditors = new ArrayList<Component>();
 	private ArrayList<Component>	m_productEditorsTo = new ArrayList<Component>();
@@ -197,6 +203,7 @@
 			+ " ORDER BY IsInstanceAttribute, Name", 
 			"M_Attribute", MRole.SQL_NOTQUALIFIED, MRole.SQL_RO);
 		boolean instanceLine = false;
+		boolean productLine = false;
 		try
 		{
 			pstmt = DB.prepareStatement(sql, null);
@@ -208,10 +215,20 @@
 				String description = rs.getString(3);
 				String attributeValueType = rs.getString(4);
 				boolean isInstanceAttribute = "Y".equals(rs.getString(5)); 
-				//	Instance switch
+				// Add label for product attributes if there are any 
+				if (!productLine && !isInstanceAttribute)
+				{
+					CPanel group = new CPanel();
+					group.setBorder(new VLine(Msg.translate(Env.getCtx(), "IsProductAttribute")));
+					group.add(Box.createVerticalStrut(VLine.SPACE));
+					centerPanel.add(group, new ALayoutConstraint(row++, 0));
+					productLine = true;
+				}
+				//	Add label for Instances attributes
 				if (!instanceLine && isInstanceAttribute)
 				{
 					CPanel group = new CPanel();
+					group.add(Box.createVerticalStrut(VLine.SPACE));
 					group.setBorder(new VLine(Msg.translate(Env.getCtx(), "IsInstanceAttribute")));
 					group.add(Box.createVerticalStrut(VLine.SPACE));
 					centerPanel.add(group, new ALayoutConstraint(row++, 0));
@@ -373,12 +390,14 @@
 	{
 		if (e.getActionCommand().equals(ConfirmPanel.A_OK))
 		{
+			setDisplay();
 			createQuery();
 			dispose();
 		}
 		else if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))
 		{
 			m_query = null;
+			m_display = null;
 			dispose();
 		}
 	}	//	actionPerformed
@@ -584,7 +603,94 @@
 		log.config(m_query);		
 		return m_query;
 	}	//	createQuery
+	/**
+	 * Get Display 
+	 * @return String representation of the attribute set instances.
+	 */
+	public String getDisplay()
+	{
+		return m_display;
+	}
+	/**
+	 *   Set the display text
+	 */
+	private void setDisplay()
+	{
+		StringBuffer display = new StringBuffer();
+		if (serNoField != null && serNoField.getValue().toString().length() > 0)
+			display.append(serNoField.getValue().toString() + "-");
+		if (lotField != null && lotField.getValue().toString().length() > 0)
+			display.append(lotField.getValue().toString() + "-");
+		if (lotSelection != null && lotSelection.getDisplay().length() > 0)
+			display.append(lotSelection.getDisplay() + "-");
+		if (guaranteeDateField != null && guaranteeDateField.getValue() != null)
+			display.append(guaranteeDateSelection.getDisplay() + guaranteeDateField.getValue().toString() + "-");
+    
+		for (int i = 0; i < m_productEditors.size(); i++)
+		{
+			Component c = (Component)m_productEditors.get(i);
+			Component cTo = (Component)m_productEditorsTo.get(i);
+			if (c instanceof VComboBox)
+			{
+				VComboBox field = (VComboBox)c;
+				display.append(field.getDisplay() + "-");
+			}
+			else if (c instanceof VNumber)
+			{
+				VNumber field = (VNumber)c;
+				display.append(field.getDisplay() + "-");
+				VNumber fieldTo = (VNumber)cTo;
+				display.append(fieldTo.getDisplay() + "-");
+				 
+			}
+			else
+			{
+				VString field = (VString)c;
+				display.append(field.getDisplay() + "-");
+				
+			}
+		}
 
+		for (int i = 0; i < m_instanceEditors.size(); i++)
+		{
+			Component c = (Component)m_instanceEditors.get(i);
+			Component cTo = (Component)m_instanceEditorsTo.get(i);
+			if (c instanceof VComboBox)
+			{
+				VComboBox field = (VComboBox)c;
+				display.append(field.getDisplay() + "-");
+			}
+			else if (c instanceof VNumber)
+			{
+				VNumber field = (VNumber)c;
+				display.append(field.getDisplay() + "-");
+				VNumber fieldTo = (VNumber)cTo;
+				display.append(fieldTo.getDisplay() + "-");
+				 
+			}
+			else
+			{
+				VString field = (VString)c;
+				display.append(field.getDisplay() + "-");
+				
+			}
+		}
+		//  TODO - there is a more elegant way to do this.
+		while (display.toString().contains("--") && display.length() > 1)
+		{
+				display.delete(display.indexOf("--"), display.indexOf("--")+1);
+		}
+		while (display.toString().startsWith("-") && display.length() >= 1)
+		{
+			display.delete(0, 1);
+		}
+		while (display.toString().endsWith("-") && display.length() >= 1)
+		{
+			display.delete(display.length()-1, display.length());
+		}
+		m_display = display.toString();
+	}  // set display
+	
 	/**
 	 * 	Get resulting Query WHERE
 	 *	@return query or null
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/InfoPayment.java
--- a/client/src/org/compiere/apps/search/InfoPayment.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/InfoPayment.java	Mon Feb 10 21:08:53 2014 -0500
@@ -17,13 +17,14 @@
 package org.compiere.apps.search;
 
 import java.awt.Frame;
+import java.awt.event.ActionEvent;
 import java.math.BigDecimal;
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 import java.sql.Timestamp;
-import java.util.ArrayList;
 
 import org.adempiere.plaf.AdempierePLAF;
+import org.compiere.apps.AEnv;
 import org.compiere.apps.ALayout;
 import org.compiere.apps.ALayoutConstraint;
 import org.compiere.grid.ed.VCheckBox;
@@ -31,13 +32,17 @@
 import org.compiere.grid.ed.VLookup;
 import org.compiere.grid.ed.VNumber;
 import org.compiere.minigrid.IDColumn;
+import org.compiere.model.MColumn;
 import org.compiere.model.MLookupFactory;
+import org.compiere.model.MPayment;
 import org.compiere.model.MQuery;
 import org.compiere.swing.CLabel;
+import org.compiere.swing.CPanel;
 import org.compiere.swing.CTextField;
 import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
 import org.compiere.util.Msg;
+import org.compiere.util.Trx;
 import org.compiere.util.Util;
 
 /**
@@ -45,6 +50,10 @@
  *
  *  @author Jorg Janke
  *  @version  $Id: InfoPayment.java,v 1.2 2006/07/30 00:51:27 jjanke Exp $
+ *
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class InfoPayment extends Info
 {
@@ -54,7 +63,7 @@
 	private static final long serialVersionUID = -2917241055484901704L;
 
 	/**
-	 *  Detail Protected Contructor
+	 *  Detail Protected Constructor
 	 *  @param frame parent frame
 	 *  @param modal modal
 	 *  @param WindowNo window no
@@ -62,67 +71,88 @@
 	 *  @param multiSelection multiple selections
 	 *  @param whereClause whwre clause
 	 */
+	@Deprecated
 	protected InfoPayment(Frame frame, boolean modal, int WindowNo, String value,
 		boolean multiSelection, String whereClause)
 	{
-		super (frame, modal, WindowNo, "p", "C_Payment_ID", multiSelection, whereClause);
+		this(frame, modal, WindowNo, 0, value, 
+				multiSelection, true, whereClause);
+	}
+	
+	/**
+	 *  Detail Protected Constructor
+	 *  @param frame parent frame
+	 *  @param modal modal
+	 *  @param WindowNo window no
+	 *  @param record_id The record ID to find
+	 *  @param value query value to find, exclusive of record_id
+	 *  @param multiSelection multiple selections
+	 *  @param saveResults  True if results will be saved, false for info only
+	 *  @param whereClause where clause
+	 */
+	protected InfoPayment(Frame frame, boolean modal, int WindowNo, int record_id, String value, 
+			boolean multiSelection, boolean saveResults, String whereClause)
+	{
+		super (frame, modal, WindowNo, "p", "C_Payment_ID", multiSelection, saveResults, whereClause);
 		log.info( "InfoPayment");
 		setTitle(Msg.getMsg(Env.getCtx(), "InfoPayment"));
 		//
-		try
-		{
-			statInit();
-			p_loadedOK = initInfo ();
-		}
-		catch (Exception e)
-		{
-			return;
-		}
+		StringBuffer where = new StringBuffer("p.IsActive='Y'");
+		if (whereClause.length() > 0)
+			where.append(" AND ").append(Util.replace(whereClause, "C_Payment.", "p."));
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause(s_Order);
 		//
-		int no = p_table.getRowCount();
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
-		if (value != null && value.length() > 0)
-		{
-			fDocumentNo.setValue(value);
+		setShowTotals(true);
+		//
+		statInit();
+		initInfo (record_id, value);
+
+		//  To get the focus after the table update
+		m_heldLastFocus = fDocumentNo;
+		
+		//	AutoQuery
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
 			executeQuery();
-		}
-		//
-		pack();
-		//	Focus
-		fDocumentNo.requestFocus();
+		
+		p_loadedOK = true;
+
+		AEnv.positionCenterWindow(frame, this);
 	}   //  InfoPayment
 
-	/**  String Array of Column Info    */
-	private Info_Column[] m_generalLayout;
-	/** list of query columns           */
-	private ArrayList 	m_queryColumns = new ArrayList();
-	/** Table Name              */
-	private String      m_tableName;
-	/** Key Column Name         */
-	private String      m_keyColumn;
+	/** SalesOrder Trx          */
+	private boolean 	m_isSOTrx = false;
 
 	//  Static Info
+	private int fieldID = 0;
 	private CLabel lDocumentNo = new CLabel(Msg.translate(Env.getCtx(), "DocumentNo"));
 	private CTextField fDocumentNo = new CTextField(10);
 	//
-//	private CLabel lOrg_ID = new CLabel(Msg.translate(Env.getCtx(), "AD_Org_ID"));
-//	private VLookup fOrg_ID;
+	private CLabel lBankAccount_ID = new CLabel(Msg.translate(Env.getCtx(), "C_BankAccount_ID"));
+	private VLookup fBankAccount_ID;
 	private CLabel lBPartner_ID = new CLabel(Msg.translate(Env.getCtx(), "BPartner"));
 	private VLookup fBPartner_ID;
 	//
 	private CLabel lDateFrom = new CLabel(Msg.translate(Env.getCtx(), "DateTrx"));
 	private VDate fDateFrom = new VDate("DateFrom", false, false, true, DisplayType.Date, Msg.translate(Env.getCtx(), "DateFrom"));
-	private CLabel lDateTo = new CLabel("-");
+	private CLabel lDateTo = new CLabel("-  ");
 	private VDate fDateTo = new VDate("DateTo", false, false, true, DisplayType.Date, Msg.translate(Env.getCtx(), "DateTo"));
 	private CLabel lAmtFrom = new CLabel(Msg.translate(Env.getCtx(), "PayAmt"));
 	private VNumber fAmtFrom = new VNumber("AmtFrom", false, false, true, DisplayType.Amount, Msg.translate(Env.getCtx(), "AmtFrom"));
-	private CLabel lAmtTo = new CLabel("-");
+	private CLabel lAmtTo = new CLabel("-  ");
 	private VNumber fAmtTo = new VNumber("AmtTo", false, false, true, DisplayType.Amount, Msg.translate(Env.getCtx(), "AmtTo"));
-	private VCheckBox fIsReceipt = new VCheckBox ("IsReceipt", false, false, true, Msg.translate(Env.getCtx(), "IsReceipt"), "", false);
+	private VCheckBox fcheckReceipt = new VCheckBox ("IsReceipt", false, false, true, Msg.translate(Env.getCtx(), "OnlyReceipt"), "", false);
+	private VCheckBox fcheckPayment = new VCheckBox ("IsReceipt", false, false, true, Msg.translate(Env.getCtx(), "OnlyPayment"), "", false);
+
+	/** From Clause             */
+	private static String s_From = " C_Payment_v p";
+	/** Order Clause             */
+	private static String s_Order = "2,3,4";
 
 	/**  Array of Column Info    */
-	private static final Info_Column[] s_paymentLayout = {
+	private static final Info_Column[] s_Layout = {
 		new Info_Column(" ", "p.C_Payment_ID", IDColumn.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "C_BankAccount_ID"),
 			"(SELECT b.Name || ' ' || ba.AccountNo FROM C_Bank b, C_BankAccount ba WHERE b.C_Bank_ID=ba.C_Bank_ID AND ba.C_BankAccount_ID=p.C_BankAccount_ID)", String.class),
@@ -145,30 +175,40 @@
 		new Info_Column(Msg.translate(Env.getCtx(), "WriteOffAmt"),
 			"p.WriteOffAmt",  BigDecimal.class),
 		new Info_Column(Msg.translate(Env.getCtx(), "IsAllocated"),
-			"p.IsAllocated",  Boolean.class)
+			"p.IsAllocated",  Boolean.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "DocStatus"), "docstatus", String.class)
+
 	};
 
 	/**
 	 *	Static Setup - add fields to parameterPanel
-	 *  @throws Exception if Lookups cannot be created
 	 */
-	private void statInit() throws Exception
+	private void statInit()
 	{
 		lDocumentNo.setLabelFor(fDocumentNo);
 		fDocumentNo.setBackground(AdempierePLAF.getInfoBackground());
 		fDocumentNo.addActionListener(this);
-		fIsReceipt.setSelected(!"N".equals(Env.getContext(Env.getCtx(), p_WindowNo, "IsSOTrx")));
-		fIsReceipt.addActionListener(this);
+		fcheckReceipt.setSelected(true);  
+		fcheckReceipt.setActionCommand("OnlyReceipt");
+		fcheckReceipt.addActionListener(this);
+		fcheckPayment.setSelected(false);
+		fcheckPayment.setActionCommand("OnlyPayment");
+		fcheckPayment.addActionListener(this);
 		//
-	//	fOrg_ID = new VLookup("AD_Org_ID", false, false, true,
-	//		MLookupFactory.create(Env.getCtx(), 3486, m_WindowNo, DisplayType.TableDir, false),
-	//		DisplayType.TableDir, m_WindowNo);
-	//	lOrg_ID.setLabelFor(fOrg_ID);
-	//	fOrg_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fBankAccount_ID = new VLookup("C_BankAccount_ID", false, false, true,
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+						MColumn.getColumn_ID(MPayment.Table_Name, MPayment.COLUMNNAME_C_BankAccount_ID), 
+						DisplayType.TableDir));
+		lBankAccount_ID.setLabelFor(fBankAccount_ID);
+		fBankAccount_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fBankAccount_ID.addPropertyChangeListener(this);
 		fBPartner_ID = new VLookup("C_BPartner_ID", false, false, true,
-			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 3499, DisplayType.Search));
+			MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+					MColumn.getColumn_ID(MPayment.Table_Name, MPayment.COLUMNNAME_C_BPartner_ID), 
+					DisplayType.Search));
 		lBPartner_ID.setLabelFor(fBPartner_ID);
 		fBPartner_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fBPartner_ID.addPropertyChangeListener(this);
 		//
 		lDateFrom.setLabelFor(fDateFrom);
 		fDateFrom.setBackground(AdempierePLAF.getInfoBackground());
@@ -179,53 +219,102 @@
 		lAmtFrom.setLabelFor(fAmtFrom);
 		fAmtFrom.setBackground(AdempierePLAF.getInfoBackground());
 		fAmtFrom.setToolTipText(Msg.translate(Env.getCtx(), "AmtFrom"));
+		fAmtFrom.setBorder(fDateFrom.getBorder());  // Not sure why this is necessary?  The border is not visible otherwise.
 		lAmtTo.setLabelFor(fAmtTo);
 		fAmtTo.setBackground(AdempierePLAF.getInfoBackground());
 		fAmtTo.setToolTipText(Msg.translate(Env.getCtx(), "AmtTo"));
+		fAmtTo.setBorder(fDateFrom.getBorder());  // Not sure why this is necessary?  The border is not visible otherwise.
+
 		//
-		parameterPanel.setLayout(new ALayout());
+		CPanel amtPanel = new CPanel();
+		CPanel datePanel = new CPanel();
+		
+		amtPanel.setLayout(new ALayout(0, 0, true));
+		amtPanel.add(fAmtFrom, new ALayoutConstraint(0,0));
+		amtPanel.add(lAmtTo, null);
+		amtPanel.add(fAmtTo, null);
+
+		datePanel.setLayout(new ALayout(0, 0, true));
+		datePanel.add(fDateFrom, new ALayoutConstraint(0,0));
+		datePanel.add(lDateTo, null);
+		datePanel.add(fDateTo, null);
+		//
 		//  First Row
-		parameterPanel.add(lDocumentNo, new ALayoutConstraint(0,0));
-		parameterPanel.add(fDocumentNo, null);
-		parameterPanel.add(lBPartner_ID, null);
-		parameterPanel.add(fBPartner_ID, null);
-		parameterPanel.add(fIsReceipt, new ALayoutConstraint(0,5));
+		p_criteriaGrid.add(lDocumentNo, new ALayoutConstraint(0,0));
+		p_criteriaGrid.add(fDocumentNo, null);
+		p_criteriaGrid.add(lBPartner_ID, null);
+		p_criteriaGrid.add(fBPartner_ID, null);
+		p_criteriaGrid.add(fcheckReceipt, new ALayoutConstraint(0,5));
 		//  2nd Row
-		parameterPanel.add(lDateFrom, new ALayoutConstraint(1,2));
-		parameterPanel.add(fDateFrom, null);
-		parameterPanel.add(lDateTo, null);
-		parameterPanel.add(fDateTo, null);
+		p_criteriaGrid.add(lBankAccount_ID, new ALayoutConstraint(1,0));
+		p_criteriaGrid.add(fBankAccount_ID);
+		p_criteriaGrid.add(lDateFrom, null);
+		p_criteriaGrid.add(datePanel, null);
+		p_criteriaGrid.add(fcheckPayment, new ALayoutConstraint(1,5));
 		//  3rd Row
-		parameterPanel.add(lAmtFrom, new ALayoutConstraint(2,2));
-		parameterPanel.add(fAmtFrom, null);
-		parameterPanel.add(lAmtTo, null);
-		parameterPanel.add(fAmtTo, null);
-	//	parameterPanel.add(lOrg_ID, null);
-	//	parameterPanel.add(fOrg_ID, null);
+		p_criteriaGrid.add(lAmtFrom, new ALayoutConstraint(2,2));
+		p_criteriaGrid.add(amtPanel, null);
 	}	//	statInit
 
 	/**
 	 *	General Init
 	 *	@return true, if success
 	 */
-	private boolean initInfo ()
+	protected void initInfo (int record_id, String value)
 	{
-		//  Set Defaults
-		String bp = Env.getContext(Env.getCtx(), p_WindowNo, "C_BPartner_ID");
-		if (bp != null && bp.length() != 0)
-			fBPartner_ID.setValue(new Integer(bp));
+		//
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
 
-		//  prepare table
-		StringBuffer where = new StringBuffer("p.IsActive='Y'");
-		if (p_whereClause.length() > 0)
-			where.append(" AND ").append(Util.replace(p_whereClause, "C_Payment.", "p."));
-		prepareTable(s_paymentLayout,
-			" C_Payment_v p",
-			where.toString(),
-			"2,3,4");
+		//  Set values
+        if (!(record_id == 0))  // A record is defined
+        {
+        	fieldID = record_id;
+        	String trxName = Trx.createTrxName();
+        	MPayment p = new MPayment(Env.getCtx(),record_id, trxName);
+			fcheckReceipt.setSelected(p.isReceipt());
+    		fcheckPayment.setSelected(!p.isReceipt());
+    		p = null;
+    		Trx.get(trxName, false).close();
+        } 
+        else  // Try to find other criteria in the context
+        {
+			String id;
+			
+			//  C_BPartner_ID
+			id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BPartner_ID", true);
+			if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				fBPartner_ID.setValue(new Integer(id));
+			
+			//  The value passed in from the field
+			if (value != null && value.length() > 0)
+			{
+				fDocumentNo.setValue(value);
+			}
+			else
+			{
+				//  C_Payment_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Payment_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fieldID = new Integer(id).intValue();
+		        	String trxName = Trx.createTrxName();
+		        	MPayment p = new MPayment(Env.getCtx(),record_id, trxName);
+					fcheckReceipt.setSelected(p.isReceipt());
+		    		fcheckPayment.setSelected(!p.isReceipt());
+		    		p = null;
+		    		Trx.get(trxName, false).close();
+				}
+				//  C_BankAccount_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BankAccount_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+					fBankAccount_ID.setValue(new Integer(id));
+			}
+        }
 		//
-	//	MPayment.setIsAllocated(Env.getCtx(), 0, null);
-		return true;
+		return;
 	}	//	initInfo
 
 	
@@ -238,12 +327,22 @@
 	protected String getSQLWhere()
 	{
 		StringBuffer sql = new StringBuffer();
-		if (fDocumentNo.getText().length() > 0)
+
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if(!(fieldID == 0))
+			sql.append(" AND p.C_Payment_ID = ?");
+		//
+		if (isValidSQLText(fDocumentNo))
 			sql.append(" AND UPPER(p.DocumentNo) LIKE ?");
 		//
 		if (fBPartner_ID.getValue() != null)
 			sql.append(" AND p.C_BPartner_ID=?");
 		//
+		if (fBankAccount_ID.getValue() != null)
+			sql.append(" AND p.C_BankAccount_ID=?");
+		//
 		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
 		{
 			Timestamp from = (Timestamp)fDateFrom.getValue();
@@ -267,7 +366,22 @@
 			else if (from != null && to != null)
 				sql.append(" AND p.PayAmt BETWEEN ? AND ?");
 		}
-		sql.append(" AND p.IsReceipt=?");
+		
+		
+		if (fcheckReceipt.isSelected() && fcheckPayment.isSelected())
+			log.severe("Both Only Receipt and Only Payment selected at the same time.");
+		//	Static SQL
+		if (fcheckReceipt.isSelected())
+		{
+			sql.append(" AND ");
+				sql.append ("p.IsReceipt='Y'");
+		}
+
+		if (fcheckPayment.isSelected())
+		{
+			sql.append(" AND ");
+				sql.append ("p.IsReceipt='N'");
+		}
 
 		log.fine(sql.toString());
 		return sql.toString();
@@ -283,14 +397,25 @@
 	protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
 	{
 		int index = 1;
-		if (fDocumentNo.getText().length() > 0)
+		//  => ID
+		if (!(fieldID == 0))
+			pstmt.setInt(index++, fieldID);
+		//
+		if (isValidSQLText(fDocumentNo))
 			pstmt.setString(index++, getSQLText(fDocumentNo));
 		//
 		if (fBPartner_ID.getValue() != null)
 		{
-			Integer bp = (Integer)fBPartner_ID.getValue();
-			pstmt.setInt(index++, bp.intValue());
-			log.fine("BPartner=" + bp);
+			Integer id = (Integer)fBPartner_ID.getValue();
+			pstmt.setInt(index++, id.intValue());
+			log.fine("BPartner=" + id);
+		}
+		//
+		if (fBankAccount_ID.getValue() != null)
+		{
+			Integer id = (Integer)fBankAccount_ID.getValue();
+			pstmt.setInt(index++, id.intValue());
+			log.fine("BankAccount=" + id);
 		}
 		//
 		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
@@ -324,36 +449,41 @@
 				pstmt.setBigDecimal(index++, to);
 			}
 		}
-		pstmt.setString(index++, fIsReceipt.isSelected() ? "Y" : "N");
 	}   //  setParameters
 
-	/**
-	 *  Get SQL WHERE parameter
-	 *  @param f field
-	 *  @return Upper case text with % at the end
+	/**************************************************************************
+	 *	(Button) Action Listener & Popup Menu
+	 *  @param e event
 	 */
-	private String getSQLText (CTextField f)
+	public void actionPerformed (ActionEvent e)
 	{
-		String s = f.getText().toUpperCase();
-		if (!s.endsWith("%"))
-			s += "%";
-		log.fine( "String=" + s);
-		return s;
-	}   //  getSQLText
-	
+		// Make the checkboxes exclusive
+		if(e.getActionCommand() == "OnlyReceipt")
+		{
+			if(fcheckReceipt.isSelected())
+				fcheckPayment.setSelected(false);
+		}
+		if(e.getActionCommand() == "OnlyPayment")
+		{
+			if(fcheckPayment.isSelected())
+				fcheckReceipt.setSelected(false);
+		}
+		super.actionPerformed(e);
+	}
+
 	/**
 	 *	Zoom
 	 */
-	protected void zoom()
+	protected void zoom(int record_ID)
 	{
 		log.info( "InfoPayment.zoom");
-		Integer C_Payment_ID = getSelectedRowKey();
+		Integer C_Payment_ID = record_ID;
 		if (C_Payment_ID == null)
 			return;
 		MQuery query = new MQuery("C_Payment");
 		query.addRestriction("C_Payment_ID", MQuery.EQUAL, C_Payment_ID);
 		query.setRecordCount(1);
-		int AD_WindowNo = getAD_Window_ID("C_Payment", fIsReceipt.isSelected());
+		int AD_WindowNo = getAD_Window_ID("C_Payment", (m_isSOTrx && fcheckReceipt.isSelected()) || (!m_isSOTrx && !fcheckReceipt.isSelected()));
 		zoom (AD_WindowNo, query);
 	}	//	zoom
 
@@ -366,4 +496,57 @@
 		return true;
 	}	//	hasZoom
 	
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
+	{
+		//  All the tracked fields
+		return(
+				fDocumentNo.hasChanged()	||
+				fBankAccount_ID.hasChanged()	||
+				fcheckPayment.hasChanged()	||
+				fcheckReceipt.hasChanged()	||
+				fBPartner_ID.hasChanged()	||
+				fAmtFrom.hasChanged() ||
+				fAmtTo.hasChanged() ||
+				fDateFrom.hasChanged()	||
+				fDateTo.hasChanged());
+	}
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		fAmtFrom.set_oldValue();
+		fAmtTo.set_oldValue();
+		fDocumentNo.set_oldValue();
+		fBankAccount_ID.set_oldValue();
+		fcheckPayment.set_oldValue();
+		fcheckReceipt.set_oldValue();
+		fBPartner_ID.set_oldValue();
+		fDateFrom.set_oldValue();
+		fDateTo.set_oldValue();
+		return;
+	}
+    /**
+	 *  Clear all fields and set default values in check boxes
+	 */
+	protected void clearParameters()
+	{
+		//  Clear fields and set defaults
+		Object nullObject = null;
+		fDocumentNo.setValue("");
+		fAmtFrom.setValue(nullObject);
+		fAmtTo.setValue(nullObject);
+		fBPartner_ID.setValue(null);
+		fBankAccount_ID.setValue(null);
+		fDateFrom.setValue(nullObject);
+		fDateTo.setValue(nullObject);
+		fcheckReceipt.setSelected(true);  
+		fcheckPayment.setSelected(false);
+	}
 }   //  InfoPayment
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/InfoProduct.java
--- a/client/src/org/compiere/apps/search/InfoProduct.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/InfoProduct.java	Mon Feb 10 21:08:53 2014 -0500
@@ -16,15 +16,11 @@
  *****************************************************************************/
 package org.compiere.apps.search;
 
+import java.awt.BorderLayout;
 import java.awt.Dimension;
 import java.awt.Frame;
-import java.awt.Insets;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
-import java.awt.event.KeyAdapter;
-import java.awt.event.KeyEvent;
-import java.awt.event.MouseAdapter;
-import java.awt.event.MouseEvent;
 import java.math.BigDecimal;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -35,37 +31,44 @@
 import java.util.logging.Level;
 
 import javax.swing.JScrollPane;
+import javax.swing.SwingUtilities;
 import javax.swing.event.ChangeEvent;
 import javax.swing.event.ChangeListener;
-import javax.swing.plaf.ColorUIResource;
 import javax.swing.table.DefaultTableModel;
 
 import org.adempiere.plaf.AdempierePLAF;
-import org.adempiere.plaf.AdempiereTaskPaneUI;
 import org.compiere.apps.AEnv;
-import org.compiere.apps.ALayout;
 import org.compiere.apps.ALayoutConstraint;
 import org.compiere.apps.ConfirmPanel;
+import org.compiere.grid.ed.VCheckBox;
 import org.compiere.grid.ed.VComboBox;
+import org.compiere.grid.ed.VLookup;
+import org.compiere.grid.ed.VPAttribute;
 import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
 import org.compiere.minigrid.MiniTable;
-import org.compiere.model.MDocType;
+import org.compiere.model.GridTab;
+import org.compiere.model.MAttributeSet;
+import org.compiere.model.MColumn;
+import org.compiere.model.MLookupFactory;
+import org.compiere.model.MPAttributeLookup;
+import org.compiere.model.MPriceListVersion;
+import org.compiere.model.MProduct;
+import org.compiere.model.MProductCategory;
+import org.compiere.model.MProductPO;
 import org.compiere.model.MQuery;
-import org.compiere.model.MRole;
+import org.compiere.model.MWarehouse;
 import org.compiere.swing.CButton;
 import org.compiere.swing.CLabel;
 import org.compiere.swing.CPanel;
 import org.compiere.swing.CTabbedPane;
 import org.compiere.swing.CTextArea;
 import org.compiere.swing.CTextField;
-import org.compiere.util.CLogMgt;
 import org.compiere.util.DB;
+import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
-import org.compiere.util.KeyNamePair;
 import org.compiere.util.Msg;
 import org.compiere.util.Util;
-import org.jdesktop.swingx.JXTaskPane;
 
 
 /**
@@ -76,6 +79,10 @@
  * 
  * @author Bogdan Ioan, SC ARHIPAC SERVICE SRL
  * 				<li>FR [ 2012362 ] Info Product: Add Product Category 
+ * 
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class InfoProduct extends Info implements ActionListener, ChangeListener
 {
@@ -95,49 +102,72 @@
 	 * 	@param multiSelection multiple selections
 	 * 	@param whereClause where clause
 	 */
+	@Deprecated
 	public InfoProduct(Frame frame, boolean modal, int WindowNo,
 		int M_Warehouse_ID, int M_PriceList_ID, String value,
 		boolean multiSelection, String whereClause)
 	{
-		super (frame, modal, WindowNo, "p", "M_Product_ID", multiSelection, whereClause);
+		this(frame, modal, WindowNo,
+				M_Warehouse_ID, M_PriceList_ID, 0, value,
+				multiSelection, true, whereClause);
+	}
+	
+	/**
+	 *	Standard Constructor
+	 * 	@param frame frame
+	 * 	@param modal modal
+	 * 	@param WindowNo window no
+	 * 	@param M_Warehouse_ID warehouse
+	 * 	@param M_PriceList_ID price list
+	 *  @param record_id The record ID to find
+	 *  @param value Query Value or Name if enclosed in @
+	 * 	@param multiSelection multiple selections
+	 *  @param saveResults  True if results will be saved, false for info only
+	 * 	@param whereClause where clause
+	 */
+	public InfoProduct(Frame frame, boolean modal, int WindowNo,
+		int M_Warehouse_ID, int M_PriceList_ID, int record_id, String value,
+		boolean multiSelection, boolean saveResults, String whereClause)
+	{
+		super (frame, modal, WindowNo, "p", "M_Product_ID", multiSelection, saveResults, whereClause);
 		log.info(value + ", Wh=" + M_Warehouse_ID + ", PL=" + M_PriceList_ID + ", WHERE=" + whereClause);
 		setTitle(Msg.getMsg(Env.getCtx(), "InfoProduct"));
+		m_M_Warehouse_ID = M_Warehouse_ID;
+		m_M_PriceList_ID = M_PriceList_ID;
+		//
+		//	Modify where clause to fit with column info definitions
+		StringBuffer where = new StringBuffer();
+		where.append("p.IsActive='Y'");
+		//  Modify Where Clause
+		if (whereClause != null && whereClause.length() > 0)
+			where.append(" AND ")   //  replace fully qualified name with alias
+				.append(Util.replace(whereClause, "M_Product.", "p."));
+		setWhereClause(where.toString());
 		//
 		statInit();
-		initInfo (value, M_Warehouse_ID, M_PriceList_ID);
-		m_C_BPartner_ID = Env.getContextAsInt(Env.getCtx(), WindowNo, "C_BPartner_ID");
+		initInfo (record_id, value, M_Warehouse_ID, M_PriceList_ID);
 
-		//
-		int no = p_table.getRowCount();
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
+		//  To get the focus after the table update
+		m_heldLastFocus = fieldValue;
+
 		//	AutoQuery
-		if (value != null && value.length() > 0)
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
+		{
 			executeQuery();
+		}
+
 		p_loadedOK = true;
-		//	Focus
-		fieldValue.requestFocus();
+
+		AEnv.positionCenterWindow(frame, this);
 		
-		//Begin - fer_luck @ centuryon
-		mWindowNo = WindowNo;
-		//End - fer_luck @ centuryon
-		AEnv.positionCenterWindow(frame, this);
 	}	//	InfoProduct
 
-	/** SQL From				*/
-	private static final String s_productFrom =
-		"M_Product p"
-		+ " LEFT OUTER JOIN M_ProductPrice pr ON (p.M_Product_ID=pr.M_Product_ID AND pr.IsActive='Y')"
-		+ " LEFT OUTER JOIN M_AttributeSet pa ON (p.M_AttributeSet_ID=pa.M_AttributeSet_ID)"
-		+ " LEFT OUTER JOIN M_Product_PO ppo ON (p.M_Product_ID=ppo.M_Product_ID and ppo.IsCurrentVendor='Y' and ppo.IsActive='Y')"
-		+ " LEFT OUTER JOIN C_BPartner bp ON (ppo.C_BPartner_ID=bp.C_BPartner_ID)";
-
 	/**  Array of Column Info    */
-	private static Info_Column[] s_productLayout = null;
-	private static int INDEX_NAME = 0;
+	private static Info_Column[] s_Layout = null;
 	private static int INDEX_PATTRIBUTE = 0;
-
+	
 	//
+	private int fieldID=0;
 	private CLabel labelValue = new CLabel();
 	private CTextField fieldValue = new CTextField(10);
 	private CLabel labelName = new CLabel();
@@ -147,45 +177,51 @@
 	private CLabel labelSKU = new CLabel();
 	private CTextField fieldSKU = new CTextField(10);
 	private CLabel labelPriceList = new CLabel();
-	private VComboBox pickPriceList = new VComboBox();
+	private VLookup fPriceList_ID;
 	private CLabel labelWarehouse = new CLabel();
-	private VComboBox pickWarehouse = new VComboBox();
+	private VLookup fWarehouse_ID;
 	private CLabel labelVendor = new CLabel();
-	private CTextField fieldVendor = new CTextField(10);
+	private VLookup fVendor_ID;
+	private VCheckBox checkOnlyStock = new VCheckBox();
+	private VCheckBox checkShowDetail = new VCheckBox();
 	private CLabel labelProductCategory = new CLabel();
-	private VComboBox pickProductCategory = new VComboBox();
+	private VLookup fProductCategory_ID;
 	private CLabel labelAS = new CLabel(); // @Trifon
-	private VComboBox pickAS = new VComboBox(); // @Trifon
+	private VLookup fAS_ID; // @Trifon
+	private CLabel labelASI = new CLabel();
+	private VPAttribute fASI_ID;
+	private VCheckBox checkAND = new VCheckBox();
+
 	
 	//Begin - fer_luck @ centuryon
 	private CTextArea fieldDescription = new CTextArea();
-	JXTaskPane warehouseStockPanel = new JXTaskPane();
-    CPanel tablePanel = new CPanel();
-    MiniTable warehouseTbl = new MiniTable();
-    String m_sqlWarehouse;
-    MiniTable substituteTbl = new MiniTable();
-    String m_sqlSubstitute;
-    MiniTable relatedTbl = new MiniTable();
-    String m_sqlRelated;
+	private CTextArea fieldPAttributes = new CTextArea();
+	private CPanel tablePanel = new CPanel();
+	private MiniTable warehouseTbl = new MiniTable();
+	private String m_sqlWarehouse;
+	private MiniTable substituteTbl = new MiniTable();
+	private String m_sqlSubstitute;
+	private MiniTable relatedTbl = new MiniTable();
+	private String m_sqlRelated;
+	private MiniTable vendorTbl = new MiniTable();
+	private String m_sqlVendor;
+	private CTabbedPane jTab  = new CTabbedPane();
     //Available to Promise Tab
-	private MiniTable 			m_tableAtp = new MiniTable();
+    private Info_Column[]		m_layoutATP = null;
+	private MiniTable 			m_tableAtp = null;
 	private DefaultTableModel 	m_modelAtp = null;
 	private int 				m_M_Product_ID = 0;
-    int mWindowNo = 0;
+	private int					m_M_Warehouse_ID = 0;
+	private int 				m_M_PriceList_ID = 0;
 	//End - fer_luck @ centuryon
 
-	/**	Search Button				*/
-	private CButton		m_InfoPAttributeButton = new CButton(Env.getImageIcon("PAttribute16.gif"));
 	/** Instance Button				*/
 	private CButton		m_PAttributeButton = null;
 	/** ASI							*/
 	private int			m_M_AttributeSetInstance_ID = -1;
 	/** Locator						*/
 	private int			m_M_Locator_ID = 0;
-
-	private String		m_pAttributeWhere = null;
-	private int			m_C_BPartner_ID = 0;
-
+	
 	/**
 	 *	Static Setup - add fields to parameterPanel
 	 */
@@ -208,51 +244,99 @@
 		fieldSKU.addActionListener(this);
 		
 		labelWarehouse.setText(Msg.getMsg(Env.getCtx(), "Warehouse"));
-		pickWarehouse.setBackground(AdempierePLAF.getInfoBackground());
+		fWarehouse_ID = new VLookup("M_Warehouse_ID", false, false, true,
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+				MColumn.getColumn_ID(MWarehouse.Table_Name, MWarehouse.COLUMNNAME_M_Warehouse_ID),
+				DisplayType.TableDir));
+		fWarehouse_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fWarehouse_ID.addActionListener(this);
 		
+		checkOnlyStock.setText(Msg.getMsg(Env.getCtx(), "OnlyStock"));
+		checkOnlyStock.setName("OnlyStock");
+		checkOnlyStock.setToolTipText(Msg.getMsg(Env.getCtx(), "OnlyStockTip"));
+		checkOnlyStock.setSelected(false); // Info may open when searching for non-stock as well.
+		checkOnlyStock.addActionListener(this);
+
+		checkShowDetail.setText(Msg.getMsg(Env.getCtx(), "ShowDetail"));
+		checkShowDetail.setName("ShowDetail");
+		checkShowDetail.setToolTipText(Msg.getMsg(Env.getCtx(), "ShowAttributeDetails"));
+		checkShowDetail.setSelected(false);  
+		checkShowDetail.setEnabled(false);   
+		checkShowDetail.addActionListener(this);
+
+		checkAND.setText(Msg.getMsg(Env.getCtx(), "SearchAND"));
+		checkAND.setName("SearchAND");
+		checkAND.setToolTipText(Msg.getMsg(Env.getCtx(), "SearchANDInfo"));
+		checkAND.setSelected(true);
+		checkAND.addActionListener(this);
+
 		labelPriceList.setText(Msg.getMsg(Env.getCtx(), "PriceListVersion"));
-		pickPriceList.setBackground(AdempierePLAF.getInfoBackground());
+		fPriceList_ID = new VLookup("M_PriceList_Version_ID", false, false, true,
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+				MColumn.getColumn_ID(MPriceListVersion.Table_Name, MPriceListVersion.COLUMNNAME_M_PriceList_Version_ID),
+				DisplayType.TableDir));						
+		fPriceList_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fPriceList_ID.addActionListener(this);
 
 		labelProductCategory.setText(Msg.translate(Env.getCtx(), "M_Product_Category_ID"));
-		pickProductCategory.setBackground(AdempierePLAF.getInfoBackground());
+		fProductCategory_ID = new VLookup("M_Product_Category_ID", false, false, true,
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+				MColumn.getColumn_ID(MProductCategory.Table_Name, MProductCategory.COLUMNNAME_M_Product_Category_ID),
+				DisplayType.TableDir));
+		fProductCategory_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fProductCategory_ID.addActionListener(this);
 		
 		// @Trifon
 		labelAS.setText(Msg.translate(Env.getCtx(), "M_AttributeSet_ID"));
-		pickAS.setBackground(AdempierePLAF.getInfoBackground());
-		
-		m_InfoPAttributeButton.setMargin(new Insets(2,2,2,2));
-		m_InfoPAttributeButton.setToolTipText(Msg.getMsg(Env.getCtx(), "InfoPAttribute"));
-		m_InfoPAttributeButton.addActionListener(this);
-		
+		fAS_ID = new VLookup("M_AttributeSet_ID", false, false, true,
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+				MColumn.getColumn_ID(MAttributeSet.Table_Name, MAttributeSet.COLUMNNAME_M_AttributeSet_ID),
+				DisplayType.TableDir));
+		fAS_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fAS_ID.addActionListener(this);
+		//
+		labelASI.setText(Msg.translate(Env.getCtx(), "M_AttributeSetInstance_ID"));
+		MPAttributeLookup mpaLookup = new MPAttributeLookup(Env.getCtx(), p_WindowNo);
+		fASI_ID = new VPAttribute((GridTab) null, false, false, true, p_WindowNo, mpaLookup, true);
+		fASI_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fASI_ID.addActionListener(this);
+
 		labelVendor.setText(Msg.translate(Env.getCtx(), "Vendor"));
-		fieldVendor.setBackground(AdempierePLAF.getInfoBackground());
-		fieldVendor.addActionListener(this);
+		fVendor_ID = new VLookup("C_BPartner_ID", false, false, true,
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+				MColumn.getColumn_ID(MProductPO.Table_Name, MProductPO.COLUMNNAME_C_BPartner_ID),
+				DisplayType.Search));
+		fVendor_ID.setBackground(AdempierePLAF.getInfoBackground());
+		fVendor_ID.addActionListener(this);
+		fVendor_ID.setIsSOTrx(true, false); // Override the isSOTrx context, Vendors only
+		//  Setup the Grid
+		//	Line 1
+		p_criteriaGrid.add(labelValue, new ALayoutConstraint(0,0));
+		p_criteriaGrid.add(fieldValue, null);
+		p_criteriaGrid.add(labelWarehouse, null);
+		p_criteriaGrid.add(fWarehouse_ID, null);
+		p_criteriaGrid.add(checkOnlyStock, new ALayoutConstraint(0,5));
+		//	Line 2
+		p_criteriaGrid.add(labelName, new ALayoutConstraint(1,0));
+		p_criteriaGrid.add(fieldName, null);
+		p_criteriaGrid.add(labelPriceList, null);
+		p_criteriaGrid.add(fPriceList_ID, null);
+		p_criteriaGrid.add(labelAS, null); // @Trifon
+		p_criteriaGrid.add(fAS_ID, null);  // @Trifon
+		// Line 3
+		p_criteriaGrid.add(labelUPC, new ALayoutConstraint(2,0));
+		p_criteriaGrid.add(fieldUPC, null);
+		p_criteriaGrid.add(labelProductCategory, null);
+		p_criteriaGrid.add(fProductCategory_ID, null);
+		p_criteriaGrid.add(labelASI, null);
+		p_criteriaGrid.add(fASI_ID, null);
+		//  Line 4
+		p_criteriaGrid.add(labelSKU, new ALayoutConstraint(3,0));
+		p_criteriaGrid.add(fieldSKU, null);
+		p_criteriaGrid.add(labelVendor, null);
+		p_criteriaGrid.add(fVendor_ID, null);
+		p_criteriaGrid.add(checkAND, new ALayoutConstraint(3,5));
 
-		//	Line 1
-		parameterPanel.setLayout(new ALayout());
-		parameterPanel.add(labelValue, new ALayoutConstraint(0,0));
-		parameterPanel.add(fieldValue, null);
-		parameterPanel.add(labelUPC, null);
-		parameterPanel.add(fieldUPC, null);
-		parameterPanel.add(labelWarehouse, null);
-		parameterPanel.add(pickWarehouse, null);
-		parameterPanel.add(m_InfoPAttributeButton);
-		//	Line 2
-		parameterPanel.add(labelName, new ALayoutConstraint(1,0));
-		parameterPanel.add(fieldName, null);
-		parameterPanel.add(labelSKU, null);
-		parameterPanel.add(fieldSKU, null);
-		parameterPanel.add(labelVendor, null);
-		parameterPanel.add(fieldVendor, null);
-		
-		// Line 3
-		parameterPanel.add(labelPriceList, new ALayoutConstraint(2,0));
-		parameterPanel.add(pickPriceList, null);
-		parameterPanel.add(labelProductCategory, null);
-		parameterPanel.add(pickProductCategory, null);
-		parameterPanel.add(labelAS, null); // @Trifon
-		parameterPanel.add(pickAS, null);  // @Trifon
-		
 		//	Product Attribute Instance
 		m_PAttributeButton = ConfirmPanel.createPAttributeButton(true);
 		confirmPanel.addButton(m_PAttributeButton);
@@ -265,35 +349,33 @@
 		fieldDescription.setEditable(false);
 		fieldDescription.setPreferredSize(new Dimension(INFO_WIDTH - 100, 100));
 
-        warehouseStockPanel.setTitle(Msg.translate(Env.getCtx(), "WarehouseStock"));
-        warehouseStockPanel.setUI(new AdempiereTaskPaneUI());
-        warehouseStockPanel.getContentPane().setBackground(new ColorUIResource(251,248,241));
-        warehouseStockPanel.getContentPane().setForeground(new ColorUIResource(251,0,0));
-        
+		fieldPAttributes.setBackground(AdempierePLAF.getInfoBackground());
+		fieldPAttributes.setEditable(false);
+		fieldPAttributes.setPreferredSize(new Dimension(INFO_WIDTH - 100, 100));
+
         ColumnInfo[] s_layoutWarehouse = new ColumnInfo[]{
+        		new ColumnInfo(" ", "M_Warehouse_ID", IDColumn.class),
         		new ColumnInfo(Msg.translate(Env.getCtx(), "Warehouse"), "Warehouse", String.class),
         		new ColumnInfo(Msg.translate(Env.getCtx(), "QtyAvailable"), "sum(QtyAvailable)", Double.class),
         		new ColumnInfo(Msg.translate(Env.getCtx(), "QtyOnHand"), "sum(QtyOnHand)", Double.class),
-           		new ColumnInfo(Msg.translate(Env.getCtx(), "QtyReserved"), "sum(QtyReserved)", Double.class)};
+           		new ColumnInfo(Msg.translate(Env.getCtx(), "QtyReserved"), "sum(QtyReserved)", Double.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "DocumentNote"), "DocumentNote", String.class)};
         /**	From Clause							*/
         String s_sqlFrom = " M_PRODUCT_STOCK_V ";
         /** Where Clause						*/
-        String s_sqlWhere = "Value = ?";
+        String s_sqlWhere = "QtyOnHand <> 0 AND M_Product_ID = ?";
         m_sqlWarehouse = warehouseTbl.prepareTable(s_layoutWarehouse, s_sqlFrom, s_sqlWhere, false, "M_PRODUCT_STOCK_V");
-		m_sqlWarehouse += " Group By Warehouse, documentnote ";
+		m_sqlWarehouse += " Group By M_Warehouse_ID, Warehouse, documentnote ";
 		warehouseTbl.setRowSelectionAllowed(true);
 		warehouseTbl.setMultiSelection(false);
 		warehouseTbl.addMouseListener(this);
-		warehouseTbl.getSelectionModel().addListSelectionListener(this);
 		warehouseTbl.setShowTotals(true);
         warehouseTbl.autoSize();
         
         ColumnInfo[] s_layoutSubstitute = new ColumnInfo[]{
         		new ColumnInfo(Msg.translate(Env.getCtx(), "Warehouse"), "orgname", String.class),
-        		new ColumnInfo(
-    					Msg.translate(Env.getCtx(), "Value"),
-    					"(Select Value from M_Product p where p.M_Product_ID=M_PRODUCT_SUBSTITUTERELATED_V.Substitute_ID)",
-    					String.class), 
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Description"), "description", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Value"), "value", String.class),
     			new ColumnInfo(Msg.translate(Env.getCtx(), "Name"), "Name", String.class),
     			new ColumnInfo(Msg.translate(Env.getCtx(), "QtyAvailable"), "QtyAvailable", Double.class),
   	        	new ColumnInfo(Msg.translate(Env.getCtx(), "QtyOnHand"), "QtyOnHand", Double.class),
@@ -305,15 +387,13 @@
         substituteTbl.setRowSelectionAllowed(false);
         substituteTbl.setMultiSelection(false);
         substituteTbl.addMouseListener(this);
-        substituteTbl.getSelectionModel().addListSelectionListener(this);
+        substituteTbl.setShowTotals(false);
         substituteTbl.autoSize();
         
         ColumnInfo[] s_layoutRelated = new ColumnInfo[]{
         		new ColumnInfo(Msg.translate(Env.getCtx(), "Warehouse"), "orgname", String.class),
-        		new ColumnInfo(
-    					Msg.translate(Env.getCtx(), "Value"),
-    					"(Select Value from M_Product p where p.M_Product_ID=M_PRODUCT_SUBSTITUTERELATED_V.Substitute_ID)",
-    					String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Description"), "description", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Value"), "value", String.class),
     			new ColumnInfo(Msg.translate(Env.getCtx(), "Name"), "Name", String.class),
     			new ColumnInfo(Msg.translate(Env.getCtx(), "QtyAvailable"), "QtyAvailable", Double.class),
   	        	new ColumnInfo(Msg.translate(Env.getCtx(), "QtyOnHand"), "QtyOnHand", Double.class),
@@ -325,299 +405,456 @@
         relatedTbl.setRowSelectionAllowed(false);
         relatedTbl.setMultiSelection(false);
         relatedTbl.addMouseListener(this);
-        relatedTbl.getSelectionModel().addListSelectionListener(this);
+        relatedTbl.setShowTotals(false);
         relatedTbl.autoSize();
         
         //Available to Promise Tab
+        initAtpTab();
         m_tableAtp.setRowSelectionAllowed(false);
         m_tableAtp.setMultiSelection(false);
-              
-        CTabbedPane jTab  = new CTabbedPane();
+        
+        //Vendor tab
+        ColumnInfo[] s_layoutVendor = new ColumnInfo[]{
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Vendor"), "(SELECT bp.Name FROM C_BPartner bp WHERE bp.C_BPartner_ID = M_PRODUCT_PO.C_BPartner_ID)", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "IsCurrentVendor"), "IsCurrentVendor", Boolean.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "C_UOM_ID"), "(SELECT Name FROM C_UOM WHERE C_UOM_ID = M_PRODUCT_PO.C_UOM_ID)", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "C_Currency_ID"), "(SELECT iso_code FROM C_Currency WHERE C_Currency_ID = M_PRODUCT_PO.C_Currency_ID)", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "PriceList"), "PriceList", Double.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "PricePO"), "PricePO", Double.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "VendorProductNo"), "VendorProductNo", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Order_Min"), "Order_Min", Double.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "DeliveryTime_Promised"), "DeliveryTime_Promised", Double.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "DeliveryTime_Actual"), "DeliveryTime_Actual", Double.class)
+    		};
+        s_sqlFrom = "M_PRODUCT_PO";
+        s_sqlWhere = "M_Product_ID = ?";
+        m_sqlVendor = vendorTbl.prepareTable(s_layoutVendor, s_sqlFrom, s_sqlWhere, false, "M_PRODUCT_PO");
+        vendorTbl.setRowSelectionAllowed(false);
+        vendorTbl.setMultiSelection(false);
+        vendorTbl.addMouseListener(this);
+        vendorTbl.setShowTotals(false);
+        vendorTbl.autoSize();
+                      
         jTab.addTab(Msg.translate(Env.getCtx(), "Warehouse"), new JScrollPane(warehouseTbl));
         jTab.setPreferredSize(new Dimension(INFO_WIDTH, SCREEN_HEIGHT > 600 ? 250 : 105));
         jTab.addTab(Msg.translate(Env.getCtx(), "Description"), new JScrollPane(fieldDescription));
+        jTab.addTab(Msg.translate(Env.getCtx(), "ProductAttribute"), new JScrollPane(fieldPAttributes));
         jTab.addTab(Msg.translate(Env.getCtx(), "Substitute_ID"), new JScrollPane(substituteTbl));
         jTab.addTab(Msg.translate(Env.getCtx(), "RelatedProduct_ID"), new JScrollPane(relatedTbl));
 		jTab.addTab (Msg.getMsg(Env.getCtx(), "ATP"), new JScrollPane(m_tableAtp));
+		jTab.addTab (Msg.translate(Env.getCtx(), "Vendor"), new JScrollPane(vendorTbl));
 		jTab.addChangeListener(this);
         tablePanel.setPreferredSize(new Dimension(INFO_WIDTH, SCREEN_HEIGHT > 600 ? 255 : 110));
-        tablePanel.add(jTab);        
+        tablePanel.setLayout(new BorderLayout());
+        tablePanel.add(jTab, BorderLayout.CENTER);        
 
-        warehouseStockPanel.setCollapsed(true);
-        warehouseStockPanel.add(tablePanel);
-        this.addonPanel.add(warehouseStockPanel);
-        
-        this.p_table.addKeyListener(new KeyAdapter() {
-        	public void keyReleased(KeyEvent ke){
-        		int row = ((MiniTable)ke.getSource()).getSelectedRow();
-        		refresh(
-        			((MiniTable)ke.getSource()).getValueAt(row,2),
-        			new BigDecimal(pickWarehouse.getValue().toString()).intValue(),
-        			new BigDecimal(pickPriceList.getValue().toString()).intValue()
-        			);
-        		warehouseStockPanel.setCollapsed(false);
-        	}
-        });
-        
-        this.p_table.addMouseListener(new MouseAdapter() {
-            public void mouseClicked(MouseEvent me) {
-            	int row = ((MiniTable)me.getSource()).getSelectedRow();
-            	refresh(
-            		((MiniTable)me.getSource()).getValueAt(row,2),
-            		new BigDecimal(pickWarehouse.getValue().toString()).intValue(),
-            		new BigDecimal(pickPriceList.getValue().toString()).intValue()
-            		);
-            	warehouseStockPanel.setCollapsed(false);
-            }
-        });
-		//End - fer_luck @ centuryon
-	}	//	statInit
+        //  Add the details to the p_detailPanel
+		p_detailTaskPane.setTitle(Msg.translate(Env.getCtx(), "WarehouseStock"));        
+        p_detailTaskPane.add(checkShowDetail, BorderLayout.NORTH);
+        p_detailTaskPane.add(tablePanel, BorderLayout.CENTER);
+        p_detailTaskPane.setVisible(true);
+    }	//	statInit
 
 	//Begin - fer_luck @ centuryon
 	/**
 	 * 	Refresh Query
 	 */
-	private void refresh(Object obj, int M_Warehouse_ID, int M_PriceList_Version_ID)
+	private void refresh()
 	{
-		//int M_Product_ID = 0;
-		String sql = m_sqlWarehouse;
-		//Add description to the query
-		sql = sql.replace(" FROM", ", DocumentNote FROM");
-		log.finest(sql);
-		PreparedStatement pstmt = null;
-		ResultSet rs = null;
-		try
+		//  Invoke later to not delay events.
+		SwingUtilities.invokeLater(new Runnable(){public void run()
 		{
-			pstmt = DB.prepareStatement(sql, null);
-			pstmt.setString(1, (String)obj);
-			rs = pstmt.executeQuery();
-			fieldDescription.setText("");
-			warehouseTbl.loadTable(rs);
-			rs = pstmt.executeQuery();
-			if(rs.next())
-				if(rs.getString("DocumentNote") != null)
-					fieldDescription.setText(rs.getString("DocumentNote"));
-		}
-		catch (Exception e)
-		{
-			log.log(Level.WARNING, sql, e);
-		}
-		finally
-		{
-			DB.close(rs, pstmt);
-			rs = null; pstmt = null;
-		}
+	    	int M_PriceList_Version_ID = 0;
+	
+	    	if (fPriceList_ID.getValue() != null)
+	    		M_PriceList_Version_ID = ((Integer) fPriceList_ID.getValue()).intValue();
+	
+	    	String sql;
+			PreparedStatement pstmt = null;
+			ResultSet rs = null;
+			String eol = System.getProperty("line.separator"); 
+			
+			int leadRowKey = p_table.getLeadRowKey();
+			
+	    	if (jTab.getSelectedIndex() == 0 || m_M_Product_ID != leadRowKey)
+			{
+	    		m_M_Product_ID = leadRowKey;
+	    		
+				//  Find the ASI used by the product on the lead row
+				MProduct mp = MProduct.get(Env.getCtx(), m_M_Product_ID);
+				m_M_AttributeSetInstance_ID = mp.getM_AttributeSetInstance_ID();				
+
+	    		//  Warehouse tab
+				sql = m_sqlWarehouse;
 		
-		m_M_Product_ID = getSelectedRowKey();
-		
-		sql = m_sqlSubstitute;
-		log.finest(sql);
-		try {
-			pstmt = DB.prepareStatement(sql, null);
-			pstmt.setInt(1, m_M_Product_ID);
-			pstmt.setInt(2, M_PriceList_Version_ID);
-			rs = pstmt.executeQuery();
-			substituteTbl.loadTable(rs);
-			rs.close();
-		} catch (Exception e) {
-			log.log(Level.WARNING, sql, e);
-		}
-		finally
-		{
-			DB.close(rs, pstmt);
-			rs = null; pstmt = null;
-		}
-		
-		sql = m_sqlRelated;
-		log.finest(sql);
-		try {
-			pstmt = DB.prepareStatement(sql, null);
-			pstmt.setInt(1, m_M_Product_ID);
-			pstmt.setInt(2, M_PriceList_Version_ID);
-			rs = pstmt.executeQuery();
-			relatedTbl.loadTable(rs);
-			rs.close();
-		} catch (Exception e) {
-			log.log(Level.WARNING, sql, e);
-		}
-		finally
-		{
-			DB.close(rs, pstmt);
-			rs = null; pstmt = null;
-		}
-		initAtpTab(M_Warehouse_ID);
+				log.finest(sql);
+				try
+				{
+					pstmt = DB.prepareStatement(sql, null);
+					pstmt.setInt(1, m_M_Product_ID);
+					rs = pstmt.executeQuery();
+					warehouseTbl.loadTable(rs);
+					rs.close();
+				}
+				catch (Exception e)
+				{
+					log.log(Level.WARNING, sql, e);
+				}
+				finally
+				{
+					DB.close(rs, pstmt);
+					rs = null; pstmt = null;
+				}
+			}
+			
+	    	if(jTab.getSelectedIndex() == 1)
+			{
+	    		fieldDescription.setText("");
+				//  Description tab
+				if(m_M_Product_ID != 0)
+				{
+					MProduct p = MProduct.get(Env.getCtx(), m_M_Product_ID);
+					if (p.getDescription() != null && p.getDescription().length() > 0)
+						fieldDescription.setText(p.getDescription());
+					if (p.getDocumentNote() != null && p.getDocumentNote().length() > 0)
+					{
+						if (fieldDescription.getText().length() > 0)
+							fieldDescription.setText(fieldDescription.getText() + eol + eol + p.getDocumentNote());
+						else
+							fieldDescription.setText(fieldDescription.getText() + p.getDocumentNote());
+					}
+				}
+				else
+					fieldDescription.setText("");
+			}
+
+	    	if(jTab.getSelectedIndex() == 2)
+			{
+	    		fieldPAttributes.setText("");
+	    		StringBuffer paText = new StringBuffer();
+	    		
+				//  Product Attributes tab
+				if(m_M_Product_ID != 0)
+				{
+					MProduct p = MProduct.get(Env.getCtx(), m_M_Product_ID);
+					
+					if (p.getM_AttributeSet_ID() == 0 || p.getM_AttributeSetInstance_ID() == 0){
+						// There is no attribute set or attribute set instance associated with the product
+						return;
+					}
+					
+					int M_AttributeSet_ID = p.getM_AttributeSetInstance_ID();
+
+			        sql = 	"SELECT asi.Lot, asi.SerNo, asi.GuaranteeDate,"
+			        	+ 		" COALESCE(a.SerNoCharSOverwrite, '#'::CHAR(1)),"
+			        	+		" COALESCE(a.SerNoCharEOverwrite, ''::CHAR(1)),"
+			        	+		" COALESCE(a.LotCharSOverwrite, '«'::CHAR(1)),"
+			        	+		" COALESCE(a.LotCharEOverwrite, '»'::CHAR(1))"
+			            +	" FROM M_AttributeSetInstance asi"
+			            +	" INNER JOIN M_AttributeSet a ON (asi.M_AttributeSet_ID=a.M_AttributeSet_ID)"
+			            + 	" WHERE asi.M_AttributeSetInstance_ID=?";
+			            
+					log.finest(sql);
+					try
+					{
+						pstmt = DB.prepareStatement(sql, null);
+						pstmt.setInt(1, M_AttributeSet_ID);
+						rs = pstmt.executeQuery();
+						while (rs.next())
+						{
+							if (rs.getString(1).length() > 0)
+								paText
+									.append(Msg.translate(Env.getCtx(), "Lot")).append(": ")
+									.append(rs.getString(6)).append(rs.getString(1)).append(rs.getString(7)).append(eol);
+							if (rs.getString(1).length() > 0)
+								paText
+									.append(Msg.translate(Env.getCtx(), "SerialNumber")).append(": ")
+									.append(rs.getString(4)).append(rs.getString(2)).append(rs.getString(5)).append(eol);
+							if (rs.getDate(3) != null)
+								paText
+									.append(Msg.translate(Env.getCtx(), "GuaranteeDate")).append(": ").append(rs.getDate(3)).append(eol);
+						}
+						rs.close();
+					}
+					catch (Exception e)
+					{
+						log.log(Level.WARNING, sql, e);
+					}
+					finally
+					{
+						DB.close(rs, pstmt);
+						rs = null; pstmt = null;
+					}
+					//  Instance Attributes - if any
+					sql = 	"SELECT ai.Value, a.Name"
+						+	" FROM M_AttributeInstance ai"
+						+	" INNER JOIN M_Attribute a ON (ai.M_Attribute_ID=a.M_Attribute_ID AND a.IsInstanceAttribute='Y')"
+						+	" WHERE ai.M_AttributeSetInstance_ID=?";
+	
+					log.finest(sql);
+					try
+					{
+						pstmt = DB.prepareStatement(sql, null);
+						pstmt.setInt(1, M_AttributeSet_ID);
+						rs = pstmt.executeQuery();
+						Boolean labeled = false;
+						while (rs.next())
+						{
+							if (!labeled)
+							{
+								paText.append("***  ").append(Msg.translate(Env.getCtx(), "InstanceAttribute")).append("  ***").append(eol);
+								labeled = true;
+							}
+							paText.append("  ").append(rs.getString(2)).append(": ").append(rs.getString(1)).append(eol);
+						}
+						rs.close();
+					}
+					catch (Exception e)
+					{
+						log.log(Level.WARNING, sql, e);
+					}
+					finally
+					{
+						DB.close(rs, pstmt);
+						rs = null; pstmt = null;
+					}
+					//  Product attributes - if any
+					sql = 	"SELECT ai.Value, a.Name"
+						+	" FROM M_AttributeInstance ai"
+						+	" INNER JOIN M_Attribute a ON (ai.M_Attribute_ID=a.M_Attribute_ID AND a.IsInstanceAttribute='N')"
+						+	" WHERE ai.M_AttributeSetInstance_ID=?";
+	
+					log.finest(sql);
+					try
+					{
+						pstmt = DB.prepareStatement(sql, null);
+						pstmt.setInt(1, M_AttributeSet_ID);
+						rs = pstmt.executeQuery();
+						Boolean labeled = false;
+						while (rs.next())
+						{
+							if (!labeled)
+							{
+								paText.append("***  ").append(Msg.translate(Env.getCtx(), "ProductAttribute")).append("  ***").append(eol);
+								labeled = true;
+							}
+							paText.append("  ").append(rs.getString(2)).append(": ").append(rs.getString(1)).append(eol);
+						}
+						rs.close();
+					}
+					catch (Exception e)
+					{
+						log.log(Level.WARNING, sql, e);
+					}
+					finally
+					{
+						DB.close(rs, pstmt);
+						rs = null; pstmt = null;
+					}
+					
+					if (paText.length() > 0)
+						fieldPAttributes.setText(paText.toString());
+				}
+			}
+
+	    	if(jTab.getSelectedIndex() == 3)
+			{
+				//  Substitute tab
+				sql = m_sqlSubstitute;
+				log.finest(sql);
+				try {
+					pstmt = DB.prepareStatement(sql, null);
+					pstmt.setInt(1, m_M_Product_ID);
+					pstmt.setInt(2, M_PriceList_Version_ID);
+					rs = pstmt.executeQuery();
+					substituteTbl.loadTable(rs);
+					rs.close();
+				} catch (Exception e) {
+					log.log(Level.WARNING, sql, e);
+				}
+				finally
+				{
+					DB.close(rs, pstmt);
+					rs = null; pstmt = null;
+				}
+			}
+			
+	    	if(jTab.getSelectedIndex() == 4)
+			{
+				//  Related tab
+				sql = m_sqlRelated;
+				log.finest(sql);
+				try {
+					pstmt = DB.prepareStatement(sql, null);
+					pstmt.setInt(1, m_M_Product_ID);
+					pstmt.setInt(2, M_PriceList_Version_ID);
+					rs = pstmt.executeQuery();
+					relatedTbl.loadTable(rs);
+					rs.close();
+				} catch (Exception e) {
+					log.log(Level.WARNING, sql, e);
+				}
+				finally
+				{
+					DB.close(rs, pstmt);
+					rs = null; pstmt = null;
+				}
+			}
+	    	
+	    	if(jTab.getSelectedIndex() == 5)		
+			{
+	    			refreshAtpTab();
+			}
+
+	    	if(jTab.getSelectedIndex() == 6)
+			{
+				//  Vendor tab
+				sql = m_sqlVendor;
+				log.finest(sql);
+				try {
+					pstmt = DB.prepareStatement(sql, null);
+					pstmt.setInt(1, m_M_Product_ID);
+					rs = pstmt.executeQuery();
+					vendorTbl.loadTable(rs);
+					rs.close();
+				} catch (Exception e) {
+					log.log(Level.WARNING, sql, e);
+				}
+				finally
+				{
+					DB.close(rs, pstmt);
+					rs = null; pstmt = null;
+				}
+			}
+
+		}});
 	}	//	refresh
 	//End - fer_luck @ centuryon
 	
 	/**
+	 * Reset the criteria panel
+	 */
+	protected void initInfo()
+	{
+		clearParameters();
+		initInfo(0,"",m_M_Warehouse_ID, m_M_PriceList_ID);
+	}
+	
+	/**
 	 *	Dynamic Init
 	 *
 	 * @param value value
 	 * @param M_Warehouse_ID warehouse
 	 * @param M_PriceList_ID price list
 	 */
-	private void initInfo (String value, int M_Warehouse_ID, int M_PriceList_ID)
+	private void initInfo (int record_id, String value, int M_Warehouse_ID, int M_PriceList_ID)
 	{
-		//	Pick init
-		fillPicks(M_PriceList_ID);
-		int M_PriceList_Version_ID = findPLV (M_PriceList_ID);
-		//	Set Value or Name
-		if (value.startsWith("@") && value.endsWith("@"))
-			fieldName.setText(value.substring(1,value.length()-1));
-		else
-			fieldValue.setText(value);
-		//	Set Warehouse
-		if (M_Warehouse_ID == 0)
-			M_Warehouse_ID = Env.getContextAsInt(Env.getCtx(), "#M_Warehouse_ID");
-		if (M_Warehouse_ID != 0)
-			setWarehouse (M_Warehouse_ID);
-		// 	Set PriceList Version
-		if (M_PriceList_Version_ID != 0)
-			setPriceListVersion (M_PriceList_Version_ID);
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
+		//  Set values
+        if (!(record_id == 0))  // A record is defined
+        {
+        	fieldID = record_id;
+        	fWarehouse_ID.setValue(new Integer(M_Warehouse_ID).intValue());
+        	fPriceList_ID.setValue(findPLV(M_PriceList_ID));
+        } 
+        else
+        {
+        	fieldID = 0;
+        	
+        	String id;
+			if (value != null && value.length() > 0) //  The VLookup failed to find uniqueness across the direct access SQL fields
+			{
+				//  Match the query performed by the VLookup.  See getDirectAccessSQL().
+				if (value.startsWith("@") && value.endsWith("@"))
+				{
+					fieldName.setText(value.substring(1,value.length()-1));
+				}
+				else
+				{
+					fieldValue.setText(value);
+					fieldName.setText(value);
+					fieldUPC.setText(value);
+					fieldSKU.setText(value);
+				}
+				//
+				fWarehouse_ID.setValue(0);
+				//
+		    	fPriceList_ID.setValue(0);
+	        	//
+	        	checkAND.setSelected(false); //  Use OR
+	        	
+			}
+			else
+			{
+				//  No field or value - the general case
+				//  Try to find other criteria in the context
+				//  M_Product_ID - only if visible
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "M_Product_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fieldID = new Integer(id).intValue();
+				}
+				
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "M_PriceList_Version_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fPriceList_ID.setValue(new Integer(id).intValue());
+				}
+				else
+				{	
+						//  OK - make a good guess
+						fPriceList_ID.setValue(findPLV(M_PriceList_ID));
+				}
 
-		//	Create Grid
-		StringBuffer where = new StringBuffer();
-		where.append("p.IsActive='Y'");
-		if (M_Warehouse_ID != 0)
-			where.append(" AND p.IsSummary='N'");
-		//  dynamic Where Clause
-		if (p_whereClause != null && p_whereClause.length() > 0)
-			where.append(" AND ")   //  replace fully qualified name with alias
-				.append(Util.replace(p_whereClause, "M_Product.", "p."));
-		//
-		prepareTable(getProductLayout(),
-			s_productFrom,
-			where.toString(),
-			"QtyAvailable DESC, Margin DESC");
-		p_table.setShowTotals(false);
-		//
-		pickWarehouse.addActionListener(this);
-		pickPriceList.addActionListener(this);
-		pickProductCategory.addActionListener(this);
-		pickAS.addActionListener(this); // @Trifon
-	}	//	initInfo
-
-	/**
-	 *	Fill Picks with values
-	 *
-	 * @param M_PriceList_ID price list
-	 */
-	private void fillPicks (int M_PriceList_ID)
-	{
-		//	Price List
-		String SQL = "SELECT M_PriceList_Version.M_PriceList_Version_ID,"
-			+ " M_PriceList_Version.Name || ' (' || c.Iso_Code || ')' AS ValueName "
-			+ "FROM M_PriceList_Version, M_PriceList pl, C_Currency c "
-			+ "WHERE M_PriceList_Version.M_PriceList_ID=pl.M_PriceList_ID"
-			+ " AND pl.C_Currency_ID=c.C_Currency_ID"
-			+ " AND M_PriceList_Version.IsActive='Y' AND pl.IsActive='Y'";
-		//	Same PL currency as original one
-		if (M_PriceList_ID != 0)
-			SQL += " AND EXISTS (SELECT * FROM M_PriceList xp WHERE xp.M_PriceList_ID=" + M_PriceList_ID
-				+ " AND pl.C_Currency_ID=xp.C_Currency_ID)";
-		//	Add Access & Order
-		SQL = MRole.getDefault().addAccessSQL (SQL, "M_PriceList_Version", true, false)	// fully qualified - RO 
-			+ " ORDER BY M_PriceList_Version.Name";
-		PreparedStatement pstmt = null;
-		ResultSet rs = null;
-		try
-		{
-			pickPriceList.addItem(new KeyNamePair (0, ""));
-			pstmt = DB.prepareStatement(SQL, null);
-			rs = pstmt.executeQuery();
-			while (rs.next())
-			{
-				KeyNamePair kn = new KeyNamePair (rs.getInt(1), rs.getString(2));
-				pickPriceList.addItem(kn);
-			}
-			DB.close(rs, pstmt);
-
-			//	Warehouse
-			SQL = MRole.getDefault().addAccessSQL (
-				"SELECT M_Warehouse_ID, Value || ' - ' || Name AS ValueName "
-				+ "FROM M_Warehouse "
-				+ "WHERE IsActive='Y'",
-					"M_Warehouse", MRole.SQL_NOTQUALIFIED, MRole.SQL_RO)
-				+ " ORDER BY Value";
-			pickWarehouse.addItem(new KeyNamePair (0, ""));
-			pstmt = DB.prepareStatement(SQL, null);
-			rs = pstmt.executeQuery();
-			while (rs.next())
-			{
-				KeyNamePair kn = new KeyNamePair
-					(rs.getInt("M_Warehouse_ID"), rs.getString("ValueName"));
-				pickWarehouse.addItem(kn);
-			}
-			DB.close(rs, pstmt);
-			
-			//	Product Category
-			SQL = MRole.getDefault().addAccessSQL (
-				"SELECT M_Product_Category_ID, Value || ' - ' || Name FROM M_Product_Category WHERE IsActive='Y'",
-					"M_Product_Category", MRole.SQL_NOTQUALIFIED, MRole.SQL_RO)
-				+ " ORDER BY Value";
-			for (KeyNamePair kn : DB.getKeyNamePairs(SQL, true)) {
-				pickProductCategory.addItem(kn);
-			}
-			
-			// Attribute Set - @Trifon
-			SQL = MRole.getDefault().addAccessSQL (
-					"SELECT M_AttributeSet_ID, Name FROM M_AttributeSet WHERE IsActive='Y'",
-						"M_AttributeSet", MRole.SQL_NOTQUALIFIED, MRole.SQL_RO)
-					+ " ORDER BY Name";
-				for (KeyNamePair kn : DB.getKeyNamePairs(SQL, true)) {
-					pickAS.addItem(kn);
+				//  M_Warehouse_ID - general context
+				if(M_Warehouse_ID == 0)
+				{
+					id = Env.getContext(Env.getCtx(), "#M_Warehouse_ID");
+					if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+					{
+						fWarehouse_ID.setValue(new Integer(id).intValue());
+					}
+					else 
+					{
+						id = Env.getContext(Env.getCtx(), p_WindowNo, "M_Warehouse_ID");
+						if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+						{
+							fWarehouse_ID.setValue(new Integer(id).intValue());
+						}
+					}
 				}
-		}
-		catch (SQLException e)
-		{
-			log.log(Level.SEVERE, SQL, e);
-			setStatusLine(e.getLocalizedMessage(), true);
-		}
-		finally
-		{
-			DB.close(rs, pstmt);
-			rs = null; pstmt = null;
-		}
-	}	//	fillPicks
-
-	/**
-	 *	Set Warehouse
-	 *
-	 * 	@param M_Warehouse_ID warehouse
-	 */
-	private void setWarehouse(int M_Warehouse_ID)
-	{
-		for (int i = 0; i < pickWarehouse.getItemCount(); i++)
-		{
-			KeyNamePair kn = (KeyNamePair)pickWarehouse.getItemAt(i);
-			if (kn.getKey() == M_Warehouse_ID)
-			{
-				pickWarehouse.setSelectedIndex(i);
-				return;
+				else
+				{
+		        	fWarehouse_ID.setValue(new Integer(M_Warehouse_ID).intValue());
+				}
+				
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BPartner_ID", false);
+				boolean isSOTrx = "Y".equals(Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "IsSOTrx", false));
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0) && !isSOTrx)
+				{
+					fVendor_ID.setValue(new Integer(id).intValue());
+				}			
 			}
 		}
-	}	//	setWarehouse
-
-	/**
-	 *	Set PriceList
-	 *
-	 * @param M_PriceList_Version_ID price list
-	 */
-	private void setPriceListVersion(int M_PriceList_Version_ID)
-	{
-		log.config("M_PriceList_Version_ID=" + M_PriceList_Version_ID);
-		for (int i = 0; i < pickPriceList.getItemCount(); i++)
+        //
+        if (!isValidVObject(fWarehouse_ID))
 		{
-			KeyNamePair kn = (KeyNamePair)pickPriceList.getItemAt(i);
-			if (kn.getKey() == M_PriceList_Version_ID)
-			{
-				pickPriceList.setSelectedIndex(i);
-				return;
-			}
+			//  Disable the stock button
+			checkOnlyStock.setSelected(false);
+			checkOnlyStock.setEnabled(false);
 		}
-		log.fine("NOT found");
-	}	//	setPriceList
-
+		else
+			checkOnlyStock.setEnabled(true);        
+		//
+		prepareTable(getTableLayout(),
+			getFromClause(),
+			getWhereClause(),
+			getOrderClause());
+	}	//	initInfo
+	
 	/**
 	 *	Find Price List Version and update context
 	 *
@@ -627,11 +864,11 @@
 	private int findPLV (int M_PriceList_ID)
 	{
 		Timestamp priceDate = null;
-		//	Sales Order Date
+		//	Sales Order Date  - This window - all tabs
 		String dateStr = Env.getContext(Env.getCtx(), p_WindowNo, "DateOrdered"); 
 		if (dateStr != null && dateStr.length() > 0)
 			priceDate = Env.getContextAsDate(Env.getCtx(), p_WindowNo, "DateOrdered");
-		else	//	Invoice Date
+		else	//	Invoice Date - This window - all tabs
 		{
 			dateStr = Env.getContext(Env.getCtx(), p_WindowNo, "DateInvoiced");
 			if (dateStr != null && dateStr.length() > 0)
@@ -672,12 +909,34 @@
 			DB.close(rs, pstmt);
 			rs = null; pstmt = null;
 		}
-		Env.setContext(Env.getCtx(), p_WindowNo, "M_PriceList_Version_ID", retValue);
+		//
 		return retValue;
 	}	//	findPLV
-
 	
 	/**************************************************************************
+	 *	Construct SQL From Clause
+	 *  @return SQL From clause
+	 */
+	protected String getFromClause()
+	{
+		/** SQL From				*/
+		String s_productFrom = "M_Product p";
+		
+		if (isValidVObject(fPriceList_ID))
+		{
+			s_productFrom += " LEFT OUTER JOIN (SELECT mpp.M_Product_ID, mpp.M_PriceList_Version_id, mpp.IsActive, mpp.PriceList, mpp.PriceStd, mpp.PriceLimit" 
+			+					" FROM M_ProductPrice mpp, M_PriceList_Version mplv "
+			+					" WHERE mplv.M_PriceList_Version_ID = mpp.M_PriceList_Version_ID AND mplv.IsActive = 'Y') pr"
+			+ " ON (p.M_Product_ID=pr.M_Product_ID AND pr.IsActive='Y')";
+		}
+		s_productFrom += " LEFT OUTER JOIN M_AttributeSet pa ON (p.M_AttributeSet_ID=pa.M_AttributeSet_ID)"
+			+ " LEFT OUTER JOIN M_Product_PO ppo ON (p.M_Product_ID=ppo.M_Product_ID and ppo.IsCurrentVendor='Y' and ppo.IsActive='Y')"
+			+ " LEFT OUTER JOIN M_Product_Category pc ON (p.M_Product_Category_ID=pc.M_Product_Category_ID)"
+			+ " LEFT OUTER JOIN C_BPartner bp ON (ppo.C_BPartner_ID=bp.C_BPartner_ID)";
+		
+		return s_productFrom;
+	}
+	/**************************************************************************
 	 *	Construct SQL Where Clause and define parameters
 	 *  (setParameters needs to set parameters)
 	 *  Includes first AND
@@ -685,58 +944,94 @@
 	 */
 	protected String getSQLWhere()
 	{
-		StringBuffer where = new StringBuffer();
+		ArrayList<String> list = new ArrayList<String>();
 		
-		//	Optional PLV
-		int M_PriceList_Version_ID = 0;
-		KeyNamePair pl = (KeyNamePair)pickPriceList.getSelectedItem();
-		if (pl != null)
-			M_PriceList_Version_ID = pl.getKey();
-		if (M_PriceList_Version_ID != 0)
-			where.append(" AND pr.M_PriceList_Version_ID=?");
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if(!(fieldID == 0))
+		{
+			list.add("p.M_Product_ID = ?");
+		}
+		
+		//  Warehouse - if defined, don't include summary products
+		if (fWarehouse_ID.getValue() != null && ((Integer) fWarehouse_ID.getValue()).intValue() != 0)
+			list.add("p.IsSummary='N'");
+
+		//  Only Stock items
+		if (checkOnlyStock.isSelected())
+			list.add("p.isStocked = ?");
+		
+		//	Optional Price List Version
+		if (fPriceList_ID.getValue() != null)
+			list.add("pr.M_PriceList_Version_ID=?");
 		
 		//  Optional Product Category
-		if (getM_Product_Category_ID() > 0) {
-			where.append(" AND p.M_Product_Category_ID=?");
+		if (fProductCategory_ID.getValue() != null) {
+			list.add("(p.M_Product_Category_ID=? OR p.M_Product_Category_ID IN "
+			+ 		"(SELECT PPC.M_Product_Category_ID FROM M_Product_Category ppc WHERE "
+			+		" ppc.M_Product_Category_Parent_ID = ?))");
 		}
 		
 		//  Optional Attribute Set
-		if (getM_AttributeSet_ID() > 0) {
-			where.append(" AND p.M_AttributeSet_ID=?");
+		if (fAS_ID.getValue() != null) {
+			list.add("p.M_AttributeSet_ID=?");
 		}
 		
 		//	Product Attribute Search
-		if (m_pAttributeWhere != null)
+		if (fASI_ID.getAttributeWhere() != null)
 		{
-			where.append(m_pAttributeWhere);
-			return where.toString();
+			String asiWhere = fASI_ID.getAttributeWhere();
+			if (asiWhere.length() > 0)
+			{
+				if (asiWhere.startsWith(" AND "))
+					asiWhere = asiWhere.substring(5);
+				list.add(asiWhere);
+			}
 		}
 
 		//  => Value
-		String value = fieldValue.getText().toUpperCase();
-		if (!(value.equals("") || value.equals("%")))
-			where.append(" AND UPPER(p.Value) LIKE ?");
+		if(isValidSQLText(fieldValue))
+			list.add("UPPER(p.Value) LIKE ?");
 
 		//  => Name
-		String name = fieldName.getText().toUpperCase();
-		if (!(name.equals("") || name.equals("%")))
-			where.append(" AND UPPER(p.Name) LIKE ?");
+		if(isValidSQLText(fieldName))
+			list.add("UPPER(p.Name) LIKE ?");
 
 		//  => UPC
-		String upc = fieldUPC.getText().toUpperCase();
-		if (!(upc.equals("") || upc.equals("%")))
-			where.append(" AND UPPER(p.UPC) LIKE ?");
+		if(isValidSQLText(fieldUPC))
+			list.add("UPPER(p.UPC) LIKE ?");
 
 		//  => SKU
-		String sku = fieldSKU.getText().toUpperCase();
-		if (!(sku.equals("") || sku.equals("%")))
-			where.append(" AND UPPER(p.SKU) LIKE ?");
+		if(isValidSQLText(fieldSKU))
+			list.add("UPPER(p.SKU) LIKE ?");
+
 		//	=> Vendor
-		String vendor = fieldVendor.getText().toUpperCase();
-		if (!(vendor.equals("") || vendor.equals("%")))
-			where.append(" AND UPPER(bp.Name) LIKE ? AND ppo.IsCurrentVendor='Y'");
+		if (fVendor_ID.getValue() != null)
+			list.add("ppo.C_BPartner_ID=?");
 		
-		return where.toString();
+		StringBuffer sql = new StringBuffer();
+		int size = list.size();
+		//	Just one
+		if (size == 1)
+			sql.append(" AND ").append(list.get(0));
+		else if (size > 1)
+		{
+			boolean AND = checkAND.isSelected();
+			sql.append(" AND ");
+			if (!AND)
+				sql.append("(");
+			for (int i = 0; i < size; i++)
+			{
+				if (i > 0)
+					sql.append(AND ? " AND " : " OR ");
+				sql.append(list.get(i));
+			}
+			if (!AND)
+				sql.append(")");
+		}
+		
+		return sql.toString();
 	}	//	getSQLWhere
 
 	/**
@@ -752,194 +1047,344 @@
 		int index = 1;
 
 		//  => Warehouse
-		int M_Warehouse_ID = 0;
-		KeyNamePair wh = (KeyNamePair)pickWarehouse.getSelectedItem();
-		if (wh != null)
-			M_Warehouse_ID = wh.getKey();
+		Integer id;
+		if (fWarehouse_ID.getValue() != null)
+			id = ((Integer) fWarehouse_ID.getValue());
+		else
+			id = 0;
 		if (!forCount)	//	parameters in select
 		{
 			for (int i = 0; i < p_layout.length; i++)
 			{
 				if (p_layout[i].getColSQL().indexOf('?') != -1)
-					pstmt.setInt(index++, M_Warehouse_ID);
+					pstmt.setInt(index++, id.intValue());
 			}
 		}
-		log.fine("M_Warehouse_ID=" + M_Warehouse_ID + " (" + (index-1) + "*)");
+		log.fine("M_Warehouse_ID=" + id + " (" + (index-1) + "*)");
 
+		//  => ID
+		if(!(fieldID == 0))
+		{
+			pstmt.setInt(index++, fieldID);
+			log.fine("Record ID: " + fieldID);
+		}
+
+		//  => Only Stocked
+		if(checkOnlyStock.isSelected())
+		{
+			pstmt.setString(index++, "Y");
+			log.fine("Only Stocked: " + "Y");
+		}
+		
 		//  => PriceList
-		int M_PriceList_Version_ID = 0;
-		KeyNamePair pl = (KeyNamePair)pickPriceList.getSelectedItem();
-		if (pl != null)
-			M_PriceList_Version_ID = pl.getKey();
-		if (M_PriceList_Version_ID != 0)
+		if (fPriceList_ID.getValue() != null)
 		{
-			pstmt.setInt(index++, M_PriceList_Version_ID);
-			log.fine("M_PriceList_Version_ID=" + M_PriceList_Version_ID);
+			id =  ((Integer) fPriceList_ID.getValue());
+			pstmt.setInt(index++, id.intValue());
+			log.fine("M_PriceList_Version_ID=" + id);
 		}
 		//  => Product Category
-		int M_Product_Category_ID = getM_Product_Category_ID();
-		if (M_Product_Category_ID > 0) {
-			pstmt.setInt(index++, M_Product_Category_ID);
-			log.fine("M_Product_Category_ID=" + M_Product_Category_ID);
+		if (fProductCategory_ID.getValue() != null) {
+			id = ((Integer) fProductCategory_ID.getValue());
+			pstmt.setInt(index++, id.intValue());
+			pstmt.setInt(index++, id.intValue());  //  Done twice - see getWhere()
+			log.fine("M_Product_Category_ID=" + id);
 		}
 		//  => Attribute Set - @Trifon
-		int M_AttributeSet_ID = getM_AttributeSet_ID();
-		if (M_AttributeSet_ID > 0) {
-			pstmt.setInt(index++, M_AttributeSet_ID);
-			log.fine("M_AttributeSet_ID=" + M_AttributeSet_ID);
+		if (fAS_ID.getValue() != null) {
+			id = ((Integer) fAS_ID.getValue());
+			pstmt.setInt(index++, id.intValue());
+			log.fine("M_AttributeSet_ID=" + id);
 		}
-		//	Rest of Parameter in Query for Attribute Search
-		if (m_pAttributeWhere != null)
-			return;
-
+		//	=> AttributeSetInstance where clause
+		if (fASI_ID.getAttributeWhere() != null)
+		{
+			// No parameter needs to be added
+		}
 		//  => Value
-		String value = fieldValue.getText().toUpperCase();
-		if (!(value.equals("") || value.equals("%")))
+		if (isValidSQLText(fieldValue))
+			pstmt.setString(index++, getSQLText(fieldValue));
+		//  => Name
+		if (isValidSQLText(fieldName))
+			pstmt.setString(index++, getSQLText(fieldName));
+		//  => UPC
+		if (isValidSQLText(fieldUPC))
+			pstmt.setString(index++, getSQLText(fieldUPC));
+		//  => SKU
+		if (isValidSQLText(fieldSKU))
+			pstmt.setString(index++, getSQLText(fieldSKU));
+		//  => Vendor
+		if (fVendor_ID.getValue() != null)
 		{
-			if (!value.endsWith("%"))
-				value += "%";
-			pstmt.setString(index++, value);
-			log.fine("Value: " + value);
-		}
-
-		//  => Name
-		String name = fieldName.getText().toUpperCase();
-		if (!(name.equals("") || name.equals("%")))
-		{
-			if (!name.endsWith("%"))
-				name += "%";
-			pstmt.setString(index++, name);
-			log.fine("Name: " + name);
-		}
-
-		//  => UPC
-		String upc = fieldUPC.getText().toUpperCase();
-		if (!(upc.equals("") || upc.equals("%")))
-		{
-			if (!upc.endsWith("%"))
-				upc += "%";
-			pstmt.setString(index++, upc);
-			log.fine("UPC: " + upc);
-		}
-
-		//  => SKU
-		String sku = fieldSKU.getText().toUpperCase();
-		if (!(sku.equals("") || sku.equals("%")))
-		{
-			if (!sku.endsWith("%"))
-				sku += "%";
-			pstmt.setString(index++, sku);
-			log.fine("SKU: " + sku);
-		}
-
-		//  => Vendor
-		String vendor = fieldVendor.getText().toUpperCase();
-		if (!(vendor.equals("") || vendor.equals("%")))
-		{
-			if (!vendor.endsWith("%"))
-				vendor += "%";
-			pstmt.setString(index++, vendor);
-			log.fine("Vendor: " + vendor);
+			id = (Integer)fVendor_ID.getValue();
+			pstmt.setInt(index++, id.intValue());
+			log.fine("fVendor_ID=" + id);
 		}
 
 	}   //  setParameters
 
 	
+	/**
+	 * A record was selected - take action to sync subordinate tables if any
+	 */
+	protected void recordSelected(int key)
+	{
+		//  Found and selected the same record or selected the first record
+    	if (m_M_Product_ID != key)
+    	{
+    		refresh();
+    	}
+		p_detailTaskPane.setCollapsed(false);
+		return;
+	}
+	/**
+	 * No record was selected - take action to sync subordinate tables if any
+	 */
+	protected void noRecordSelected()
+	{
+		//  Nothing was selected, or the query is empty
+		//  - close the panel
+		m_M_Product_ID = 0;
+		p_detailTaskPane.setCollapsed(true);
+		return;
+	}
+			
+	
 	/**************************************************************************
 	 *  Action Listener
 	 *	@param e event
 	 */
 	public void actionPerformed (ActionEvent e)
 	{
-		//  don't requery if fieldValue and fieldName are empty
-		if ((e.getSource() == pickWarehouse || e.getSource() == pickPriceList)
-			&& (fieldValue.getText().length() == 0 && fieldName.getText().length() == 0))
+		// Handle actions if possible or pass the event to the parent class
+
+		if(!p_loadedOK)
 			return;
+		
+		String cmd = e.getActionCommand();
+		Object source = null;
+		
+		if(e.getSource() != null)
+		{
+			source = e.getSource();
 			
-		//	Product Attribute Search
-		if (e.getSource().equals(m_InfoPAttributeButton))
-		{
-			cmd_InfoPAttribute();
-			return;		
-		}
-		m_pAttributeWhere = null;
-		
-		//	Query Product Attribute Instance
-		int row = p_table.getSelectedRow();
-		if (e.getSource().equals(m_PAttributeButton) && row != -1)
-		{
-			Integer productInteger = getSelectedRowKey();
-			String productName = (String)p_table.getValueAt(row, INDEX_NAME);
-			KeyNamePair warehouse = (KeyNamePair)pickWarehouse.getSelectedItem();
-			if (productInteger == null || productInteger.intValue() == 0 || warehouse == null)
+			if (cmd.equals(ConfirmPanel.A_PATTRIBUTE))
+			{
+				// First, if the lead row is not selected, select it.  It could just be highlighted
+				// but leaving it unselected will prevent saving the state in multi-selection
+				// when the attribute window is closed.
+				if (p_table.isMultiSelection())
+				{
+					int row = p_table.getSelectionModel().getLeadSelectionIndex();
+					p_table.setRowChecked(row, true);
+				}
+				
+				MProduct mp = MProduct.get(Env.getCtx(), m_M_Product_ID);
+				//  Set title and parameters for the PattributeInstance window
+				String title = "";
+				int wh_id = 0;
+				if (isValidVObject(fWarehouse_ID))
+				{
+					title = fWarehouse_ID.getDisplay() + " - " + mp.getName();
+					wh_id = ((Integer) (fWarehouse_ID.getValue())).intValue();
+				}
+				//  Get the business partner from the context - it may be different than the Vendor
+				int bp_id = 0;
+				String s_bp_id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BPartner_ID", false);
+				if (s_bp_id != null && s_bp_id.length() != 0 && (new Integer(s_bp_id).intValue() > 0))
+					bp_id = new Integer(s_bp_id).intValue();
+				//  Display the window
+				PAttributeInstance pai = new PAttributeInstance (this, title, 
+						wh_id, 0, p_table.getLeadRowKey(), bp_id);
+
+				if (!pai.wasCancelled())
+				{
+					//  Get the results and update the fASI criteria field
+					m_M_AttributeSetInstance_ID = pai.getM_AttributeSetInstance_ID();
+					m_M_Locator_ID = pai.getM_Locator_ID();
+					if (m_M_AttributeSetInstance_ID > 0)
+						fASI_ID.setValue(m_M_AttributeSetInstance_ID);
+					else
+						fASI_ID.setValue(0); //  No instance
+				}
+				
+				//  Saving here is confusing with multi-selection.  The Product Attribute button shouldn't be enabled
+				//  if multiple records are selected.  Also, don't close the info window if the
+				//  pai window was cancelled or nothing was selected.  Assume the user was just
+				//  looking around.
+				if (p_saveResults && m_M_AttributeSetInstance_ID != -1 && !pai.wasCancelled())  //  If the results are saved, we can save now - an ASI is product specific
+				{
+					dispose(p_saveResults);
+					return;
+				}
 				return;
-			String title = warehouse.getName() + " - " + productName;
-			PAttributeInstance pai = new PAttributeInstance (this, title, 
-				warehouse.getKey(), 0, productInteger.intValue(), m_C_BPartner_ID);
-			m_M_AttributeSetInstance_ID = pai.getM_AttributeSetInstance_ID();
-			m_M_Locator_ID = pai.getM_Locator_ID();
-			if (m_M_AttributeSetInstance_ID != -1)
-				dispose(true);
-			return;			
-		}
-		//
-		super.actionPerformed(e);
+				
+			}
+			else if (source instanceof VComboBox)
+			{
+				if (((VComboBox) source).getParent() instanceof VLookup)
+				{
+					// Works for VLookups using DisplayType.TableDir
+					source = ((VComboBox) source).getParent();
+					VLookup vl = ((VLookup)source);
+					m_heldLastFocus = vl;
+					
+					if(cmd.equals("comboBoxEdited"))
+					{
+						if (!vl.hasChanged() && !hasOutstandingChanges())
+						{
+							vl.requestFocus();
+							return;
+						}
+
+						p_triggerRefresh = true;
+						
+						//  perform field-specific changes
+						if (vl == fWarehouse_ID)
+						{
+							if (!isValidVObject(fWarehouse_ID))
+							{
+								//  Disable the stock button
+								checkOnlyStock.setSelected(false);
+								checkOnlyStock.setEnabled(false);
+							}
+							else
+								checkOnlyStock.setEnabled(true);
+						}
+					}
+				}
+			}
+			else if (source instanceof CTextField)
+			{
+				CTextField tf = ((CTextField) source);
+
+				if (tf.getParent() instanceof VPAttribute)
+				{
+					source = tf.getParent();
+					VPAttribute vpa = ((VPAttribute) source);
+					m_heldLastFocus = fieldValue;  //  The VPAttribute field can't hold the focus effectively
+					
+					if (vpa.hasChanged())
+					{
+						p_triggerRefresh = true;
+					}
+				}
+			}
+			else if (e.getSource() instanceof VCheckBox)
+			{
+				//  Check box changes generally always cause a refresh
+				//  Capture changes that don't 	
+				VCheckBox cb = (VCheckBox) e.getSource();
+				//  ShowDetail check box
+				if (cb.getName().equals("ShowDetail"))
+				{
+					// Refresh only the ATP tab 
+					refreshAtpTab();
+					return;
+				}
+			}
+		} //  e.getSource() is null
+
+		super.actionPerformed(e);  //  Let the info class decide what to do.
+				
 	}   //  actionPerformed
 
 	/**
+	 * Determine if the column causes dynamic changes in the table layout
+	 * @param o
+	 * @return true if changes result
+	 */
+	protected boolean columnIsDynamic(Object o)
+	{
+		// List of search fields that cause changes to the table layout
+		// See getProductLayout()
+		if (o.equals(fPriceList_ID) 		||
+			o.equals(fProductCategory_ID) 	||
+			o.equals(fWarehouse_ID))
+		{
+			return true;
+		}
+		return false;
+	}
+	/**
 	 *  Enable PAttribute if row selected/changed
 	 */
 	protected void enableButtons ()
 	{
-		m_M_AttributeSetInstance_ID = -1;
 		if (m_PAttributeButton != null)
 		{
-			int row = p_table.getSelectedRow();
+			if (p_table == null)
+				return;
+			
+			int row = p_table.getSelectionModel().getLeadSelectionIndex();
+			int rows = p_table.getRowCount();
+			if (p_table.getShowTotals())
+				rows = rows-1;
+			
+			if (row < 0 || row > rows)
+			{
+				super.enableButtons();
+				return;
+			}
+			
 			boolean enabled = false;
-			if (row >= 0)
+			
+			// Check the lead row - if it has no attribute instances, no button
+			try
 			{
 				Object value = p_table.getValueAt(row, INDEX_PATTRIBUTE);
 				enabled = Boolean.TRUE.equals(value);
 			}
+			catch(Exception e)
+			{
+				enabled = false;
+			}
+
+			if (enabled && p_table.isMultiSelection())
+			{
+				//  Only enable if a single row is selected.  Disable for multiple selections.
+				//  Multiple selections can be checked or just high-lighted.
+				int checkedRows = p_table.getSelectedKeys().size();
+				int selectedRows = p_table.getSelectedRowCount();
+				log.fine("Checked Rows: " + checkedRows + " SelectedRows: " + selectedRows);
+				if (checkedRows > 1 || selectedRows > 1)
+					enabled = false;
+				else if (checkedRows == 1)  // SelectedRows could be zero so don't care
+				{
+					//Check that the lead selection is checked
+					Object data = p_table.getValueAt(row, p_table.getKeyColumnIndex());
+					if (data instanceof IDColumn)
+					{
+						IDColumn record = (IDColumn)data;
+						if (!record.isSelected())
+						{
+							enabled = false;
+							log.fine("Lead selection is not checked!");
+						}
+					}   
+				}
+			}
 			m_PAttributeButton.setEnabled(enabled);
 		}
 		super.enableButtons();
 	}   //  enableButtons
 
 	/**
-	 * 	Query per Product Attribute.
-	 *  <code>
-	 * 	Available synonyms:
-	 *		M_Product p
-	 *		M_ProductPrice pr
-	 *		M_AttributeSet pa
-	 *	</code>
-	 */
-	private void cmd_InfoPAttribute()
-	{
-		InfoPAttribute ia = new InfoPAttribute(this);
-		m_pAttributeWhere = ia.getWhereClause();
-		if (m_pAttributeWhere != null)
-			executeQuery();
-	}	//	cmdInfoAttribute
-
-	/**
 	 *	Show History
 	 */
-	protected void showHistory()
+	protected void showHistory(int record_id)
 	{
 		log.info("");
-		Integer M_Product_ID = getSelectedRowKey();
-		if (M_Product_ID == null)
+		int M_Product_ID = record_id;
+		if (M_Product_ID <= 0)
 			return;
-		KeyNamePair kn = (KeyNamePair)pickWarehouse.getSelectedItem();
-		int M_Warehouse_ID = kn.getKey();
+		int M_Warehouse_ID = ((Integer) fWarehouse_ID.getValue()).intValue();
 		int M_AttributeSetInstance_ID = m_M_AttributeSetInstance_ID;
-		if (m_M_AttributeSetInstance_ID < -1)	//	not selected
+		if (m_M_AttributeSetInstance_ID < 0)	//	not selected
 			M_AttributeSetInstance_ID = 0;
 		//
 		InvoiceHistory ih = new InvoiceHistory (this, 0, 
-			M_Product_ID.intValue(), M_Warehouse_ID, M_AttributeSetInstance_ID);
+			M_Product_ID, M_Warehouse_ID, M_AttributeSetInstance_ID);
 		ih.setVisible(true);
 		ih = null;
 	}	//	showHistory
@@ -957,13 +1402,12 @@
 	/**
 	 *	Zoom
 	 */
-	protected void zoom()
+	protected void zoom(int record_id)
 	{
 		log.info("");
-		Integer M_Product_ID = getSelectedRowKey();
+		Integer M_Product_ID = record_id;
 		if (M_Product_ID == null)
 			return;
-	//	AEnv.zoom(MProduct.Table_ID, M_Product_ID.intValue(), true);	//	SO
 		
 		MQuery query = new MQuery("M_Product");
 		query.addRestriction("M_Product_ID", MQuery.EQUAL, M_Product_ID);
@@ -1006,13 +1450,14 @@
 		//  publish for Callout to read
 		Integer ID = getSelectedRowKey();
 		Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "M_Product_ID", ID == null ? "0" : ID.toString());
-		KeyNamePair kn = (KeyNamePair)pickPriceList.getSelectedItem();
-		Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "M_PriceList_Version_ID", kn.getID());
-		kn = (KeyNamePair)pickWarehouse.getSelectedItem();
-		Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "M_Warehouse_ID", kn.getID());
+		if (isValidVObject(fPriceList_ID)) // Prevent NPEs
+			Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "M_PriceList_Version_ID", ((Integer) fPriceList_ID.getValue()).toString());
+		if (isValidVObject(fWarehouse_ID)) // Prevent NPEs
+			Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "M_Warehouse_ID", ((Integer) fWarehouse_ID.getValue()).toString());
 		//
-		if (m_M_AttributeSetInstance_ID == -1)	//	not selected
+		if (m_M_AttributeSetInstance_ID == -1 || isMultipleResults())	//	not selected or multiple items selected
 		{
+			//  In the case of multiple items, the attribute context and product context can be disconnected.
 			Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "M_AttributeSetInstance_ID", "0");
 			Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "M_Locator_ID", "0");
 		}
@@ -1026,25 +1471,35 @@
 	}	//	saveSelectionDetail
 
 	/**
-	 *  Get Product Layout
+	 *  Get Product Layout - Dynamic
 	 *
 	 * @return array of Column_Info
 	 */
-	protected Info_Column[] getProductLayout()
+	protected Info_Column[] getTableLayout()
 	{
-		if (s_productLayout != null)
-			return s_productLayout;
-		//
-		if (s_productLayout == null)
+
+		ArrayList<Info_Column> list = new ArrayList<Info_Column>();
+		list.add(new Info_Column(" ", "p.M_Product_ID", IDColumn.class, false));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "Discontinued").substring(0, 1), "p.Discontinued", Boolean.class));
+		//if (!isValidVObject(fProductCategory_ID) || (isValidVObject(fProductCategory_ID) && !checkAND.isSelected()))
+		//{
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "M_Product_Category_ID"), "pc.Name", String.class));
+		//}
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "Value"), "p.Value", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "Name"), "p.Name", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "UPC"), "p.UPC", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "SKU"), "p.SKU", String.class));
+		if (isValidVObject(fPriceList_ID))
 		{
-			ArrayList<Info_Column> list = new ArrayList<Info_Column>();
-			list.add(new Info_Column(" ", "p.M_Product_ID", IDColumn.class, !p_multiSelection));
-			list.add(new Info_Column(Msg.translate(Env.getCtx(), "Discontinued").substring(0, 1), "p.Discontinued", Boolean.class));
-			list.add(new Info_Column(Msg.translate(Env.getCtx(), "Value"), "p.Value", String.class));
-			list.add(new Info_Column(Msg.translate(Env.getCtx(), "Name"), "p.Name", String.class));
-			list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyAvailable"), "case when p.IsBOM='N' and (p.ProductType!='I' OR p.IsStocked='N') then to_number(get_Sysconfig('QTY_TO_SHOW_FOR_SERVICES', '99999', p.ad_client_id, 0), '99999999999') else bomQtyAvailable(p.M_Product_ID,?,0) end AS QtyAvailable", Double.class, true, true, null));
 			list.add(new Info_Column(Msg.translate(Env.getCtx(), "PriceList"), "bomPriceList(p.M_Product_ID, pr.M_PriceList_Version_ID) AS PriceList",  BigDecimal.class));
 			list.add(new Info_Column(Msg.translate(Env.getCtx(), "PriceStd"), "bomPriceStd(p.M_Product_ID, pr.M_PriceList_Version_ID) AS PriceStd", BigDecimal.class));
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "PriceLimit"), "bomPriceLimit(p.M_Product_ID, pr.M_PriceList_Version_ID) AS PriceLimit", BigDecimal.class));
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "Margin"), "bomPriceStd(p.M_Product_ID, pr.M_PriceList_Version_ID)-bomPriceLimit(p.M_Product_ID, pr.M_PriceList_Version_ID) AS Margin", BigDecimal.class));
+		}
+		if (isValidVObject(fWarehouse_ID))
+		{
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "IsStocked"), "p.isStocked", Boolean.class));
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyAvailable"), "case when p.IsBOM='N' and (p.ProductType!='I' OR p.IsStocked='N') then to_number(get_Sysconfig('QTY_TO_SHOW_FOR_SERVICES', '99999', p.ad_client_id, 0), '99999999999') else bomQtyAvailable(p.M_Product_ID,?,0) end AS QtyAvailable", Double.class, true, true, null));
 			list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyOnHand"), "case when p.IsBOM='N' and (p.ProductType!='I' OR p.IsStocked='N') then to_number(get_Sysconfig('QTY_TO_SHOW_FOR_SERVICES', '99999', p.ad_client_id, 0), '99999999999') else bomQtyOnHand(p.M_Product_ID,?,0) end AS QtyOnHand", Double.class));
 			list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyReserved"), "bomQtyReserved(p.M_Product_ID,?,0) AS QtyReserved", Double.class));
 			list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyOrdered"), "bomQtyOrdered(p.M_Product_ID,?,0) AS QtyOrdered", Double.class));
@@ -1053,19 +1508,47 @@
 				list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyUnconfirmed"), "(SELECT SUM(c.TargetQty) FROM M_InOutLineConfirm c INNER JOIN M_InOutLine il ON (c.M_InOutLine_ID=il.M_InOutLine_ID) INNER JOIN M_InOut i ON (il.M_InOut_ID=i.M_InOut_ID) WHERE c.Processed='N' AND i.M_Warehouse_ID=? AND il.M_Product_ID=p.M_Product_ID) AS QtyUnconfirmed", Double.class));
 				list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyUnconfirmedMove"), "(SELECT SUM(c.TargetQty) FROM M_MovementLineConfirm c INNER JOIN M_MovementLine ml ON (c.M_MovementLine_ID=ml.M_MovementLine_ID) INNER JOIN M_Locator l ON (ml.M_LocatorTo_ID=l.M_Locator_ID) WHERE c.Processed='N' AND l.M_Warehouse_ID=? AND ml.M_Product_ID=p.M_Product_ID) AS QtyUnconfirmedMove", Double.class));
 			}
-			list.add(new Info_Column(Msg.translate(Env.getCtx(), "Margin"), "bomPriceStd(p.M_Product_ID, pr.M_PriceList_Version_ID)-bomPriceLimit(p.M_Product_ID, pr.M_PriceList_Version_ID) AS Margin", BigDecimal.class));
-			list.add(new Info_Column(Msg.translate(Env.getCtx(), "Vendor"), "bp.Name", String.class));
-			list.add(new Info_Column(Msg.translate(Env.getCtx(), "PriceLimit"), "bomPriceLimit(p.M_Product_ID, pr.M_PriceList_Version_ID) AS PriceLimit", BigDecimal.class));
-			list.add(new Info_Column(Msg.translate(Env.getCtx(), "IsInstanceAttribute"), "pa.IsInstanceAttribute", Boolean.class));
-			s_productLayout = new Info_Column[list.size()];
-			list.toArray(s_productLayout);
-			INDEX_NAME = 3;
-			INDEX_PATTRIBUTE = s_productLayout.length - 1;	//	last item
 		}
-		return s_productLayout;
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "Vendor"), "bp.Name", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "IsInstanceAttribute"), "pa.IsInstanceAttribute", Boolean.class));
+		//
+		s_Layout = new Info_Column[list.size()];
+		list.toArray(s_Layout);
+		//
+		INDEX_PATTRIBUTE = s_Layout.length - 1;	//	last item
+		//
+		return s_Layout;
 	}   //  getProductLayout
 	
 	/**
+	 *  Get Order Clause - Dynamic
+	 *
+	 * @return orderClause  "
+	 */
+	protected String getOrderClause()
+	{
+		String orderClause = "";
+		if (!isValidVObject(fProductCategory_ID))
+		{
+			orderClause += ", pc.Name";
+		}
+		
+		orderClause += ", Value";
+		
+		if (isValidVObject(fWarehouse_ID))
+		{
+			orderClause += ", QtyAvailable DESC";
+		}
+		if (isValidVObject(fPriceList_ID))
+		{
+			orderClause += ", Margin DESC";
+		}
+		if (orderClause.startsWith(", "))
+			orderClause = orderClause.substring(2);
+		
+		return orderClause;
+	}
+	/**
 	 * 	System has Unconfirmed records
 	 *	@return true if unconfirmed
 	 */
@@ -1093,16 +1576,16 @@
 			{
 				CTabbedPane tab = (CTabbedPane) e.getSource();
 				
-				if(tab.getSelectedIndex() == 4 & warehouseTbl.getRowCount() > 0)
+				if(tab.getSelectedIndex() == 5)
 				{	
-					// If no warehouse row is selected in the warehouse tab, use the first warehouse
-					// row to prevent array index out of bounds. BF 3051361
-					int selectedRow = warehouseTbl.getSelectedRow();
-					if (selectedRow<0) selectedRow = 0;
-					String value = (String)warehouseTbl.getValueAt(selectedRow,0);		 
-					int M_Warehouse_ID = DB.getSQLValue(null, "SELECT M_Warehouse_ID FROM M_Warehouse WHERE UPPER(Name) = UPPER(?) AND AD_Client_ID=?", new Object[] { value ,Env.getAD_Client_ID(Env.getCtx())});
-					initAtpTab(M_Warehouse_ID);
-				}	
+					checkShowDetail.setEnabled(true);
+				}
+				else
+				{
+					checkShowDetail.setEnabled(false);				
+				}
+	    		log.fine("Calling refresh(): " + e.toString());
+				refresh();
 			}
 			
 	}	//	stateChanged
@@ -1110,189 +1593,290 @@
 	/**
 	 *	Query ATP
 	 */
-	private void initAtpTab (int  m_M_Warehouse_ID)
+	private void initAtpTab ()
 	{
+	
+		//  Table
+		m_tableAtp = new MiniTable();
+		m_tableAtp.setRowSelectionAllowed(true);
+		m_tableAtp.setMultiSelection(false);
+		m_tableAtp.addMouseListener(this);
+		m_tableAtp.setShowTotals(false);
+		
+		//	Header
+		ArrayList<Info_Column> list = new ArrayList<Info_Column>();
+		list.add(new Info_Column(" ", "M_Product_ID", IDColumn.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "M_Warehouse_ID"), "Warehouse", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "M_Locator_ID"), "Locator", String.class));
+		list.add(new Info_Column(Msg.getMsg(Env.getCtx(), "Date", true), "Date", Timestamp.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyAvailable"), "QtyAvailable", Double.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyOnHand"), "QtyOnHand", Double.class));
+		list.add(new Info_Column(Msg.getMsg(Env.getCtx(), "ExpectedChange", true), "DeltaQty", Double.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "C_BPartner_ID"), "BP_Name", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyOrdered"), "QtyOrdered", Double.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyReserved"), "QtyReserved", Double.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "M_AttributeSetInstance_ID"), "PASI", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "DocumentNo"), "DocumentNo", String.class));
+
+		m_layoutATP = new Info_Column[list.size()];
+		list.toArray(m_layoutATP);
+
+
+}	//	initAtpTab
+
+	/**
+	 *	Refresh ATP
+	 */
+	private void refreshAtpTab ()
+	{
+
+		boolean showDetail = checkShowDetail.isSelected();
+		
+		Vector<Vector<Object>> data = new Vector<Vector<Object>>();
+
+		int M_Warehouse_ID = 0;
+
+		// If no warehouse row is selected in the warehouse tab, use the first warehouse
+		// row to prevent array index out of bounds. BF 3051361
+		if (warehouseTbl.getRowCount() > 0)
+		{
+			int selectedRow = warehouseTbl.getSelectedRow();
+			if (selectedRow<0) selectedRow = 0;
+			Object wh_data = warehouseTbl.getValueAt(selectedRow, warehouseTbl.getKeyColumnIndex());
+            if (wh_data != null && wh_data instanceof IDColumn)
+            {
+            	IDColumn dataColumn = (IDColumn) wh_data;
+        		M_Warehouse_ID = dataColumn.getRecord_ID();
+            }
+		} 
+		else
+		{
+    		M_Warehouse_ID = m_M_Warehouse_ID;
+		}
+	
+		if (M_Warehouse_ID == 0)
+		{
+			// Can't find a warehouse to load.  Clear the table
+			clearAtpTab();
+			return;
+		}
+		else  // Update the table
+		{
+			//	Create the SELECT ..UNION. clause
+			//  This is done in-line rather than using prepareTable() so we can add a running sum to the data.
+			String sql;
+			if (!showDetail)
+				sql = "(SELECT s.M_Product_ID, w.Name as warehouse, l.value as locator, 0 as ID, now() as Date,"
+					+ " sum(s.QtyOnHand) as AvailQty, null as DeltaQty, null as QtyOrdered, null as QtyReserved,"
+					+ " null as sumPASI," // " s.PASI," 
+					+ " 0 as ASI,"
+					+ " null as BP_Name, null as DocumentNo, 10 as SeqNo";
+			else
+				sql = "(SELECT s.M_Product_ID, w.Name as warehouse, l.value as locator, s.M_AttributeSetInstance_ID as ID, now() as Date,"
+					+ " s.QtyOnHand as AvailQty, null as DeltaQty, null as QtyOrdered, null as QtyReserved,"
+					+ " CASE WHEN s.PASI  = '' THEN '{' || COALESCE(s.M_AttributeSetInstance_ID,0) || '}' ELSE s.PASI END as sumPASI," 
+					+ " COALESCE(M_AttributeSetInstance_ID,0) as ASI," 
+					+ " null as BP_Name, null as DocumentNo,  10 as SeqNo";
+			sql += " FROM (SELECT M_Product_ID, M_Locator_ID, QtyOnHand, QtyReserved, QtyOrdered,"
+				+ 		 " COALESCE(productAttribute(M_AttributeSetInstance_ID)::varchar, '') as PASI,"
+				+		 " COALESCE(M_AttributeSetInstance_ID,0) as M_AttributeSetInstance_ID FROM M_Storage) s "
+				+ " INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID)"
+				+ " INNER JOIN M_Warehouse w ON (l.M_Warehouse_ID=w.M_Warehouse_ID)"
+				+ " WHERE s.M_Product_ID=?";
+			if (M_Warehouse_ID != 0)
+				sql += " AND l.M_Warehouse_ID=?";
+			//if (m_M_AttributeSetInstance_ID > 0)
+			//	sql += " AND s.M_AttributeSetInstance_ID=?";
+			if (!showDetail)
+			{
+				sql += " AND (s.QtyOnHand<>0)";
+				sql += " GROUP BY s.M_Product_ID, w.Name, l.value, s.M_Locator_ID, sumPASI, ASI, BP_Name, DocumentNo, SeqNo ";
+			}
+			else
+			    sql += " AND (s.QtyOnHand<>0) ";
+
 			
+			sql += "UNION ALL ";
+	
+			//	Orders
+			sql += "SELECT ol.M_Product_ID, w.Name as warehouse, null as locator, ol.M_AttributeSetInstance_ID as ID, o.DatePromised as date,"
+				+ " null as AvailQty,"
+				+ " CASE WHEN dt.DocBaseType = 'POO' THEN ol.QtyOrdered ELSE -ol.QtyReserved END as DeltaQty,"
+				+ " CASE WHEN dt.DocBaseType = 'POO' THEN ol.QtyOrdered ELSE null END as QtyOrdered,"
+				+ " CASE WHEN dt.DocBaseType = 'POO' THEN null ELSE ol.QtyReserved END as QtyReserved,"
+				+ " productAttribute(ol.M_AttributeSetInstance_ID) as sumPASI," 
+				+ " ol.M_AttributeSetInstance_ID as ASI,"
+				+ " bp.Name as BP_Name, dt.PrintName || ' ' || o.DocumentNo As DocumentNo, 20 as SeqNo "
+				+ "FROM C_Order o"
+				+ " INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID)"
+				+ " INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID)"
+				+ " INNER JOIN M_Warehouse w ON (ol.M_Warehouse_ID=w.M_Warehouse_ID)"
+				+ " INNER JOIN C_BPartner bp  ON (o.C_BPartner_ID=bp.C_BPartner_ID) "
+				+ "WHERE ol.QtyReserved<>0"
+				+ " AND ol.M_Product_ID=?";
+			if (M_Warehouse_ID != 0)
+				sql += " AND ol.M_Warehouse_ID=?";
+			//if (m_M_AttributeSetInstance_ID > 0)
+			//	sql += " AND ol.M_AttributeSetInstance_ID=?";
+			sql += " ORDER BY M_Product_ID, SeqNo, ID, date, locator)";
+	
+			double qty = 0;
+			PreparedStatement pstmt = null;
+			ResultSet rs = null;
+			try
+			{
+				int index = 1;
+				pstmt = DB.prepareStatement(sql, null);
+				pstmt.setInt(index++, m_M_Product_ID);
+				//  Two queries in union - parameters repeat
+				if (M_Warehouse_ID != 0)
+					pstmt.setInt(index++, M_Warehouse_ID);
+				//if (m_M_AttributeSetInstance_ID > 0)
+				//	pstmt.setInt(index++, m_M_AttributeSetInstance_ID);
+				pstmt.setInt(index++, m_M_Product_ID);
+				if (M_Warehouse_ID != 0)
+					pstmt.setInt(index++, M_Warehouse_ID);
+				//if (m_M_AttributeSetInstance_ID > 0)
+				//	pstmt.setInt(index++, m_M_AttributeSetInstance_ID);
+				rs = pstmt.executeQuery();
+				while (rs.next())
+				{
+					//  The order of data matches the layout, not the query
+					//  M_Product_ID, warehouse, locator, ID, Date, AvailQty, DeltaQty, (1..7) 
+					//  QtyOrdered, QtyReserved, (8..9)
+					//  sumPASI, ASI, (10..11)
+					//  BP_Name, DocumentNo,  SeqNo (12..14)
+					Vector<Object> line = new Vector<Object>(10);
+					line.add(rs.getInt(1));							//  M_Product_ID
+					line.add(rs.getString(2));						//  warehouse
+					line.add(rs.getString(3));      				//  Locator
+					line.add(rs.getTimestamp(5));					//  Date
+					double deltaQty = rs.getDouble(7);
+					qty += +rs.getDouble(6) + deltaQty;
+					line.add(new Double(qty));  					//  Qty Available (running sum)
+					line.add(new Double(rs.getDouble(6)));			//  Qty on hand (this line)
+					line.add(new Double(rs.getDouble(7)));			//  Delta Qty
+					line.add(rs.getString(12));						//  BPartner
+					line.add(new Double(rs.getDouble(8)));  		//  QtyOrdered
+					line.add(new Double(rs.getDouble(9)));  		//  QtyReserved
+					line.add(rs.getString(10));						//  ASI
+					line.add(rs.getString(13));						//  DocumentNo
+					data.add(line);
+				}
+			}
+			catch (SQLException e)
+			{
+				log.log(Level.SEVERE, sql, e);
+			}
+			finally {
+				DB.close(rs, pstmt);
+				rs = null; pstmt = null;
+			}
+		}
+		
+		//  Update the table
+		
 		//	Header
 		Vector<String> columnNames = new Vector<String>();
-		columnNames.add(Msg.translate(Env.getCtx(), "Date"));
-		columnNames.add(Msg.translate(Env.getCtx(), "QtyOnHand"));
-		columnNames.add(Msg.translate(Env.getCtx(), "C_BPartner_ID"));
-		columnNames.add(Msg.translate(Env.getCtx(), "QtyOrdered"));
-		columnNames.add(Msg.translate(Env.getCtx(), "QtyReserved"));
-		columnNames.add(Msg.translate(Env.getCtx(), "M_Locator_ID"));
-		columnNames.add(Msg.translate(Env.getCtx(), "M_AttributeSetInstance_ID"));
-		columnNames.add(Msg.translate(Env.getCtx(), "DocumentNo"));
-		columnNames.add(Msg.translate(Env.getCtx(), "M_Warehouse_ID"));
+		for (int i = 0; i < m_layoutATP.length; i++)
+			columnNames.add(m_layoutATP[i].getColHeader());
 
-		//	Fill Storage Data
-		boolean showDetail = CLogMgt.isLevelFine();
-		String sql = "SELECT s.QtyOnHand, s.QtyReserved, s.QtyOrdered,"
-			+ " productAttribute(s.M_AttributeSetInstance_ID), s.M_AttributeSetInstance_ID,";
-		if (!showDetail)
-			sql = "SELECT SUM(s.QtyOnHand), SUM(s.QtyReserved), SUM(s.QtyOrdered),"
-				+ " productAttribute(s.M_AttributeSetInstance_ID), 0,";
-		sql += " w.Name, l.Value "
-			+ "FROM M_Storage s"
-			+ " INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID)"
-			+ " INNER JOIN M_Warehouse w ON (l.M_Warehouse_ID=w.M_Warehouse_ID) "
-			+ "WHERE M_Product_ID=?";
-		if (m_M_Warehouse_ID != 0)
-			sql += " AND l.M_Warehouse_ID=?";
-		if (m_M_AttributeSetInstance_ID > 0)
-			sql += " AND s.M_AttributeSetInstance_ID=?";
-		sql += " AND (s.QtyOnHand<>0 OR s.QtyReserved<>0 OR s.QtyOrdered<>0)";
-		if (!showDetail)
-			sql += " GROUP BY productAttribute(s.M_AttributeSetInstance_ID), w.Name, l.Value";
-		sql += " ORDER BY l.Value";
-		
-		Vector<Vector<Object>> data = new Vector<Vector<Object>>();
-		double qty = 0;
-		PreparedStatement pstmt = null;
-		ResultSet rs = null;
-		try
-		{
-			pstmt = DB.prepareStatement(sql, null);
-			pstmt.setInt(1, m_M_Product_ID);
-			if (m_M_Warehouse_ID != 0)
-				pstmt.setInt(2, m_M_Warehouse_ID);
-			if (m_M_AttributeSetInstance_ID > 0)
-				pstmt.setInt(3, m_M_AttributeSetInstance_ID);
-			rs = pstmt.executeQuery();
-			while (rs.next())
-			{
-				Vector<Object> line = new Vector<Object>(9);
-				line.add(null);							//  Date
-				double qtyOnHand = rs.getDouble(1);
-				qty += qtyOnHand;
-				line.add(new Double(qtyOnHand));  		//  Qty
-				line.add(null);							//  BPartner
-				line.add(new Double(rs.getDouble(3)));  //  QtyOrdered
-				line.add(new Double(rs.getDouble(2)));  //  QtyReserved
-				line.add(rs.getString(7));      		//  Locator
-				String asi = rs.getString(4);
-				if (showDetail && (asi == null || asi.length() == 0))
-					asi = "{" + rs.getInt(5) + "}";
-				line.add(asi);							//  ASI
-				line.add(null);							//  DocumentNo
-				line.add(rs.getString(6));  			//	Warehouse
-				data.add(line);
-			}
-		}
-		catch (SQLException e)
-		{
-			log.log(Level.SEVERE, sql, e);
-		}
-		finally {
-			DB.close(rs, pstmt);
-			rs = null; pstmt = null;
-		}
+		m_modelAtp = new DefaultTableModel();
+		m_modelAtp.setDataVector(data, columnNames);
 
-		//	Orders
-		sql = "SELECT o.DatePromised, ol.QtyReserved,"
-			+ " productAttribute(ol.M_AttributeSetInstance_ID), ol.M_AttributeSetInstance_ID,"
-			+ " dt.DocBaseType, bp.Name,"
-			+ " dt.PrintName || ' ' || o.DocumentNo As DocumentNo, w.Name "
-			+ "FROM C_Order o"
-			+ " INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID)"
-			+ " INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID)"
-			+ " INNER JOIN M_Warehouse w ON (ol.M_Warehouse_ID=w.M_Warehouse_ID)"
-			+ " INNER JOIN C_BPartner bp  ON (o.C_BPartner_ID=bp.C_BPartner_ID) "
-			+ "WHERE ol.QtyReserved<>0"
-			+ " AND ol.M_Product_ID=?";
-		if (m_M_Warehouse_ID != 0)
-			sql += " AND ol.M_Warehouse_ID=?";
-		if (m_M_AttributeSetInstance_ID > 0)
-			sql += " AND ol.M_AttributeSetInstance_ID=?";
-		sql += " ORDER BY o.DatePromised";
-		try
-		{
-			pstmt = DB.prepareStatement(sql, null);
-			pstmt.setInt(1, m_M_Product_ID);
-			if (m_M_Warehouse_ID != 0)
-				pstmt.setInt(2, m_M_Warehouse_ID);
-			if (m_M_AttributeSetInstance_ID > 0)
-				pstmt.setInt(3, m_M_AttributeSetInstance_ID);
-			rs = pstmt.executeQuery();
-			while (rs.next())
-			{
-				Vector<Object> line = new Vector<Object>(9);
-				line.add(rs.getTimestamp(1));			//  Date
-				double oq = rs.getDouble(2);
-				String DocBaseType = rs.getString(5);
-				Double qtyReserved = null;
-				Double qtyOrdered = null;
-				if (MDocType.DOCBASETYPE_PurchaseOrder.equals(DocBaseType))
-				{
-					qtyOrdered = new Double(oq);
-					qty += oq;
-				}
-				else
-				{
-					qtyReserved = new Double(oq);
-					qty -= oq;
-				}
-				line.add(new Double(qty)); 		 		//  Qty
-				line.add(rs.getString(6));				//  BPartner
-				line.add(qtyOrdered);					//  QtyOrdered
-				line.add(qtyReserved);					//  QtyReserved
-				line.add(null);				      		//  Locator
-				String asi = rs.getString(3);
-				if (showDetail && (asi == null || asi.length() == 0))
-					asi = "{" + rs.getInt(4) + "}";
-				line.add(asi);							//  ASI
-				line.add(rs.getString(7));				//  DocumentNo
-				line.add(rs.getString(8));  			//	Warehouse
-				data.add(line);
-			}
-		}
-		catch (SQLException e)
-		{
-			log.log(Level.SEVERE, sql, e);
-		}
-		finally {
-			DB.close(rs, pstmt);
-			rs = null; pstmt = null;
-		}
+		//  Avoid an exception
+		SwingUtilities.invokeLater(new Runnable(){public void run(){
+			m_tableAtp.setModel(m_modelAtp);
+			//  set editors (two steps)
+			for (int i = 0; i < m_layoutATP.length; i++)
+				m_tableAtp.setColumnClass(i, m_layoutATP[i].getColClass(), m_layoutATP[i].isReadOnly(), m_layoutATP[i].getColHeader());
+			m_tableAtp.autoSize();
+		}});
 
-		//  Table
-		MiniTable table = null;
-		m_modelAtp = new DefaultTableModel(data, columnNames); 
+
+	}	//	refreshAtpTab
+	
+	/**
+	 * clearAtpTab() - wipe the ATP table of data
+	 */
+	private void clearAtpTab()
+	{
+		m_modelAtp = new DefaultTableModel();
+		m_tableAtp.setRowCount(0);
 		m_tableAtp.setModel(m_modelAtp);
-		table = m_tableAtp;
-		//
-		table.setColumnClass(0, Timestamp.class, true);   //  Date
-		table.setColumnClass(1, Double.class, true);      //  Quantity
-		table.setColumnClass(2, String.class, true);      //  Partner
-		table.setColumnClass(3, Double.class, true);      //  Quantity
-		table.setColumnClass(4, Double.class, true);      //  Quantity
-		table.setColumnClass(5, String.class, true);   	  //  Locator
-		table.setColumnClass(6, String.class, true);   	  //  ASI
-		table.setColumnClass(7, String.class, true);      //  DocNo
-		table.setColumnClass(8, String.class, true);   	  //  Warehouse
-		//
-		table.autoSize();
-	}	//	initAtpTab
 
-	/**
-	 * @return selected product category ID
-	 */
-	public int getM_Product_Category_ID() {
-		int M_Product_Category_ID = 0;
-		KeyNamePair pc = (KeyNamePair)pickProductCategory.getSelectedItem();
-		if (pc != null)
-			M_Product_Category_ID = pc.getKey();
-		return M_Product_Category_ID;
-	}
-	
+	}  //  clearAtpTab
+
 	/**
 	 * @return selected Attribute Set ID
 	 */
 	public int getM_AttributeSet_ID() {
 		int M_AttributeSet_ID = 0;
-		KeyNamePair as = (KeyNamePair)pickAS.getSelectedItem();
-		if (as != null)
-			M_AttributeSet_ID = as.getKey();
+		if (fAS_ID.getValue() != null)
+			M_AttributeSet_ID = ((Integer) fAS_ID.getValue()).intValue();
 		return M_AttributeSet_ID;
 	}
+	
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
+	{
+		//  All the tracked fields
+		return(
+			fieldValue.hasChanged()	||
+			fieldName.hasChanged() ||
+			fieldUPC.hasChanged() ||
+			fieldSKU.hasChanged() ||
+			fPriceList_ID.hasChanged() ||
+			fWarehouse_ID.hasChanged() ||
+			fVendor_ID.hasChanged() ||
+			fProductCategory_ID.hasChanged() ||
+			fAS_ID.hasChanged() ||
+			fASI_ID.hasChanged() ||
+			checkOnlyStock.hasChanged() ||
+			checkAND.hasChanged());
+	}
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		fieldValue.set_oldValue();
+		fieldName.set_oldValue();
+		fieldUPC.set_oldValue();
+		fieldSKU.set_oldValue();
+		fPriceList_ID.set_oldValue();
+		fWarehouse_ID.set_oldValue();
+		fVendor_ID.set_oldValue();
+		fProductCategory_ID.set_oldValue();
+		fAS_ID.set_oldValue();
+		fASI_ID.set_oldValue();
+		checkOnlyStock.set_oldValue();
+		checkAND.set_oldValue();
+		return;
+	}
+	
+	/**
+	 *  Clear all fields and set default values in check boxes
+	 */
+	protected void clearParameters()
+	{
+		//  Clear fields and set defaults
+		fieldValue.setText("");
+		fieldName.setText("");
+		fieldUPC.setText("");
+		fieldSKU.setText("");
+    	fWarehouse_ID.setValue(null);
+    	fPriceList_ID.setValue(null);
+    	fProductCategory_ID.setValue(null);
+    	fVendor_ID.setValue(null);
+    	fAS_ID.setValue(null);
+    	fASI_ID.setValue(null);
+    	checkOnlyStock.setValue(false);  	//  Show everything
+		checkAND.setSelected(true); 		//  Use AND
+	}
 }	//	InfoProduct
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/InvoiceHistory.java
--- a/client/src/org/compiere/apps/search/InvoiceHistory.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/InvoiceHistory.java	Mon Feb 10 21:08:53 2014 -0500
@@ -533,6 +533,7 @@
 		table.setColumnClass(2, Timestamp.class, true);   //  MovementDate
 		table.setColumnClass(3, Boolean.class, true);  	  //  IsSOTrx
 		table.setColumnClass(4, String.class, true);      //  DocNo
+		table.setColumnClass(5, String.class, true);	  //  Warehouse
 		//
 		table.autoSize();
 	}	//	initUnconfirmedTab
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/apps/search/PAttributeInstance.java
--- a/client/src/org/compiere/apps/search/PAttributeInstance.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/apps/search/PAttributeInstance.java	Mon Feb 10 21:08:53 2014 -0500
@@ -17,6 +17,8 @@
 package org.compiere.apps.search;
 
 import java.awt.BorderLayout;
+import java.awt.Dimension;
+import java.awt.Toolkit;
 import java.awt.event.ActionEvent;
 import java.awt.event.MouseEvent;
 import java.sql.PreparedStatement;
@@ -24,13 +26,18 @@
 import java.sql.Timestamp;
 import java.util.logging.Level;
 
+import javax.swing.AbstractAction;
+import javax.swing.Action;
 import javax.swing.JDialog;
 import javax.swing.JFrame;
 import javax.swing.JScrollPane;
+import javax.swing.KeyStroke;
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
 
 import org.compiere.apps.AEnv;
+import org.compiere.apps.ALayout;
+import org.compiere.apps.ALayoutConstraint;
 import org.compiere.apps.ConfirmPanel;
 import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
@@ -71,7 +78,7 @@
 	public PAttributeInstance(JFrame parent, String title,
 		int M_Warehouse_ID, int M_Locator_ID, int M_Product_ID, int C_BPartner_ID)
 	{
-		super (parent, Msg.getMsg(Env.getCtx(), "PAttributeInstance") + title, true);
+		super (parent, Msg.getMsg(Env.getCtx(), "PAttributeInstance") + ": " + title, true);
 		init (M_Warehouse_ID, M_Locator_ID, M_Product_ID, C_BPartner_ID);
 		AEnv.showCenterWindow(parent, this);
 	}
@@ -88,7 +95,7 @@
 	public PAttributeInstance(JDialog parent, String title,
 		int M_Warehouse_ID, int M_Locator_ID, int M_Product_ID, int C_BPartner_ID)
 	{
-		super (parent, Msg.getMsg(Env.getCtx(), "PAttributeInstance") + title, true);
+		super (parent, Msg.getMsg(Env.getCtx(), "PAttributeInstance") + ": " + title, true);
 		init (M_Warehouse_ID, M_Locator_ID, M_Product_ID, C_BPartner_ID);
 		AEnv.showCenterWindow(parent, this);
 	}
@@ -136,9 +143,19 @@
 	private int					m_M_AttributeSetInstance_ID = -1;
 	private String				m_M_AttributeSetInstanceName = null;
 	private String				m_sql;
+	private boolean 			m_wasCancelled;
 	/**	Logger			*/
 	private static CLogger log = CLogger.getCLogger(PAttributeInstance.class);
 
+	/** Window Width                */
+	Toolkit toolkit = Toolkit.getDefaultToolkit();
+	Dimension screensize = toolkit.getScreenSize();
+
+	protected final int        INFO_WIDTH = screensize.width > 1500 ? 1500 : screensize.width - 100;
+	protected final int        SCREEN_HEIGHT = screensize.height;
+
+	
+	
 	/**
 	 * 	Static Init
 	 * 	@throws Exception
@@ -148,15 +165,16 @@
 		mainPanel.setLayout(mainLayout);
 		this.getContentPane().add(mainPanel, BorderLayout.CENTER);
 		//	North
-		northPanel.setLayout(northLayout);
-		northPanel.add(showAll, BorderLayout.EAST);
+		northPanel.setLayout(new ALayout());
+		northPanel.add(showAll, new ALayoutConstraint(0,0));
 		showAll.addActionListener(this);
-		mainPanel.add(northPanel, BorderLayout.NORTH);
+		this.getContentPane().add(northPanel, BorderLayout.NORTH);
 		//	Center
 		mainPanel.add(centerScrollPane, BorderLayout.CENTER);
 		centerScrollPane.getViewport().add(m_table, null);
 		//	South
 		mainPanel.add(confirmPanel, BorderLayout.SOUTH);
+		mainPanel.setPreferredSize(new Dimension(INFO_WIDTH, SCREEN_HEIGHT > 600 ? 250 : 105));
 		confirmPanel.addActionListener(this);
 	}
 
@@ -184,15 +202,17 @@
 		+ " INNER JOIN M_AttributeSet st ON (st.M_AttributeSet_ID=asi.M_AttributeSet_ID )"
 		+ " LEFT OUTER JOIN M_Storage s ON (s.M_AttributeSetInstance_ID=asi.M_AttributeSetInstance_ID)"
 		+ " LEFT OUTER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID)"
-		+ " LEFT OUTER JOIN M_Product p ON (s.M_Product_ID=p.M_Product_ID)"
-		+ " LEFT OUTER JOIN M_Product pr ON (asi.M_AttributeSet_ID = pr.M_AttributeSet_ID)"
-	;
+		+ " LEFT OUTER JOIN M_Product p ON (s.M_Product_ID=p.M_Product_ID) "
+		;
+		//  To see all related Attribute Sets, add OR "
+		//+                                   "(asi.M_AttributeSet_ID = p.M_AttributeSet_ID AND p.M_AttributeSetInstance_ID = 0)
+		//  to the last join clause
 	/** Where Clause						*/ 
-	private static String s_sqlWhereWithoutWarehouse = " (pr.M_Product_ID=? OR p.M_Product_ID=?)";
-	private static String s_sqlWhereSameWarehouse = " AND (l.M_Warehouse_ID=? OR 0=?)";
+	private static String s_sqlWhereWithoutWarehouse = " p.M_Product_ID=?";
+	private static String s_sqlWhereSameWarehouse = " AND (? in (0, l.M_Warehouse_ID))";
 
-	private String	m_sqlNonZero = " AND (s.QtyOnHand<>0 OR s.QtyReserved<>0 OR s.QtyOrdered<>0)";
-	private String	m_sqlMinLife = "";
+	private static String	s_sqlNonZero = " AND (s.QtyOnHand<>0 OR s.QtyReserved<>0 OR s.QtyOrdered<>0)";
+	private static String	s_sqlMinLife = "";
 
 	/**
 	 * 	Dynamic Init
@@ -237,17 +257,17 @@
 			}
 			if (ShelfLifeMinPct > 0)
 			{
-				m_sqlMinLife = " AND COALESCE(TRUNC(((daysbetween(asi.GuaranteeDate, SYSDATE))/p.GuaranteeDays)*100),0)>=" + ShelfLifeMinPct;
+				s_sqlMinLife = " AND COALESCE(TRUNC(((daysbetween(asi.GuaranteeDate, SYSDATE))/p.GuaranteeDays)*100),0)>=" + ShelfLifeMinPct;
 				log.config( "PAttributeInstance.dynInit - ShelfLifeMinPct=" + ShelfLifeMinPct);
 			}
 			if (ShelfLifeMinDays > 0)
 			{
-				m_sqlMinLife += " AND COALESCE((daysbetween(asi.GuaranteeDate, SYSDATE)),0)>=" + ShelfLifeMinDays;
+				s_sqlMinLife += " AND COALESCE((daysbetween(asi.GuaranteeDate, SYSDATE)),0)>=" + ShelfLifeMinDays;
 				log.config( "PAttributeInstance.dynInit - ShelfLifeMinDays=" + ShelfLifeMinDays);
 			}
 		}	//	BPartner != 0
 
-		m_sql = m_table.prepareTable (s_layout, s_sqlFrom, s_sqlWhereWithoutWarehouse, false, "asi")
+		m_sql = m_table.prepareTable (s_layout, s_sqlFrom, s_sqlWhereWithoutWarehouse + s_sqlNonZero, false, "asi")
 				+ " ORDER BY asi.GuaranteeDate, s.QtyOnHand";	//	oldest, smallest first
 		//
 		m_table.setRowSelectionAllowed(true);
@@ -256,6 +276,11 @@
 		m_table.getSelectionModel().addListSelectionListener(this);
 		//
 		refresh();
+
+		//  The minitable class overrides the Enter key if multi-selection is false
+		m_table.getInputMap().put(KeyStroke.getKeyStroke("ENTER"), "doDispose");
+		m_table.getActionMap().put("doDispose", doDispose);
+
 	}
 
 	/**
@@ -268,9 +293,9 @@
 		if (!showAll.isSelected())
 		{
 			sql = m_sql.substring(0, pos) 
-				+ m_sqlNonZero + s_sqlWhereSameWarehouse;
-			if (m_sqlMinLife.length() > 0)
-				sql += m_sqlMinLife;
+				+ s_sqlWhereSameWarehouse;
+			if (s_sqlMinLife.length() > 0)
+				sql += s_sqlMinLife;
 			sql += m_sql.substring(pos);
 		}
 		//
@@ -281,10 +306,8 @@
 		{
 			pstmt = DB.prepareStatement(sql, null);
 			pstmt.setInt(1, m_M_Product_ID);
-			pstmt.setInt(2, m_M_Product_ID);
 			if ( !showAll.isSelected() ) {
-				pstmt.setInt(3, m_M_Warehouse_ID);
-				pstmt.setInt(4, m_M_Warehouse_ID);
+				pstmt.setInt(2, m_M_Warehouse_ID);
 			}
 
 			rs = pstmt.executeQuery();
@@ -302,18 +325,31 @@
 	}
 
 	/**
+	 *  Close the window
+	 */
+    private Action doDispose = new AbstractAction() {
+        public void actionPerformed(ActionEvent e) {
+			dispose();
+        }
+    };
+    
+	/**
 	 * 	Action Listener
 	 *	@param e event 
 	 */
 	public void actionPerformed(ActionEvent e)
 	{
 		if (e.getActionCommand().equals(ConfirmPanel.A_OK))
+		{
 			dispose();
-		else if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))
+			m_wasCancelled = false; 
+		}
+		else if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))	
 		{
 			dispose();
 			m_M_AttributeSetInstance_ID = -1;
 			m_M_AttributeSetInstanceName = null;
+			m_wasCancelled = true; 
 		}
 		else if (e.getSource() == showAll)
 		{
@@ -325,24 +361,14 @@
 	 * 	Table selection changed
 	 *	@param e event
 	 */
-	public void valueChanged (ListSelectionEvent e)
-	{
-		if (e.getValueIsAdjusting())
-			return;
-		enableButtons();
-	}
-
-	/**
-	 * 	Enable/Set Buttons and set ID
-	 */
-	private void enableButtons()
+	public void valueChanged (ListSelectionEvent e)	
 	{
 		m_M_AttributeSetInstance_ID = -1;
 		m_M_AttributeSetInstanceName = null;
 		m_M_Locator_ID = 0;
+
 		int row = m_table.getSelectedRow();
-		boolean enabled = row != -1;
-		if (enabled)
+		if (row > -1)
 		{
 			Integer ID = m_table.getSelectedRowKey();
 			if (ID != null)
@@ -358,10 +384,21 @@
 				}
 			}
 		}
-		confirmPanel.getOKButton().setEnabled(enabled);
 		log.fine("M_AttributeSetInstance_ID=" + m_M_AttributeSetInstance_ID 
 			+ " - " + m_M_AttributeSetInstanceName
 			+ "; M_Locator_ID=" + m_M_Locator_ID);
+
+		enableButtons();
+	}
+
+	/**
+	 * 	Enable/Set Buttons and set ID
+	 */
+	private void enableButtons()
+	{
+		int row = m_table.getSelectedRow();
+		boolean enabled = row > -1;
+		confirmPanel.getOKButton().setEnabled(enabled);
 	}
 
 	/**
@@ -371,9 +408,8 @@
 	public void mouseClicked(MouseEvent e)
 	{
 		//  Double click with selected row => exit
-		if (e.getClickCount() > 1 && m_table.getSelectedRow() != -1)
+		if (e.getClickCount() > 1 && m_table.getSelectedRow() > -1)
 		{
-			enableButtons();
 			dispose();
 		}
 	}
@@ -406,4 +442,13 @@
 		return m_M_Locator_ID;
 	}
 
+	/**
+	 * 	Was Cancelled?
+	 *	@return true if cancelled
+	 */
+	public boolean wasCancelled()
+	{
+		return m_wasCancelled;
+	}
+
 }
\ No newline at end of file
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/grid/CreateFromStatement.java
--- a/client/src/org/compiere/grid/CreateFromStatement.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/grid/CreateFromStatement.java	Mon Feb 10 21:08:53 2014 -0500
@@ -41,6 +41,9 @@
  *  <li> RF [1811114] http://sourceforge.net/tracker/index.php?func=detail&aid=1811114&group_id=176962&atid=879335
  *  @author Teo Sarca, www.arhipac.ro
  * 			<li>BF [ 2007837 ] VCreateFrom.save() should run in trx
+ *  @author Michael McKay (mjmckay)
+ * 			<li>BF3439685 Create from for Statement Line picks wrong date
+ * 			See https://sourceforge.net/tracker/?func=detail&aid=3439695&group_id=176962&atid=879332  
  */
 public class CreateFromStatement extends CreateFrom 
 {
@@ -302,7 +305,12 @@
 					+ ", Payment=" + C_Payment_ID + ", Currency=" + C_Currency_ID + ", Amt=" + TrxAmt);
 				//	
 				MBankStatementLine bsl = new MBankStatementLine (bs);
-				bsl.setStatementLineDate(trxDate);
+				
+				// BF3439695 - Create from for Statement Line picks wrong date
+				bsl.setDateAcct(bs.getStatementDate());
+				bsl.setStatementLineDate(bs.getStatementDate());
+				bsl.setValutaDate(trxDate);
+				
 				bsl.setPayment(new MPayment(Env.getCtx(), C_Payment_ID, trxName));
 				
 				bsl.setTrxAmt(TrxAmt);
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/grid/VCreateFromDialog.java
--- a/client/src/org/compiere/grid/VCreateFromDialog.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/grid/VCreateFromDialog.java	Mon Feb 10 21:08:53 2014 -0500
@@ -37,6 +37,12 @@
 import org.compiere.util.Trx;
 import org.compiere.util.TrxRunnable;
 
+/**
+ * 
+ *  @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ *
+ */
 public class VCreateFromDialog extends CDialog implements ActionListener, TableModelListener
 {
 	private static final long serialVersionUID = 1L;
@@ -94,6 +100,8 @@
     	southPanel.setLayout(southLayout);
     	southPanel.add(confirmPanel, BorderLayout.CENTER);
     	southPanel.add(statusBar, BorderLayout.SOUTH);
+    	
+    	dataTable.setMultiSelection(true);
 	}
 	
 	public void actionPerformed(ActionEvent e)
@@ -127,12 +135,8 @@
 		// Trifon
 		else if (e.getActionCommand().equals(SELECT_ALL))
 		{
-			TableModel model = dataTable.getModel();
-			int rows = model.getRowCount();
-			for (int i = 0; i < rows; i++)
-			{
-				model.setValueAt(new Boolean(true), i, 0);
-			}
+			dataTable.selectAll();
+			dataTable.matchCheckWithSelectedRows();
 			info();
 		}
 	}
@@ -166,12 +170,7 @@
 	{
 		TableModel model = dataTable.getModel();
 		int rows = model.getRowCount();
-		int count = 0;
-		for (int i = 0; i < rows; i++)
-		{
-			if (((Boolean)model.getValueAt(i, 0)).booleanValue())
-				count++;
-		}
+		int count = dataTable.getSelectedRowCount();
 		setStatusLine(count, null);
 		
 		createFrom.info();
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/grid/ed/VCheckBox.java
--- a/client/src/org/compiere/grid/ed/VCheckBox.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/grid/ed/VCheckBox.java	Mon Feb 10 21:08:53 2014 -0500
@@ -39,6 +39,10 @@
  *
  *  @author 	Jorg Janke
  *  @version 	$Id: VCheckBox.java,v 1.2 2006/07/30 00:51:28 jjanke Exp $
+ *  
+ *  @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class VCheckBox extends CCheckBox
 	implements VEditor, ActionListener
@@ -138,6 +142,7 @@
 	private GridField m_mField;
 	//	Popup
 	JPopupMenu 				popupMenu = new JPopupMenu();
+	private Object m_oldValue;
 
 	/**
 	 *	Set Editable
@@ -262,5 +267,37 @@
 	{
 		m_savedMnemonic = savedMnemonic;
 	}	//	getSavedMnemonic
+	/**
+	 * Set the old value of the field.  For use in future comparisons.
+	 * The old value must be explicitly set though this call.
+	 * @param m_oldValue
+	 */
+	public void set_oldValue() {
+		this.m_oldValue = getValue();
+	}
+	/**
+	 * Get the old value of the field explicitly set in the past
+	 * @return
+	 */
+	public Object get_oldValue() {
+		return m_oldValue;
+	}
+	/**
+	 * Has the field changed over time?
+	 * @return true if the old value is different than the current.
+	 */
+	public boolean hasChanged() {
+		// Both or either could be null
+		if(getValue() != null)
+			if(m_oldValue != null)
+				return !m_oldValue.equals(getValue());
+			else
+				return true;
+		else  // getValue() is null
+			if(m_oldValue != null)
+				return true;
+			else
+				return false;
+	}
 
 }	//	VCheckBox
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/grid/ed/VComboBox.java
--- a/client/src/org/compiere/grid/ed/VComboBox.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/grid/ed/VComboBox.java	Mon Feb 10 21:08:53 2014 -0500
@@ -39,7 +39,7 @@
 	/**
 	 * 
 	 */
-	private static final long serialVersionUID = 2024662772161020317L;
+	private static final long serialVersionUID = 7632613004262943867L;
 
 	/**
 	 *  Constructor
@@ -156,13 +156,24 @@
 	 */
 	public String getDisplay()
 	{
-		if (getSelectedIndex() == -1)
+		if (getSelectedItem() == null)
 			return "";
 		//
+		if (getSelectedItem() instanceof String)
+			return (String) getSelectedItem();
+		
 		NamePair p = (NamePair)getSelectedItem();
 		if (p == null)
 			return "";
 		return p.getName();
 	}   //  getDisplay
-	
+
+	@Override
+	protected boolean isMatchingFilter(Object element) 
+	{
+		if (element instanceof NamePair)
+			element = ((NamePair)element).getName();
+		return super.isMatchingFilter(element);
+	}	
+
 }	//	VComboBox
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/grid/ed/VDate.java
--- a/client/src/org/compiere/grid/ed/VDate.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/grid/ed/VDate.java	Mon Feb 10 21:08:53 2014 -0500
@@ -61,6 +61,10 @@
  *
  * 	@author 	Jorg Janke
  * 	@version 	$Id: VDate.java,v 1.2 2006/07/30 00:51:28 jjanke Exp $
+ * 
+ *  @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class VDate extends JComponent
 	implements VEditor, ActionListener, KeyListener, FocusListener
@@ -218,6 +222,9 @@
 	/** The Button              */
 	private CButton			m_button = new CButton();
 
+	/** A holder for the value at some point in the past.  Used for comparison. */
+	private Object m_oldValue = null;
+
 	//	Popup
 	JPopupMenu 				popupMenu = new JPopupMenu();
 	//	Field for Value Preference
@@ -603,6 +610,7 @@
 	public void addActionListener(ActionListener l)
 	{
 		listenerList.add(ActionListener.class, l);
+		m_text.addActionListener(l);
 	}	//	addActionListener
 
 	/**
@@ -637,4 +645,39 @@
 	{
 		m_text.setBackground(bg);
 	}
+	
+	/**
+	 * Set the old value of the field.  For use in future comparisons.
+	 * The old value must be explicitly set though this call.
+	 * @param m_oldValue
+	 */
+	public void set_oldValue() {
+		this.m_oldValue = getValue();
+	}
+
+	/**
+	 * Get the old value of the field explicitly set in the past
+	 * @return
+	 */
+	public Object get_oldValue() {
+		return m_oldValue;
+	}
+	/**
+	 * Has the field changed over time?
+	 * @return true if the old value is different than the current.
+	 */
+	public boolean hasChanged() {
+		// Both or either could be null
+		if(getValue() != null)
+			if(m_oldValue != null)
+				return !m_oldValue.equals(getValue());
+			else
+				return true;
+		else  // getValue() is null
+			if(m_oldValue != null)
+				return true;
+			else
+				return false;
+	}
+
 }	//	VDate
\ No newline at end of file
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/grid/ed/VEditorFactory.java
--- a/client/src/org/compiere/grid/ed/VEditorFactory.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/grid/ed/VEditorFactory.java	Mon Feb 10 21:08:53 2014 -0500
@@ -34,6 +34,10 @@
  *  @see VCellRenderer for multi-row display
  *  @author  Jorg Janked
  *  @version $Id: VEditorFactory.java,v 1.3 2006/07/30 00:51:28 jjanke Exp $
+ *  
+ *  @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class VEditorFactory
 {
@@ -268,7 +272,7 @@
 		else if (displayType == DisplayType.PAttribute)
 		{
 			VPAttribute attrib = new VPAttribute (mTab, mandatory, readOnly, updateable, WindowNo,
-				(MPAttributeLookup)mField.getLookup());
+				(MPAttributeLookup)mField.getLookup(), false);
 			attrib.setName(columnName);
 			attrib.setField (mField);
 			editor = attrib;
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/grid/ed/VLookup.java
--- a/client/src/org/compiere/grid/ed/VLookup.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/grid/ed/VLookup.java	Mon Feb 10 21:08:53 2014 -0500
@@ -27,6 +27,7 @@
 import java.awt.event.ActionListener;
 import java.awt.event.FocusEvent;
 import java.awt.event.FocusListener;
+import java.awt.event.ItemListener;
 import java.awt.event.KeyEvent;
 import java.awt.event.MouseEvent;
 import java.beans.PropertyChangeEvent;
@@ -56,6 +57,7 @@
 import org.compiere.apps.search.InfoProduct;
 import org.compiere.model.GridField;
 import org.compiere.model.Lookup;
+import org.compiere.model.MBPartner;
 import org.compiere.model.MColumn;
 import org.compiere.model.MInvoiceLine;
 import org.compiere.model.MLookup;
@@ -74,6 +76,7 @@
 import org.compiere.util.Ini;
 import org.compiere.util.Msg;
 import org.compiere.util.NamePair;
+import org.compiere.util.Trx;
 import org.compiere.util.ValueNamePair;
 import org.eevolution.model.I_PP_Product_BOMLine;
 
@@ -100,6 +103,10 @@
  *  @author hengsin, hengsin.low@idalica.com
  *  @see FR [2887701] https://sourceforge.net/tracker/?func=detail&atid=879335&aid=2887701&group_id=176962
  *  @sponsor www.metas.de
+ * 
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class VLookup extends JComponent
 	implements VEditor, ActionListener, FocusListener
@@ -247,12 +254,27 @@
 	{
 		super();
 		super.setName(columnName);
-		m_combo.setName(columnName);
+		
+		int windowNo = 0;
+		m_text.setName("VLookup Text - " + columnName);
+		m_button.setName("VLookup Button - " + columnName);
+		m_combo.setName("VLookup Combo - " + columnName);
 		m_columnName = columnName;
 		setMandatory(mandatory);
 		m_lookup = lookup;
 		if (m_lookup != null)
+		{
 			m_lookup.setMandatory(mandatory);
+			windowNo = m_lookup.getWindowNo();
+		}
+		//
+		if(!hasSearchableColumns()) // No known searchable columns
+		{
+			m_enableInfo = false;
+		}
+		//  Set default m_isSOTrx from context
+		if (Env.getContext(Env.getCtx(), windowNo, "IsSOTrx").equals("N"))
+			m_isSOTrx = false;				
 		//
 		setLayout(new BorderLayout());
 		mouseAdapter = new VLookup_mouseAdapter(this);    //  popup
@@ -276,12 +298,13 @@
 		//	*** VComboBox	***
 		if (m_lookup != null && m_lookup.getDisplayType() != DisplayType.Search)	//	No Search
 		{
+			m_combo.setName("VLookup Combo");
 			//  Don't have to fill up combobox if it is readonly
 			if (!isReadOnly && isUpdateable)
 				m_lookup.fillComboBox (isMandatory(), true, true, false);
 			m_combo.setModel(m_lookup);
 			//
-			AutoCompletion.enable(m_combo);
+			// AutoCompletion.enable(m_combo);
 			m_combo.addActionListener(this);							//	Selection
 			m_combo.getEditor().getEditorComponent().addMouseListener(mouseAdapter);	                        //	popup
 			//	FocusListener to refresh selection before opening
@@ -289,19 +312,27 @@
 			m_combo.getEditor().getEditorComponent().addFocusListener(this);
 		}
 
+		//  Setup the user interface display 
 		setUI (true);
+		
 		//	ReadWrite	-	decides what components to show
 		if (isReadOnly || !isUpdateable || m_lookup == null)
 			setReadWrite(false);
 		else
 			setReadWrite(true);
 
-		//	Popup
+		//	Create the Popup Menu
 		if (m_lookup != null)
 		{
 			if ((m_lookup.getDisplayType() == DisplayType.List && Env.getContextAsInt(Env.getCtx(), "#AD_Role_ID") == 0)
 				|| m_lookup.getDisplayType() != DisplayType.List)     //  only system admins can change lists, so no need to zoom for others
 			{
+				if(m_enableInfo  &&  !m_hasButton)  //  Enable the info window from the pop-up menu if there is no button
+				{
+					mInfo = new CMenuItem(Msg.getMsg(Env.getCtx(), "Info"), Env.getImageIcon("Info16.gif"));
+					mInfo.addActionListener(this);
+					popupMenu.add(mInfo);
+				}
 				mZoom = new CMenuItem(Msg.getMsg(Env.getCtx(), "Zoom"), Env.getImageIcon("Zoom16.gif"));
 				mZoom.addActionListener(this);
 				popupMenu.add(mZoom);
@@ -324,6 +355,8 @@
 		//
 		if (m_lookup != null && m_lookup.getZoom() == 0)
 			mZoom.setEnabled(false);
+		
+		set_oldValue();
 	}	//	VLookup
 
 	/**
@@ -374,11 +407,24 @@
 	private boolean				m_comboActive = true;
 	/** The Value								*/
 	private Object				m_value;
+	/** The old Value - for comparison at future points in time.	*/
+	private Object				m_oldValue;
+	/** Enable Info								*/
+	private boolean				m_enableInfo = true;
+	/** Is a button displayed?					*/
+	private boolean				m_hasButton = false;
+	/** Override context for sales transactions */
+	private boolean				m_isSOTrxEnvOverride = false;
+	/** Context for sales transactions */
+	private boolean 			m_isSOTrx = true;     //  default
+	/** Does the selected record match the context? */
+	private boolean 			m_isSOMatch = true;
 
 	private boolean 			m_stopediting = false;
 
 	//	Popup
 	JPopupMenu 					popupMenu = new JPopupMenu();
+	private CMenuItem			mInfo;
 	private CMenuItem 			mZoom;
 	private CMenuItem 			mRefresh;
 	private CMenuItem			mBPartnerNew;
@@ -412,31 +458,47 @@
 		}
 
 		//	What to show
-		this.remove(m_combo);
+		this.remove(m_combo);  //  Need to attach m_combo to a parent for event processing in info panels.
 		this.remove(m_button);
 		this.remove(m_text);
+		
 		//
-		if (!isReadWrite())									//	r/o - show text only
+		if (!isReadWrite())									
 		{
+			//	r/o - show text & button only
 			LookAndFeel.installBorder(this, "TextField.border");
 			this.add(m_text, BorderLayout.CENTER);
+			this.add(m_combo, BorderLayout.SOUTH);  //  Need to attache m_combo to "this" so it has a parent
+			if (m_enableInfo && (m_lookup == null || m_lookup.getDisplayType() == DisplayType.Search))
+			{
+				this.add(m_button, BorderLayout.EAST);
+				m_hasButton = true;
+			}
 			m_text.setReadWrite(false);
 			m_combo.setReadWrite(false);
+			m_combo.setVisible(false);
 			m_comboActive = false;
 		}
 		else if (m_lookup != null && m_lookup.getDisplayType() != DisplayType.Search)	    //	show combo if not Search
 		{
 			this.setBorder(null);
 			this.add(m_combo, BorderLayout.CENTER);
+			m_combo.setVisible(true);
 			m_comboActive = true;
 		}
 		else 												//	Search or unstable - show text & button
 		{
 			LookAndFeel.installBorder(this, "TextField.border");
 			this.add(m_text, BorderLayout.CENTER);
-			this.add(m_button, BorderLayout.EAST);
+			if(m_enableInfo)
+			{
+				this.add(m_button, BorderLayout.EAST);
+				m_hasButton = true;
+			}
 			m_text.setReadWrite (true);
+			m_combo.setVisible(false);
 			m_comboActive = false;
+			this.add(m_combo, BorderLayout.SOUTH);
 		}
 	}   //  setUI
 
@@ -495,6 +557,15 @@
 	}	//	isMandatory
 
 	/**
+	 *	Is Value Being Set
+	 *  @return true if value is being set
+	 */
+	public boolean isValueBeingSet()
+	{
+		return m_settingValue;
+	}	//	isValueBeingSet
+
+	/**
 	 *	Set Background
 	 *  @param color color
 	 */
@@ -698,7 +769,7 @@
 	{
 		if (m_settingValue || m_settingFocus || m_stopediting)
 			return;
-		log.config(m_columnName + " - " + e.getActionCommand() + ", ComboValue=" + m_combo.getSelectedItem());
+		log.config(m_columnName + " - " + e.getActionCommand() + ", ComboValue=" + m_combo.getSelectedItem() + ", TextValue=" + m_text.getDisplay());
 	//	log.fine("Hash=" + this.hashCode());
 
 		//  Preference
@@ -729,6 +800,7 @@
 					value = null;
 				}
 			}
+			
 			actionCombo (value);                //  data binding
 		}
 		//  Button pressed
@@ -739,6 +811,8 @@
 			actionText();
 
 		//  Popup Menu
+		else if (e.getSource() == mInfo)
+			actionButton("");
 		else if (e.getSource() == mZoom)
 			actionZoom(m_combo.getSelectedItem());
 		else if (e.getSource() == mRefresh)
@@ -760,6 +834,16 @@
 	}   //  addActionListener
 
 	/**
+	 *  Item Listener Interface
+	 *  @param listener listener
+	 */
+	public void addItemListener(ItemListener listener)
+	{
+		m_combo.addItemListener(listener);
+	}   //  addItemListener
+
+
+	/**
 	 *	Action - Combo.
 	 *  <br>
 	 *	== dataBinding == inform of new value
@@ -775,6 +859,7 @@
 	 */
 	private void actionCombo (Object value)
 	{
+		
 		log.fine("Value=" + value);
 		try
 		{
@@ -807,7 +892,7 @@
 			// phib: the following check causes the update to fail on jre > 1.6.0_13
 			// commenting out as it does not appear to be necessary
 			//if (getListeners(PropertyChangeListener.class).length <= 0)
-				setValue(updatedValue);
+				setValue(updatedValue);				
 		}
 	}	//	actionCombo
 
@@ -819,6 +904,7 @@
 	 */
 	private void actionButton (String queryValue)
 	{
+		
 		m_button.setEnabled(false);                 //  disable double click
 		if (m_lookup == null)
 			return;		//	leave button disabled
@@ -829,12 +915,13 @@
 		 *  Three return options:
 		 *  - Value Selected & OK pressed   => store result => result has value
 		 *  - Cancel pressed                => store null   => result == null && cancelled
-		 *  - Window closed                 -> ignore       => result == null && !cancalled
+		 *  - Window closed                 -> ignore       => result == null && !cancelled
 		 */
 
 		Object result[] = null;
 		boolean cancelled = false;
 		boolean multipleSelection = false;
+		int record_id = 0;
 		//
 		String col = m_lookup.getColumnName();		//	fully qualified name
 		if (col.indexOf('.') != -1)
@@ -846,6 +933,18 @@
 			+ ", Zoom=" + m_lookup.getZoom()
 			+ " (" + whereClause + ")");
 		//
+		//  If the record has a value (ID) find the name.  The displayed text could be different.
+		if (queryValue.length() == 0 && getValue() != null && !getValue().equals(""))
+		{
+			Object currentValue = getValue();
+			try{
+				record_id = ((Number)currentValue).intValue();
+				queryValue = "";
+			} catch (Exception e) {
+				//  Can't cast the string "" to a number.
+			}
+		}
+		//
 		boolean resetValue = false;	//	reset value so that is always treated as new entry
 		String infoFactoryClass = m_lookup.getInfoFactoryClass();
 		if (infoFactoryClass != null && infoFactoryClass.trim().length() > 0)
@@ -854,9 +953,16 @@
 				Class<InfoFactory> clazz = (Class<InfoFactory>)this.getClass().getClassLoader().loadClass(infoFactoryClass);
 				InfoFactory factory = clazz.newInstance();
 				if (m_tableName == null)	//	sets table name & key column
-					getDirectAccessSQL("*");
+				{
+					if(!hasSearchableColumns()){
+						// Search should have been disabled for this field.
+						log.severe("Search enabled on field " + m_columnName + ". Associated table has no standard/identifier columns.");
+						return;
+					}
+				}
+				// multipleSelection assumed false for custom info windows
 				Info ig = factory.create (frame, true, m_lookup.getWindowNo(),
-					m_tableName, m_keyColumnName, queryValue, false, whereClause);
+					m_tableName, m_keyColumnName, record_id, queryValue, multipleSelection, whereClause);
 				ig.setVisible(true);
 				cancelled = ig.isCancelled();
 				result = ig.getSelectedKeys();
@@ -868,21 +974,22 @@
 		{
 			//	Reset
 			resetTabInfo();
-			//  Replace Value with name if no value exists
-			if (queryValue.length() == 0 && m_text.getText().length() > 0)
-				queryValue = "@" + m_text.getText() + "@";   //  Name indicator - otherwise Value
+			//
 			int M_Warehouse_ID = Env.getContextAsInt(Env.getCtx(), m_lookup.getWindowNo(), "M_Warehouse_ID");
 			int M_PriceList_ID = Env.getContextAsInt(Env.getCtx(), m_lookup.getWindowNo(), "M_PriceList_ID");
-
+			//
 			if(m_mField != null)
 			{
-			int AD_Table_ID = MColumn.getTable_ID(Env.getCtx(), m_mField.getAD_Column_ID(), null);
-
-			multipleSelection = (MOrderLine.Table_ID ==  AD_Table_ID) || (MInvoiceLine.Table_ID == AD_Table_ID) || (I_PP_Product_BOMLine.Table_ID == AD_Table_ID) || (MProductPrice.Table_ID == AD_Table_ID);
+				int AD_Table_ID = MColumn.getTable_ID(Env.getCtx(), m_mField.getAD_Column_ID(), null);
+				// TODO hard-coded - add to AD_Column?
+				multipleSelection = (MOrderLine.Table_ID ==  AD_Table_ID) || 
+									(MInvoiceLine.Table_ID == AD_Table_ID) || 
+									(I_PP_Product_BOMLine.Table_ID == AD_Table_ID) || 
+									(MProductPrice.Table_ID == AD_Table_ID);
 			}
 			//	Show Info
 			InfoProduct ip = new InfoProduct (frame, true, m_lookup.getWindowNo(),
-				M_Warehouse_ID, M_PriceList_ID, queryValue, multipleSelection, whereClause);
+				M_Warehouse_ID, M_PriceList_ID, record_id, queryValue, multipleSelection, true, whereClause);
 			ip.setVisible(true);
 			cancelled = ip.isCancelled();
 			result = ip.getSelectedKeys();
@@ -890,57 +997,78 @@
 		}
 		else if (col.equals("C_BPartner_ID"))
 		{
-			//  Replace Value with name if no value exists
-			if (queryValue.length() == 0 && m_text.getText().length() > 0)
-				queryValue = m_text.getText();
-			boolean isSOTrx = true;     //  default
-			if (Env.getContext(Env.getCtx(), m_lookup.getWindowNo(), "IsSOTrx").equals("N"))
-				isSOTrx = false;
-			InfoBPartner ip = new InfoBPartner (frame, true, m_lookup.getWindowNo(),
-				queryValue, isSOTrx, multipleSelection, whereClause);
+			resetTabInfo();
+			//
+			setIsSOTrx(m_isSOTrxEnvOverride, false);
+			//  If we have a record id, set isSOMatch
+			if (record_id > 0)
+			{
+				String trxName = Trx.createTrxName();
+				MBPartner bp = new MBPartner(Env.getCtx(), record_id, trxName);
+				m_isSOMatch = (m_isSOTrx && bp.isCustomer()) || (!m_isSOTrx && bp.isVendor());
+				Trx.get(trxName, false).close();
+			}
+			//
+			InfoBPartner ip = new InfoBPartner (frame, true, m_lookup.getWindowNo(), record_id,
+				queryValue, m_isSOTrx, m_isSOMatch, multipleSelection, true, whereClause);
 			ip.setVisible(true);
 			cancelled = ip.isCancelled();
 			result = ip.getSelectedKeys();
 		}
 		else	//	General Info
 		{
-			if (m_tableName == null)	//	sets table name & key column
-				getDirectAccessSQL("*");
-			Info ig = Info.create (frame, true, m_lookup.getWindowNo(),
-				m_tableName, m_keyColumnName, queryValue, multipleSelection, whereClause);
+			if (m_tableName == null)
+			{	//	sets table name & key column
+				String rsql = getDirectAccessSQL("*");
+				if(rsql == null || rsql.length() == 0)
+				{
+					m_button.setEnabled(false);
+					return;
+				}
+			}
+			//
+			Info ig = Info.create (frame, true, m_lookup.getWindowNo(), m_tableName, 
+					m_keyColumnName, record_id, queryValue, multipleSelection, true, whereClause);
 			ig.setVisible(true);
 			cancelled = ig.isCancelled();
 			result = ig.getSelectedKeys();
 		}
-
-		//  Result
-		if (result != null && result.length > 0)
+		
+		if(isReadWrite())
 		{
-			log.config(m_columnName + " - Result = " + result.toString() + " (" + result.getClass().getName() + ")");
-			//  make sure that value is in cache
-			m_lookup.getDirect(result[0], false, true);
-			if (resetValue)
-				actionCombo (null);
-			// juddm added logic for multi-select handling
-			if (result.length > 1)
-				actionCombo (result);	//	data binding
+			//  Result
+			if (result != null && result.length > 0)
+			{
+				log.config(m_columnName + " - Result = " + result.toString() + " (" + result.getClass().getName() + ")");
+				//  make sure that value is in cache
+				m_lookup.getDirect(result[0], false, true);
+				if (resetValue)
+					actionCombo (null);
+				// juddm added logic for multi-select handling
+				if (result.length > 1)
+					actionCombo (result);	//	data binding
+				else
+					actionCombo (result[0]);
+	
+			}
+			else if (cancelled)
+			{
+				log.config(m_columnName + " - Result = null (cancelled)");
+				actionCombo(null);
+			}
 			else
-				actionCombo (result[0]);
-
-		}
-		else if (cancelled)
-		{
-			log.config(m_columnName + " - Result = null (cancelled)");
-			actionCombo(null);
+			{
+				log.config(m_columnName + " - Result = null (not cancelled)");
+				setValue(m_value);      //  to re-display value
+			}
+			//
+			m_text.requestFocus();
 		}
 		else
-		{
-			log.config(m_columnName + " - Result = null (not cancelled)");
-			setValue(m_value);      //  to re-display value
-		}
-		//
+			log.config(m_columnName + " - Field not writable.  No change.");
+		
 		m_button.setEnabled(true);
-		m_text.requestFocus();
+
 	}	//	actionButton
 
 	/**
@@ -978,45 +1106,6 @@
 	}	//	getWhereClause
 
 	/**
-	 *
-	 *
-	 *
-	 */
-	private String getExtraWhereClause (String text)
-	{
-		StringBuffer sql = new StringBuffer();
-		m_tableName = m_columnName.substring(0, m_columnName.length()-3);
-		m_keyColumnName = m_columnName;
-		//
-		if (m_columnName.equals("M_Product_ID"))
-		{
-			//	Reset
-			resetTabInfo();
-			//
-			sql.append(" AND (UPPER(p.Value) LIKE ")
-				.append(DB.TO_STRING(text))
-				.append(" OR UPPER(p.Name) LIKE ").append(DB.TO_STRING(text))
-				.append(" OR p.SKU LIKE ").append(DB.TO_STRING(text)).append(")");
-				//.append(" OR p.SKU LIKE ").append(DB.TO_STRING(text))
-				//.append(" OR p.UPC LIKE ").append(DB.TO_STRING(text)).append(")");
-		}
-				//	Predefined
-		/*
-		if (sql.length() > 0)
-		{
-			String wc = getWhereClause();
-			if (wc != null && wc.length() > 0)
-				sql.append(" AND ").append(wc);
-			sql.append(" AND IsActive='Y'");
-			//	***
-			log.finest(m_columnName + " (predefined) " + sql.toString());
-			return MRole.getDefault().addAccessSQL(sql.toString(),
-				m_tableName, MRole.SQL_NOTQUALIFIED, MRole.SQL_RO);
-		}*/
-
-		return sql.toString();
-	}
-	/**
 	 *	Check, if data returns unique entry, otherwise involve Info via Button
 	 */
 	private void actionText()
@@ -1040,7 +1129,13 @@
 		//	Exact first
 		PreparedStatement pstmt = null;
 		ResultSet rs = null;
-		String finalSQL = Msg.parseTranslation(Env.getCtx(), getDirectAccessSQL(text));
+		String rSQL = getDirectAccessSQL(text);
+		if(rSQL == null || rSQL.length() == 0){
+			// Search should have been disabled for this field.
+			log.severe("Search enabled on field " + m_columnName + ". Associated table has no standard/identifier columns.");
+			return;
+		}
+		String finalSQL = Msg.parseTranslation(Env.getCtx(), rSQL);
 		int id = -3;
 		try
 		{
@@ -1063,10 +1158,15 @@
 			rs = null; pstmt = null;
 		}
 		//	Try like
-		if (id == -3 && !text.endsWith("%"))
+		if (id == -3)
 		{
-			text += "%";
-			finalSQL = Msg.parseTranslation(Env.getCtx(), getDirectAccessSQL(text));
+			rSQL = getDirectAccessSQL(Info.getSQLText(text));
+			if(rSQL == null || rSQL.length() == 0){
+				// Search should have been disabled for this field.
+				log.severe("Search enabled on field " + m_columnName + ". Associated table has no standard/identifier columns.");
+				return;
+			}
+			finalSQL = Msg.parseTranslation(Env.getCtx(), rSQL);
 			try
 			{
 				pstmt = DB.prepareStatement(finalSQL, null);
@@ -1118,9 +1218,64 @@
 	private String		m_keyColumnName = null;
 
 	/**
+	 * 	Determines if the lookup has searchable (text) fields.	
+	 */
+	private boolean hasSearchableColumns()
+	{
+		boolean retValue = false;
+
+		m_tableName = MQuery.getZoomTableName(m_columnName);
+		m_keyColumnName = MQuery.getZoomColumnName(m_columnName);
+
+		if (   m_columnName.equals("M_Product_ID") 
+			|| m_columnName.equals("C_BPartner_ID")
+			|| m_columnName.equals("C_Order_ID")
+			|| m_columnName.equals("C_Invoice_ID")
+			|| m_columnName.equals("M_InOut_ID")
+			|| m_columnName.equals("C_Payment_ID")
+			|| m_columnName.equals("GL_JournalBatch_ID")
+			|| m_columnName.equals("SalesRep_ID"))
+		{
+			retValue = true;
+		}
+		else
+		{
+			/** Check Well Known Columns of Table - assumes TableDir	**/
+			String query = "SELECT t.TableName, c.ColumnName "
+				+ "FROM AD_Column c "
+				+ " INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID AND t.IsView='N')"
+				+ " WHERE (c.ColumnName IN ('DocumentNo', 'Value', 'Name') OR c.IsIdentifier='Y')"
+				+ " AND c.AD_Reference_ID IN (10,14)"
+				+ " AND EXISTS (SELECT * FROM AD_Column cc WHERE cc.AD_Table_ID=t.AD_Table_ID"
+					+ " AND cc.IsKey='Y' AND cc.ColumnName=?)";
+			PreparedStatement pstmt = null;
+			ResultSet rs = null;
+			try
+			{
+				pstmt = DB.prepareStatement(query, null);
+				pstmt.setString(1, m_keyColumnName);
+				rs = pstmt.executeQuery();
+				if (rs.next())
+				{
+					retValue = true;
+				}
+			}
+			catch (SQLException ex)
+			{
+				log.log(Level.SEVERE, query, ex);
+			}
+			finally
+			{
+				DB.close(rs, pstmt);
+				rs = null; pstmt = null;
+			}
+		}
+		return retValue;
+	}
+	
+	/**
 	 * 	Generate Access SQL for Search.
 	 * 	The SQL returns the ID of the value entered
-	 * 	Also sets m_tableName and m_keyColumnName
 	 *	@param text uppercase text for LIKE comparison
 	 *	@return sql or ""
 	 *  Example
@@ -1129,25 +1284,34 @@
 	private String getDirectAccessSQL (String text)
 	{
 		StringBuffer sql = new StringBuffer();
-		m_tableName = MQuery.getZoomTableName(m_columnName);
-		m_keyColumnName = MQuery.getZoomColumnName(m_columnName);
 		//
 		if (m_columnName.equals("M_Product_ID"))
 		{
-			//	Reset
-			resetTabInfo();
-			//
-			sql.append("SELECT M_Product_ID FROM M_Product WHERE (UPPER(Value) LIKE ")
-				.append(DB.TO_STRING(text))
-				.append(" OR UPPER(Name) LIKE ").append(DB.TO_STRING(text))
-				.append(" OR SKU LIKE ").append(DB.TO_STRING(text))
-				.append(" OR UPC LIKE ").append(DB.TO_STRING(text)).append(")");
+			sql.append("SELECT M_Product_ID FROM M_Product WHERE (");
+			if (text.startsWith("@") && text.endsWith("@"))
+			{
+				sql.append("UPPER(Name) LIKE  ")
+					.append(DB.TO_STRING(text.substring(1,text.length()-1))).append(")");
+			}
+			else
+			{
+				sql.append("UPPER(Value) LIKE ").append(DB.TO_STRING(text))
+					.append(" OR UPPER(Name) LIKE ").append(DB.TO_STRING(text))
+					.append(" OR UPPER(SKU) LIKE ").append(DB.TO_STRING(text))
+					.append(" OR UPPER(UPC) LIKE ").append(DB.TO_STRING(text)).append(")");
+			}
 		}
 		else if (m_columnName.equals("C_BPartner_ID"))
 		{
-			sql.append("SELECT C_BPartner_ID FROM C_BPartner WHERE (UPPER(Value) LIKE ")
-				.append(DB.TO_STRING(text))
-				.append(" OR UPPER(Name) LIKE ").append(DB.TO_STRING(text)).append(")");
+			sql.append("SELECT C_BPartner_ID FROM C_BPartner WHERE (");
+			//	Put query string in Name if not fully numeric
+    		if (!text.matches(".*\\D+.*")) // If text has no non-digit characters ...
+    			//  search against the Value field
+				sql.append("UPPER(Value) LIKE ").append(DB.TO_STRING(text));
+    		else
+    			// A few non-digit characters might be in the name. E.g. 451Group, 1st Choice, ...
+    			sql.append("UPPER(Name) LIKE ").append(DB.TO_STRING(text)); 
+			sql.append(")");
 		}
 		else if (m_columnName.equals("C_Order_ID"))
 		{
@@ -1249,7 +1413,7 @@
 			}	//	Table Reference
 		}	//	MLookup
 
-		/** Check Well Known Columns of Table - assumes TableDir	**/
+		// Check Well Known Columns of Table - assumes TableDir
 		String query = "SELECT t.TableName, c.ColumnName "
 			+ "FROM AD_Column c "
 			+ " INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID AND t.IsView='N') "
@@ -1282,10 +1446,10 @@
 			DB.close(rs, pstmt);
 			rs = null; pstmt = null;
 		}
-		//
+		// Return null if nothing found.
 		if (sql.length() == 0)
 		{
-			log.log(Level.SEVERE, m_columnName + " (TableDir) - no standard/identifier columns");
+			log.finest(m_columnName + " (TableDir) - no standard/identifier columns");
 			return "";
 		}
 		//
@@ -1563,6 +1727,11 @@
 		//	Combo lost focus
 		if (e.getSource() != m_combo && e.getSource() != m_combo.getEditor().getEditorComponent())
 			return;
+
+		//  Advise listeners of the change.
+		ActionEvent evt = new ActionEvent(this, 0, "vlookup-update");
+		processEvent(evt);
+
 		if (m_lookup.isValidated() && !m_lookup.hasInactive())
 		{
 			m_haveFocus = false;
@@ -1615,14 +1784,20 @@
 	{
 		if (this.m_lookup == null)
 			return;
-		String columnName = m_columnName;
 		//
-		// TODO : hardcoded
+		String col = m_lookup.getColumnName();		//	fully qualified name
+		if (col.indexOf('.') != -1)
+			col = col.substring(col.indexOf('.')+1);
+		// TODO : hard-coded
 		final String[] infoNames;
-		if ("M_Product_ID".equals(columnName))
+		if (col.equals("M_Product_ID"))
 		{
 			infoNames = new String[]{"M_Product_ID","M_AttributeSetInstance_ID","M_Locator_ID","M_Lookup_ID"};
 		}
+		else if (col.equals("C_BPartner_ID"))
+		{
+			infoNames = new String[]{"C_BPartner_ID","AD_User_ID","C_BPartner_Location_ID"};
+		}
 		else
 		{
 			infoNames = new String[]{};
@@ -1658,6 +1833,52 @@
 	public void setStopEditing(boolean stopediting) {
 		m_stopediting = stopediting;
 	}
+	/**
+	 * Set the old value of the field.  For use in future comparisons.
+	 * The old value must be explicitly set though this call.
+	 * @param m_oldValue
+	 */
+	public void set_oldValue() {
+		this.m_oldValue = getValue();
+	}
+	/**
+	 * Get the old value of the field explicitly set in the past
+	 * @return
+	 */
+	public Object get_oldValue() {
+		return m_oldValue;
+	}
+	/**
+	 * Has the field changed over time?
+	 * @return true if the old value is different than the current.
+	 */
+	public boolean hasChanged() {
+		// Both or either could be null
+		if(getValue() != null)
+			if(m_oldValue != null)
+				return !m_oldValue.equals(getValue());
+			else
+				return true;
+		else  // getValue() is null
+			if(m_oldValue != null)
+				return true;
+			else
+				return false;
+	}
 
+	/**
+	 * @param override - true to override the environment, false to use environment
+	 * @param trx the m_isSOTrx to set
+	 */
+	public void setIsSOTrx(boolean override, boolean trx) {
+		m_isSOTrxEnvOverride = override;
+		if (m_isSOTrxEnvOverride)
+			m_isSOTrx = trx;
+		else
+			if (Env.getContext(Env.getCtx(), m_lookup.getWindowNo(), "IsSOTrx").equals("N"))
+				m_isSOTrx = false;
+			else
+				m_isSOTrx = true;
+	}
 
 }	//	VLookup
\ No newline at end of file
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/grid/ed/VNumber.java
--- a/client/src/org/compiere/grid/ed/VNumber.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/grid/ed/VNumber.java	Mon Feb 10 21:08:53 2014 -0500
@@ -46,8 +46,11 @@
 import javax.swing.JTextField;
 import javax.swing.LookAndFeel;
 import javax.swing.SwingUtilities;
+import javax.swing.border.Border;
+import javax.swing.border.MatteBorder;
 import javax.swing.text.Document;
 
+import org.adempiere.plaf.AdempierePLAF;
 import org.compiere.apps.AEnv;
 import org.compiere.apps.FieldRecordInfo;
 import org.compiere.model.GridField;
@@ -68,6 +71,10 @@
  * @author Teo Sarca, SC ARHIPAC SERVICE SRL
  * 			<li>BF [ 1739516 ] Warning on numeric field with range set
  * 			<li>BF [ 1834393 ] VNumber.setFocusable not working
+ * 
+ *  @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public final class VNumber extends JComponent
 	implements VEditor, ActionListener, KeyListener, FocusListener, VManagedEditor
@@ -207,6 +214,9 @@
 	/** The Button                  */
 	private CButton		    m_button = new CButton();
 
+	/** A holder for the value at some point in the past.  Used for comparison. */
+	private Object m_oldValue = null;
+
 	private GridField          m_mField = null;
 	/**	Logger			*/
 	private static CLogger log = CLogger.getCLogger(VNumber.class);
@@ -808,7 +818,7 @@
 		else if (currentEvent instanceof ActionEvent)
 			modifiers = ((ActionEvent)currentEvent).getModifiers();
 		ActionEvent ae = new ActionEvent (this, ActionEvent.ACTION_PERFORMED,
-			"VNumber", EventQueue.getMostRecentEventTime(), modifiers);
+			currentEvent.getClass().getSimpleName(), EventQueue.getMostRecentEventTime(), modifiers);
 
 		// Guaranteed to return a non-null array
 		Object[] listeners = listenerList.getListenerList();
@@ -833,4 +843,38 @@
 		m_modified = false;
 	}
 
+	/**
+	 * Set the old value of the field.  For use in future comparisons.
+	 * The old value must be explicitly set though this call.
+	 * @param m_oldValue
+	 */
+	public void set_oldValue() {
+		this.m_oldValue = getValue();
+	}
+
+	/**
+	 * Get the old value of the field explicitly set in the past
+	 * @return
+	 */
+	public Object get_oldValue() {
+		return m_oldValue;
+	}
+	/**
+	 * Has the field changed over time?
+	 * @return true if the old value is different than the current.
+	 */
+	public boolean hasChanged() {
+		// Both or either could be null
+		if(getValue() != null)
+			if(m_oldValue != null)
+				return !m_oldValue.equals(getValue());
+			else
+				return true;
+		else  // getValue() is null
+			if(m_oldValue != null)
+				return true;
+			else
+				return false;
+	}
+
 }	//	VNumber
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/grid/ed/VPAttribute.java
--- a/client/src/org/compiere/grid/ed/VPAttribute.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/grid/ed/VPAttribute.java	Mon Feb 10 21:08:53 2014 -0500
@@ -16,9 +16,11 @@
  *****************************************************************************/
 package org.compiere.grid.ed;
 
+import java.awt.AWTEvent;
 import java.awt.BorderLayout;
 import java.awt.Color;
 import java.awt.Component;
+import java.awt.Container;
 import java.awt.Dimension;
 import java.awt.Insets;
 import java.awt.event.ActionEvent;
@@ -30,6 +32,7 @@
 import java.util.logging.Level;
 
 import javax.swing.JComponent;
+import javax.swing.JFrame;
 import javax.swing.JPopupMenu;
 import javax.swing.JTextField;
 import javax.swing.LookAndFeel;
@@ -37,13 +40,17 @@
 
 import org.adempiere.plaf.AdempierePLAF;
 import org.compiere.apps.FieldRecordInfo;
+import org.compiere.apps.search.InfoPAttribute;
+import org.compiere.apps.search.InfoProduct;
 import org.compiere.model.GridField;
 import org.compiere.model.GridTab;
 import org.compiere.model.MAttributeSet;
 import org.compiere.model.MPAttributeLookup;
 import org.compiere.model.MProduct;
 import org.compiere.swing.CButton;
+import org.compiere.swing.CDialog;
 import org.compiere.swing.CMenuItem;
+import org.compiere.swing.CTextField;
 import org.compiere.util.CLogger;
 import org.compiere.util.Env;
 import org.compiere.util.Msg;
@@ -58,6 +65,10 @@
  * 			<li>BF [ 1895041 ] NPE when move product with attribute set
  * 			<li>BF [ 1770177 ] Inventory Move Locator Error - integrated MGrigioni bug fix
  * 			<li>BF [ 2011222 ] ASI Dialog is reseting locator
+ * 
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class VPAttribute extends JComponent
 	implements VEditor, ActionListener
@@ -98,13 +109,13 @@
 		}	//	mouse Clicked
 
 	}	//	VPAttribute_mouseAdapter
-
+	
 	/**
 	 *	IDE Constructor
 	 */
 	public VPAttribute()
 	{
-		this (null, false, false, true, 0, null);
+		this (null, false, false, true, 0, null, false);
 	}	//	VAssigment
 
 	/**
@@ -116,9 +127,9 @@
 	 * 	@param lookup Model Product Attribute
 	 */
 	public VPAttribute (boolean mandatory, boolean isReadOnly, boolean isUpdateable, 
-		int WindowNo, MPAttributeLookup lookup)
+		int WindowNo, MPAttributeLookup lookup, boolean searchOnly)
 	{
-		this(null, mandatory, isReadOnly, isUpdateable, WindowNo, lookup);
+		this(null, mandatory, isReadOnly, isUpdateable, WindowNo, lookup, searchOnly);
 	}
 	
 	/**
@@ -129,15 +140,21 @@
 	 *  @param isUpdateable updateable
 	 * 	@param WindowNo WindowNo
 	 * 	@param lookup Model Product Attribute
+	 *  @param searchOnly True if only used to search instances
 	 */
 	public VPAttribute (GridTab gridTab, boolean mandatory, boolean isReadOnly, boolean isUpdateable, 
-		int WindowNo, MPAttributeLookup lookup)
+		int WindowNo, MPAttributeLookup lookup, boolean searchOnly)
 	{
-		super.setName("M_AttributeSetInstance_ID");
+		super();
+		super.setName(m_columnName);
+		m_text.setName("VPAttribute Text - " + m_columnName);
+		m_button.setName("VPAttribute Button - " + m_columnName);
+		m_value = 0;
 		m_GridTab = gridTab; // added for processCallout
 		m_WindowNo = WindowNo;
 		m_mPAttribute = lookup;
 		m_C_BPartner_ID = Env.getContextAsInt(Env.getCtx(), WindowNo, "C_BPartner_ID");
+		m_searchOnly = searchOnly;
 		LookAndFeel.installBorder(this, "TextField.border");
 		this.setLayout(new BorderLayout());
 		//  Size
@@ -174,15 +191,21 @@
 		menuEditor = new CMenuItem(Msg.getMsg(Env.getCtx(), "PAttribute"), Env.getImageIcon("Zoom16.gif"));
 		menuEditor.addActionListener(this);
 		popupMenu.add(menuEditor);
+		
+		set_oldValue();
 	}	//	VPAttribute
 
 	/**	Data Value				*/
 	private Object				m_value = new Object();
+	/** Attribute Where Clause  */
+	private String m_pAttributeWhere = null;
+	/** Column Name - fixed		*/
+	private String				m_columnName = "M_AttributeSetInstance_ID";
 	/** The Attribute Instance	*/
 	private MPAttributeLookup	m_mPAttribute;
 
 	/** The Text Field          */
-	private JTextField			m_text = new JTextField (VLookup.DISPLAY_LENGTH);
+	private CTextField			m_text = new CTextField();
 	/** The Button              */
 	private CButton				m_button = new CButton();
 
@@ -193,6 +216,7 @@
 	private boolean				m_mandatory;
 	private int					m_WindowNo;
 	private int					m_C_BPartner_ID;
+	private boolean 			m_searchOnly;
 	/** The Grid Tab * */
 	private GridTab m_GridTab; // added for processCallout
 	/** The Grid Field * */
@@ -200,7 +224,10 @@
 	
 	/**	Calling Window Info				*/
 	private int					m_AD_Column_ID = 0;
-	private GridField m_mField;
+	/** record the value for comparison at a point in the future */
+	private Integer m_oldValue = 0;
+	private String m_oldText = "";
+	private String m_oldWhere = "";
 	/**	No Instance Key					*/
 	private static Integer		NO_INSTANCE = new Integer(0);
 	/**	Logger			*/
@@ -305,6 +332,7 @@
 		{
 			m_text.setText("");
 			m_value = value;
+			m_pAttributeWhere = "";
 			return;
 		}
 		
@@ -315,6 +343,11 @@
 		log.fine("Value=" + value);
 		m_value = value;
 		m_text.setText(m_mPAttribute.getDisplay(value));	//	loads value
+		// The text can be long.  Use the tooltip to help display the info.
+		m_text.setToolTipText(m_text.getText());
+		m_pAttributeWhere = "EXISTS (SELECT * FROM M_Storage s "
+				+ "WHERE s.M_AttributeSetInstance_ID=" + value
+				+ " AND s.M_Product_ID=p.M_Product_ID)";
 	}	//	setValue
 
 	/**
@@ -323,10 +356,29 @@
 	 */
 	public Object getValue()
 	{
-		return m_value;
+		Integer temp = null;
+		if (m_value != null || NO_INSTANCE.equals(m_value)) {
+			try {
+				temp = (Integer) m_value;
+			}
+			catch (ClassCastException cce)
+			{
+				temp = null;
+			}
+		}
+		return temp;
 	}	//	getValue
 
 	/**
+	 * Get Attribute Where clause
+	 * @return String
+	 */
+	public String getAttributeWhere()
+	{
+		return m_pAttributeWhere;
+	}	//	getAttributeWhere()
+
+	/**
 	 * 	Get Display Value
 	 *	@return info
 	 */
@@ -342,18 +394,17 @@
 	 */
 	public void setField(GridField mField)
 	{
-		//	To determine behavior
+		//	To determine behaviour
 		m_AD_Column_ID = mField.getAD_Column_ID();
 		m_GridField = mField;
 		
-		m_mField = mField;
-		if (m_mField != null)
+		if (m_GridField != null)
 			FieldRecordInfo.addMenu(this, popupMenu);
 	}	//	setField
 	
 	@Override
 	public GridField getField() {
-		return m_mField;
+		return m_GridField;
 	}
 
 	/**
@@ -362,6 +413,7 @@
 	 */
 	public void addActionListener(ActionListener listener)
 	{
+		m_text.addActionListener(listener);
 	}   //  addActionListener
 
 	/**
@@ -372,7 +424,7 @@
 	{
 		if (e.getActionCommand().equals(FieldRecordInfo.CHANGE_LOG_COMMAND))
 		{
-			FieldRecordInfo.start(m_mField);
+			FieldRecordInfo.start(m_GridField);
 			return;
 		}
 		
@@ -380,7 +432,15 @@
 			return;
 		m_button.setEnabled (false);
 		//
-		Integer oldValue = (Integer)getValue ();
+		Integer oldValue = 0;
+		try
+		{
+			oldValue = (Integer)getValue ();			
+		}
+		catch(ClassCastException cce)
+		{
+			// Possible Invalid Cast exception if getValue() return new instance of Object.
+		}
 		int oldValueInt = oldValue == null ? 0 : oldValue.intValue ();
 		int M_AttributeSetInstance_ID = oldValueInt;
 		int M_Product_ID = 0;
@@ -418,29 +478,56 @@
 		boolean changed = false;
 		if (M_ProductBOM_ID != 0)	//	Use BOM Component
 			M_Product_ID = M_ProductBOM_ID;
-		//	
-		if (!productWindow && (M_Product_ID == 0 || exclude))
-		{
-			changed = true;
-			m_text.setText(null);
-			M_AttributeSetInstance_ID = 0;
+
+		// If the VPAttribute component is in a dialog, use the search
+		if (m_searchOnly)
+		{	
+			// The component is an element in a CPanel, which is part of a JPanel
+			// which is in a JLayeredPane which is in ...  the InfoProduct window
+			Container me = ((Container) this).getParent();
+			while (me != null)
+			{
+				if (me instanceof InfoProduct)
+					break;
+				me = me.getParent();
+			}
+			InfoPAttribute ia = new InfoPAttribute((CDialog) me);
+			m_pAttributeWhere = ia.getWhereClause();
+			String oldText = m_text.getText();
+			m_text.setText(ia.getDisplay());
+			// The text can be long.  Use the tooltip to help display the info.
+			m_text.setToolTipText(m_text.getText());
+
+			
+			ActionEvent ae = new ActionEvent(m_text, 1001, "updated");
+			//  TODO not the generally correct way to fire an event
+			((InfoProduct) me).actionPerformed(ae);
 		}
-		else
-		{
-			VPAttributeDialog vad = new VPAttributeDialog (Env.getFrame (this), 
-				M_AttributeSetInstance_ID, M_Product_ID, m_C_BPartner_ID,
-				productWindow, m_AD_Column_ID, m_WindowNo);
-			if (vad.isChanged())
+		else	
+			if (!productWindow && (M_Product_ID == 0 || exclude))
 			{
-				m_text.setText(vad.getM_AttributeSetInstanceName());
-				M_AttributeSetInstance_ID = vad.getM_AttributeSetInstance_ID();
-				if (!productWindow && vad.getM_Locator_ID() > 0)
+				changed = true;
+				m_text.setText(null);
+				M_AttributeSetInstance_ID = 0;
+			}
+			else
+			{
+				VPAttributeDialog vad = new VPAttributeDialog (Env.getFrame (this), 
+					M_AttributeSetInstance_ID, M_Product_ID, m_C_BPartner_ID,
+					productWindow, m_AD_Column_ID, m_WindowNo, isReadWrite());
+				if (vad.isChanged())
 				{
-					M_Locator_ID = vad.getM_Locator_ID();
+					m_text.setText(vad.getM_AttributeSetInstanceName());
+					// The text can be long.  Use the tooltip to help display the info.
+					m_text.setToolTipText(vad.getM_AttributeSetInstanceName());
+					M_AttributeSetInstance_ID = vad.getM_AttributeSetInstance_ID();
+					if (!productWindow && vad.getM_Locator_ID() > 0)
+					{
+						M_Locator_ID = vad.getM_Locator_ID();
+					}
+					changed = true;
 				}
-				changed = true;
 			}
-		}
 		
 		//	Set Value
 		if (changed)
@@ -490,5 +577,73 @@
 		if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))
 			setValue(evt.getNewValue());
 	}   //  propertyChange
+	/**
+	 * Set the old value of the field.  For use in future comparisons.
+	 * The old value must be explicitly set though this call.
+	 */
+	public void set_oldValue() {
+		if (getValue() != null) {
+			try {
+				this.m_oldValue = ((Integer) getValue());
+			} 
+			catch (ClassCastException e)
+			{
+				this.m_oldValue = null;
+			}
+		}
+		else
+			this.m_oldValue = null;
+		if (m_text != null)
+			this.m_oldText = m_text.getDisplay();
+		else
+			m_oldText = "";
+		this.m_oldWhere = m_pAttributeWhere;
+	}
+	/**
+	 * Get the old value of the field explicitly set in the past
+	 * @return
+	 */
+	public Object get_oldValue() {
+		return m_oldValue;
+	}
+	/**
+	 * Has the field changed over time?
+	 * @return true if the old value is different than the current.
+	 */
+	public boolean hasChanged() {
+		// Both or either could be null
+		
+		// Don't think a test of Value is needed - the value is never set in this field internally
+		//if(getValue() != null)
+		//	if(m_oldValue != null)
+		//		return !m_oldValue.equals(getValue());
+		//	else
+		//		return true;
+		//else  // getValue() is null
+		//	if(m_oldValue != null)
+		//		return true;
+
+		if(m_text != null)
+			if(m_oldText != null)
+				return !m_oldText.equals(m_text.getDisplay());
+			else
+				return true;
+		else  // m_text is null
+			if(m_oldText != null)
+				return true;
+
+		if(m_pAttributeWhere != null)
+			if(m_oldWhere != null)
+				return !m_oldWhere.equals(m_pAttributeWhere);
+			else
+				return true;
+		else  // m_pAttributeWhere is null
+			if(m_oldWhere != null)
+				return true;
+
+		return false;
+
+	
+	}
 
 }	//	VPAttribute
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/grid/ed/VPAttributeDialog.java
--- a/client/src/org/compiere/grid/ed/VPAttributeDialog.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/grid/ed/VPAttributeDialog.java	Mon Feb 10 21:08:53 2014 -0500
@@ -51,9 +51,11 @@
 import org.compiere.model.MDocType;
 import org.compiere.model.MLot;
 import org.compiere.model.MLotCtl;
+import org.compiere.model.MProduct;
 import org.compiere.model.MQuery;
 import org.compiere.model.MRole;
 import org.compiere.model.MSerNoCtl;
+import org.compiere.model.MWindow;
 import org.compiere.model.X_M_MovementLine;
 import org.compiere.swing.CButton;
 import org.compiere.swing.CCheckBox;
@@ -77,6 +79,11 @@
  *
  *  @author Jorg Janke
  *  @version $Id: VPAttributeDialog.java,v 1.4 2006/07/30 00:51:27 jjanke Exp $
+ *  
+ *  @author Michael McKay (mjmckay)
+ *  		<li>BF3468823 - Attribute Set Instance editor does not display
+ * 			<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class VPAttributeDialog extends CDialog
 	implements ActionListener
@@ -115,6 +122,8 @@
 		}	//	mouse Clicked
 
 	}	//	VPAttributeDialog_mouseAdapter	
+
+	private boolean m_readWrite;
 	
 	/**
 	 *	Product Attribute Instance Dialog
@@ -128,7 +137,7 @@
 	 */
 	public VPAttributeDialog (Frame frame, int M_AttributeSetInstance_ID, 
 		int M_Product_ID, int C_BPartner_ID, 
-		boolean productWindow, int AD_Column_ID, int WindowNo)
+		boolean productWindow, int AD_Column_ID, int WindowNo, boolean readWrite)
 	{
 		super (frame, Msg.translate(Env.getCtx(), "M_AttributeSetInstance_ID") , true);
 		log.config("M_AttributeSetInstance_ID=" + M_AttributeSetInstance_ID 
@@ -142,6 +151,7 @@
 		m_productWindow = productWindow;
 		m_AD_Column_ID = AD_Column_ID;
 		m_WindowNoParent = WindowNo;
+		m_readWrite = readWrite;
 
 		//get columnName from ad_column
  	 	m_columnName = DB.getSQLValueString(null, "SELECT ColumnName FROM AD_Column WHERE AD_Column_ID = ?", m_AD_Column_ID);
@@ -213,6 +223,8 @@
 	private ConfirmPanel confirmPanel = new ConfirmPanel (true);
 	
 	private String m_columnName = null;
+	private MProduct m_product;
+	private boolean m_productASI;
 
 	/**
 	 *	Layout
@@ -242,6 +254,16 @@
 		if (m_M_Product_ID != 0)
 		{
 			//	Get Model
+			m_product = MProduct.get(Env.getCtx(), m_M_Product_ID);
+			if (m_product.getM_AttributeSetInstance_ID() > 0)
+			{
+				m_productASI = true;
+				//  The product has an instance associated with it.
+				if (m_M_AttributeSetInstance_ID != m_product.getM_AttributeSetInstance_ID())
+				{
+					log.fine("Different ASI than what is specified on Product!");
+				}
+			}
 			m_masi = MAttributeSetInstance.get(Env.getCtx(), m_M_AttributeSetInstance_ID, m_M_Product_ID);
 			if (m_masi == null)
 			{
@@ -249,7 +271,7 @@
 				return false;
 			}
 			Env.setContext(Env.getCtx(), m_WindowNo, "M_AttributeSet_ID", m_masi.getM_AttributeSet_ID());
-	
+			
 			//	Get Attribute Set
 			as = m_masi.getMAttributeSet();
 		}
@@ -266,42 +288,42 @@
 			ADialog.error(m_WindowNo, this, "PAttributeNoAttributeSet");
 			return false;
 		}
-		//	Product has no Instance Attributes
-		if (!m_productWindow && !as.isInstanceAttribute())
+
+		//	BF3468823 Show Product Attributes
+		//  Product attributes can be shown in any window but are read/write only in the product
+		//  window.  Instance attributes are shown in any window but the product window and are
+		//  always read/write.  The two are exclusive and can't co-exists.  
+		if (!m_productWindow || !m_productASI)	//	Set Instance Attributes and dialog controls
 		{
-			ADialog.error(m_WindowNo, this, "PAttributeNoInstanceAttribute");
-			return false;
-		}
-
-		//	Show Product Attributes
-		if (m_productWindow)
-		{
-			MAttribute[] attributes = as.getMAttributes (false);
-			log.fine ("Product Attributes=" + attributes.length);
-			for (int i = 0; i < attributes.length; i++)
-				addAttributeLine (attributes[i], true, !m_productWindow);
-		}
-		else	//	Set Instance Attributes
-		{
-			//	New/Edit - Selection
-			if (m_M_AttributeSetInstance_ID == 0)		//	new
-				cbNewEdit.setText(Msg.getMsg(Env.getCtx(), "NewRecord"));
-			else
-				cbNewEdit.setText(Msg.getMsg(Env.getCtx(), "EditRecord"));
-			cbNewEdit.addActionListener(this);
-			centerPanel.add(cbNewEdit, new ALayoutConstraint(m_row++,0));
-			bSelect.setText(Msg.getMsg(Env.getCtx(), "SelectExisting"));
-			bSelect.addActionListener(this);
-			centerPanel.add(bSelect, null);
-			//	All Attributes
+			if (!m_productASI)  // Instance attributes possible.  Set up controls.
+			{
+				//	New/Edit - Selection
+				if (m_M_AttributeSetInstance_ID == 0)		//	new
+					cbNewEdit.setText(Msg.getMsg(Env.getCtx(), "NewRecord"));
+				else
+					cbNewEdit.setText(Msg.getMsg(Env.getCtx(), "EditRecord"));
+				cbNewEdit.addActionListener(this);
+				centerPanel.add(cbNewEdit, new ALayoutConstraint(m_row++,0));
+				bSelect.setText(Msg.getMsg(Env.getCtx(), "SelectExisting"));
+				bSelect.addActionListener(this);
+				centerPanel.add(bSelect, null);
+			}
+			//	Add the Instance Attributes if any.  If its a product attribute set
+			//  this will do nothing.
 			MAttribute[] attributes = as.getMAttributes (true);
 			log.fine ("Instance Attributes=" + attributes.length);
 			for (int i = 0; i < attributes.length; i++)
 				addAttributeLine (attributes[i], false, false);
 		}
+		//  Product attributes can be shown in any window but are read/write in the Product window only.
+		//  This will do nothing if it is an instance attribute set. 
+		MAttribute[] attributes = as.getMAttributes (false);
+		log.fine ("Product Attributes=" + attributes.length);
+		for (int i = 0; i < attributes.length; i++)
+			addAttributeLine (attributes[i], true, !m_productWindow);
 
 		//	Lot
-		if (!m_productWindow && as.isLot())
+		if ((!m_productWindow || !m_productASI) && as.isLot())
 		{
 			CLabel label = new CLabel (Msg.translate(Env.getCtx(), "Lot"));
 			label.setLabelFor (fieldLotString);
@@ -337,7 +359,7 @@
 			}
 			fieldLot.addActionListener(this);
 			//	New Lot Button
-			if (m_masi.getMAttributeSet().getM_LotCtl_ID() != 0)
+			if (m_masi.getMAttributeSet().getM_LotCtl_ID() != 0 && m_readWrite)
 			{
 				if (MRole.getDefault().isTableAccess(MLot.Table_ID, false)
 					&& MRole.getDefault().isTableAccess(MLotCtl.Table_ID, false)
@@ -355,7 +377,7 @@
 		}	//	Lot
 
 		//	SerNo
-		if (!m_productWindow && as.isSerNo())
+		if ((!m_productWindow || !m_productASI) && as.isSerNo())
 		{
 			CLabel label = new CLabel (Msg.translate(Env.getCtx(), "SerNo"));
 			label.setLabelFor(fieldSerNo);
@@ -363,7 +385,7 @@
 			centerPanel.add(label, new ALayoutConstraint(m_row++,0));
 			centerPanel.add(fieldSerNo, null);
 			//	New SerNo Button
-			if (m_masi.getMAttributeSet().getM_SerNoCtl_ID() != 0)
+			if (m_masi.getMAttributeSet().getM_SerNoCtl_ID() != 0 && m_readWrite)
 			{
 				if (MRole.getDefault().isTableAccess(MSerNoCtl.Table_ID, false)
 					&& !m_masi.isExcludeSerNo(m_AD_Column_ID, Env.isSOTrx(Env.getCtx(), m_WindowNoParent)))
@@ -375,7 +397,7 @@
 		}	//	SerNo
 
 		//	GuaranteeDate
-		if (!m_productWindow && as.isGuaranteeDate())
+		if ((!m_productWindow || !m_productASI) && as.isGuaranteeDate())
 		{
 			CLabel label = new CLabel (Msg.translate(Env.getCtx(), "GuaranteeDate"));
 			label.setLabelFor(fieldGuaranteeDate);
@@ -394,7 +416,7 @@
 		}
 
 		//	New/Edit Window
-		if (!m_productWindow)
+		if ((!m_productWindow || !m_productASI) && m_AD_Column_ID != 0 && m_readWrite)
 		{
 			cbNewEdit.setSelected(m_M_AttributeSetInstance_ID == 0);
 			cmd_newEdit();
@@ -465,7 +487,7 @@
 		else if (MAttribute.ATTRIBUTEVALUETYPE_Number.equals(attribute.getAttributeValueType()))
 		{
 			VNumber editor = new VNumber(attribute.getName(), attribute.isMandatory(), 
-				false, true, DisplayType.Number, attribute.getName());
+				readOnly, !readOnly, DisplayType.Number, attribute.getName());
 			if (instance != null)
 				editor.setValue(instance.getValueNumber());
 			else
@@ -549,6 +571,8 @@
 			{
 				fieldLot.addItem(pp);
 				fieldLot.setSelectedItem(pp);				
+				fieldLotString.setText (m_masi.getLot());
+				fieldLotString.setEditable(false);
 			}
 		}
 		//	Create New SerNo
@@ -566,9 +590,12 @@
 		//	Cancel
 		else if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))
 		{
-			m_changed = false;
-			m_M_AttributeSetInstance_ID = 0;
-			m_M_Locator_ID = 0;
+			if (!m_productASI)
+			{
+				m_changed = m_M_AttributeSetInstance_ID != 0;
+				m_M_AttributeSetInstance_ID = 0;
+				m_M_Locator_ID = 0;
+			}
 			dispose();
 		}
 		//	Zoom M_Lot
@@ -633,15 +660,26 @@
 		//		
 		PAttributeInstance pai = new PAttributeInstance(this, title, 
 			M_Warehouse_ID, M_Locator_ID, m_M_Product_ID, m_C_BPartner_ID);
-		if (pai.getM_AttributeSetInstance_ID() != -1)
+		//
+		if (m_M_AttributeSetInstance_ID != pai.getM_AttributeSetInstance_ID() ||
+				!(m_M_AttributeSetInstance_ID == 0 && pai.getM_AttributeSetInstance_ID() == -1))
 		{
-			m_M_AttributeSetInstance_ID = pai.getM_AttributeSetInstance_ID();
-			m_M_AttributeSetInstanceName = pai.getM_AttributeSetInstanceName();
-			m_M_Locator_ID = pai.getM_Locator_ID();
 			m_changed = true;
-			return true;
+			//
+			if (pai.getM_AttributeSetInstance_ID() != -1)
+			{
+				m_M_AttributeSetInstance_ID = pai.getM_AttributeSetInstance_ID();
+				m_M_AttributeSetInstanceName = pai.getM_AttributeSetInstanceName();
+				m_M_Locator_ID = pai.getM_Locator_ID();
+			}
+			else
+			{
+				m_M_AttributeSetInstance_ID = 0;
+				m_M_AttributeSetInstanceName = "";
+				// Leave the locator alone
+			}
 		}
-		return false;
+		return m_changed;
 	}	//	cmd_select
 
 	/**
@@ -682,7 +720,7 @@
 		//
 		setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
 		//
-		int AD_Window_ID = 257;		//	Lot
+		int AD_Window_ID = MWindow.getWindow_ID("Lot");		//	Lot
 		AWindow frame = new AWindow();
 		if (frame.initWindow(AD_Window_ID, zoomQuery))
 		{
@@ -704,6 +742,9 @@
 	 */
 	private boolean saveSelection()
 	{
+		if(!m_readWrite)
+			return true;
+		
 		log.info("");
 		MAttributeSet as = m_masi.getMAttributeSet();
 		if (as == null)
@@ -749,7 +790,7 @@
 		}
 
 		//	Save Instance Attributes
-		MAttribute[] attributes = as.getMAttributes(!m_productWindow);
+		MAttribute[] attributes = as.getMAttributes(m_M_AttributeSetInstance_ID > 0 && m_readWrite);
 		for (int i = 0; i < attributes.length; i++)
 		{
 			if (MAttribute.ATTRIBUTEVALUETYPE_List.equals(attributes[i].getAttributeValueType()))
@@ -768,6 +809,9 @@
 				log.fine(attributes[i].getName() + "=" + value);
 				if (attributes[i].isMandatory() && value == null)
 					mandatory += " - " + attributes[i].getName();
+				//setMAttributeInstance doesn't work without decimal point
+				if (value != null && value.scale() == 0)
+					value = value.setScale(1, BigDecimal.ROUND_HALF_UP);
 				attributes[i].setMAttributeInstance(m_M_AttributeSetInstance_ID, value);
 			}
 			else
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/minigrid/IMiniTable.java
--- a/client/src/org/compiere/minigrid/IMiniTable.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/minigrid/IMiniTable.java	Mon Feb 10 21:08:53 2014 -0500
@@ -1,6 +1,8 @@
 package org.compiere.minigrid;
 
 import java.sql.ResultSet;
+import java.util.ArrayList;
+import java.util.Collection;
 
 import org.compiere.model.PO;
 
@@ -14,6 +16,8 @@
 	
 	public int convertColumnIndexToModel(int viewColumnIndex);
 	
+	public int convertColumnIndexToView(int modelColumnIndex);
+	
 	public void setColumnReadOnly (int index, boolean readOnly);
 	
 	public String prepareTable(ColumnInfo[] layout, String from, String where, boolean multiSelection, String tableName);
@@ -28,10 +32,20 @@
 	
 	public void loadTable(PO[] pos);
 	
+	public void setKeyColumnIndex (int keyColumnIndex);
+
+	public int getKeyColumnIndex();
+	
+	public ArrayList<Integer> getSelectedKeys();
+	
 	public Integer getSelectedRowKey();
 	
 	public int getSelectedRow();
 	
+	public int getRowKey(int row);
+	
+	public boolean isRowChecked(int row);
+	
 	public void setRowCount (int rowCount);
 	
 	public ColumnInfo[] getLayoutInfo();
@@ -40,6 +54,8 @@
 	
 	public int getRowCount();
 	
+	public boolean getShowTotals();
+	
 	public void setMultiSelection(boolean multiSelection);
 	
 	public boolean isMultiSelection();
@@ -51,4 +67,9 @@
 	public void repaint();
 	
 	public void autoSize();
+
+	public int convertRowIndexToModel(int row);
+	
+	public void setRowChecked(int row, boolean value);
+	
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/minigrid/MiniCellEditor.java
--- a/client/src/org/compiere/minigrid/MiniCellEditor.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/minigrid/MiniCellEditor.java	Mon Feb 10 21:08:53 2014 -0500
@@ -22,6 +22,8 @@
 
 import javax.swing.AbstractCellEditor;
 import javax.swing.JTable;
+import javax.swing.UIManager;
+import javax.swing.border.Border;
 import javax.swing.table.TableCellEditor;
 
 import org.compiere.grid.ed.VDate;
@@ -35,6 +37,9 @@
  *
  *  @author     Jorg Janke
  *  @version    $Id: MiniCellEditor.java,v 1.2 2006/07/30 00:51:28 jjanke Exp $
+ *  
+ *   *  @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
  */
 public class MiniCellEditor extends AbstractCellEditor implements TableCellEditor
 {
@@ -61,6 +66,7 @@
 			m_editor = new VNumber("Integer", false, false, true, DisplayType.Integer, "Integer");
 		else
 			m_editor = new VString();
+		
 
 	}   //  MiniCellEditor
 
@@ -89,7 +95,7 @@
 
 		//	Set UI
 		m_editor.setBorder(null);
-	//	m_editor.setBorder(UIManager.getBorder("Table.focusCellHighlightBorder"));
+		//m_editor.setBorder(UIManager.getBorder("Table.focusCellHighlightBorder"));
 		m_editor.setFont(table.getFont());
 		return (Component)m_editor;
 	}	//	getTableCellEditorComponent
@@ -107,4 +113,8 @@
 		return null;
 	}	//	getCellEditorValue
 
+	public void setBorder(Border border)
+	{
+		m_editor.setBorder(border);
+	}
 }   //  MiniCellEditor
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/minigrid/MiniTable.java
--- a/client/src/org/compiere/minigrid/MiniTable.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/minigrid/MiniTable.java	Mon Feb 10 21:08:53 2014 -0500
@@ -16,8 +16,21 @@
  *****************************************************************************/
 package org.compiere.minigrid;
 
+import java.awt.Color;
 import java.awt.Component;
+import java.awt.Dimension;
+import java.awt.Event;
 import java.awt.Insets;
+import java.awt.Rectangle;
+import java.awt.Toolkit;
+import java.awt.event.ActionEvent;
+import java.awt.event.FocusAdapter;
+import java.awt.event.FocusEvent;
+import java.awt.event.KeyEvent;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
 import java.math.BigDecimal;
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -26,18 +39,35 @@
 import java.util.Collection;
 import java.util.logging.Level;
 
+import javax.swing.AbstractAction;
+import javax.swing.Action;
+import javax.swing.BorderFactory;
 import javax.swing.DefaultCellEditor;
+import javax.swing.DefaultListSelectionModel;
+import javax.swing.JButton;
+import javax.swing.JCheckBox;
+import javax.swing.JComponent;
+import javax.swing.JTable;
+import javax.swing.KeyStroke;
+import javax.swing.ListSelectionModel;
 import javax.swing.SwingConstants;
+import javax.swing.border.CompoundBorder;
+import javax.swing.border.EmptyBorder;
+import javax.swing.border.EtchedBorder;
+import javax.swing.border.MatteBorder;
 import javax.swing.table.DefaultTableCellRenderer;
 import javax.swing.table.DefaultTableModel;
+import javax.swing.table.TableCellEditor;
 import javax.swing.table.TableCellRenderer;
 import javax.swing.table.TableColumn;
 import javax.swing.table.TableModel;
 
+import org.adempiere.plaf.AdempierePLAF;
 import org.compiere.apps.search.Info_Column;
 import org.compiere.grid.ed.VCellRenderer;
 import org.compiere.grid.ed.VHeaderRenderer;
 import org.compiere.model.MRole;
+import org.compiere.model.MSysConfig;
 import org.compiere.model.PO;
 import org.compiere.swing.CCheckBox;
 import org.compiere.swing.CTable;
@@ -72,6 +102,13 @@
  * @author Teo Sarca, teo.sarca@gmail.com
  * 				<li>BF [ 2876895 ] MiniTable.loadTable: NPE if column is null
  * 					https://sourceforge.net/tracker/?func=detail&aid=2876895&group_id=176962&atid=879332
+ * 
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-71 MiniTable causes exception when adding totals
+ * 					to tables with no text fields in the first or second column
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-71
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 
  */
 public class MiniTable extends CTable implements IMiniTable
 {
@@ -80,19 +117,294 @@
 	 */
 	private static final long serialVersionUID = 2853772547464132497L;
 
+	public class TablePropertyListener implements PropertyChangeListener {
+		public void propertyChange(PropertyChangeEvent e)
+		{
+			String propertyName = e.getPropertyName();
+			if (propertyName == "model")
+			{
+				//  Reset
+				((MiniTable) e.getSource()).setShowGrid(false);
+				((MiniTable) e.getSource()).setIntercellSpacing(new Dimension(0, 0));
+			}
+		}
+	}
+
 	/**
 	 *  Default Constructor
 	 */
 	public MiniTable()
 	{
 		super();
-	//	log.config( "MiniTable");
-		setCellSelectionEnabled(false);
-		setRowSelectionAllowed(false);
+		//	log.config( "MiniTable");
+		this.setCellSelectionEnabled(true);
+		this.setRowSelectionAllowed(true);
 		//  Default Editor
-		this.setCellEditor(new ROCellEditor());
+		this.setCellEditor(new ROCellEditor());
+
+		this.setShowGrid(false);
+		this.setIntercellSpacing(new Dimension(0, 0));
+		
+		//  Set up the keyboard interactions
+		this.setSurrendersFocusOnKeystroke(true);  //  Default behaviour is to surrender the focus.
+		//  Customise row selection confirmation
+		this.getInputMap().put(KeyStroke.getKeyStroke("SPACE"), "doMatchIdToSelection");
+		this.getInputMap().put(KeyStroke.getKeyStroke("ctrl SPACE"), "doToggleID");
+		this.getInputMap().put(KeyStroke.getKeyStroke("ctrl shift SPACE"), "doToggleBySelection");
+		//  Disable column selections
+		this.getInputMap().put(KeyStroke.getKeyStroke("RIGHT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("KP_RIGHT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("ctrl RIGHT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("ctrl KP_RIGHT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("shift RIGHT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("shift KP_RIGHT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("ctrl shift RIGHT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("ctrl shift KP_RIGHT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("LEFT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("KP_LEFT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("ctrl LEFT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("ctrl KP_LEFT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("shift LEFT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("shift KP_LEFT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("ctrl shift LEFT"), "doNothing");
+		this.getInputMap().put(KeyStroke.getKeyStroke("ctrl shift KP_LEFT"), "doNothing");
+		
+		//  Customize the row selection behaviour
+		this.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), "doSelectRowDown");  //  Tab moves to next row
+		this.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, Event.SHIFT_MASK), "doSelectRowUp");  //  Tab moves to previous row
+		this.getInputMap().put(KeyStroke.getKeyStroke("UP"), "doSelectRowUp");
+		this.getInputMap().put(KeyStroke.getKeyStroke("KP_UP"), "doSelectRowUp");
+		this.getInputMap().put(KeyStroke.getKeyStroke("DOWN"), "doSelectRowDown");
+		this.getInputMap().put(KeyStroke.getKeyStroke("KP_DOWN"), "doSelectRowDown");
+
+		// Add Action functions to table Action Map.  Otherwise, the defaults will be used.
+		this.getActionMap().put("doNothing", doNothing);
+		this.getActionMap().put("doSelectAll", doSelectAll);
+		this.getActionMap().put("doSelectRowDown", doSelectRowDown);
+		this.getActionMap().put("doSelectRowUp", doSelectRowUp);
+		this.getActionMap().put("doAddRowDown", doAddRowDown);
+		this.getActionMap().put("doAddRowUp", doAddRowUp);
+		this.getActionMap().put("doAddRowDownExtend", doAddRowDownExtend);
+		this.getActionMap().put("doAddRowUpExtend", doAddRowUpExtend);
+		this.getActionMap().put("doChangeLeadDown", doChangeLeadDown);
+		this.getActionMap().put("doChangeLeadUp", doChangeLeadUp);
+		this.getActionMap().put("doMatchIdToSelection", doMatchIdToSelection);
+		this.getActionMap().put("doToggleID", doToggleID);
+		this.getActionMap().put("doToggleBySelection", doToggleBySelection);
+		//
+		this.setShowTotals(false);
+		this.getSelectionModel().addListSelectionListener(this);
+		this.addPropertyChangeListener(new TablePropertyListener());
+		
+		//  Add additional config items that may change later
+		config_table();
+
+		this.addFocusListener(new FocusAdapter(){
+			public void focusGained(FocusEvent fe)
+			{
+				log.fine("Focue Gained. " + fe.toString());
+				((MiniTable) fe.getSource()).getParent().repaint();
+			}
+			
+			public void focusLost(FocusEvent fe)
+			{
+				if (((MiniTable) fe.getSource()) != null)
+					((MiniTable) fe.getSource()).getParent().repaint();
+			}
+		});
+
 	}   //  MiniTable
-
+
+	private boolean pressedInTable = false;
+	private int 	pressedRow = -1;
+	private int		pressedColumn = -1;
+	private boolean wasDragged = false;
+	
+	/**  In multi-selection tables, does a single click select uniquely that record or 
+	 *   toggle the selection of that record (add or remove from the selection).  Defaults
+	 *   to false (add/remove).
+	 */
+	private boolean m_singleClickTogglesSelection = true;
+
+	/**
+	 * @return true if a click on a row adds or removes the row from the selection
+	 */
+	protected boolean isSingleClickTogglesSelection() {
+		return m_singleClickTogglesSelection;
+	}
+
+	/**
+	 * If set to false, the clicked row will become the selection.  If set to true, 
+	 * a click will add or remove the row from the selection. Similar to Ctrl-Click 
+	 * when set to false.  
+	 * @param clickTogglesSelection the m_singleClickTogglesSelection to set
+	 */
+	protected void setSingleClickTogglesSelection(boolean clickTogglesSelection) {
+		m_singleClickTogglesSelection = clickTogglesSelection;
+	}
+
+	@Override protected void processMouseEvent(MouseEvent me)
+	{	
+		MiniTable table = ((MiniTable) me.getSource());
+		if (me.isPopupTrigger())
+		{
+			try
+			{
+				super.processMouseEvent(me);
+			}
+			catch(Exception e)
+			{
+			}
+			return;			
+		}
+		else if (me.getID() == MouseEvent.MOUSE_CLICKED && me.getClickCount() % 2 == 0)
+		{
+			if (isMultiSelection() && isDoubleClickTogglesSelection())
+			{
+				toggleLeadRowChecked();
+			}
+			else
+			{
+				try
+				{
+					super.processMouseEvent(me);
+				}
+				catch(Exception e)
+				{
+				}
+				return;
+			}
+		}
+		else if (me.getID() == MouseEvent.MOUSE_RELEASED)
+		{
+			if(pressedInTable)
+			{
+				//  The mouse press action occurred in the table
+				//  The mouse release may have occurred anywhere
+				boolean releasedInTable = false;
+				if (table.rowAtPoint(me.getPoint()) >= 0 && table.columnAtPoint(me.getPoint()) >= 0)
+					releasedInTable = true;
+				
+				if (!releasedInTable)
+				{
+					//  The mouse may be off the table
+					//  Toggle the ID columns according to the selection (highlight)
+					toggleRowCheckedBySelection();
+					return;
+				}
+				//  Check for same cell and edit that cell if possible
+				if (pressedRow == table.rowAtPoint(me.getPoint()) && pressedColumn == table.columnAtPoint(me.getPoint()))
+				{
+					//  The action occurred in the same sell
+					boolean editable = this.isCellEditable(pressedRow, 
+														   pressedColumn); 
+		            if (editable)
+		            {
+		            	try{super.processMouseEvent(me);}
+		            	catch(Exception e){}
+		            	return;
+		            }
+				}
+				
+				//  Check for Ctrl-click or drag
+			    int ctrlMask = MouseEvent.CTRL_DOWN_MASK;
+			    if ((!wasDragged && ((me.getModifiersEx() & (ctrlMask)) == ctrlMask)) ||	//  same row - ctrl-click
+		    		(isMultiSelection() && isSingleClickTogglesSelection()))				//  dragged or no ctrl key
+	    		{
+			    	if (pressedRow == table.rowAtPoint(me.getPoint()))
+			    		toggleLeadRowChecked();  //  The current row only
+			    	else
+			    		toggleRowCheckedRange(pressedRow, table.rowAtPoint(me.getPoint())); // A range
+			    }
+			    else
+			    	matchCheckWithSelectedRows();
+			}
+			pressedInTable = false;
+			pressedRow = -1;
+			pressedColumn = -1;
+			wasDragged = false;
+		}
+		else if (me.getID() == MouseEvent.MOUSE_PRESSED)
+	    {
+			int rows = table.getRowCount();
+			int columns = table.getColumnCount();
+			
+			if (table.getShowTotals())
+			{
+				rows = rows-1;
+			}
+			pressedRow = table.rowAtPoint(me.getPoint());
+			pressedColumn = table.columnAtPoint(me.getPoint());
+			if (pressedRow >= 0 && pressedRow < rows && pressedColumn >= 0 && pressedColumn < columns)
+			{
+				pressedInTable = true;
+			}
+			else
+			{
+				pressedInTable = false;
+				pressedRow = -1;
+				pressedColumn = -1;
+			}
+	    }
+		
+		//  For all events
+		if(!pressedInTable)
+		{
+			return;
+		}
+		else
+	    {
+			try
+			{
+				super.processMouseEvent(me);
+			}
+			catch(Exception e)
+			{
+			}
+	    }
+	}
+
+	//  Ignore mouse motion that started over the total row.
+	protected void processMouseMotionEvent(MouseEvent mme)
+	{
+		if (mme.getID() == MouseEvent.MOUSE_DRAGGED)
+		{
+			if (!pressedInTable)
+			{
+				wasDragged = false;
+				mme.consume(); // Pretend it didn't originate in the table
+				return;
+			}
+			else if (pressedInTable) // valid
+			{
+				wasDragged = true;
+				MiniTable table = ((MiniTable) mme.getSource());
+
+				if (this.getShowTotals())
+				{
+					//  Check if we are over the total row
+					int totalRow = table.getRowCount()-1;
+					if (totalRow == table.rowAtPoint(mme.getPoint()))
+					{
+						mme.consume(); // Mouse if being dragged over the total row. Ignore it.
+						return;					
+					}						
+				}
+				
+				if(!isMultiSelection())
+				{
+					ListSelectionModel rsm = (ListSelectionModel) table.getSelectionModel();
+					int leadRow = rsm.getLeadSelectionIndex();
+					rsm.setSelectionInterval(leadRow, leadRow);
+				}
+			}
+			super.processMouseMotionEvent(mme);
+		}
+	}
+
+	public static final String SYSCONFIG_INFO_DEFAULTSELECTED = "INFO_DEFAULTSELECTED";
+	public static final String SYSCONFIG_INFO_DOUBLECLICKTOGGLESSELECTION = "INFO_DOUBLECLICKTOGGLESSELECTION";
+
 	/** List of R/W columns     */
 	private ArrayList<Integer>   m_readWriteColumn = new ArrayList<Integer>();
 	/** List of Column Width    */
@@ -105,7 +417,10 @@
 
 	/** Multi Selection mode (default false) */
 	private boolean     m_multiSelection = false;
-
+	/** True if double click on a row toggles if row is selected (multi selection mode only) */
+	private boolean				p_doubleClickTogglesSelection = MSysConfig.getBooleanValue(SYSCONFIG_INFO_DOUBLECLICKTOGGLESSELECTION, false, Env.getAD_Client_ID(Env.getCtx()));
+	/** Specify if the records should be checked(selected) by default (multi selection mode only) */
+	private boolean				p_isDefaultSelected = MSysConfig.getBooleanValue(SYSCONFIG_INFO_DEFAULTSELECTED, false, Env.getAD_Client_ID(Env.getCtx()));
 	/** Lauout set in prepareTable and used in loadTable    */
 	private ColumnInfo[]        m_layout = null;
 	/**	Logger			*/
@@ -194,25 +509,50 @@
 		}	//	for all columns
 		log.finer("Cols=" + size + " - " + (System.currentTimeMillis()-start) + "ms");
 	}	//	autoSize
-
+
+	
+	/**
+	 * Determines if the row is marked selected in the key column. The table 
+	 * selection status (highlight) is not considered.
+	 * @param row
+	 * @return true if the row is marked selected in the key column
+	 */
+	public boolean isRowChecked(int row)
+	{
+		int keyColumn = this.getKeyColumnIndex();
+		
+		if (keyColumn < 0)
+			return false;
+		
+		//  The selection can be indicated by an IDColumn or Boolean in the keyColumn position
+		Object data = getValueAt(row, convertColumnIndexToView(keyColumn)); 
+		if (data instanceof IDColumn)
+			return ((IDColumn) data).isSelected();
+		else if (data instanceof Boolean)
+			return (Boolean) data;
+
+		return	false;
+	}
 
 	/**
 	 *  Is Cell Editable
-	 *  @param row row
-	 *  @param column column
-	 *  @return true if editable
+	 *  @param row view row
+	 *  @param column view column
+	 *  @return true if read-write
 	 */
 	public boolean isCellEditable(int row, int column)
 	{
-		//  if the first column is a boolean and it is false, it is not editable
-		if (column != 0
-				&& getValueAt(row, 0) instanceof Boolean
-				&& !((Boolean)getValueAt(row, 0)).booleanValue())
-			return false;
-
-		//  is the column RW?
-		if (m_readWriteColumn.contains(new Integer(column)))
-			return true;
+		//  The column has to be read-write and the row has to be selected 
+		//  in order for the cell to be editable.
+		
+		int modelColumn = convertColumnIndexToModel(column);
+		
+		if ((modelColumn == 0 && this.getValueAt(row,column) instanceof Boolean) || isRowChecked(row))
+		{
+			//  is the column RW?
+			if (m_readWriteColumn.contains(new Integer(modelColumn)))
+				return true;
+		}		
 		return false;
 	}   //  isCellEditable
 
@@ -260,7 +600,7 @@
 		String from, String where, boolean multiSelection, String tableName)
 	{
 		m_layout = layout;
-		m_multiSelection = multiSelection;
+		setMultiSelection(multiSelection);
 		//
 		StringBuffer sql = new StringBuffer ("SELECT ");
 		//  add columns & sql
@@ -357,22 +697,28 @@
 		//  ID Column & Selection
 		if (c == IDColumn.class)
 		{
-			tc.setCellRenderer(new IDColumnRenderer(m_multiSelection));
-			if (m_multiSelection)
+			tc.setCellRenderer(new IDColumnRenderer(isMultiSelection()));
+			if (isMultiSelection())
 			{
 				tc.setCellEditor(new IDColumnEditor());
-				setColumnReadOnly(index, false);
 			}
 			else
 			{
 				tc.setCellEditor(new ROCellEditor());
 			}
-			m_minWidth.add(new Integer(10));
-			tc.setMaxWidth(20);
-			tc.setPreferredWidth(20);
-			tc.setResizable(false);
-			
-			tc.setHeaderRenderer(new VHeaderRenderer(DisplayType.Number));
+			m_minWidth.add(new Integer(10));
+			if (header == null ||  header.equals("") || header.equals(" "))
+			{
+				tc.setMaxWidth(20);
+				tc.setResizable(false);
+				tc.setHeaderRenderer(new VHeaderRenderer(DisplayType.Number));
+			}
+			else
+			{
+				tc.setHeaderRenderer(new VHeaderRenderer(DisplayType.String));
+				tc.setResizable(true);
+			}
+			tc.setPreferredWidth(20);
 		}
 		//  Boolean
 		else if (c == Boolean.class)
@@ -460,8 +806,9 @@
 			m_minWidth.add(new Integer(30));
 			
 			tc.setHeaderRenderer(new VHeaderRenderer(DisplayType.String));
-		}
-	//	log.fine( "Renderer=" + tc.getCellRenderer().toString() + ", Editor=" + tc.getCellEditor().toString());
+		}
+		
+		//	log.fine( "Renderer=" + tc.getCellRenderer().toString() + ", Editor=" + tc.getCellEditor().toString());
 	}   //  setColumnClass
 
 	/**
@@ -591,35 +938,68 @@
 		autoSize();
 		log.config("Row(array)=" + getRowCount());
 	}	//	loadTable
-	
-	
-	/**
-	 *  Get the key of currently selected row based on layout defined in prepareTable
-	 *  @return ID if key
-	 */
-	public Integer getSelectedRowKey()
-	{
-		if (m_layout == null)
-			throw new UnsupportedOperationException("Layout not defined");
+	/**
+	 * 	Set Model index of Key Column.
+	 *  Used for identifying previous selected row after fort complete to set as selected row.
+	 *  If not set, column 0 is used.
+	 * 	@param keyColumnIndex model index
+	 */
+	public void setKeyColumnIndex (int keyColumnIndex)
+	{
+		super.setKeyColumnIndex (keyColumnIndex);
+	}	//	setKeyColumnIndex
+
+	/**
+	 * 	Get Model index of Key Column
+	 *  @return model index
+	 */
+	public int getKeyColumnIndex()
+	{
+		return super.getKeyColumnIndex();
+	}	//	getKeyColumnIndex
 
-		int row = getSelectedRow();
-		if (row != -1 && p_keyColumnIndex != -1)
-		{
-			Object data = getModel().getValueAt(row, p_keyColumnIndex);
-			if (data instanceof IDColumn)
-				data = ((IDColumn)data).getRecord_ID();
-			if (data instanceof Integer)
-				return (Integer)data;
-		}
-		return null;
-	}   //  getSelectedRowKey
+	/**
+	 *  Get the key of a row based on layout defined in prepareTable
+	 *  @return ID if key
+	 */
+	public int getRowKey(int row)
+	{
+		if (getKeyColumnIndex() < 0)
+			throw new UnsupportedOperationException("Key Column is not defined");
+		
+		int rows = this.getRowCount();
+		
+		if (this.getShowTotals())
+			rows = rows - 1;
+
+		if (row >= 0 && row < rows)
+		{
+	        Object data = getValueAt(row, convertColumnIndexToView(getKeyColumnIndex())); //  Test
+			if (data instanceof IDColumn)
+			{
+				IDColumn id = (IDColumn)data;
+				return id.getRecord_ID().intValue();
+			}
+		}
+		return 0;
+	}   //  getRowKey
+
+	/**
+	 *  Get the key of currently selected row based on layout defined in prepareTable
+	 *  @return ID if key
+	 */
+	public Integer getSelectedRowKey()
+	{
+		int selectedRow = getSelectedRow();
+		return new Integer(getRowKey(selectedRow));
+	}   //  getSelectedRowKey
 
 	/**
 	 * @return collection of selected IDs
 	 */
-	public Collection<Integer> getSelectedKeys()
+	public ArrayList<Integer> getSelectedKeys()
 	{
-		if (m_layout == null)
+		if (getModel() == null)
 		{
 			throw new UnsupportedOperationException("Layout not defined");
 		}
@@ -643,6 +1023,17 @@
 		}
 		return list;
 	}
+
+	/**
+	 *  Get the record id of the lead (highlighted) row
+	 *  @return selected key
+	 */
+	public int getLeadRowKey()
+	{
+		int leadRow = getSelectionModel().getLeadSelectionIndex();		
+		return getRowKey(leadRow);
+		
+	}   //  getLeadRowKey
 
 	/**************************************************************************
 	 *  Get Layout
@@ -659,7 +1050,8 @@
 	 */
 	public void setMultiSelection (boolean multiSelection)
 	{
-		m_multiSelection = multiSelection;
+		m_multiSelection = multiSelection;
+		config_table(); //  Config for multi selection
 	}   //  setMultiSelection
 
 	/**
@@ -670,6 +1062,24 @@
 	{
 		return m_multiSelection;
 	}   //  isMultiSelection
+
+	/**
+	 * (for multi-selection only)
+	 * @param value true if double click should toggle record selection
+	 */
+	public void setDoubleClickTogglesSelection(boolean value)
+	{
+		p_doubleClickTogglesSelection = value;
+	}
+	
+	/**
+	 * (for multi-selection only)
+	 * @return true if double click should toggle record selection
+	 */
+	public boolean isDoubleClickTogglesSelection()
+	{
+		return p_doubleClickTogglesSelection;
+	}
 
 	/**
 	 *	Set the Column to determine the color of the row (based on model index)
@@ -680,6 +1090,25 @@
 		m_colorColumnIndex = modelIndex;
 	}   //  setColorColumn
 
+	/**
+	 * Specify if the records should be checked(selected) by default.
+	 * (for multi-selection only)
+	 * @param value
+	 */
+	public void setDefaultSelected(boolean value)
+	{
+		p_isDefaultSelected = value;
+	}
+	
+	/**
+	 * (for multi-selection only)
+	 * @return true if records are selected by default
+	 */
+	public boolean isDefaultSelected()
+	{
+		return p_isDefaultSelected;
+	}
+
 	/**
 	 *  Set ColorColumn comparison criteria
 	 *  @param dataCompare data
@@ -688,7 +1117,7 @@
 	{
 		m_colorDataCompare = dataCompare;
 	}   //
-
+
 	/**
 	 *	Get ColorCode for Row.
 	 *  <pre>
@@ -773,8 +1202,12 @@
 
 				for (int col = 0; col < layout.length; col++)
 				{
-					Object data = getModel().getValueAt(row, col);
-					Class<?> c = layout[col].getColClass();
+					int viewRow = convertRowIndexToView(row);
+					int viewCol = convertColumnIndexToView(col);
+					int modelRow = convertRowIndexToModel(row);
+					int modelCol = convertColumnIndexToModel(col);
+					Object data = getModel().getValueAt(modelRow, modelCol);
+					Class<?> c = layout[modelCol].getColClass();
 					if (c == BigDecimal.class)
 					{	
 						BigDecimal subtotal = Env.ZERO;
@@ -808,10 +1241,12 @@
 		//adding total row
 
 		int row = getRowCount() + 1;
+		boolean markerSet = false;
 		setRowCount(row);
 		for (int col = 0; col < layout.length; col++)
 		{
-			Class<?> c = layout[col].getColClass();
+			int modelCol = convertColumnIndexToModel(col);
+			Class<?> c = layout[modelCol].getColClass();
 			if (c == BigDecimal.class)
 			{	
 				setValueAt(total[col] , row - 1, col);
@@ -820,11 +1255,12 @@
 			{
 				setValueAt(total[col] , row -1 , col);
 			}
-			else
+			else 
 			{	
-				if(col == 0 )
+				if(c == String.class && !markerSet)
 				{	
 					setValueAt(" Σ  " , row -1 , col);
+					markerSet = true;
 				}	
 				else
 					setValueAt(null , row - 1, col );	
@@ -838,7 +1274,8 @@
 	 */
 	public void addTotals(Info_Column[] layout)
 	{
-		if (getRowCount() == 0 || layout.length == 0)
+		addTotals((ColumnInfo[]) layout);
+/*		if (getRowCount() == 0 || layout.length == 0)
 			return;
 		
 		Object[] total = new Object[layout.length];
@@ -848,8 +1285,12 @@
 
 				for (int col = 0; col < layout.length; col++)
 				{
-					Object data = getModel().getValueAt(row, col);
-					Class<?> c = layout[col].getColClass();
+					int viewRow = convertRowIndexToView(row);
+					int viewCol = convertColumnIndexToView(col);
+					int modelRow = convertRowIndexToModel(row);
+					int modelCol = convertColumnIndexToModel(col);
+					Object data = getModel().getValueAt(modelRow, modelCol);
+					Class<?> c = layout[modelCol].getColClass();
 					if (c == BigDecimal.class)
 					{	
 						BigDecimal subtotal = Env.ZERO;
@@ -883,10 +1324,12 @@
 		//adding total row
 
 		int row = getRowCount() + 1;
+		boolean markerSet = false;
 		setRowCount(row);
 		for (int col = 0; col < layout.length; col++)
 		{
-			Class<?> c = layout[col].getColClass();
+			int modelCol = convertColumnIndexToModel(col);
+			Class<?> c = layout[modelCol].getColClass();
 			if (c == BigDecimal.class)
 			{	
 				setValueAt(total[col] , row - 1, col);
@@ -897,14 +1340,597 @@
 			}
 			else
 			{	
-				if(col == 1 )
+				if(c == String.class && !markerSet)
 				{	
-					setValueAt(" Σ  " , row -1 , col );
+					setValueAt(" Σ  " , row -1 , col);
+					markerSet = true;
 				}	
 				else
 					setValueAt(null , row - 1, col );	
 			}	
 			
 		}
-	}
+		*/
+	}
+	
+	private void config_table()
+	{
+		//  The child class has to setup the behaviour of the ENTER key.  Default is to ignore it.
+		//  Change behaviour for multi-selection
+		if(isMultiSelection())
+		{
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl A"), "doSelectAll");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl UP"), "doChangeLeadUp");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl KP_UP"), "doChangeLeadUp");
+			this.getInputMap().put(KeyStroke.getKeyStroke("shift UP"), "doAddRowUpExtend");
+			this.getInputMap().put(KeyStroke.getKeyStroke("shift KP_UP"), "doAddRowUpExtend");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl shift UP"), "doAddRowUp");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl shift KP_UP"), "doAddRowUp");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl DOWN"), "doChangeLeadDown");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl KP_DOWN"), "doChangeLeadDown");
+			this.getInputMap().put(KeyStroke.getKeyStroke("shift DOWN"), "doAddRowDownExtend");
+			this.getInputMap().put(KeyStroke.getKeyStroke("shift KP_DOWN"), "doAddRowDownExtend");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl shift DOWN"), "doAddRowDown");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl shift KP_DOWN"), "doAddRowDown");
+		}
+		else
+		{
+			this.getInputMap().put(KeyStroke.getKeyStroke("ENTER"), "doNothing");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl A"), "doNothing");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl UP"), "doSelectRowUp");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl KP_UP"), "doSelectRowUp");
+			this.getInputMap().put(KeyStroke.getKeyStroke("shift UP"), "doSelectRowUp");
+			this.getInputMap().put(KeyStroke.getKeyStroke("shift KP_UP"), "doSelectRowUp");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl shift UP"), "doSelectRowUp");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl shift KP_UP"), "doSelectRowUp");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl DOWN"), "doSelectRowDown");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl KP_DOWN"), "doSelectRowDown");
+			this.getInputMap().put(KeyStroke.getKeyStroke("shift DOWN"), "doSelectRowDown");
+			this.getInputMap().put(KeyStroke.getKeyStroke("shift KP_DOWN"), "doSelectRowDown");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl shift DOWN"), "doSelectRowDown");
+			this.getInputMap().put(KeyStroke.getKeyStroke("ctrl shift KP_DOWN"), "doSelectRowDown");			
+		}
+
+	}
+
+	public TableCellRenderer getCellRenderer(int row, int column)
+	{
+		Object editorClass = null;
+		try {
+			editorClass = this.getColumnModel().getColumn(column).getCellEditor().getClass();
+		} catch (Exception e) {}  //  Possible NPE if the table was not setup properly.
+        boolean editable = this.isCellEditable(row, column);
+		if (editable && editorClass == MiniCellEditor.class)
+		{
+	        Color borderColor = AdempierePLAF.getFieldBackground_Mandatory();
+	        CompoundBorder cb = null;
+	        
+			//  Set the borders on the editor
+			MiniCellEditor jc = ((MiniCellEditor) this.getColumnModel().getColumn(column).getCellEditor());
+    		if (column == 0)
+    		{
+    			cb = new CompoundBorder(new EmptyBorder(new Insets(0,0,0,1)),new MatteBorder(1, 1, 1, 0, borderColor));
+    			jc.setBorder(cb);
+    		}
+    		else if (column == this.getColumnCount()-1)
+    		{
+    			cb = new CompoundBorder(new EmptyBorder(new Insets(0,1,0,0)),new MatteBorder(1, 0, 1, 1, borderColor));
+    			jc.setBorder(cb);
+    		}
+    		else
+    		{
+    			cb = new CompoundBorder(new EmptyBorder(new Insets(0,1,0,1)),new MatteBorder(1, 0, 1, 0, borderColor));
+    			jc.setBorder(cb);
+    		}
+		}
+		return super.getCellRenderer(row, column);
+	}
+	
+    //  Determine editor to be used by row
+    public TableCellEditor getCellEditor(int row, int column)
+    {        
+    	return super.getCellEditor(row, column);   
+    }
+
+	public Component prepareRenderer(
+            TableCellRenderer renderer, int row, int column)
+    {
+
+        int modelColumn = convertColumnIndexToModel(column);
+        int modelRow = convertRowIndexToModel(row);
+
+        Component c = super.prepareRenderer(renderer, row, column);
+        JComponent jc = (JComponent)c;
+        if (c==null) return c;
+        
+        //  Row is selected
+        Color selectedColor = AdempierePLAF.getFieldBackground_Selected();
+        //  Even row
+        Color normalColor = AdempierePLAF.getFieldBackground_Normal();
+        //  Odd row
+        Color backColor = AdempierePLAF.getInfoBackground();
+        //  Lead row border
+        Color borderColor = AdempierePLAF.getFieldBackground_Mandatory();
+        
+        CompoundBorder cb = null;
+
+        ListSelectionModel rsm = this.getSelectionModel();
+        boolean readOnly = !this.isCellEditable(row, column);
+        if (!(row == rsm.getLeadSelectionIndex()))
+        {
+        	if (rsm.isSelectedIndex(row)) //  Highlighted but not the lead
+        	{
+        		c.setBackground(selectedColor);
+        		jc.setBorder(new MatteBorder(1, 1, 1, 1, selectedColor) );
+        	}
+        	else if (row % 2 == 0)  //  Not selected but even in number
+    		{ 
+    			c.setBackground(normalColor);
+        		jc.setBorder(new MatteBorder(1, 1, 1, 1, normalColor) );
+    		} 
+    		else  //  Not selected and odd in number
+    		{
+    			// If not shaded, match the table's background
+    			c.setBackground(backColor);
+        		jc.setBorder(new MatteBorder(1, 1, 1, 1, backColor) );
+    		}
+        	
+        	//  Buttons and checkboxes need to have the border turned on
+        	if (c.getClass().equals(JCheckBox.class))
+        	{
+        		((JCheckBox) c).setBorderPainted(false);
+        	}
+        	else if (c.getClass().equals(JButton.class))
+        	{
+        		((JButton) c).setBorderPainted(false);
+        	}
+
+        }
+        else
+        {
+        	if (c.getClass().equals(JCheckBox.class))
+        	{
+        		((JCheckBox) c).setBorderPainted(true);
+        	}
+        	else if (c.getClass().equals(JButton.class))
+        	{
+        		((JButton) c).setBorderPainted(true);
+        	}
+        	
+        	//  Define border - compond border maintains the spacing of 1px around the field
+    		if (column == 0)
+    		{
+    			cb = new CompoundBorder(new EmptyBorder(new Insets(0,0,0,1)),new MatteBorder(1, 1, 1, 0, borderColor));
+    		}
+    		else if (column == this.getColumnCount()-1)
+    		{
+    			cb = new CompoundBorder(new EmptyBorder(new Insets(0,1,0,0)),new MatteBorder(1, 0, 1, 1, borderColor));
+    		}
+    		else
+    		{
+    			cb = new CompoundBorder(new EmptyBorder(new Insets(0,1,0,1)),new MatteBorder(1, 0, 1, 0, borderColor));
+    		}
+			//  Set border
+    		jc.setBorder(cb);
+    		//  Set background color
+    		if (!readOnly &&  this.isRowChecked(row))
+    			c.setBackground(normalColor);
+    		else
+    			c.setBackground(selectedColor);        			
+        }
+
+        return c;
+    }	
+
+	/**
+     * Performs the action.
+     * @param e
+     * @param actionName determines which action to perform
+     * @param dy the number of rows over which to perform the action.
+     */
+    private void doAction(ActionEvent e, String actionName, int dy)
+    {
+        int leadRow = 0;
+        
+        MiniTable table = (MiniTable)e.getSource();
+
+        if (table.getRowCount() <= 0 || table.getColumnCount() <= 0) 
+        {
+            // bail - don't try to move selection on an empty table
+            return;
+        }
+        
+        ListSelectionModel rsm = table.getSelectionModel();
+        int index = rsm.getLeadSelectionIndex();
+        int compare = table.getRowCount();
+        
+        if(table.getShowTotals())
+        	compare = compare -1;
+        index = index < compare ? index : -1;
+
+        if (dy != 0) 
+        {
+        	if (dy < 0) // Up
+        	{
+        		//  Check limit at the top
+        		leadRow = Math.min(Math.max(index+dy, 0), index);
+        	}
+        	else if (dy > 0)  // Down
+        	{
+        		//  Check the limit at the bottom
+                leadRow = Math.min(Math.max(index+dy, 0), compare-1);        		
+        	}
+        	
+        	if (actionName.equals("SelectRowUp") ||
+    			actionName.equals("SelectRowDown"))
+        	{
+        		rsm.clearSelection();
+        		rsm.addSelectionInterval(leadRow, leadRow);
+        		matchCheckWithSelectedRows();
+        	}
+        	else if (actionName.equals("AddRowUp") ||
+    				 actionName.equals("AddRowDown"))
+        	{
+        		// Determine if the focused row is selected
+	            Object data = table.getValueAt(index, table.convertColumnIndexToView(getKeyColumnIndex())); //  Test the first row
+				if (data instanceof IDColumn)
+				{
+					IDColumn id = (IDColumn)data;
+					
+					rsm.addSelectionInterval(index, leadRow);	
+					setRowChecked(index,true);
+					setRowChecked(leadRow,true);	
+	            }
+        	}
+        	else if (actionName.equals("AddRowUpExtend") ||
+        			 actionName.equals("AddRowDownExtend"))
+        	{
+            	table.changeSelection(index, 0, false, true);
+            	table.changeSelection(leadRow, 0, false, true);
+            	matchCheckWithSelectedRows();        		
+        	}
+        	else if (actionName.equals("ChangeLeadUp") ||
+        			 actionName.equals("ChangeLeadDown"))
+        	{
+				// Determine if the focused row is selected
+				if(isRowChecked(index))
+				{
+					rsm.addSelectionInterval(index, index);		//  Select the original row			
+				}
+				else if(!isRowChecked(index) && table.isRowSelected(index))
+				{
+					rsm.removeSelectionInterval(index, index);
+				}
+            	((DefaultListSelectionModel) rsm).moveLeadSelectionIndex(leadRow);        		
+        	}
+        }
+        
+        Rectangle cellRect = table.getCellRect(leadRow, 0, false);
+        if (cellRect != null) {
+            table.scrollRectToVisible(cellRect);
+        }
+    }
+
+
+    private Action doNothing = new AbstractAction() {
+        public void actionPerformed(ActionEvent e) {
+        	//log.fine("Doing Nothing!!");
+            //do nothing
+        }
+    };
+
+    private Action doSelectAll = new AbstractAction() {
+        public void actionPerformed(ActionEvent e) {
+          
+        	int leadRow = 0;
+            
+            MiniTable table = (MiniTable)e.getSource();
+
+            if (table.getRowCount() <= 0 || table.getColumnCount() <= 0) 
+            {
+                // bail - don't try to move selection on an empty table
+                return;
+            }
+            
+            ListSelectionModel rsm = table.getSelectionModel();
+            int index = 0;
+            int compare = table.getRowCount();
+            
+            if(table.getShowTotals())
+            	compare = compare -1;
+
+            leadRow = compare-1;        		
+            	    					
+			rsm.addSelectionInterval(index, leadRow);
+			matchCheckWithSelectedRows();        		
+			((DefaultListSelectionModel) rsm).moveLeadSelectionIndex(index);
+            
+            Rectangle cellRect = table.getCellRect(index, 0, false);
+            if (cellRect != null) {
+                table.scrollRectToVisible(cellRect);
+            }
+        }
+    };
+
+    private Action doSelectRowDown = new AbstractAction() {
+        public void actionPerformed(ActionEvent e) 
+        {
+        	int dy = 1;       
+        	String actionName = "SelectRowDown";
+            doAction(e, actionName, dy);
+        }
+    };
+
+    private Action doSelectRowUp = new AbstractAction() {
+        public void actionPerformed(ActionEvent e) 
+        {
+            int dy = -1;
+        	String actionName = "SelectRowUp";
+            doAction(e, actionName, dy);
+        }            
+    };
+
+    private Action doAddRowUp = new AbstractAction() {
+        public void actionPerformed(ActionEvent e) 
+        {        	
+        	int dy = -1;
+            String actionName = "AddRowUp";
+            doAction(e, actionName, dy);
+        }
+    };
+    
+    private Action doAddRowDown = new AbstractAction() {
+        public void actionPerformed(ActionEvent e) {
+            int dy = 1;
+            String actionName = "AddRowDown";
+            doAction(e, actionName, dy);
+        }
+    };
+
+    private Action doAddRowUpExtend = new AbstractAction() {
+        public void actionPerformed(ActionEvent e) 
+        {
+            int dy = -1;
+            String actionName = "AddRowUpExtend";
+            doAction(e, actionName, dy);
+        }
+    };
+    
+    private Action doAddRowDownExtend = new AbstractAction() {
+        public void actionPerformed(ActionEvent e) {
+            int dy = 1;
+            String actionName = "AddRowDownExtend";
+            doAction(e, actionName, dy);            
+        }
+    };
+
+    private Action doChangeLeadUp = new AbstractAction() {
+        public void actionPerformed(ActionEvent e) 
+        {
+            int dy = -1;
+            String actionName = "ChangeLeadUp";
+            doAction(e, actionName, dy);            
+        }
+    };
+
+    private Action doChangeLeadDown = new AbstractAction() {
+        public void actionPerformed(ActionEvent e) 
+        {
+            int dy = 1;
+            String actionName = "ChangeLeadDown";
+            doAction(e, actionName, dy);            
+        }
+    };
+
+    protected Action doMatchIdToSelection = new AbstractAction() {
+    	
+    	//  General approach copied from BasicTableUI.java
+        public void actionPerformed(ActionEvent e) {
+        	matchCheckWithSelectedRows();
+        }
+    };
+
+    protected Action doToggleID = new AbstractAction() {
+    	
+    	public void actionPerformed(ActionEvent e) {
+        	toggleLeadRowChecked();
+        }
+    };
+
+    protected Action doToggleBySelection = new AbstractAction() {
+    	
+    	public void actionPerformed(ActionEvent e) {
+        	toggleRowCheckedBySelection();
+        }
+    };
+
+    /**
+     * Match the row check with the row selection (highlight) in the table
+     */
+    public void matchCheckWithSelectedRows() {
+
+    	int rows = this.getRowCount();
+
+		if (this.getShowTotals())
+			rows = rows - 1;
+
+    	if (rows <= 0)
+    		return;
+
+		// Check if the lead row is selected, if not, select it
+		ListSelectionModel rsm = this.getSelectionModel();
+		int leadRow = rsm.getLeadSelectionIndex();
+		if ((leadRow >=0 && leadRow < rows && !rsm.isSelectedIndex(leadRow)))
+		{
+			if (isMultiSelection())
+				rsm.addSelectionInterval(leadRow, leadRow);
+			else
+				rsm.setSelectionInterval(leadRow, leadRow);
+		}
+		
+		//  In case
+		if (this.getShowTotals())
+		{
+			int totalRow = this.getRowCount()-1;
+			if (rsm.isSelectedIndex(totalRow))
+				rsm.removeIndexInterval(totalRow, totalRow);
+		}
+		//  Set the id column to match the selection
+		int selectedRows[] = this.getSelectedRows();
+		
+		if (selectedRows.length < rows) //  Not everything is selected
+		{
+			//  Deselect everything
+			for (int row = 0; row < rows; row++)
+			{
+				setRowChecked(row, false);
+			}
+		}
+		//  Set the selected rows
+		for (int row : selectedRows)
+		{
+			setRowChecked(row, true);
+		}
+	}
+
+    /**
+     * Toggles the selection checkbox of the current lead row. Adds or removes the lead row from
+     * the selection accordingly.  
+     */
+    private void toggleLeadRowChecked() {
+
+    	// Check if the lead row is selected, if not, select it
+		ListSelectionModel rsm = this.getSelectionModel();
+		int leadRow = rsm.getLeadSelectionIndex();
+		if (leadRow == -1)
+			return;
+
+		//  Toggle
+		setRowChecked(leadRow, !isRowChecked(leadRow));
+		if (isRowChecked(leadRow))
+		{
+			if (isMultiSelection())
+				rsm.addSelectionInterval(leadRow, leadRow);
+			else
+				rsm.setSelectionInterval(leadRow, leadRow);
+		}
+		else
+		{
+			rsm.removeSelectionInterval(leadRow, leadRow);
+			rsm.setLeadSelectionIndex(leadRow);
+		}
+	}
+
+    /**
+     * Toggles the selection checkbox of the given row. Adds or removes the row from
+     * the selection accordingly.
+     * @param row - the row in the view to toggle  
+     */
+    private void toggleRowChecked(int row) {
+
+    	//  Range check
+		int rows = this.getRowCount();
+		if(this.getShowTotals())
+			rows = rows - 1;		
+		if (row < 0 || row >= rows)
+			return;
+
+		ListSelectionModel rsm = this.getSelectionModel();
+
+		//  Toggle
+    	setRowChecked(row, !isRowChecked(row));
+		if (isRowChecked(row))
+		{
+			if (isMultiSelection())
+				rsm.addSelectionInterval(row, row);
+			else
+				rsm.setSelectionInterval(row, row);
+		}
+		else
+		{
+			rsm.removeSelectionInterval(row, row);
+		}
+	}
+
+    /**
+     * Toggles the selection checkbox of a range or rows. Adds or removes the rows from
+     * the selection accordingly.
+     * @param index0 - one end of the range
+     * @param index1 - the other end of the range. Can be less than, equal or greater than index0.
+     */
+    private void toggleRowCheckedRange(int index0, int index1) {
+		if (isMultiSelection())
+		{
+			if (getKeyColumnIndex() >= 0)
+			{
+				int rows = this.getRowCount();
+				if(this.getShowTotals())
+					rows = rows - 1;
+				
+				if (index0 < 0 || index0 >= rows || index1 < 0 || index1 >= rows)
+					return;
+
+				ListSelectionModel rsm = this.getSelectionModel();
+				int leadRow = rsm.getLeadSelectionIndex();
+
+				int low = index0 <= index1 ? index0 : index1;
+				int high = index0 <= index1 ? index1 : index0;
+				
+				for (int row = low; row <= high; row++)
+				{
+					toggleRowChecked(row);
+				}
+				//  Return the lead to its original location
+				rsm.setLeadSelectionIndex(leadRow);
+			}
+		}
+	}
+
+    /**
+     * Toggles the ID selection of the selected rows.  Multi-selection only.
+     */
+    private void toggleRowCheckedBySelection() {
+		if (isMultiSelection())
+		{
+			ListSelectionModel rsm = this.getSelectionModel();
+			int leadRow = rsm.getLeadSelectionIndex();
+			
+			int[] selectedRows = this.getSelectedRows();
+			for (int row : selectedRows)
+			{
+				toggleRowChecked(row);
+			}
+			//  Return the lead to its original location
+			rsm.setLeadSelectionIndex(leadRow);
+		}
+	}
+
+    /**
+     * If the table row has a IDColumn or a boolean checkbox in the KeyColumnIndex
+     * this function will set the checkbox according to the setValue parameter
+     * @param row - the view row
+     * @param setValue - the checkbox value to set 
+     */
+    public void setRowChecked(int row, boolean setValue)
+    {   	
+        //  The key column will be defined or zero by default.
+    	//  Check the class of the data in the cell to verify if 
+    	//  it is a selection column.  Selection columns can be
+    	//  of type IDColumn or Boolean.
+    	Object data = this.getValueAt(row, this.convertColumnIndexToView(getKeyColumnIndex()));
+		if (data instanceof IDColumn)
+		{
+			IDColumn id = (IDColumn)data;
+			id.setSelected(setValue);
+		}
+		else if (data instanceof Boolean)
+		{
+			data = setValue;
+		}
+		else return;
+		
+		this.setValueAt(data, row, this.convertColumnIndexToView(getKeyColumnIndex()));
+
+    }
+
 }   //  MiniTable
diff -r 09ae44c5cfa6 -r 26ba5a018866 client/src/org/compiere/print/Viewer.java
--- a/client/src/org/compiere/print/Viewer.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/client/src/org/compiere/print/Viewer.java	Mon Feb 10 21:08:53 2014 -0500
@@ -151,6 +151,7 @@
 		super(gc);
 		log.info("");
 		m_WindowNo = Env.createWindowNo(this);
+		Env.setContext(re.getCtx(), m_WindowNo, "_WinInfo_IsReportViewer", "Y");
 		m_reportEngine = re;
 		m_AD_Table_ID = re.getPrintFormat().getAD_Table_ID();
 		if (!MRole.getDefault().isCanReport(m_AD_Table_ID))
@@ -459,7 +460,7 @@
 	/**
 	 * 	Revalidate settings after change of environment
 	 */
-	private void revalidate()
+	public void revalidate()
 	{
 		m_pageMax = m_viewPanel.getPageCount();
 		spinnerModel.setMaximum(new Integer(m_pageMax));
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/mysql/812_ADEMPIERE-72_Add_messages_mysql.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/mysql/812_ADEMPIERE-72_Add_messages_mysql.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,110 @@
+-- Apr 23, 2012 1:35:17 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_SysConfig (AD_Client_ID,AD_Org_ID,AD_SysConfig_ID,ConfigurationLevel,Created,CreatedBy,Description,EntityType,IsActive,Name,Updated,UpdatedBy,Value) VALUES (0,0,1000005,'C',TO_DATE('2012-04-23 13:35:17','YYYY-MM-DD HH24:MI:SS'),0,'Info Windows - is the query performed automatically (Y) or does the user have to click the Refresh button.','U','Y','INFO_AUTO_QUERY',TO_DATE('2012-04-23 13:35:17','YYYY-MM-DD HH24:MI:SS'),0,'N')
+;
+
+-- Apr 23, 2012 1:39:31 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_SysConfig (AD_Client_ID,AD_Org_ID,AD_SysConfig_ID,ConfigurationLevel,Created,CreatedBy,Description,EntityType,IsActive,Name,Updated,UpdatedBy,Value) VALUES (0,0,1000006,'S',TO_DATE('2012-04-23 13:39:31','YYYY-MM-DD HH24:MI:SS'),0,'Determines the wild card pattern to apply to search text as none, first, last or both.  The percent sign "%" is the wildcard.  The astrixs could be any text.  "*%" is the default - last only. * - is none.  %* is first only.  %*%, % or %% is both.','U','Y','INFO_AUTO_WILDCARD',TO_DATE('2012-04-23 13:39:31','YYYY-MM-DD HH24:MI:SS'),0,'*%')
+;
+
+-- Apr 23, 2012 1:43:39 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000001,0,TO_DATE('2012-04-23 13:43:39','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Expected Change','The expected change or delta in the amount.','I',TO_DATE('2012-04-23 13:43:39','YYYY-MM-DD HH24:MI:SS'),0,'ExpectedChange')
+;
+
+-- Apr 23, 2012 1:43:39 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000001 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:45:27 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000002,0,TO_DATE('2012-04-23 13:45:27','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Only Stock',null,'I',TO_DATE('2012-04-23 13:45:27','YYYY-MM-DD HH24:MI:SS'),0,'OnlyStock')
+;
+
+-- Apr 23, 2012 1:45:27 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000002 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:46:36 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000003,0,TO_DATE('2012-04-23 13:46:36','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','If selected, only display stocked items. Otherwise, display all items.','If selected, only display stocked items. Otherwise, display all items.','I',TO_DATE('2012-04-23 13:46:36','YYYY-MM-DD HH24:MI:SS'),0,'OnlyStockTip')
+;
+
+-- Apr 23, 2012 1:46:36 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000003 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:48:39 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000004,0,TO_DATE('2012-04-23 13:48:39','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Auto Refresh',null,'I',TO_DATE('2012-04-23 13:48:39','YYYY-MM-DD HH24:MI:SS'),0,'AutoRefresh')
+;
+
+-- Apr 23, 2012 1:48:39 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000004 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:50:21 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000005,0,TO_DATE('2012-04-23 13:50:21','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Show Detail',null,'I',TO_DATE('2012-04-23 13:50:21','YYYY-MM-DD HH24:MI:SS'),0,'ShowDetail')
+;
+
+-- Apr 23, 2012 1:50:21 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000005 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:51:22 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000006,0,TO_DATE('2012-04-23 13:51:22','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Show Attribute Details',null,'I',TO_DATE('2012-04-23 13:51:22','YYYY-MM-DD HH24:MI:SS'),0,'ShowAttributeDetails')
+;
+
+-- Apr 23, 2012 1:51:22 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000006 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:53:35 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000007,0,TO_DATE('2012-04-23 13:53:35','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Contact and Address Information',null,'I',TO_DATE('2012-04-23 13:53:35','YYYY-MM-DD HH24:MI:SS'),0,'ContactAndAddress')
+;
+
+-- Apr 23, 2012 1:53:35 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000007 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 2:03:33 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000008,0,TO_DATE('2012-04-23 14:03:33','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Only Receipts',null,'I',TO_DATE('2012-04-23 14:03:33','YYYY-MM-DD HH24:MI:SS'),0,'OnlyReceipt')
+;
+
+-- Apr 23, 2012 2:03:33 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000008 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 2:04:26 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000009,0,TO_DATE('2012-04-23 14:04:26','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Only AP Payments',null,'I',TO_DATE('2012-04-23 14:04:26','YYYY-MM-DD HH24:MI:SS'),0,'OnlyPayment')
+;
+
+-- Apr 23, 2012 2:04:26 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000009 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Aug 15, 2013 7:23:34 AM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000010,0,TO_DATE('2013-08-15 07:23:34','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Received','I',TO_DATE('2013-08-15 07:23:34','YYYY-MM-DD HH24:MI:SS'),0,'Received')
+;
+
+-- Aug 15, 2013 7:23:34 AM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000010 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/mysql/813_AddM_Product_ID_to_M_Product_Stock_V.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/mysql/813_AddM_Product_ID_to_M_Product_Stock_V.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,15 @@
+-- View: adempiere.m_product_stock_v
+
+DROP VIEW adempiere.m_product_stock_v;
+
+CREATE OR REPLACE VIEW adempiere.m_product_stock_v AS 
+ SELECT ms.isactive, ms.created, ms.createdby, ms.updated, ms.updatedby, mp.m_product_id, mp.value, mp.help, ms.qtyonhand - ms.qtyreserved AS qtyavailable, ms.qtyonhand, ms.qtyreserved, mp.description, mw.name AS warehouse, mw.m_warehouse_id, mw.ad_client_id, mw.ad_org_id, mp.documentnote
+   FROM adempiere.m_storage ms
+   JOIN adempiere.m_product mp ON ms.m_product_id = mp.m_product_id
+   JOIN adempiere.m_locator ml ON ms.m_locator_id = ml.m_locator_id
+   JOIN adempiere.m_warehouse mw ON ml.m_warehouse_id = mw.m_warehouse_id
+  ORDER BY mw.name;
+
+ALTER TABLE adempiere.m_product_stock_v
+  OWNER TO adempiere;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/mysql/814_ADEMPIERE-72_Adding_SysConfig_Settings_mysql.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/mysql/814_ADEMPIERE-72_Adding_SysConfig_Settings_mysql.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,13 @@
+-- Mar 16, 2013 9:17:30 AM EDT
+
+-- Mar 16, 2013 9:20:23 AM EDT
+-- ADEMPIERE-72 Adding System Configuration for Info Panel changes
+INSERT INTO AD_SysConfig (AD_Client_ID,AD_Org_ID,AD_SysConfig_ID,ConfigurationLevel,Created,CreatedBy,Description,EntityType,IsActive,Name,Updated,UpdatedBy,Value) VALUES (0,0,1000000,'S',TO_DATE('2013-03-16 09:20:23','YYYY-MM-DD HH24:MI:SS'),0,'Determines whether info panels auto query by default','D','Y','INFO_AUTO_QUERY',TO_DATE('2013-03-16 09:20:23','YYYY-MM-DD HH24:MI:SS'),0,'Y')
+;
+
+
+-- Mar 16, 2013 9:22:56 AM EDT
+-- ADEMPIERE-72 Adding System Configuration for Info Panel changes
+INSERT INTO AD_SysConfig (AD_Client_ID,AD_Org_ID,AD_SysConfig_ID,ConfigurationLevel,Created,CreatedBy,Description,EntityType,IsActive,Name,Updated,UpdatedBy,Value) VALUES (0,0,1000001,'S',TO_DATE('2013-03-16 09:22:56','YYYY-MM-DD HH24:MI:SS'),0,'Determines the wildcard defaults.  Can be %*, *% or %*%.  The % wildcard will be added to the search by default as indicated.','D','Y','INFO_AUTO_WILDCARD',TO_DATE('2013-03-16 09:22:56','YYYY-MM-DD HH24:MI:SS'),0,'%*%')
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/mysql/816_ADEMPIERE-72_Add_data_to_default_database_mysql.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/mysql/816_ADEMPIERE-72_Add_data_to_default_database_mysql.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,45 @@
+-- Mar 16, 2013 12:11:37 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE M_Product SET Description='Azaleas are flowering shrubs. Azaleas bloom in spring in the Northern hemisphere and in winter in the Southern hemisphere, their flowers often lasting several weeks. Shade tolerant, they prefer living near or under trees.',Updated=TO_DATE('2013-03-16 12:11:37','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=101 WHERE M_Product_ID=128
+;
+
+-- Mar 16, 2013 12:11:37 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE M_Product_Trl SET Description='Azaleas are flowering shrubs. Azaleas bloom in spring in the Northern hemisphere and in winter in the Southern hemisphere, their flowers often lasting several weeks. Shade tolerant, they prefer living near or under trees.',DocumentNote=NULL,Name='Azalea Bush',IsTranslated='Y' WHERE M_Product_ID=128
+;
+
+-- Mar 16, 2013 12:11:37 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE A_Asset SET Name=SUBSTR((SELECT bp.Name FROM C_BPartner bp WHERE bp.C_BPartner_ID=A_Asset.C_BPartner_ID) || ' - ' || p.Name,1,60),Description=p.Description FROM M_Product p WHERE p.M_Product_ID=A_Asset.M_Product_ID AND A_Asset.IsActive='Y' AND A_Asset.M_Product_ID=128
+;
+
+-- Mar 16, 2013 12:27:24 PM EDT
+-- Adding System Configuration for Info Panel changes
+INSERT INTO M_Substitute (AD_Client_ID,AD_Org_ID,Created,CreatedBy,IsActive,M_Product_ID,Name,Substitute_ID,Updated,UpdatedBy) VALUES (11,0,TO_DATE('2013-03-16 12:27:24','YYYY-MM-DD HH24:MI:SS'),101,'Y',129,'Azalea Bush',128,TO_DATE('2013-03-16 12:27:24','YYYY-MM-DD HH24:MI:SS'),101)
+;
+
+-- Mar 16, 2013 12:27:49 PM EDT
+-- Adding System Configuration for Info Panel changes
+INSERT INTO M_Substitute (AD_Client_ID,AD_Org_ID,Created,CreatedBy,IsActive,M_Product_ID,Name,Substitute_ID,Updated,UpdatedBy) VALUES (11,0,TO_DATE('2013-03-16 12:27:49','YYYY-MM-DD HH24:MI:SS'),101,'Y',128,'Holly Bush',129,TO_DATE('2013-03-16 12:27:49','YYYY-MM-DD HH24:MI:SS'),101)
+;
+
+-- Mar 16, 2013 12:28:55 PM EDT
+-- Adding System Configuration for Info Panel changes
+(SELECT s.M_Product_ID, w.Name as warehouse, l.value as locator, 0 as ID, now() as Date, sum(s.QtyOnHand) as AvailQty, null as DeltaQty, null as QtyOrdered, null as QtyReserved, null as sumPASI, 0 as ASI, null as BP_Name, null as DocumentNo, 10 as SeqNo FROM (SELECT M_Product_ID, M_Locator_ID, QtyOnHand, QtyReserved, QtyOrdered, COALESCE(productAttribute(M_AttributeSetInstance_ID)::varchar, '') as PASI, COALESCE(M_AttributeSetInstance_ID,0) as M_AttributeSetInstance_ID FROM M_Storage) s INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID) INNER JOIN M_Warehouse w ON (l.M_Warehouse_ID=w.M_Warehouse_ID) WHERE s.M_Product_ID=? AND l.M_Warehouse_ID=? AND (s.QtyOnHand<>0) GROUP BY s.M_Product_ID, w.Name, l.value, s.M_Locator_ID, sumPASI, ASI, BP_Name, DocumentNo, SeqNo UNION ALL SELECT ol.M_Product_ID, w.Name as warehouse, null as locator, ol.M_AttributeSetInstance_ID as ID, o.DatePromised as date, null as AvailQty, CASE WHEN dt.DocBaseType = 'POO' THEN ol.QtyOrdered ELSE -ol.QtyReserved END as DeltaQty, CASE WHEN dt.DocBaseType = 'POO' THEN ol.QtyOrdered ELSE null END as QtyOrdered, CASE WHEN dt.DocBaseType = 'POO' THEN null ELSE ol.QtyReserved END as QtyReserved, productAttribute(ol.M_AttributeSetInstance_ID) as sumPASI, ol.M_AttributeSetInstance_ID as ASI, bp.Name as BP_Name, dt.PrintName || ' ' || o.DocumentNo As DocumentNo, 20 as SeqNo FROM C_Order o INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID) INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID) INNER JOIN M_Warehouse w ON (ol.M_Warehouse_ID=w.M_Warehouse_ID) INNER JOIN C_BPartner bp ON (o.C_BPartner_ID=bp.C_BPartner_ID) WHERE ol.QtyReserved<>0 AND ol.M_Product_ID=? AND ol.M_Warehouse_ID=? ORDER BY M_Product_ID, SeqNo, ID, date, locator)
+;
+
+-- Mar 16, 2013 12:30:14 PM EDT
+-- Adding System Configuration for Info Panel changes
+INSERT INTO M_RelatedProduct (AD_Client_ID,AD_Org_ID,Created,CreatedBy,IsActive,M_Product_ID,Name,RelatedProduct_ID,RelatedProductType,Updated,UpdatedBy) VALUES (11,0,TO_DATE('2013-03-16 12:30:14','YYYY-MM-DD HH24:MI:SS'),101,'Y',128,'Mulch will help it grow',137,'S',TO_DATE('2013-03-16 12:30:14','YYYY-MM-DD HH24:MI:SS'),101)
+;
+
+-- Mar 16, 2013 12:31:13 PM EDT
+-- Adding System Configuration for Info Panel changes
+INSERT INTO M_RelatedProduct (AD_Client_ID,AD_Org_ID,Created,CreatedBy,IsActive,M_Product_ID,Name,RelatedProduct_ID,RelatedProductType,Updated,UpdatedBy) VALUES (11,0,TO_DATE('2013-03-16 12:31:13','YYYY-MM-DD HH24:MI:SS'),101,'Y',128,'How To Plant',146,'S',TO_DATE('2013-03-16 12:31:13','YYYY-MM-DD HH24:MI:SS'),101)
+;
+
+-- Mar 16, 2013 12:38:31 PM EDT
+-- Adding System Configuration for Info Panel changes
+DELETE FROM M_RelatedProduct WHERE M_Product_ID=128 AND RelatedProduct_ID=129 AND RelatedProductType='A'
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/mysql/817_ADEMPIERE-72_Add_data_to_default_database_mysql.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/mysql/817_ADEMPIERE-72_Add_data_to_default_database_mysql.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,10 @@
+-- Mar 16, 2013 1:00:58 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE M_Substitute SET Name='Consider a Holly Bush',Updated=TO_DATE('2013-03-16 13:00:58','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=101 WHERE M_Product_ID=128 AND Substitute_ID=129
+;
+
+-- Mar 16, 2013 1:01:15 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE M_RelatedProduct SET Name='A book on How To Plant',Updated=TO_DATE('2013-03-16 13:01:15','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=101 WHERE M_Product_ID=128 AND RelatedProduct_ID=146 AND RelatedProductType='S'
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/oracle/809_796_FixProductBOMCore.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/oracle/809_796_FixProductBOMCore.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,9 @@
+-- May 13, 2011 5:57:53 PM COT
+-- iDempiere fixes on core BOM management
+UPDATE AD_Tab SET WhereClause=NULL, AD_Column_ID=53333, Parent_Column_ID=NULL,Updated=TO_DATE('2011-05-13 17:57:53','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Tab_ID=53286
+;
+
+-- May 13, 2011 5:58:09 PM COT
+UPDATE AD_Tab SET AD_Column_ID=53366,Updated=TO_DATE('2011-05-13 17:58:09','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Tab_ID=53287
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/oracle/810_792_FixDictionaryError.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/oracle/810_792_FixDictionaryError.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,4 @@
+-- Mar 29, 2011 2:31:13 PM COT
+-- Fix dictionary error - parent column not defined for AD_TreeBar
+UPDATE AD_Column SET IsParent='Y', IsUpdateable='N',Updated=TO_DATE('2011-03-29 14:31:13','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Column_ID=6213
+;
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/oracle/812_ADEMPIERE-72_Add_messages_oracle.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/oracle/812_ADEMPIERE-72_Add_messages_oracle.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,109 @@
+-- Apr 23, 2012 1:35:17 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_SysConfig (AD_Client_ID,AD_Org_ID,AD_SysConfig_ID,ConfigurationLevel,Created,CreatedBy,Description,EntityType,IsActive,Name,Updated,UpdatedBy,Value) VALUES (0,0,1000005,'C',TO_DATE('2012-04-23 13:35:17','YYYY-MM-DD HH24:MI:SS'),0,'Info Windows - is the query performed automatically (Y) or does the user have to click the Refresh button.','U','Y','INFO_AUTO_QUERY',TO_DATE('2012-04-23 13:35:17','YYYY-MM-DD HH24:MI:SS'),0,'N')
+;
+
+-- Apr 23, 2012 1:39:31 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_SysConfig (AD_Client_ID,AD_Org_ID,AD_SysConfig_ID,ConfigurationLevel,Created,CreatedBy,Description,EntityType,IsActive,Name,Updated,UpdatedBy,Value) VALUES (0,0,1000006,'S',TO_DATE('2012-04-23 13:39:31','YYYY-MM-DD HH24:MI:SS'),0,'Determines the wild card pattern to apply to search text as none, first, last or both.  The percent sign "%" is the wildcard.  The astrixs could be any text.  "*%" is the default - last only. * - is none.  %* is first only.  %*%, % or %% is both.','U','Y','INFO_AUTO_WILDCARD',TO_DATE('2012-04-23 13:39:31','YYYY-MM-DD HH24:MI:SS'),0,'*%')
+;
+
+-- Apr 23, 2012 1:43:39 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000001,0,TO_DATE('2012-04-23 13:43:39','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Expected Change','The expected change or delta in the amount.','I',TO_DATE('2012-04-23 13:43:39','YYYY-MM-DD HH24:MI:SS'),0,'ExpectedChange')
+;
+
+-- Apr 23, 2012 1:43:39 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000001 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:45:27 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000002,0,TO_DATE('2012-04-23 13:45:27','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Only Stock',null,'I',TO_DATE('2012-04-23 13:45:27','YYYY-MM-DD HH24:MI:SS'),0,'OnlyStock')
+;
+
+-- Apr 23, 2012 1:45:27 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000002 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:46:36 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000003,0,TO_DATE('2012-04-23 13:46:36','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','If selected, only display stocked items. Otherwise, display all items.','If selected, only display stocked items. Otherwise, display all items.','I',TO_DATE('2012-04-23 13:46:36','YYYY-MM-DD HH24:MI:SS'),0,'OnlyStockTip')
+;
+
+-- Apr 23, 2012 1:46:36 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000003 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:48:39 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000004,0,TO_DATE('2012-04-23 13:48:39','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Auto Refresh',null,'I',TO_DATE('2012-04-23 13:48:39','YYYY-MM-DD HH24:MI:SS'),0,'AutoRefresh')
+;
+
+-- Apr 23, 2012 1:48:39 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000004 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:50:21 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000005,0,TO_DATE('2012-04-23 13:50:21','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Show Detail',null,'I',TO_DATE('2012-04-23 13:50:21','YYYY-MM-DD HH24:MI:SS'),0,'ShowDetail')
+;
+
+-- Apr 23, 2012 1:50:21 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000005 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:51:22 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000006,0,TO_DATE('2012-04-23 13:51:22','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Show Attribute Details',null,'I',TO_DATE('2012-04-23 13:51:22','YYYY-MM-DD HH24:MI:SS'),0,'ShowAttributeDetails')
+;
+
+-- Apr 23, 2012 1:51:22 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000006 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:53:35 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000007,0,TO_DATE('2012-04-23 13:53:35','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Contact and Address Information',null,'I',TO_DATE('2012-04-23 13:53:35','YYYY-MM-DD HH24:MI:SS'),0,'ContactAndAddress')
+;
+
+-- Apr 23, 2012 1:53:35 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000007 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 2:03:33 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000008,0,TO_DATE('2012-04-23 14:03:33','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Only Receipts',null,'I',TO_DATE('2012-04-23 14:03:33','YYYY-MM-DD HH24:MI:SS'),0,'OnlyReceipt')
+;
+
+-- Apr 23, 2012 2:03:33 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000008 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 2:04:26 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000009,0,TO_DATE('2012-04-23 14:04:26','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Only AP Payments',null,'I',TO_DATE('2012-04-23 14:04:26','YYYY-MM-DD HH24:MI:SS'),0,'OnlyPayment')
+;
+
+-- Apr 23, 2012 2:04:26 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000009 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Aug 15, 2013 7:23:34 AM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000010,0,TO_DATE('2013-08-15 07:23:34','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Received','I',TO_DATE('2013-08-15 07:23:34','YYYY-MM-DD HH24:MI:SS'),0,'Received')
+;
+
+-- Aug 15, 2013 7:23:34 AM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000010 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/oracle/813_AddM_Product_ID_to_M_Product_Stock_V.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/oracle/813_AddM_Product_ID_to_M_Product_Stock_V.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,15 @@
+-- View: adempiere.m_product_stock_v
+
+DROP VIEW adempiere.m_product_stock_v;
+
+CREATE OR REPLACE VIEW adempiere.m_product_stock_v AS 
+ SELECT ms.isactive, ms.created, ms.createdby, ms.updated, ms.updatedby, mp.m_product_id, mp.value, mp.help, ms.qtyonhand - ms.qtyreserved AS qtyavailable, ms.qtyonhand, ms.qtyreserved, mp.description, mw.name AS warehouse, mw.m_warehouse_id, mw.ad_client_id, mw.ad_org_id, mp.documentnote
+   FROM adempiere.m_storage ms
+   JOIN adempiere.m_product mp ON ms.m_product_id = mp.m_product_id
+   JOIN adempiere.m_locator ml ON ms.m_locator_id = ml.m_locator_id
+   JOIN adempiere.m_warehouse mw ON ml.m_warehouse_id = mw.m_warehouse_id
+  ORDER BY mw.name;
+
+ALTER TABLE adempiere.m_product_stock_v
+  OWNER TO adempiere;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/oracle/814_ADEMPIERE-72_Adding_SysConfig_Settings_oracle.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/oracle/814_ADEMPIERE-72_Adding_SysConfig_Settings_oracle.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,10 @@
+-- Mar 16, 2013 9:17:30 AM EDT
+-- ADEMPIERE-72 Adding System Configuration for Info Panel changes
+INSERT INTO AD_SysConfig (AD_Client_ID,AD_Org_ID,AD_SysConfig_ID,ConfigurationLevel,Created,CreatedBy,Description,EntityType,IsActive,Name,Updated,UpdatedBy,Value) VALUES (0,0,1000000,'S',TO_DATE('2013-03-16 09:20:23','YYYY-MM-DD HH24:MI:SS'),0,'Determines whether info panels auto query by default','D','Y','INFO_AUTO_QUERY',TO_DATE('2013-03-16 09:20:23','YYYY-MM-DD HH24:MI:SS'),0,'Y')
+;
+
+-- Mar 16, 2013 9:22:56 AM EDT
+-- ADEMPIERE-72 Adding System Configuration for Info Panel changes
+INSERT INTO AD_SysConfig (AD_Client_ID,AD_Org_ID,AD_SysConfig_ID,ConfigurationLevel,Created,CreatedBy,Description,EntityType,IsActive,Name,Updated,UpdatedBy,Value) VALUES (0,0,1000001,'S',TO_DATE('2013-03-16 09:22:56','YYYY-MM-DD HH24:MI:SS'),0,'Determines the wildcard defaults.  Can be %*, *% or %*%.  The % wildcard will be added to the search by default as indicated.','D','Y','INFO_AUTO_WILDCARD',TO_DATE('2013-03-16 09:22:56','YYYY-MM-DD HH24:MI:SS'),0,'%*%')
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/oracle/816_ADEMPIERE-72_Add_data_to_default_database_oracle.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/oracle/816_ADEMPIERE-72_Add_data_to_default_database_oracle.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,45 @@
+-- Mar 16, 2013 12:11:37 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE M_Product SET Description='Azaleas are flowering shrubs. Azaleas bloom in spring in the Northern hemisphere and in winter in the Southern hemisphere, their flowers often lasting several weeks. Shade tolerant, they prefer living near or under trees.',Updated=TO_DATE('2013-03-16 12:11:37','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=101 WHERE M_Product_ID=128
+;
+
+-- Mar 16, 2013 12:11:37 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE M_Product_Trl SET Description='Azaleas are flowering shrubs. Azaleas bloom in spring in the Northern hemisphere and in winter in the Southern hemisphere, their flowers often lasting several weeks. Shade tolerant, they prefer living near or under trees.',DocumentNote=NULL,Name='Azalea Bush',IsTranslated='Y' WHERE M_Product_ID=128
+;
+
+-- Mar 16, 2013 12:11:37 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE A_Asset a SET (Name, Description)=(SELECT SUBSTR((SELECT bp.Name FROM C_BPartner bp WHERE bp.C_BPartner_ID=a.C_BPartner_ID) || ' - ' || p.Name,1,60), p.Description FROM M_Product p WHERE p.M_Product_ID=a.M_Product_ID) WHERE IsActive='Y'  AND M_Product_ID=128
+;
+
+-- Mar 16, 2013 12:27:24 PM EDT
+-- Adding System Configuration for Info Panel changes
+INSERT INTO M_Substitute (AD_Client_ID,AD_Org_ID,Created,CreatedBy,IsActive,M_Product_ID,Name,Substitute_ID,Updated,UpdatedBy) VALUES (11,0,TO_DATE('2013-03-16 12:27:24','YYYY-MM-DD HH24:MI:SS'),101,'Y',129,'Azalea Bush',128,TO_DATE('2013-03-16 12:27:24','YYYY-MM-DD HH24:MI:SS'),101)
+;
+
+-- Mar 16, 2013 12:27:49 PM EDT
+-- Adding System Configuration for Info Panel changes
+INSERT INTO M_Substitute (AD_Client_ID,AD_Org_ID,Created,CreatedBy,IsActive,M_Product_ID,Name,Substitute_ID,Updated,UpdatedBy) VALUES (11,0,TO_DATE('2013-03-16 12:27:49','YYYY-MM-DD HH24:MI:SS'),101,'Y',128,'Holly Bush',129,TO_DATE('2013-03-16 12:27:49','YYYY-MM-DD HH24:MI:SS'),101)
+;
+
+-- Mar 16, 2013 12:28:55 PM EDT
+-- Adding System Configuration for Info Panel changes
+(SELECT s.M_Product_ID, w.Name as warehouse, l.value as locator, 0 as ID, now() as Date, sum(s.QtyOnHand) as AvailQty, null as DeltaQty, null as QtyOrdered, null as QtyReserved, null as sumPASI, 0 as ASI, null as BP_Name, null as DocumentNo, 10 as SeqNo FROM (SELECT M_Product_ID, M_Locator_ID, QtyOnHand, QtyReserved, QtyOrdered, COALESCE(productAttribute(M_AttributeSetInstance_ID)::varchar, '') as PASI, COALESCE(M_AttributeSetInstance_ID,0) as M_AttributeSetInstance_ID FROM M_Storage) s  INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID) INNER JOIN M_Warehouse w ON (l.M_Warehouse_ID=w.M_Warehouse_ID) WHERE s.M_Product_ID=? AND l.M_Warehouse_ID=? AND (s.QtyOnHand<>0) GROUP BY s.M_Product_ID, w.Name, l.value, s.M_Locator_ID, sumPASI, ASI, BP_Name, DocumentNo, SeqNo UNION ALL SELECT ol.M_Product_ID, w.Name as warehouse, null as locator, ol.M_AttributeSetInstance_ID as ID, o.DatePromised as date, null as AvailQty, CASE WHEN dt.DocBaseType = 'POO' THEN ol.QtyOrdered ELSE -ol.QtyReserved END as DeltaQty, CASE WHEN dt.DocBaseType = 'POO' THEN ol.QtyOrdered ELSE null END as QtyOrdered, CASE WHEN dt.DocBaseType = 'POO' THEN null ELSE ol.QtyReserved END as QtyReserved, productAttribute(ol.M_AttributeSetInstance_ID) as sumPASI, ol.M_AttributeSetInstance_ID as ASI, bp.Name as BP_Name, dt.PrintName || ' ' || o.DocumentNo As DocumentNo, 20 as SeqNo FROM C_Order o INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID) INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID) INNER JOIN M_Warehouse w ON (ol.M_Warehouse_ID=w.M_Warehouse_ID) INNER JOIN C_BPartner bp  ON (o.C_BPartner_ID=bp.C_BPartner_ID) WHERE ol.QtyReserved<>0 AND ol.M_Product_ID=? AND ol.M_Warehouse_ID=? ORDER BY M_Product_ID, SeqNo, ID, date, locator)
+;
+
+-- Mar 16, 2013 12:30:14 PM EDT
+-- Adding System Configuration for Info Panel changes
+INSERT INTO M_RelatedProduct (AD_Client_ID,AD_Org_ID,Created,CreatedBy,IsActive,M_Product_ID,Name,RelatedProduct_ID,RelatedProductType,Updated,UpdatedBy) VALUES (11,0,TO_DATE('2013-03-16 12:30:14','YYYY-MM-DD HH24:MI:SS'),101,'Y',128,'Mulch will help it grow',137,'S',TO_DATE('2013-03-16 12:30:14','YYYY-MM-DD HH24:MI:SS'),101)
+;
+
+-- Mar 16, 2013 12:31:13 PM EDT
+-- Adding System Configuration for Info Panel changes
+INSERT INTO M_RelatedProduct (AD_Client_ID,AD_Org_ID,Created,CreatedBy,IsActive,M_Product_ID,Name,RelatedProduct_ID,RelatedProductType,Updated,UpdatedBy) VALUES (11,0,TO_DATE('2013-03-16 12:31:13','YYYY-MM-DD HH24:MI:SS'),101,'Y',128,'How To Plant',146,'S',TO_DATE('2013-03-16 12:31:13','YYYY-MM-DD HH24:MI:SS'),101)
+;
+
+-- Mar 16, 2013 12:38:31 PM EDT
+-- Adding System Configuration for Info Panel changes
+DELETE FROM M_RelatedProduct WHERE M_Product_ID=128 AND RelatedProduct_ID=129 AND RelatedProductType='A'
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/oracle/817_ADEMPIERE-72_Add_data_to_default_database_oracle.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/oracle/817_ADEMPIERE-72_Add_data_to_default_database_oracle.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,10 @@
+-- Mar 16, 2013 1:00:58 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE M_Substitute SET Name='Consider a Holly Bush',Updated=TO_DATE('2013-03-16 13:00:58','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=101 WHERE M_Product_ID=128 AND Substitute_ID=129
+;
+
+-- Mar 16, 2013 1:01:15 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE M_RelatedProduct SET Name='A book on How To Plant',Updated=TO_DATE('2013-03-16 13:01:15','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=101 WHERE M_Product_ID=128 AND RelatedProduct_ID=146 AND RelatedProductType='S'
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/oracle/820_FR3456545_sysconfig.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/oracle/820_FR3456545_sysconfig.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,5 @@
+-- Dec 10, 2011 10:29:30 PM EET
+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator
+INSERT INTO AD_SysConfig (AD_Client_ID,AD_Org_ID,AD_SysConfig_ID,ConfigurationLevel,Created,CreatedBy,Description,EntityType,IsActive,Name,Updated,UpdatedBy,Value) VALUES (0,0,50058,'S',TO_DATE('2011-12-10 22:29:29','YYYY-MM-DD HH24:MI:SS'),100,'Indicates which ZK ID Generator shall be used. Please note, this call should implement org.zkoss.zk.ui.sys.IdGenerator interface.','D','Y','org.adempiere.webui.IdGenerator',TO_DATE('2011-12-10 22:29:29','YYYY-MM-DD HH24:MI:SS'),100,'org.adempiere.webui.SahiIdGenerator')
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/postgresql/809_796_FixProductBOMCore.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/postgresql/809_796_FixProductBOMCore.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,9 @@
+-- May 13, 2011 5:57:53 PM COT
+-- iDempiere fixes on core BOM management
+UPDATE AD_Tab SET WhereClause=NULL, AD_Column_ID=53333, Parent_Column_ID=NULL,Updated=TO_TIMESTAMP('2011-05-13 17:57:53','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Tab_ID=53286
+;
+
+-- May 13, 2011 5:58:09 PM COT
+UPDATE AD_Tab SET AD_Column_ID=53366,Updated=TO_TIMESTAMP('2011-05-13 17:58:09','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Tab_ID=53287
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/postgresql/810_792_FixDictionaryError.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/postgresql/810_792_FixDictionaryError.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,4 @@
+-- Mar 29, 2011 2:31:13 PM COT
+-- Fix dictionary error - parent column not defined for AD_TreeBar
+UPDATE AD_Column SET IsParent='Y', IsUpdateable='N',Updated=TO_TIMESTAMP('2011-03-29 14:31:13','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=100 WHERE AD_Column_ID=6213
+;
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/postgresql/812_ADEMPIERE-72_Add_messages_postgresql.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/postgresql/812_ADEMPIERE-72_Add_messages_postgresql.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,110 @@
+-- Apr 23, 2012 1:35:17 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_SysConfig (AD_Client_ID,AD_Org_ID,AD_SysConfig_ID,ConfigurationLevel,Created,CreatedBy,Description,EntityType,IsActive,Name,Updated,UpdatedBy,Value) VALUES (0,0,1000005,'C',TO_TIMESTAMP('2012-04-23 13:35:17','YYYY-MM-DD HH24:MI:SS'),0,'Info Windows - is the query performed automatically (Y) or does the user have to click the Refresh button.','U','Y','INFO_AUTO_QUERY',TO_TIMESTAMP('2012-04-23 13:35:17','YYYY-MM-DD HH24:MI:SS'),0,'N')
+;
+
+-- Apr 23, 2012 1:39:31 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_SysConfig (AD_Client_ID,AD_Org_ID,AD_SysConfig_ID,ConfigurationLevel,Created,CreatedBy,Description,EntityType,IsActive,Name,Updated,UpdatedBy,Value) VALUES (0,0,1000006,'S',TO_TIMESTAMP('2012-04-23 13:39:31','YYYY-MM-DD HH24:MI:SS'),0,'Determines the wild card pattern to apply to search text as none, first, last or both.  The percent sign "%" is the wildcard.  The astrixs could be any text.  "*%" is the default - last only. * - is none.  %* is first only.  %*%, % or %% is both.','U','Y','INFO_AUTO_WILDCARD',TO_TIMESTAMP('2012-04-23 13:39:31','YYYY-MM-DD HH24:MI:SS'),0,'*%')
+;
+
+-- Apr 23, 2012 1:43:39 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000001,0,TO_TIMESTAMP('2012-04-23 13:43:39','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Expected Change','The expected change or delta in the amount.','I',TO_TIMESTAMP('2012-04-23 13:43:39','YYYY-MM-DD HH24:MI:SS'),0,'ExpectedChange')
+;
+
+-- Apr 23, 2012 1:43:39 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000001 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:45:27 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000002,0,TO_TIMESTAMP('2012-04-23 13:45:27','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Only Stock',null,'I',TO_TIMESTAMP('2012-04-23 13:45:27','YYYY-MM-DD HH24:MI:SS'),0,'OnlyStock')
+;
+
+-- Apr 23, 2012 1:45:27 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000002 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:46:36 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000003,0,TO_TIMESTAMP('2012-04-23 13:46:36','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','If selected, only display stocked items. Otherwise, display all items.','If selected, only display stocked items. Otherwise, display all items.','I',TO_TIMESTAMP('2012-04-23 13:46:36','YYYY-MM-DD HH24:MI:SS'),0,'OnlyStockTip')
+;
+
+-- Apr 23, 2012 1:46:36 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000003 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:48:39 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000004,0,TO_TIMESTAMP('2012-04-23 13:48:39','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Auto Refresh',null,'I',TO_TIMESTAMP('2012-04-23 13:48:39','YYYY-MM-DD HH24:MI:SS'),0,'AutoRefresh')
+;
+
+-- Apr 23, 2012 1:48:39 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000004 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:50:21 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000005,0,TO_TIMESTAMP('2012-04-23 13:50:21','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Show Detail',null,'I',TO_TIMESTAMP('2012-04-23 13:50:21','YYYY-MM-DD HH24:MI:SS'),0,'ShowDetail')
+;
+
+-- Apr 23, 2012 1:50:21 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000005 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:51:22 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000006,0,TO_TIMESTAMP('2012-04-23 13:51:22','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Show Attribute Details',null,'I',TO_TIMESTAMP('2012-04-23 13:51:22','YYYY-MM-DD HH24:MI:SS'),0,'ShowAttributeDetails')
+;
+
+-- Apr 23, 2012 1:51:22 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000006 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 1:53:35 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000007,0,TO_TIMESTAMP('2012-04-23 13:53:35','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Contact and Address Information',null,'I',TO_TIMESTAMP('2012-04-23 13:53:35','YYYY-MM-DD HH24:MI:SS'),0,'ContactAndAddress')
+;
+
+-- Apr 23, 2012 1:53:35 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000007 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 2:03:33 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000008,0,TO_TIMESTAMP('2012-04-23 14:03:33','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Only Receipts',null,'I',TO_TIMESTAMP('2012-04-23 14:03:33','YYYY-MM-DD HH24:MI:SS'),0,'OnlyReceipt')
+;
+
+-- Apr 23, 2012 2:03:33 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000008 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Apr 23, 2012 2:04:26 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgTip,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000009,0,TO_TIMESTAMP('2012-04-23 14:04:26','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Only AP Payments',null,'I',TO_TIMESTAMP('2012-04-23 14:04:26','YYYY-MM-DD HH24:MI:SS'),0,'OnlyPayment')
+;
+
+-- Apr 23, 2012 2:04:26 PM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000009 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
+-- Aug 15, 2013 7:23:34 AM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message (AD_Client_ID,AD_Message_ID,AD_Org_ID,Created,CreatedBy,EntityType,IsActive,MsgText,MsgType,Updated,UpdatedBy,Value) VALUES (0,1000010,0,TO_TIMESTAMP('2013-08-15 07:23:34','YYYY-MM-DD HH24:MI:SS'),0,'D','Y','Received','I',TO_TIMESTAMP('2013-08-15 07:23:34','YYYY-MM-DD HH24:MI:SS'),0,'Received')
+;
+
+-- Aug 15, 2013 7:23:34 AM EDT
+-- Adding Messages for Info Panel changes
+INSERT INTO AD_Message_Trl (AD_Language,AD_Message_ID, MsgText,MsgTip, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language,t.AD_Message_ID, t.MsgText,t.MsgTip, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Message t WHERE l.IsActive='Y' AND l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N' AND t.AD_Message_ID=1000010 AND NOT EXISTS (SELECT * FROM AD_Message_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Message_ID=t.AD_Message_ID)
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/postgresql/813_AddM_Product_ID_to_M_Product_Stock_V.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/postgresql/813_AddM_Product_ID_to_M_Product_Stock_V.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,15 @@
+-- View: adempiere.m_product_stock_v
+
+DROP VIEW adempiere.m_product_stock_v;
+
+CREATE OR REPLACE VIEW adempiere.m_product_stock_v AS 
+ SELECT ms.isactive, ms.created, ms.createdby, ms.updated, ms.updatedby, mp.m_product_id, mp.value, mp.help, ms.qtyonhand - ms.qtyreserved AS qtyavailable, ms.qtyonhand, ms.qtyreserved, mp.description, mw.name AS warehouse, mw.m_warehouse_id, mw.ad_client_id, mw.ad_org_id, mp.documentnote
+   FROM adempiere.m_storage ms
+   JOIN adempiere.m_product mp ON ms.m_product_id = mp.m_product_id
+   JOIN adempiere.m_locator ml ON ms.m_locator_id = ml.m_locator_id
+   JOIN adempiere.m_warehouse mw ON ml.m_warehouse_id = mw.m_warehouse_id
+  ORDER BY mw.name;
+
+ALTER TABLE adempiere.m_product_stock_v
+  OWNER TO adempiere;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/postgresql/814_ADEMPIERE-72_Adding_SysConfig_Settings_postgresql.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/postgresql/814_ADEMPIERE-72_Adding_SysConfig_Settings_postgresql.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,10 @@
+-- Mar 16, 2013 9:20:23 AM EDT
+-- ADEMPIERE-72 Adding System Configuration for Info Panel changes
+INSERT INTO AD_SysConfig (AD_Client_ID,AD_Org_ID,AD_SysConfig_ID,ConfigurationLevel,Created,CreatedBy,Description,EntityType,IsActive,Name,Updated,UpdatedBy,Value) VALUES (0,0,1000000,'S',TO_TIMESTAMP('2013-03-16 09:20:23','YYYY-MM-DD HH24:MI:SS'),0,'Determines whether info panels auto query by default','D','Y','INFO_AUTO_QUERY',TO_TIMESTAMP('2013-03-16 09:20:23','YYYY-MM-DD HH24:MI:SS'),0,'Y')
+;
+
+-- Mar 16, 2013 9:22:56 AM EDT
+-- ADEMPIERE-72 Adding System Configuration for Info Panel changes
+INSERT INTO AD_SysConfig (AD_Client_ID,AD_Org_ID,AD_SysConfig_ID,ConfigurationLevel,Created,CreatedBy,Description,EntityType,IsActive,Name,Updated,UpdatedBy,Value) VALUES (0,0,1000001,'S',TO_TIMESTAMP('2013-03-16 09:22:56','YYYY-MM-DD HH24:MI:SS'),0,'Determines the wildcard defaults.  Can be %*, *% or %*%.  The % wildcard will be added to the search by default as indicated.','D','Y','INFO_AUTO_WILDCARD',TO_TIMESTAMP('2013-03-16 09:22:56','YYYY-MM-DD HH24:MI:SS'),0,'%*%')
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/postgresql/815_ADEMPIERE-72_Add_test_data_to_default_database.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/postgresql/815_ADEMPIERE-72_Add_test_data_to_default_database.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,26 @@
+DROP VIEW adempiere.m_product_substituterelated_v;
+
+CREATE OR REPLACE VIEW adempiere.m_product_substituterelated_v AS 
+         SELECT s.ad_client_id, s.ad_org_id, s.isactive, s.created, s.createdby, s.updated, s.updatedby, s.m_product_id, s.substitute_id, s.name AS description, 'S'::text AS rowtype, mp.value, mp.name, sum(ms.qtyonhand - ms.qtyreserved) AS qtyavailable, sum(ms.qtyonhand) AS qtyonhand, sum(ms.qtyreserved) AS qtyreserved, round(max(mpr.pricestd), 0) AS pricestd, mpr.m_pricelist_version_id, mw.m_warehouse_id, org.name AS orgname
+           FROM adempiere.m_substitute s
+      JOIN adempiere.m_storage ms ON ms.m_product_id = s.substitute_id
+   JOIN adempiere.m_product mp ON ms.m_product_id = mp.m_product_id
+   JOIN adempiere.m_locator ml ON ms.m_locator_id = ml.m_locator_id
+   JOIN adempiere.m_warehouse mw ON ml.m_warehouse_id = mw.m_warehouse_id
+   JOIN adempiere.m_productprice mpr ON ms.m_product_id = mpr.m_product_id
+   JOIN adempiere.ad_org org ON org.ad_org_id = mw.ad_org_id
+  GROUP BY s.ad_client_id, s.ad_org_id, s.isactive, s.created, s.createdby, s.updated, s.updatedby, s.m_product_id, s.substitute_id, s.name, mp.value, mw.m_warehouse_id, mpr.m_pricelist_version_id, org.name, mp.name
+UNION 
+         SELECT r.ad_client_id, r.ad_org_id, r.isactive, r.created, r.createdby, r.updated, r.updatedby, r.m_product_id, r.relatedproduct_id AS substitute_id, r.name AS description, 'R'::text AS rowtype, mp.value, mp.name, sum(ms.qtyonhand - ms.qtyreserved) AS qtyavailable, sum(ms.qtyonhand) AS qtyonhand, sum(ms.qtyreserved) AS qtyreserved, round(max(mpr.pricestd), 0) AS pricestd, mpr.m_pricelist_version_id, mw.m_warehouse_id, org.name AS orgname
+           FROM adempiere.m_relatedproduct r
+      JOIN adempiere.m_storage ms ON ms.m_product_id = r.relatedproduct_id
+   JOIN adempiere.m_product mp ON ms.m_product_id = mp.m_product_id
+   JOIN adempiere.m_locator ml ON ms.m_locator_id = ml.m_locator_id
+   JOIN adempiere.m_warehouse mw ON ml.m_warehouse_id = mw.m_warehouse_id
+   JOIN adempiere.m_productprice mpr ON ms.m_product_id = mpr.m_product_id
+   JOIN adempiere.ad_org org ON org.ad_org_id = mw.ad_org_id
+  GROUP BY r.ad_client_id, r.ad_org_id, r.isactive, r.created, r.createdby, r.updated, r.updatedby, r.m_product_id, r.relatedproduct_id, r.name, mw.m_warehouse_id, mpr.m_pricelist_version_id, org.name, mp.value, mp.name;
+
+ALTER TABLE adempiere.m_product_substituterelated_v
+  OWNER TO adempiere;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/postgresql/816_ADEMPIERE-72_Add_data_to_default_database_postgresql.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/postgresql/816_ADEMPIERE-72_Add_data_to_default_database_postgresql.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,45 @@
+-- Mar 16, 2013 12:11:37 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE M_Product SET Description='Azaleas are flowering shrubs. Azaleas bloom in spring in the Northern hemisphere and in winter in the Southern hemisphere, their flowers often lasting several weeks. Shade tolerant, they prefer living near or under trees.',Updated=TO_TIMESTAMP('2013-03-16 12:11:37','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=101 WHERE M_Product_ID=128
+;
+
+-- Mar 16, 2013 12:11:37 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE M_Product_Trl SET Description='Azaleas are flowering shrubs. Azaleas bloom in spring in the Northern hemisphere and in winter in the Southern hemisphere, their flowers often lasting several weeks. Shade tolerant, they prefer living near or under trees.',DocumentNote=NULL,Name='Azalea Bush',IsTranslated='Y' WHERE M_Product_ID=128
+;
+
+-- Mar 16, 2013 12:11:37 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE A_Asset SET Name=SUBSTR((SELECT bp.Name FROM C_BPartner bp WHERE bp.C_BPartner_ID=A_Asset.C_BPartner_ID) || ' - ' || p.Name,1,60),Description=p.Description FROM M_Product p WHERE p.M_Product_ID=A_Asset.M_Product_ID AND A_Asset.IsActive='Y' AND A_Asset.M_Product_ID=128
+;
+
+-- Mar 16, 2013 12:27:24 PM EDT
+-- Adding System Configuration for Info Panel changes
+INSERT INTO M_Substitute (AD_Client_ID,AD_Org_ID,Created,CreatedBy,IsActive,M_Product_ID,Name,Substitute_ID,Updated,UpdatedBy) VALUES (11,0,TO_TIMESTAMP('2013-03-16 12:27:24','YYYY-MM-DD HH24:MI:SS'),101,'Y',129,'Azalea Bush',128,TO_TIMESTAMP('2013-03-16 12:27:24','YYYY-MM-DD HH24:MI:SS'),101)
+;
+
+-- Mar 16, 2013 12:27:49 PM EDT
+-- Adding System Configuration for Info Panel changes
+INSERT INTO M_Substitute (AD_Client_ID,AD_Org_ID,Created,CreatedBy,IsActive,M_Product_ID,Name,Substitute_ID,Updated,UpdatedBy) VALUES (11,0,TO_TIMESTAMP('2013-03-16 12:27:49','YYYY-MM-DD HH24:MI:SS'),101,'Y',128,'Holly Bush',129,TO_TIMESTAMP('2013-03-16 12:27:49','YYYY-MM-DD HH24:MI:SS'),101)
+;
+
+-- Mar 16, 2013 12:28:55 PM EDT
+-- Adding System Configuration for Info Panel changes
+(SELECT s.M_Product_ID, w.Name as warehouse, l.value as locator, 0 as ID, now() as TIMESTAMP, sum(s.QtyOnHand) as AvailQty, null as DeltaQty, null as QtyOrdered, null as QtyReserved, null as sumPASI, 0 as ASI, null as BP_Name, null as DocumentNo, 10 as SeqNo FROM (SELECT M_Product_ID, M_Locator_ID, QtyOnHand, QtyReserved, QtyOrdered, COALESCE(productAttribute(M_AttributeSetInstance_ID)::varchar, '') as PASI, COALESCE(M_AttributeSetInstance_ID,0) as M_AttributeSetInstance_ID FROM M_Storage) s INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID) INNER JOIN M_Warehouse w ON (l.M_Warehouse_ID=w.M_Warehouse_ID) WHERE s.M_Product_ID=? AND l.M_Warehouse_ID=? AND (s.QtyOnHand<>0) GROUP BY s.M_Product_ID, w.Name, l.value, s.M_Locator_ID, sumPASI, ASI, BP_Name, DocumentNo, SeqNo UNION ALL SELECT ol.M_Product_ID, w.Name as warehouse, null as locator, ol.M_AttributeSetInstance_ID as ID, o.DatePromised as TIMESTAMP, null as AvailQty, CASE WHEN dt.DocBaseType = 'POO' THEN ol.QtyOrdered ELSE -ol.QtyReserved END as DeltaQty, CASE WHEN dt.DocBaseType = 'POO' THEN ol.QtyOrdered ELSE null END as QtyOrdered, CASE WHEN dt.DocBaseType = 'POO' THEN null ELSE ol.QtyReserved END as QtyReserved, productAttribute(ol.M_AttributeSetInstance_ID) as sumPASI, ol.M_AttributeSetInstance_ID as ASI, bp.Name as BP_Name, dt.PrintName || ' ' || o.DocumentNo As DocumentNo, 20 as SeqNo FROM C_Order o INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID) INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID) INNER JOIN M_Warehouse w ON (ol.M_Warehouse_ID=w.M_Warehouse_ID) INNER JOIN C_BPartner bp ON (o.C_BPartner_ID=bp.C_BPartner_ID) WHERE ol.QtyReserved<>0 AND ol.M_Product_ID=? AND ol.M_Warehouse_ID=? ORDER BY M_Product_ID, SeqNo, ID, TIMESTAMP, locator)
+;
+
+-- Mar 16, 2013 12:30:14 PM EDT
+-- Adding System Configuration for Info Panel changes
+INSERT INTO M_RelatedProduct (AD_Client_ID,AD_Org_ID,Created,CreatedBy,IsActive,M_Product_ID,Name,RelatedProduct_ID,RelatedProductType,Updated,UpdatedBy) VALUES (11,0,TO_TIMESTAMP('2013-03-16 12:30:14','YYYY-MM-DD HH24:MI:SS'),101,'Y',128,'Mulch will help it grow',137,'S',TO_TIMESTAMP('2013-03-16 12:30:14','YYYY-MM-DD HH24:MI:SS'),101)
+;
+
+-- Mar 16, 2013 12:31:13 PM EDT
+-- Adding System Configuration for Info Panel changes
+INSERT INTO M_RelatedProduct (AD_Client_ID,AD_Org_ID,Created,CreatedBy,IsActive,M_Product_ID,Name,RelatedProduct_ID,RelatedProductType,Updated,UpdatedBy) VALUES (11,0,TO_TIMESTAMP('2013-03-16 12:31:13','YYYY-MM-DD HH24:MI:SS'),101,'Y',128,'How To Plant',146,'S',TO_TIMESTAMP('2013-03-16 12:31:13','YYYY-MM-DD HH24:MI:SS'),101)
+;
+
+-- Mar 16, 2013 12:38:31 PM EDT
+-- Adding System Configuration for Info Panel changes
+DELETE FROM M_RelatedProduct WHERE M_Product_ID=128 AND RelatedProduct_ID=129 AND RelatedProductType='A'
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/postgresql/817_ADEMPIERE-72_Add_data_to_default_database_postgresql.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/postgresql/817_ADEMPIERE-72_Add_data_to_default_database_postgresql.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,10 @@
+-- Mar 16, 2013 1:00:58 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE M_Substitute SET Name='Consider a Holly Bush',Updated=TO_TIMESTAMP('2013-03-16 13:00:58','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=101 WHERE M_Product_ID=128 AND Substitute_ID=129
+;
+
+-- Mar 16, 2013 1:01:15 PM EDT
+-- Adding System Configuration for Info Panel changes
+UPDATE M_RelatedProduct SET Name='A book on How To Plant',Updated=TO_TIMESTAMP('2013-03-16 13:01:15','YYYY-MM-DD HH24:MI:SS'),UpdatedBy=101 WHERE M_Product_ID=128 AND RelatedProduct_ID=146 AND RelatedProductType='S'
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 migration/370lts-release/postgresql/820_FR3456545_sysconfig.sql
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/migration/370lts-release/postgresql/820_FR3456545_sysconfig.sql	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,5 @@
+-- Dec 10, 2011 10:29:30 PM EET
+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator
+INSERT INTO AD_SysConfig (AD_Client_ID,AD_Org_ID,AD_SysConfig_ID,ConfigurationLevel,Created,CreatedBy,Description,EntityType,IsActive,Name,Updated,UpdatedBy,Value) VALUES (0,0,50058,'S',TO_TIMESTAMP('2011-12-10 22:29:29','YYYY-MM-DD HH24:MI:SS'),100,'Indicates which ZK ID Generator shall be used. Please note, this call should implement org.zkoss.zk.ui.sys.IdGenerator interface.','D','Y','org.adempiere.webui.IdGenerator',TO_TIMESTAMP('2011-12-10 22:29:29','YYYY-MM-DD HH24:MI:SS'),100,'org.adempiere.webui.SahiIdGenerator')
+;
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/AdempiereIdGenerator.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/AdempiereIdGenerator.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/AdempiereIdGenerator.java	Mon Feb 10 21:08:53 2014 -0500
@@ -1,6 +1,6 @@
 /******************************************************************************
- * Copyright (C) 2011 victor.perez@e-evolution.com                            *
- * Copyright (C) 2009 www.e-evolution.com, e-Evolution	 	                  *
+ * Product: Adempiere ERP & CRM Smart Business Solution                       *
+ * Copyright (C) metas All Rights Reserved.                                   *
  * This program is free software; you can redistribute it and/or modify it    *
  * under the terms version 2 of the GNU General Public License as published   *
  * by the Free Software Foundation. This program is distributed in the hope   *
@@ -10,39 +10,75 @@
  * You should have received a copy of the GNU General Public License along    *
  * with this program; if not, write to the Free Software Foundation, Inc.,    *
  * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.                     *
+ *                                                                            *
+ * @author: Ryan Wu, Engineer, Potix Corporation                              *
+ *   (http://docs.zkoss.org/wiki/How_to_Test_ZK_Application_with_Selenium)    *
+ * @author: Carlos Ruiz                                                       *
+ * @author: Victor Perez                                                      *
  *****************************************************************************/
 
 package org.adempiere.webui;
 
+import org.adempiere.exceptions.AdempiereException;
+import org.compiere.model.MSysConfig;
+import org.compiere.util.Env;
 import org.zkoss.zk.ui.Component;
 import org.zkoss.zk.ui.Desktop;
 import org.zkoss.zk.ui.Page;
 import org.zkoss.zk.ui.sys.IdGenerator;
 
 /**
- * PP Product BOM Model.
- *
- * @author Victor Perez www.e-evolution.com 
- * http://docs.zkoss.org/wiki/How_to_Test_ZK_Application_with_Selenium
- * */
+ * 
+ * @author: Teo Sarca
+ */
+public class AdempiereIdGenerator implements IdGenerator
+{
+	public static final String SYSCONFIG_IdGenerator = "org.adempiere.webui.IdGenerator";
+	public static final String SYSCONFIG_IdGenerator_Default = org.adempiere.webui.SahiIdGenerator.class.getCanonicalName();
 
-public class AdempiereIdGenerator implements IdGenerator {
-	public String nextComponentUuid(Desktop desktop, Component comp) {
-        int i = Integer.parseInt(desktop.getAttribute("Id_Num").toString());
-        i++;// Start from 1
-        desktop.setAttribute("Id_Num", String.valueOf(i));
-        return "zk_comp_" + i;
-    }
- 
-    public String nextDesktopId(Desktop desktop) {
-        if (desktop.getAttribute("Id_Num") == null) {
-            String number = "0";
-            desktop.setAttribute("Id_Num", number);
-        }
-        return null;
-    }
- 
-    public String nextPageUuid(Page page) {
-        return null;
-    }
+	private static IdGenerator idGenerator = null;
+
+	public static void setIdGenerator(IdGenerator generator)
+	{
+		idGenerator = generator;
+	}
+
+	public static IdGenerator getIdGenerator()
+	{
+		if (idGenerator == null)
+		{
+			String classname = MSysConfig.getValue(SYSCONFIG_IdGenerator, SYSCONFIG_IdGenerator_Default);
+			ClassLoader cl = Thread.currentThread().getContextClassLoader();
+			if (cl == null)
+				cl = AdempiereIdGenerator.class.getClassLoader();
+
+			try
+			{
+				idGenerator = (IdGenerator)cl.loadClass(classname).newInstance();
+			}
+			catch (Exception e)
+			{
+				throw new AdempiereException(e);
+			}
+		}
+		return idGenerator;
+	}
+
+	@Override
+	public String nextComponentUuid(Desktop desktop, Component comp)
+	{
+		return getIdGenerator().nextComponentUuid(desktop, comp);
+	}
+
+	@Override
+	public String nextDesktopId(Desktop desktop)
+	{
+		return getIdGenerator().nextDesktopId(desktop);
+	}
+
+	@Override
+	public String nextPageUuid(Page page)
+	{
+		return getIdGenerator().nextPageUuid(page);
+	}
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/SahiIdGenerator.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/SahiIdGenerator.java	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,62 @@
+/******************************************************************************
+ * Product: Adempiere ERP & CRM Smart Business Solution                       *
+ * Copyright (C) Potix Corporation All Rights Reserved.                       *
+ * This program is free software; you can redistribute it and/or modify it    *
+ * under the terms version 2 of the GNU General Public License as published   *
+ * by the Free Software Foundation. This program is distributed in the hope   *
+ * that it will be useful, but WITHOUT ANY WARRANTY; without even the implied *
+ * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.           *
+ * See the GNU General Public License for more details.                       *
+ * You should have received a copy of the GNU General Public License along    *
+ * with this program; if not, write to the Free Software Foundation, Inc.,    *
+ * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.                     *
+ *                                                                            *
+ * @author: Ryan Wu, Engineer, Potix Corporation                              *
+ *   (http://docs.zkoss.org/wiki/How_to_Test_ZK_Application_with_Selenium)    *
+ * @author: Carlos Ruiz                                                       *
+ * @author: Victor Perez                                                      *
+ *****************************************************************************/
+
+package org.adempiere.webui;
+
+import org.zkoss.zk.ui.Component;
+import org.zkoss.zk.ui.Desktop;
+import org.zkoss.zk.ui.Page;
+import org.zkoss.zk.ui.sys.IdGenerator;
+
+/**
+ * 
+ * @author: Ryan Wu, Engineer, Potix Corporation
+ * @author: Carlos Ruiz
+ * @author: Victor Perez
+ * 
+ * @see http://docs.zkoss.org/wiki/How_to_Test_ZK_Application_with_Selenium
+ */
+public class SahiIdGenerator implements IdGenerator
+{
+	@Override
+	public String nextComponentUuid(Desktop desktop, Component comp)
+	{
+		int i = Integer.parseInt(desktop.getAttribute("Id_Num").toString());
+		i++;// Start from 1
+		desktop.setAttribute("Id_Num", String.valueOf(i));
+		return "zk_comp_" + i;
+	}
+
+	@Override
+	public String nextDesktopId(Desktop desktop)
+	{
+		if (desktop.getAttribute("Id_Num") == null)
+		{
+			String number = "0";
+			desktop.setAttribute("Id_Num", number);
+		}
+		return null;
+	}
+
+	@Override
+	public String nextPageUuid(Page page)
+	{
+		return null;
+	}
+}
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/acct/WAcctViewer.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/acct/WAcctViewer.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/acct/WAcctViewer.java	Mon Feb 10 21:08:53 2014 -0500
@@ -17,6 +17,7 @@
 
 package org.adempiere.webui.acct;
 
+import java.io.File;
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -41,25 +42,32 @@
 import org.adempiere.webui.panel.InfoPanel;
 import org.adempiere.webui.session.SessionManager;
 import org.adempiere.webui.window.FDialog;
+import org.compiere.apps.ADialog;
 import org.compiere.model.MAcctSchema;
 import org.compiere.model.MAcctSchemaElement;
 import org.compiere.model.X_C_AcctSchema_Element;
 import org.compiere.report.core.RModel;
+import org.compiere.report.core.RModelExcelExporter;
+import org.compiere.swing.CButton;
+import org.compiere.util.CLogMgt;
 import org.compiere.util.CLogger;
 import org.compiere.util.Env;
 import org.compiere.util.Ini;
 import org.compiere.util.KeyNamePair;
 import org.compiere.util.Msg;
 import org.compiere.util.ValueNamePair;
+import org.zkoss.util.media.AMedia;
 import org.zkoss.zk.ui.event.Event;
 import org.zkoss.zk.ui.event.EventListener;
 import org.zkoss.zk.ui.event.Events;
 import org.zkoss.zkex.zul.Borderlayout;
 import org.zkoss.zkex.zul.Center;
 import org.zkoss.zkex.zul.South;
+import org.zkoss.zkex.zul.West;
 import org.zkoss.zul.Caption;
 import org.zkoss.zul.Groupbox;
 import org.zkoss.zul.Hbox;
+import org.zkoss.zul.Iframe;
 import org.zkoss.zul.Listhead;
 import org.zkoss.zul.Listheader;
 import org.zkoss.zul.Listitem;
@@ -74,6 +82,9 @@
  *
  *  @author Elaine Tan
  *  @author Low Heng Sin
+ *  @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 
 public class WAcctViewer extends Window implements EventListener
@@ -102,6 +113,7 @@
 	private Button bQuery = new Button();
 	private Button bRePost = new Button();
 	private Button bPrint = new Button();
+	private Button bExport = new Button();
 	private Button sel1 = new Button();
 	private Button sel2 = new Button();
 	private Button sel3 = new Button();
@@ -143,6 +155,7 @@
 	private Checkbox forcePost = new Checkbox();
 
 	private Tabbox tabbedPane = new Tabbox();
+	private Iframe iframe = new Iframe();
 
 	private Listbox table = new Listbox();
 	private Paging paging = new Paging();
@@ -160,6 +173,7 @@
 	private Hbox southPanel = new Hbox();
 
 	private int m_windowNo;
+	private boolean m_lookup;
 
 	private ArrayList<ArrayList<Object>> m_queryData;
 
@@ -189,6 +203,20 @@
 
 	public WAcctViewer(int AD_Client_ID, int AD_Table_ID, int Record_ID)
 	{
+		this (0, 0, 0, false);	
+	}
+	
+	/**
+	 *  Detail Constructor
+	 *
+	 *  @param AD_Client_ID Client
+	 *  @param AD_Table_ID Table
+	 *  @param Record_ID Record
+	 *  @param isLookup - a flag, modal if true, non-modal if false
+	 */
+
+	public WAcctViewer(int AD_Client_ID, int AD_Table_ID, int Record_ID, Boolean isLookup)
+	{
 		super ();
 
 		log.info("AD_Table_ID=" + AD_Table_ID + ", Record_ID=" + Record_ID);
@@ -196,6 +224,7 @@
 		//setDefaultCloseOperation(DISPOSE_ON_CLOSE);
 		m_windowNo = SessionManager.getAppDesktop().registerWindow(this);
 		m_data = new WAcctViewerData (Env.getCtx(), m_windowNo, AD_Client_ID, AD_Table_ID);
+		m_lookup = isLookup;
 
 		try
 		{
@@ -224,17 +253,46 @@
 
 	private void init() throws Exception
 	{
+		// Modal or non-modal
+		if (isLookup())
+		{
+			setTitle(Msg.getMsg(Env.getCtx(), "Posting"));
+			setAttribute(Window.MODE_KEY, Window.MODE_MODAL);
+			setBorder("normal");
+			setClosable(true);
+			int height = SessionManager.getAppDesktop().getClientInfo().desktopHeight * 85 / 100;
+    		int width = SessionManager.getAppDesktop().getClientInfo().desktopWidth * 80 / 100;
+    		setWidth(width + "px");
+    		setHeight(height + "px");
+    		setContentStyle("overflow: auto");
+			setSizable(true);
+			setMaximizable(true);
+		}
+		else
+		{
+			setTitle(Msg.getMsg(Env.getCtx(), "InfoAccount"));
+			setAttribute(Window.MODE_KEY, Window.MODE_EMBEDDED);
+			setBorder("none");
+			setWidth("100%");
+			setHeight("100%");
+			setStyle("position: absolute");
+		}
+
+		
 		// Selection Panel
 
-			// Accounting Schema
+		// Accounting Schema
 
 		Hbox boxAcctSchema = new Hbox();
 		boxAcctSchema.setWidth("100%");
 		boxAcctSchema.setWidths("30%, 70%");
 
 		lacctSchema.setValue(Msg.translate(Env.getCtx(), "C_AcctSchema_ID"));
+		lacctSchema.setAttribute("zk_component_ID", "Lookup_Criteria_Label_C_AcctSchema_ID");
+
 		selAcctSchema.setMold("select");
 		selAcctSchema.setRows(1);
+		selAcctSchema.setAttribute("zk_component_ID", "Lookup_Criteria_C_AcctSchema_ID");
 
 		boxAcctSchema.appendChild(lacctSchema);
 		boxAcctSchema.appendChild(selAcctSchema);
@@ -244,9 +302,13 @@
 		boxSelDoc.setWidths("30%, 50%, 20%");
 
 		selDocument.setLabel(Msg.getMsg(Env.getCtx(), "SelectDocument"));
+		selDocument.setAttribute("zk_component_ID", "Lookup_Criteria_selDocument");
 		selDocument.addEventListener(Events.ON_CHECK, this);
 		selTable.setMold("select");
 		selTable.setRows(1);
+		selTable.setAttribute("zk_component_ID", "Lookup_Criteria_selTable");
+		selRecord.setAttribute("zk_component_ID", "Lookup_Criteria_selRecord");
+
 
 		boxSelDoc.appendChild(selDocument);
 		boxSelDoc.appendChild(selTable);
@@ -262,6 +324,7 @@
 		selPostingType.setMold("select");
 		selPostingType.setRows(1);
 		selPostingType.addEventListener(Events.ON_CLICK, this);
+		selPostingType.setAttribute("zk_component_ID", "Lookup_Criteria_selPostingType");
 
 		boxPostingType.appendChild(lpostingType);
 		boxPostingType.appendChild(selPostingType);
@@ -273,6 +336,9 @@
 		boxDate.setWidths("30%, 35%, 35%");
 
 		lDate.setValue(Msg.translate(Env.getCtx(), "DateAcct"));
+		lDate.setAttribute("zk_component_ID", "Lookup_Criteria_Label_Date");
+		selDateFrom.setAttribute("zk_component_ID", "Lookup_Criteria_selDateFrom");
+		selDateTo.setAttribute("zk_component_ID", "Lookup_Criteria_selDateTo");
 
 		boxDate.appendChild(lDate);
 		boxDate.appendChild(selDateFrom);
@@ -288,6 +354,8 @@
 		selOrg.setMold("select");
 		selOrg.setRows(1);
 		selOrg.addEventListener(Events.ON_SELECT, this);
+		lOrg.setAttribute("zk_component_ID", "Lookup_Criteria_Label_Org");
+		selOrg.setAttribute("zk_component_ID", "Lookup_Criteria_selOrg");
 
 		boxOrg.appendChild(lOrg);
 		boxOrg.appendChild(selOrg);
@@ -299,6 +367,8 @@
 		boxAcct.setWidths("30%, 70%");
 
 		lAcct.setValue(Msg.translate(Env.getCtx(), "Account_ID"));
+		lAcct.setAttribute("zk_component_ID", "Lookup_Criteria_Label_Acct");
+		selAcct.setAttribute("zk_component_ID", "Lookup_Criteria_selAcct");
 
 		boxAcct.appendChild(lAcct);
 		boxAcct.appendChild(selAcct);
@@ -494,11 +564,16 @@
 		bPrint.setTooltiptext(Msg.getMsg(Env.getCtx(), "Print"));
 		bPrint.addEventListener(Events.ON_CLICK, this);
 
+		bExport.setImage("/images/Export16.png");
+		bExport.setTooltiptext(Msg.getMsg(Env.getCtx(), "Export"));
+		bExport.addEventListener(Events.ON_CLICK, this);
+
 		southPanel.setWidth("100%");
 		southPanel.setWidths("2%, 12%, 82%, 2%, 2%");
 		southPanel.appendChild(bRePost);
 		southPanel.appendChild(forcePost);
 		southPanel.appendChild(statusLine);
+		southPanel.appendChild(bExport);
 		southPanel.appendChild(bPrint);
 		southPanel.appendChild(bQuery);
 
@@ -511,13 +586,17 @@
 		result.appendChild(resultPanel);
 
 		Center resultCenter = new Center();
+		West resultWest = new West();
 		resultCenter.setFlex(true);
 		resultPanel.appendChild(resultCenter);
+		resultPanel.appendChild(resultWest);
 		table.setWidth("99%;");
 		table.setVflex(true);
 		table.setHeight("99%");
 		table.setStyle("position: absolute;");
 		resultCenter.appendChild(table);
+		resultWest.appendChild(iframe);
+		resultWest.setWidth("0%"); // Hide the iFrame - its only a trigger for display of xls files.
 
 		pagingPanel = new South();
 		resultPanel.appendChild(pagingPanel);
@@ -574,15 +653,6 @@
 		south.setStyle("background-color: transparent");
 		southPanel.setParent(south);
 
-		this.setAttribute("mode", "modal");
-		this.setTitle("Posting");
-		this.setBorder("normal");
-		this.setClosable(true);
-		this.setWidth("800px");
-		this.setHeight("500px");
-		this.setSizable(true);
-		this.setMaximizable(true);
-
 		//tabbedPane.addEventListener(Events.ON_SELECT, this);
 	}
 
@@ -632,6 +702,23 @@
 		boolean haveDoc = (AD_Table_ID != 0 && Record_ID != 0);
 		selDocument.setChecked(haveDoc);
 		actionDocument();
+		actionTable();
+		statusLine.setText(" " + Msg.getMsg(Env.getCtx(), "ViewerOptions"));
+
+		//  Initial Query
+		if (haveDoc)
+		{
+			m_data.AD_Table_ID = AD_Table_ID;
+			m_data.Record_ID = Record_ID;
+			actionQuery();
+			String keyColumn = selRecord.getName();
+			String tableName = keyColumn.substring(0, keyColumn.length()-3);
+			String selectSQL = keyColumn + "=" + Record_ID;
+			m_data.buttonRecordID.put(keyColumn,Record_ID);
+			selRecord.setLabel(m_data.getButtonText(tableName, keyColumn, selectSQL));
+		}
+
+/*
 		if (!haveDoc)
 		{
 			selTable.setSelectedIndex(0);
@@ -653,7 +740,7 @@
 				actionTable();
 			}
 		}
-
+*/
 		if (tabResult.isSelected())
 			stateChanged();
 	} // dynInit
@@ -701,6 +788,8 @@
 	public void stateChanged()
 	{
 	//	log.info( "AcctViewer.stateChanged");
+		iframe.setContent(null);
+		
 		boolean visible = m_data.documentQuery && tabResult.isSelected();
 
 		bRePost.setVisible(visible);
@@ -717,7 +806,8 @@
 	public void onEvent(Event e) throws Exception
 	{
 		// log.info(e.getActionCommand());
-
+		iframe.setContent(null);
+		
 		Object source = e.getTarget();
 
 		if (source == tabResult)
@@ -737,6 +827,8 @@
 		else if  (source == bPrint)
 			;//PrintScreenPainter.printScreen(this);
 		//  InfoButtons
+		else if  (source == bExport)
+			exportExcel(); // Export the table.
 		else if (source instanceof Button)
 			actionButton((Button)source);
 		else if (source == paging)
@@ -1117,8 +1209,10 @@
 	{
 		String keyColumn = button.getName();
 		log.info(keyColumn);
-		String whereClause = ""; // Elaine 2008/07/28
+		// String whereClause = ""; // Elaine 2008/07/28
+		String whereClause = "(IsSummary='N' OR IsSummary IS NULL)";
 		String lookupColumn = keyColumn;
+		int record_id = m_data.getButtonRecordID(keyColumn);
 
 		if ("Account_ID".equals(keyColumn))
 		{
@@ -1147,49 +1241,80 @@
 			if (ase != null)
 				whereClause += " AND C_Element_ID=" + ase.getC_Element_ID();
 		}
+		else if (keyColumn.equals("M_Product_ID"))
+		{
+			whereClause = "";
+		}
 		else if (selDocument.isChecked())
 			whereClause = "";
 
+		if (button == selRecord)                            //  Record_ID
+			record_id = m_data.Record_ID;
+		else
+			record_id = m_data.getButtonRecordID(keyColumn);
+		
 		String tableName = lookupColumn.substring(0, lookupColumn.length()-3);
-		whereClause = tableName + ".IsSummary='N'" + whereClause; // Elaine 2008/07/28
+		//whereClause = tableName + ".IsSummary='N'" + whereClause; // Elaine 2008/07/28
 
-		InfoPanel info = InfoPanel.create(m_data.WindowNo, tableName, lookupColumn, "", false, whereClause);
+		//  Open modal
+		InfoPanel info = InfoPanel.create(m_data.WindowNo, tableName, lookupColumn, record_id, "", false, whereClause);
 
 		if (!info.loadedOK())
 		{
-			//info.dispose();
+			info.dispose();
 			info = null;
 			button.setLabel("");
 			m_data.whereInfo.put(keyColumn, "");
+			m_data.buttonRecordID.put(keyColumn, null);
 			return 0;
 		}
 
 		info.setVisible(true);
 		AEnv.showWindow(info);
 
-		String selectSQL = info.getSelectedSQL();       //  C_Project_ID=100 or ""
-		Integer key = (Integer)info.getSelectedKey();
+   		boolean isCancelled = info.isCancelled();
+		boolean isOK = info.isOk();
+		Integer key = 0;
+		
+		if (isCancelled && !isOK) // Delete the saved info
+		{
+			key = 0;
+			if (button == selRecord)                            //  Record_ID
+				m_data.Record_ID = key.intValue();
+			else
+			{
+				m_data.whereInfo.put(keyColumn, "");    //  no query
+				m_data.buttonRecordID.put(keyColumn, key.intValue());
+			}
+			button.setLabel("");
+		}
+		else if(!isCancelled && isOK)
+		{
+			//  Save for query
+			String selectSQL = info.getSelectedSQL();       //  C_Project_ID=100 or ""
+			key = (Integer)info.getSelectedKey();
+			log.config(keyColumn + " - " + key);
+			if (button == selRecord)                            //  Record_ID
+				m_data.Record_ID = key.intValue();
+			else
+			{
+				m_data.whereInfo.put(keyColumn, keyColumn + "=" + key.intValue());  //  Add to query
+				m_data.buttonRecordID.put(keyColumn, key.intValue());
+			}
+			//  Display Selection and resize
+			button.setLabel(m_data.getButtonText(tableName, lookupColumn, selectSQL));
+		}
+		else if(!(isCancelled ^ isOK)) // xor: window closed or error - no change
+		{
+			// m_data not changed
+			if (button == selRecord)                            //  Record_ID
+				key = m_data.Record_ID = key.intValue();
+			else
+				key = m_data.getButtonRecordID(keyColumn);
+		}
 		info = null;
+		return key.intValue();
 
-		if (selectSQL == null || selectSQL.length() == 0 || key == null)
-		{
-			button.setLabel("");
-			m_data.whereInfo.put(keyColumn, "");    //  no query
-			return 0;
-		}
-
-		//  Save for query
-
-		log.config(keyColumn + " - " + key);
-		if (button == selRecord)                            //  Record_ID
-			m_data.Record_ID = key.intValue();
-		else
-			m_data.whereInfo.put(keyColumn, keyColumn + "=" + key.intValue());
-
-		//  Display Selection and resize
-		button.setLabel(m_data.getButtonText(tableName, lookupColumn, selectSQL));
-		//pack();
-		return key.intValue();
 	} // actionButton
 
 	/**
@@ -1213,4 +1338,38 @@
 			actionQuery();
 		}
 	} // actionRePost
+
+	/**
+	 * Determine if the window is a lookup (modal) or not
+	 * @return boolean. True if modal.
+	 */
+	public boolean isLookup()
+	{
+		return m_lookup;
+	}
+
+	/**
+	 * Export to Excel
+	 */
+	private void exportExcel() {
+		AMedia media = null;
+		RModel model = m_data.query();
+		if (model == null) {
+			return;
+		}
+		try {
+			RModelExcelExporter exporter = new RModelExcelExporter((RModel)model);
+			//exporter.export(null, null);
+			File file = exporter.export();
+			media = new AMedia(getTitle(), "xls", "application/vnd.ms-excel", file, true);
+		}
+		catch (Exception e) {
+			//ADialog.error(0, this, "Error", e.getLocalizedMessage());
+			if (CLogMgt.isLevelFinest()) e.printStackTrace();
+		}
+		if (media != null)
+			iframe.setContent(media);
+	}
+
 }
+
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/acct/WAcctViewerData.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/acct/WAcctViewerData.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/acct/WAcctViewerData.java	Mon Feb 10 21:08:53 2014 -0500
@@ -55,6 +55,10 @@
  *
  *  @author Niraj Sohun
  *  		July 27, 2007
+ *
+ * @author Michael McKay, 
+ * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+ * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 
 public class WAcctViewerData 
@@ -105,6 +109,9 @@
 	/** Containing TableName and AD_Table_ID    */
 	public HashMap<String,Integer> tableInfo = new HashMap<String,Integer>();
 
+	/** Containing Column and selected record_id     */
+	public HashMap<String,Integer>	buttonRecordID = new HashMap<String,Integer>();
+
 	//  Display Info
 	
 	/** Display Qty			*/
@@ -326,6 +333,22 @@
 		return retValue;
 	} // getButtonText
 
+	/**
+	 *  Get Button Record ID
+	 *
+	 *  @param tableName table
+	 *  @param columnName column
+	 *  @param selectSQL sql
+	 *  @return Text on button
+	 */
+	protected int getButtonRecordID (String keyColumn)
+	{
+		Integer record_id = buttonRecordID.get(keyColumn);
+		if (record_id == null || record_id.intValue() == 0)
+			return 0;
+		return record_id.intValue();
+	}   //  getButtonRecordID
+
 	/**************************************************************************
 	/**
 	 *  Create Query and submit
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/apps/form/WPayPrint.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/apps/form/WPayPrint.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/apps/form/WPayPrint.java	Mon Feb 10 21:08:53 2014 -0500
@@ -35,6 +35,9 @@
 import org.adempiere.webui.component.Rows;
 import org.adempiere.webui.component.Window;
 import org.adempiere.webui.editor.WNumberEditor;
+import org.adempiere.webui.editor.WSearchEditor;
+import org.adempiere.webui.event.ValueChangeEvent;
+import org.adempiere.webui.event.ValueChangeListener;
 import org.adempiere.webui.panel.ADForm;
 import org.adempiere.webui.panel.CustomForm;
 import org.adempiere.webui.panel.IFormController;
@@ -42,12 +45,14 @@
 import org.adempiere.webui.window.FDialog;
 import org.adempiere.webui.window.SimplePDFViewer;
 import org.compiere.apps.form.PayPrint;
+import org.compiere.model.MLookup;
+import org.compiere.model.MLookupFactory;
 import org.compiere.model.MPaySelectionCheck;
 import org.compiere.model.MPaymentBatch;
 import org.compiere.print.ReportEngine;
 import org.compiere.util.DB;
+import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
-import org.compiere.util.KeyNamePair;
 import org.compiere.util.Msg;
 import org.compiere.util.PaymentExport;
 import org.compiere.util.ValueNamePair;
@@ -67,7 +72,7 @@
  *  Contributors:
  *    Carlos Ruiz - GlobalQSS - FR 3132033 - Make payment export class configurable per bank
  */
-public class WPayPrint extends PayPrint implements IFormController, EventListener
+public class WPayPrint extends PayPrint implements IFormController, EventListener, ValueChangeListener
 {
 	private CustomForm form = new CustomForm();
 
@@ -78,8 +83,8 @@
 	{
 		try
 		{
+			dynInit();
 			zkInit();
-			dynInit();
 			Borderlayout contentLayout = new Borderlayout();
 			contentLayout.setWidth("100%");
 			contentLayout.setHeight("100%");
@@ -107,7 +112,7 @@
 	private Button bCancel = southPanel.getButton(ConfirmPanel.A_CANCEL);
 	private Button bProcess = southPanel.createButton(ConfirmPanel.A_PROCESS);
 	private Label lPaySelect = new Label();
-	private Listbox fPaySelect = ListboxFactory.newDropdownListbox();
+	private WSearchEditor paySelectSearch = null;
 	private Label lBank = new Label();
 	private Label fBank = new Label();
 	private Label lPaymentRule = new Label();
@@ -138,7 +143,6 @@
 		bProcess.addActionListener(this);
 		//
 		lPaySelect.setText(Msg.translate(Env.getCtx(), "C_PaySelection_ID"));
-		fPaySelect.addActionListener(this);
 		//
 		lBank.setText(Msg.translate(Env.getCtx(), "C_BankAccount_ID"));
 		//
@@ -161,8 +165,8 @@
 		Rows rows = centerLayout.newRows();
 		Row row = rows.newRow();
 		row.appendChild(lPaySelect.rightAlign());
-		row.appendChild(fPaySelect);
-		
+		row.appendChild(paySelectSearch.getComponent());
+
 		row = rows.newRow();
 		row.appendChild(lBank.rightAlign());
 		row.appendChild(fBank);
@@ -189,17 +193,12 @@
 	 */
 	private void dynInit()
 	{
-		ArrayList<KeyNamePair> data = getPaySelectionData();
-		for(KeyNamePair pp : data)
-			fPaySelect.addItem(pp);
-		
-		if (fPaySelect.getItemCount() == 0)
-			FDialog.info(m_WindowNo, form, "VPayPrintNoRecords");
-		else
-		{
-			fPaySelect.setSelectedIndex(0);
-			loadPaySelectInfo();
-		}
+		//  C_PaySelection_ID
+		int AD_Column_ID = 7670;        //  C_PaySelectionCheck.C_PaySelection_ID
+		MLookup lookupPS = MLookupFactory.get (Env.getCtx(), m_WindowNo, 0, AD_Column_ID, DisplayType.Search);
+		paySelectSearch = new WSearchEditor("C_PaySelection_ID", true, false, true, lookupPS);
+		paySelectSearch.addValueChangeListener(this);
+
 	}   //  dynInit
 
 	/**
@@ -219,16 +218,9 @@
 		if (C_PaySelection_ID == 0)
 			return;
 		//
-		for (int i = 0; i < fPaySelect.getItemCount(); i++)
-		{
-			KeyNamePair pp = fPaySelect.getItemAtIndex(i).toKeyNamePair();
-			if (pp.getKey() == C_PaySelection_ID)
-			{
-				fPaySelect.setSelectedIndex(i);
-				loadPaySelectInfo();
-				return;
-			}
-		}
+		m_C_PaySelection_ID = C_PaySelection_ID;
+		paySelectSearch.setValue(new Integer(m_C_PaySelection_ID));
+		loadPaySelectInfo();
 	}	//	setsetPaySelection
 
 	
@@ -239,13 +231,13 @@
 	public void onEvent(Event e)
 	{
 	//	log.config( "VPayPrint.actionPerformed" + e.toString());
-		if (e.getTarget() == fPaySelect)
-			loadPaySelectInfo();
+		if (e.getTarget() == bCancel)
+			dispose();
+		else if (m_C_PaySelection_ID <= 0)
+			return;
 		else if (e.getTarget() == fPaymentRule)
 			loadPaymentRuleInfo();
 		//
-		else if (e.getTarget() == bCancel)
-			dispose();
 		else if (e.getTarget() == bExport)
 			cmd_export();
 		else if (e.getTarget() == bProcess)
@@ -260,12 +252,11 @@
 	private void loadPaySelectInfo()
 	{
 		log.info( "VPayPrint.loadPaySelectInfo");
-		if (fPaySelect.getSelectedIndex() == -1)
+		if (m_C_PaySelection_ID <= 0)
 			return;
 		
 		//  load Banks from PaySelectLine
-		int C_PaySelection_ID = fPaySelect.getSelectedItem().toKeyNamePair().getKey();
-		loadPaySelectInfo(C_PaySelection_ID);
+		loadPaySelectInfo(m_C_PaySelection_ID);
 		
 		fBank.setText(bank);
 		fCurrency.setText(currency);
@@ -286,8 +277,7 @@
 		fPaymentRule.removeAllItems();
 		
 		// load PaymentRule for Bank
-		int C_PaySelection_ID = fPaySelect.getSelectedItem().toKeyNamePair().getKey();
-		ArrayList<ValueNamePair> data = loadPaymentRule(C_PaySelection_ID);
+		ArrayList<ValueNamePair> data = loadPaymentRule(m_C_PaySelection_ID);
 		for(ValueNamePair pp : data)
 			fPaymentRule.addItem(pp);
 		
@@ -303,6 +293,8 @@
 	 */
 	private void loadPaymentRuleInfo()
 	{
+		if (fPaymentRule.getSelectedItem() == null)
+			return;
 		ValueNamePair pp = fPaymentRule.getSelectedItem().toValueNamePair();
 		if (pp == null)
 			return;
@@ -311,8 +303,7 @@
 		log.info("PaymentRule=" + PaymentRule);
 		fNoPayments.setText(" ");
 		
-		int C_PaySelection_ID = fPaySelect.getSelectedItem().toKeyNamePair().getKey();
-		String msg = loadPaymentRuleInfo(C_PaySelection_ID, PaymentRule);
+		String msg = loadPaymentRuleInfo(m_C_PaySelection_ID, PaymentRule);
 		
 		if(noPayments != null)
 			fNoPayments.setText(noPayments);
@@ -332,6 +323,8 @@
 	 */
 	private void cmd_export()
 	{
+		if (fPaymentRule.getSelectedItem() == null)
+			return;
 		String PaymentRule = fPaymentRule.getSelectedItem().toValueNamePair().getValue();
 		log.info(PaymentRule);
 		if (!getChecks(PaymentRule))
@@ -395,6 +388,8 @@
 	 */
 	private void cmd_EFT()
 	{
+		if (fPaymentRule.getSelectedItem() == null)
+			return;
 		String PaymentRule = fPaymentRule.getSelectedItem().toValueNamePair().getValue();
 		log.info(PaymentRule);
 		if (!getChecks(PaymentRule))
@@ -407,6 +402,8 @@
 	 */
 	private void cmd_print()
 	{
+		if (fPaymentRule.getSelectedItem() == null)
+			return;
 		String PaymentRule = fPaymentRule.getSelectedItem().toValueNamePair().getValue();
 		log.info(PaymentRule);
 		if (!getChecks(PaymentRule))
@@ -511,7 +508,7 @@
 	private boolean getChecks(String PaymentRule)
 	{
 		//  do we have values
-		if (fPaySelect.getSelectedIndex() == -1 || m_C_BankAccount_ID == -1
+		if (m_C_PaySelection_ID <= 0 || m_C_BankAccount_ID == -1
 			|| fPaymentRule.getSelectedIndex() == -1 || fDocumentNo.getValue() == null)
 		{
 			FDialog.error(m_WindowNo, form, "VPayPrintNoRecords",
@@ -520,13 +517,12 @@
 		}
 
 		//  get data
-		int C_PaySelection_ID = fPaySelect.getSelectedItem().toKeyNamePair().getKey();
 		int startDocumentNo = ((Number)fDocumentNo.getValue()).intValue();
 
-		log.config("C_PaySelection_ID=" + C_PaySelection_ID + ", PaymentRule=" +  PaymentRule + ", DocumentNo=" + startDocumentNo);
+		log.config("C_PaySelection_ID=" + m_C_PaySelection_ID + ", PaymentRule=" +  PaymentRule + ", DocumentNo=" + startDocumentNo);
 		//
-		//	get Slecetions
-		m_checks = MPaySelectionCheck.get(C_PaySelection_ID, PaymentRule, startDocumentNo, null);
+		//	get Selections
+		m_checks = MPaySelectionCheck.get(m_C_PaySelection_ID, PaymentRule, startDocumentNo, null);
 
 		//
 		if (m_checks == null || m_checks.length == 0)
@@ -535,7 +531,7 @@
 				"(" + Msg.translate(Env.getCtx(), "C_PaySelectionLine_ID") + " #0");
 			return false;
 		}
-		m_batch = MPaymentBatch.getForPaySelection (Env.getCtx(), C_PaySelection_ID, null);
+		m_batch = MPaymentBatch.getForPaySelection (Env.getCtx(), m_C_PaySelection_ID, null);
 		return true;
 	}   //  getChecks
 	
@@ -543,4 +539,26 @@
 		return form;
 	}
 
+	/**
+	 *  Vetoable Change Listener.
+	 *  - Payment Selection
+	 *  @param e event
+	 */
+	@Override
+	public void valueChange(ValueChangeEvent e) {
+		String name = e.getPropertyName();
+		Object value = e.getNewValue();
+		log.config(name + "=" + value);
+		if (value == null)
+			return;
+		
+		// Payment Selection
+		if (name.equals("C_PaySelection_ID"))
+		{
+			paySelectSearch.setValue(value);
+			m_C_PaySelection_ID = ((Integer)value).intValue();
+			loadPaySelectInfo();
+		}
+	}
+
 }   //  PayPrint
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/component/AbstractADTab.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/component/AbstractADTab.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/component/AbstractADTab.java	Mon Feb 10 21:08:53 2014 -0500
@@ -150,7 +150,6 @@
 					if (adtab.getTabLevel() < currentLevel || i == 0)
 					{
 						parents.add(i);
-						currentLevel = adtab.getTabLevel();
 					}
 				}
 				Collections.reverse(parents);
@@ -183,7 +182,8 @@
 					GridField[] fields = adtab.getGridTab().getFields();
 					for (GridField gf : fields)
 					{
-						gf.updateContext();
+						if (gf.getValue() != null) // preserve value of tab above if null on current tab
+							gf.updateContext();
 					}
 				}
 			}
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/component/Checkbox.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/component/Checkbox.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/component/Checkbox.java	Mon Feb 10 21:08:53 2014 -0500
@@ -32,6 +32,8 @@
 	 * 
 	 */
 	private static final long serialVersionUID = 3306775098016676628L;
+	
+	private Object m_oldValue;
 
 	public void setEnabled(boolean enabled)
     {
@@ -76,4 +78,47 @@
 	public void addActionListener(EventListener listener) {
 		addEventListener(Events.ON_CHECK, listener);
 	}
+
+	/**
+	 *	Return Editor value
+	 *  @return value
+	 */
+	public Object getValue()
+	{
+		return new Boolean (isSelected());
+	}	//	getValue
+
+	/**
+	 * Set the old value of the field.  For use in future comparisons.
+	 * The old value must be explicitly set though this call.
+	 * @param m_oldValue
+	 */
+	public void set_oldValue() {
+		this.m_oldValue = getValue();
+	}
+	/**
+	 * Get the old value of the field explicitly set in the past
+	 * @return
+	 */
+	public Object get_oldValue() {
+		return m_oldValue;
+	}
+	/**
+	 * Has the field changed over time?
+	 * @return true if the old value is different than the current.
+	 */
+	public boolean hasChanged() {
+		// Both or either could be null
+		if(getValue() != null)
+			if(m_oldValue != null)
+				return !m_oldValue.equals(getValue());
+			else
+				return true;
+		else  // getValue() is null
+			if(m_oldValue != null)
+				return true;
+			else
+				return false;
+	}
+
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/component/Combobox.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/component/Combobox.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/component/Combobox.java	Mon Feb 10 21:08:53 2014 -0500
@@ -61,7 +61,18 @@
 	}
 
 	public void appendItem(String name, Object value) {
-		ComboItem item = new ComboItem(name, value);
+
+		ComboItem item;
+		
+		if (name == "")
+		{
+			//  Null items are skipped in Comboitem.class setLable() on creation
+			name = " ";
+			item = new ComboItem(name, value);
+		}
+		else
+			item = new ComboItem(name, value);
+		
 		this.appendChild(item);
 	}
 	
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/component/ConfirmPanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/component/ConfirmPanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/component/ConfirmPanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -25,6 +25,7 @@
 import org.adempiere.webui.LayoutUtils;
 import org.compiere.util.Env;
 import org.compiere.util.Msg;
+import org.zkoss.zk.ui.Component;
 import org.zkoss.zk.ui.event.EventListener;
 import org.zkoss.zk.ui.event.Events;
 import org.zkoss.zul.Hbox;
@@ -102,7 +103,8 @@
     {
         Button button = new Button();
         button.setName("btn"+name);
-        button.setId(name);
+        button.setId(name);  // Might get overwritten by renderer
+        button.setAttribute("zk_component_ID", "ConfirmPanel_btn"+name);
         String text = Msg.translate(Env.getCtx(), name);
         if (!name.equals(text))
         	text = text.replaceAll("[&]", "");
@@ -258,6 +260,17 @@
     }
 
     /**
+     * add a component before the button to the left side of the confirm panel
+     * @param button button
+     */
+    public void addComponentLeftBefore(Component comp, Button button)
+    {
+    	if (!buttonMap.containsKey(button.getId()))
+    		buttonMap.put(button.getId(), button);
+        pnlBtnLeft.insertBefore(comp, button);
+    }
+
+    /**
      * add button to the right side of the confirm panel
      * @param button button
      */
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/component/Datebox.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/component/Datebox.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/component/Datebox.java	Mon Feb 10 21:08:53 2014 -0500
@@ -25,7 +25,11 @@
  */
 public class Datebox extends org.zkoss.zul.Datebox
 {
-    /**
+ 
+	private Object m_oldValue = null;
+
+
+	/**
 	 * 
 	 */
 	private static final long serialVersionUID = -5890574778856946570L;
@@ -40,4 +44,39 @@
     {
     	return !isReadonly();
     }
+    
+	/**
+	 * Set the old value of the field.  For use in future comparisons.
+	 * The old value must be explicitly set though this call.
+	 * @param m_oldValue
+	 */
+	public void set_oldValue() {
+		this.m_oldValue = getValue();
+	}
+
+	/**
+	 * Get the old value of the field explicitly set in the past
+	 * @return
+	 */
+	public Object get_oldValue() {
+		return m_oldValue;
+	}
+	/**
+	 * Has the field changed over time?
+	 * @return true if the old value is different than the current.
+	 */
+	public boolean hasChanged() {
+		// Both or either could be null
+		if(getValue() != null)
+			if(m_oldValue != null)
+				return !m_oldValue.equals(getValue());
+			else
+				return true;
+		else  // getValue() is null
+			if(m_oldValue != null)
+				return true;
+			else
+				return false;
+	}
+
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/component/EditorBox.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/component/EditorBox.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/component/EditorBox.java	Mon Feb 10 21:08:53 2014 -0500
@@ -120,6 +120,7 @@
 	 */
 	public void setEnabled(boolean enabled) {
 		txt.setReadonly(!enabled);
+		
 		btn.setEnabled(enabled);
 		btn.setVisible(enabled);
 		btnColumn.setVisible(enabled);
@@ -130,6 +131,21 @@
 	}
 
 	/**
+	 * @param enabled
+	 */
+	public void setEnabled(boolean enabled, boolean keepButton) {
+		txt.setReadonly(!enabled);
+		
+		btn.setEnabled(keepButton);
+		btn.setVisible(keepButton);
+		btnColumn.setVisible(keepButton);
+		if (keepButton)
+			btnColumn.setSclass("editor-button");
+		else
+			btnColumn.setSclass("");
+	}
+
+	/**
 	 * @return boolean
 	 */
 	public boolean isEnabled() {
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/component/NumberBox.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/component/NumberBox.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/component/NumberBox.java	Mon Feb 10 21:08:53 2014 -0500
@@ -60,6 +60,8 @@
     private Decimalbox decimalBox = null;
     private Button btn;
     
+	private Object m_oldValue = null;
+
     private boolean btnEnabled = true;
 
 	private Popup popup;
@@ -443,4 +445,39 @@
 	{
 		return this.btnEnabled;
 	}
+	
+	/**
+	 * Set the old value of the field.  For use in future comparisons.
+	 * The old value must be explicitly set though this call.
+	 * @param m_oldValue
+	 */
+	public void set_oldValue() {
+		this.m_oldValue = getValue();
+	}
+
+	/**
+	 * Get the old value of the field explicitly set in the past
+	 * @return
+	 */
+	public Object get_oldValue() {
+		return m_oldValue;
+	}
+	/**
+	 * Has the field changed over time?
+	 * @return true if the old value is different than the current.
+	 */
+	public boolean hasChanged() {
+		// Both or either could be null
+		if(getValue() != null)
+			if(m_oldValue != null)
+				return !m_oldValue.equals(getValue());
+			else
+				return true;
+		else  // getValue() is null
+			if(m_oldValue != null)
+				return true;
+			else
+				return false;
+	}
+
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/component/Textbox.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/component/Textbox.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/component/Textbox.java	Mon Feb 10 21:08:53 2014 -0500
@@ -37,6 +37,8 @@
 	private static final long serialVersionUID = 2201466028538929955L;
 
 	private Obscure	m_obscure = null;
+	
+	private Object m_oldValue = null;
 
 	private boolean m_infocus;
 
@@ -118,4 +120,40 @@
 				setValue(getValue());
 		}		
 	}
-}
+
+	/**
+	 * Set the old value of the field.  For use in future comparisons.
+	 * The old value must be explicitly set though this call.
+	 * @param m_oldValue
+	 */
+	public void set_oldValue() {
+		this.m_oldValue = getValue();
+	}
+
+	/**
+	 * Get the old value of the field explicitly set in the past
+	 * @return
+	 */
+	public Object get_oldValue() {
+		return m_oldValue;
+	}
+	/**
+	 * Has the field changed over time?
+	 * @return true if the old value is different than the current.
+	 */
+	public boolean hasChanged() {
+		// Both or either could be null
+		if(getValue() != null)
+			if(m_oldValue != null)
+				return !m_oldValue.equals(getValue());
+			else
+				return true;
+		else  // getValue() is null
+			if(m_oldValue != null)
+				return true;
+			else
+				return false;
+	}
+
+
+} //  Textbox
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/component/WListItemRenderer.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/component/WListItemRenderer.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/component/WListItemRenderer.java	Mon Feb 10 21:08:53 2014 -0500
@@ -168,6 +168,8 @@
 			listcell = getCellComponent(table, field, rowIndex, colIndex);
 			listcell.setParent(item);
 			listcell.addEventListener(Events.ON_DOUBLE_CLICK, cellListener);
+			listcell.setAttribute("zk_component_ID", "ListItem_R" + rowIndex + "_C" + colIndex);
+
 			colIndex++;
 		}
 
@@ -297,6 +299,8 @@
 			listcell.setValue("");
 		}
 
+		listcell.setAttribute("zk_component_ID", "ListItem_Cell_" + rowIndex + "_" + columnIndex);
+
 		return listcell;
 	}
 
@@ -380,7 +384,7 @@
         	if (classType != null && classType.isAssignableFrom(IDColumn.class))
         	{
         		header = new ListHeader("");
-        		header.setWidth("20px");
+        		header.setWidth("35px");
         	}
         	else
         	{
@@ -429,6 +433,8 @@
             }
         }
 
+        header.setAttribute("zk_component_ID", "ListItem_Header_C" + headerIndex);
+
 		return header;
 	}
 
@@ -572,18 +578,21 @@
 				tableColumn = m_tableColumns.get(0);
 				for (int i = 0; i < cnt; i++) {
 					IDColumn idcolumn = (IDColumn) table.getValueAt(i, 0);
-					Listitem item = table.getItemAtIndex(i);
-
-					value = item.isSelected();
-					Boolean old = idcolumn.isSelected();
-
-					if (!old.equals(value)) {
-						vcEvent = new TableValueChangeEvent(source,
-								tableColumn.getHeaderValue().toString(),
-								i, 0,
-								old, value);
-
-						fireTableValueChange(vcEvent);
+					if (idcolumn != null)
+					{
+						Listitem item = table.getItemAtIndex(i);
+	
+						value = item.isSelected();
+						Boolean old = idcolumn.isSelected();
+	
+						if (!old.equals(value)) {
+							vcEvent = new TableValueChangeEvent(source,
+									tableColumn.getHeaderValue().toString(),
+									i, 0,
+									old, value);
+	
+							fireTableValueChange(vcEvent);
+						}
 					}
 				}
 			}
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/component/WListbox.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/component/WListbox.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/component/WListbox.java	Mon Feb 10 21:08:53 2014 -0500
@@ -17,24 +17,33 @@
 
 package org.adempiere.webui.component;
 
+import java.awt.Component;
 import java.math.BigDecimal;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Timestamp;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 import java.util.logging.Level;
 
+import javax.swing.table.DefaultTableCellRenderer;
+import javax.swing.table.TableCellRenderer;
+import javax.swing.table.TableColumn;
+import javax.swing.table.TableModel;
+
 import org.adempiere.webui.event.TableValueChangeEvent;
 import org.adempiere.webui.event.TableValueChangeListener;
 import org.adempiere.webui.event.WTableModelEvent;
 import org.adempiere.webui.event.WTableModelListener;
 import org.adempiere.webui.exception.ApplicationException;
+import org.compiere.apps.search.Info_Column;
 import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
 import org.compiere.minigrid.IMiniTable;
 import org.compiere.minigrid.MiniTable;
 import org.compiere.model.MRole;
+import org.compiere.model.MSysConfig;
 import org.compiere.model.PO;
 import org.compiere.util.CLogger;
 import org.compiere.util.Env;
@@ -62,6 +71,9 @@
 	 */
 	private static final long serialVersionUID = 8717707799347994189L;
 
+	public static final String SYSCONFIG_INFO_DEFAULTSELECTED = "INFO_DEFAULTSELECTED";
+	public static final String SYSCONFIG_INFO_DOUBLECLICKTOGGLESSELECTION = "INFO_DOUBLECLICKTOGGLESSELECTION";
+
 	/**	Logger. */
 	private static CLogger logger = CLogger.getCLogger(MiniTable.class);
 
@@ -80,6 +92,20 @@
 	/** Color Column compare data.       */
 	private Object m_colorDataCompare = Env.ZERO;
 
+	/** Specify if the records should be checked(selected) by default (multi selection mode only) */
+	private boolean				p_isDefaultSelected = MSysConfig.getBooleanValue(SYSCONFIG_INFO_DEFAULTSELECTED, false, Env.getAD_Client_ID(Env.getCtx()));
+	/** Is Total Show */
+	private boolean showTotals = false;
+	private boolean autoResize = true;
+
+	public boolean isAutoResize() {
+		return autoResize;
+	}
+
+	public void setAutoResize(boolean autoResize) {
+		this.autoResize = autoResize;
+	}
+
 	/**
 	 * Default constructor.
 	 *
@@ -128,6 +154,10 @@
 	    	}
 	    }
 
+	    autoSize();
+		if(getShowTotals())
+			addTotals(m_layout);
+		
 	    // re-render
 	    this.repaint();
 
@@ -375,7 +405,7 @@
             }
             if (layout[columnIndex].getColClass() == IDColumn.class)
             {
-                m_keyColumnIndex = columnIndex;
+                setKeyColumnIndex(columnIndex);
             }
         }
 
@@ -624,9 +654,11 @@
 		{
 			logger.log(Level.SEVERE, "", exception);
 		}
-		// TODO implement this
-		//autoSize();
-
+		
+		autoSize();
+		if(getShowTotals())
+			addTotals(m_layout);
+		
 		// repaint the table
 		this.repaint();
 
@@ -701,8 +733,10 @@
 				getModel().setDataAt(data, row, col);
 			}
 		}
-		// TODO implement this
-		//autoSize();
+
+		autoSize();
+		if(getShowTotals())
+			addTotals(m_layout);
 
 		// repaint the table
 		this.repaint();
@@ -852,6 +886,15 @@
 	}   //  isMultiSelection
 
 	/**
+	 * (for multi-selection only)
+	 * @return true if records are selected by default
+	 */
+	public boolean isDefaultSelected()
+	{
+		return p_isDefaultSelected;
+	}
+
+	/**
 	 *  Set ColorColumn comparison criteria.
 	 *
 	 *  @param dataCompare object encapsualating comparison criteria
@@ -940,6 +983,113 @@
 		return valOtherwise;
 	}   //  getColorCode
 
+	/**
+	 *  Set if Totals is Show
+	 *  @param boolean Show
+	 */
+	public void setShowTotals(boolean show)
+	{
+		showTotals = show;
+	}
+	/**
+	 *  get if Totals is Show
+	 *  @param boolean Show
+	 */
+	public boolean getShowTotals()
+	{
+		return showTotals;
+	}
+	
+	/**
+	 *  Adding a new row with the totals
+	 */
+	public void addTotals(ColumnInfo[] layout)
+	{
+		if (getRowCount() == 0 || layout.length == 0)
+			return;
+		
+		Object[] total = new Object[layout.length];
+		
+		for (int row = 0 ; row < getRowCount(); row ++)
+		{
+
+				for (int col = 0; col < layout.length; col++)
+				{
+					//int viewRow = row;
+					//int viewCol = convertColumnIndexToView(col);
+					//int modelRow = convertRowIndexToModel(row);
+					//int modelCol = convertColumnIndexToModel(col);
+					Object data = getModel().getValueAt(row, col);
+					Class<?> c = layout[col].getColClass();
+					if (c == BigDecimal.class)
+					{	
+						BigDecimal subtotal = Env.ZERO;
+						if(total[col]!= null)
+							subtotal = (BigDecimal)(total[col]);
+							
+						BigDecimal amt =  (BigDecimal) data;
+						if(subtotal == null)
+							subtotal = Env.ZERO;
+						if(amt == null )
+							amt = Env.ZERO;
+						total[col] = subtotal.add(amt);
+					}
+					else if (c == Double.class)
+					{
+						Double subtotal = new Double(0);
+						if(total[col] != null)
+							subtotal = (Double)(total[col]);
+						
+						Double amt =  (Double) data;
+						if(subtotal == null)
+							subtotal = new Double(0);
+						if(amt == null )
+							subtotal = new Double(0);
+						total[col] = subtotal + amt;
+						
+					}		
+				}	
+		}
+		
+		//adding total row
+
+		int row = getRowCount() + 1;
+		boolean markerSet = false;
+		setRowCount(row);
+		for (int col = 0; col < layout.length; col++)
+		{
+			int modelCol = convertColumnIndexToModel(col);
+			Class<?> c = layout[modelCol].getColClass();
+			if (c == BigDecimal.class)
+			{	
+				setValueAt(total[col] , row - 1, col);
+			}
+			else if (c == Double.class)
+			{
+				setValueAt(total[col] , row -1 , col);
+			}
+			else 
+			{	
+				if(c == String.class && !markerSet)
+				{	
+					setValueAt(" Σ  " , row -1 , col);
+					markerSet = true;
+				}	
+				else
+					setValueAt(null , row - 1, col );	
+			}	
+			
+		}
+	}
+
+	/**
+	 *  Adding a new row with the totals
+	 */
+	public void addTotals(Info_Column[] layout)
+	{
+		addTotals((ColumnInfo[]) layout);
+	}
+	
 	/* (non-Javadoc)
 	 * @see org.adempiere.webui.event.TableValueChangeListener#tableValueChange
 	 * 		(org.adempiere.webui.event.TableValueChangeEvent)
@@ -988,6 +1138,19 @@
 		return;
 	}
 
+	/**
+	 *  Get the record id of the lead (highlighted) row
+	 *  @return selected key
+	 */
+	public int getLeadRowKey()
+	{
+		Integer rowKey = getSelectedRowKey();
+		if (rowKey != null)
+			return rowKey.intValue();
+		else
+			return 0;
+	}   //  getLeadRowKey
+
     /**
      * Get the table layout.
      *
@@ -1047,12 +1210,6 @@
         return;
     }
 
-    /**
-     * no op, to ease porting of swing form
-     */
-	public void autoSize() {
-		//no op
-	}
 
 	public int getColumnCount() {
 		return getModel() != null ? getModel().getNoColumns() : 0;
@@ -1062,4 +1219,180 @@
 		return m_keyColumnIndex;
 	}
 
+	@Override
+	public int getRowKey(int row) {
+		if (getKeyColumnIndex() < 0)
+			throw new UnsupportedOperationException("Key Column is not defined");
+		
+		int rows = this.getRowCount();
+		
+		if (this.getShowTotals())
+			rows = rows - 1;
+
+		if (row >= 0 && row < rows)
+		{
+	        Object data = getValueAt(row, convertColumnIndexToView(getKeyColumnIndex())); //  Test
+			if (data instanceof IDColumn)
+			{
+				IDColumn id = (IDColumn)data;
+				return id.getRecord_ID().intValue();
+			}
+		}
+		return 0;
+	}
+
+	@Override
+	public ArrayList<Integer> getSelectedKeys() {
+		if (getModel() == null)
+		{
+			throw new UnsupportedOperationException("Layout not defined");
+		}
+		if (getKeyColumnIndex() < 0)
+		{
+			throw new UnsupportedOperationException("Key Column is not defined");
+		}
+		//
+		ArrayList<Integer> list = new ArrayList<Integer>();
+		for (int row = 0; row < getRowCount(); row++)
+		{
+			Object data = getModel().getValueAt(row, getKeyColumnIndex());
+			if (data instanceof IDColumn)
+			{
+				IDColumn record = (IDColumn)data;
+				if (record.isSelected())
+				{
+					list.add(record.getRecord_ID());
+				}
+			}
+		}
+		return list;
+	}
+
+	/**
+	 *	Size Columns.
+	 *  Uses Mimimum Column Size
+	 */
+	public void autoSize()
+	{
+//  TODO finish port from SWING
+		if ( !autoResize  )
+			return;
+/*
+		long start = System.currentTimeMillis();
+		//
+		final int SLACK = 8;		//	making sure it fits in a column
+		final int MAXSIZE = 300;    //	max size of a column
+		//
+		ListModelTable model = this.getModel();
+		int size = model.getNoColumns();
+		//	for all columns
+		for (int col = 0; col < size; col++)
+		{
+			//  Column & minimum width
+			ListColumn tc = model.get.getColumn(col);
+			int width = 0;
+			if (m_minWidth.size() > col)
+				width = ((Integer)m_minWidth.get(col)).intValue();
+		//  log.config( "Column=" + col + " " + column.getHeaderValue());
+
+			//	Header
+			TableCellRenderer renderer = tc.getHeaderRenderer();
+			if (renderer == null)
+				renderer = new DefaultTableCellRenderer();
+			Component comp = renderer.getTableCellRendererComponent
+				(this, tc.getHeaderValue(), false, false, 0, 0);
+		//	log.fine( "Hdr - preferred=" + comp.getPreferredSize().width + ", width=" + comp.getWidth());
+			width = Math.max(width, comp.getPreferredSize().width + SLACK);
+
+			//	Cells
+			int maxRow = Math.min(30, getRowCount());       //  first 30 rows
+			for (int row = 0; row < maxRow; row++)
+			{
+				renderer = getCellRenderer(row, col);
+				comp = renderer.getTableCellRendererComponent
+					(this, getValueAt(row, col), false, false, row, col);
+				if (comp != null) {
+					int rowWidth = comp.getPreferredSize().width + SLACK;
+					width = Math.max(width, rowWidth);
+				}
+			}
+			//	Width not greater ..
+			width = Math.min(MAXSIZE, width);
+			tc.setPreferredWidth(width);
+		//	log.fine( "width=" + width);
+		}	//	for all columns
+		log.finer("Cols=" + size + " - " + (System.currentTimeMillis()-start) + "ms");
+*/
+	}	//	autoSize
+
+	/**
+	 * Determines if the row is marked selected in the key column. The table 
+	 * selection status (highlight) is not considered.
+	 * @param row
+	 * @return true if the row is marked selected in the key column
+	 */
+	public boolean isRowChecked(int row)
+	{
+		int keyColumn = this.getKeyColumnIndex();
+		
+		if (keyColumn < 0)
+			return false;
+		
+		//  The selection can be indicated by an IDColumn or Boolean in the keyColumn position
+		Object data = getValueAt(row, convertColumnIndexToView(keyColumn)); 
+		if (data instanceof IDColumn)
+			return ((IDColumn) data).isSelected();
+		else if (data instanceof Boolean)
+			return (Boolean) data;
+
+		return	false;
+	}
+
+	@Override
+	public void setKeyColumnIndex(int keyColumnIndex) {
+
+		m_keyColumnIndex = keyColumnIndex;
+
+	}
+
+	@Override
+	public int convertColumnIndexToView(int modelColumnIndex) {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	@Override
+	public int convertRowIndexToModel(int row) {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+    /**
+     * If the table row has a IDColumn or a boolean checkbox in the KeyColumnIndex
+     * this function will set the checkbox according to the setValue parameter
+     * @param row - the view row
+     * @param setValue - the checkbox value to set 
+     */
+    public void setRowChecked(int row, boolean setValue)
+    {   	
+        //  The key column will be defined or zero by default.
+    	//  Check the class of the data in the cell to verify if 
+    	//  it is a selection column.  Selection columns can be
+    	//  of type IDColumn or Boolean.
+    	Object data = this.getValueAt(row, this.convertColumnIndexToView(getKeyColumnIndex()));
+		if (data instanceof IDColumn)
+		{
+			IDColumn id = (IDColumn)data;
+			id.setSelected(setValue);
+		}
+		else if (data instanceof Boolean)
+		{
+			data = setValue;
+		}
+		else return;
+		
+		this.setValueAt(data, row, this.convertColumnIndexToView(getKeyColumnIndex()));
+
+    }
+
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/dashboard/DPViews.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/dashboard/DPViews.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/dashboard/DPViews.java	Mon Feb 10 21:08:53 2014 -0500
@@ -20,6 +20,7 @@
 import org.compiere.model.MRole;
 import org.compiere.util.Env;
 import org.compiere.util.Msg;
+import org.compiere.util.Util;
 import org.zkoss.zk.ui.Component;
 import org.zkoss.zk.ui.event.Event;
 import org.zkoss.zk.ui.event.EventListener;
@@ -53,7 +54,7 @@
 		if (MRole.getDefault().isAllow_Info_Product())
 		{
 			ToolBarButton btnViewItem = new ToolBarButton("InfoProduct");
-			btnViewItem.setLabel(Msg.getMsg(Env.getCtx(), "InfoProduct"));
+			btnViewItem.setLabel(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "InfoProduct")));
 			btnViewItem.setImage("/images/InfoProduct16.png");
 			btnViewItem.addEventListener(Events.ON_CLICK, this);
 			vbox.appendChild(btnViewItem);
@@ -61,7 +62,7 @@
 		if (MRole.getDefault().isAllow_Info_BPartner())
 		{
 			ToolBarButton btnViewItem = new ToolBarButton("InfoBPartner");
-			btnViewItem.setLabel(Msg.getMsg(Env.getCtx(), "InfoBPartner"));
+			btnViewItem.setLabel(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "InfoBPartner")));
 			btnViewItem.setImage("/images/InfoBPartner16.png");
 			btnViewItem.addEventListener(Events.ON_CLICK, this);
 			vbox.appendChild(btnViewItem);
@@ -69,7 +70,7 @@
 		if (MRole.getDefault().isShowAcct() && MRole.getDefault().isAllow_Info_Account())
 		{
 			ToolBarButton btnViewItem = new ToolBarButton("InfoAccount");
-			btnViewItem.setLabel(Msg.getMsg(Env.getCtx(), "InfoAccount"));
+			btnViewItem.setLabel(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "InfoAccount")));
 			btnViewItem.setImage("/images/InfoAccount16.png");
 			btnViewItem.addEventListener(Events.ON_CLICK, this);
 			vbox.appendChild(btnViewItem);
@@ -77,7 +78,7 @@
 		if (MRole.getDefault().isAllow_Info_Schedule())
 		{
 			ToolBarButton btnViewItem = new ToolBarButton("InfoSchedule");
-			btnViewItem.setLabel(Msg.getMsg(Env.getCtx(), "InfoSchedule"));
+			btnViewItem.setLabel(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "InfoSchedule")));
 			btnViewItem.setImage("/images/InfoSchedule16.png");
 			btnViewItem.addEventListener(Events.ON_CLICK, this);
 			vbox.appendChild(btnViewItem);
@@ -86,7 +87,7 @@
 		if (MRole.getDefault().isAllow_Info_Order())
 		{
 			ToolBarButton btnViewItem = new ToolBarButton("InfoOrder");
-			btnViewItem.setLabel(Msg.getMsg(Env.getCtx(), "InfoOrder"));
+			btnViewItem.setLabel(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "InfoOrder")));
 			btnViewItem.setImage("/images/Info16.png");
 			btnViewItem.addEventListener(Events.ON_CLICK, this);
 			vbox.appendChild(btnViewItem);
@@ -94,7 +95,7 @@
 		if (MRole.getDefault().isAllow_Info_Invoice())
 		{
 			ToolBarButton btnViewItem = new ToolBarButton("InfoInvoice");
-			btnViewItem.setLabel(Msg.getMsg(Env.getCtx(), "InfoInvoice"));
+			btnViewItem.setLabel(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "InfoInvoice")));
 			btnViewItem.setImage("/images/Info16.png");
 			btnViewItem.addEventListener(Events.ON_CLICK, this);
 			vbox.appendChild(btnViewItem);
@@ -102,7 +103,7 @@
 		if (MRole.getDefault().isAllow_Info_InOut())
 		{
 			ToolBarButton btnViewItem = new ToolBarButton("InfoInOut");
-			btnViewItem.setLabel(Msg.getMsg(Env.getCtx(), "InfoInOut"));
+			btnViewItem.setLabel(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "InfoInOut")));
 			btnViewItem.setImage("/images/Info16.png");
 			btnViewItem.addEventListener(Events.ON_CLICK, this);
 			vbox.appendChild(btnViewItem);
@@ -110,7 +111,7 @@
 		if (MRole.getDefault().isAllow_Info_Payment())
 		{
 			ToolBarButton btnViewItem = new ToolBarButton("InfoPayment");
-			btnViewItem.setLabel(Msg.getMsg(Env.getCtx(), "InfoPayment"));
+			btnViewItem.setLabel(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "InfoPayment")));
 			btnViewItem.setImage("/images/Info16.png");
 			btnViewItem.addEventListener(Events.ON_CLICK, this);
 			vbox.appendChild(btnViewItem);
@@ -118,7 +119,7 @@
 		if (MRole.getDefault().isAllow_Info_CashJournal())
 		{
 			ToolBarButton btnViewItem = new ToolBarButton("InfoCashLine");
-			btnViewItem.setLabel(Msg.getMsg(Env.getCtx(), "InfoCashLine"));
+			btnViewItem.setLabel(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "InfoCashLine")));
 			btnViewItem.setImage("/images/Info16.png");
 			btnViewItem.addEventListener(Events.ON_CLICK, this);
 			vbox.appendChild(btnViewItem);
@@ -126,7 +127,7 @@
 		if (MRole.getDefault().isAllow_Info_Resource())
 		{
 			ToolBarButton btnViewItem = new ToolBarButton("InfoAssignment");
-			btnViewItem.setLabel(Msg.getMsg(Env.getCtx(), "InfoAssignment"));
+			btnViewItem.setLabel(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "InfoAssignment")));
 			btnViewItem.setImage("/images/Info16.png");
 			btnViewItem.addEventListener(Events.ON_CLICK, this);
 			vbox.appendChild(btnViewItem);
@@ -134,7 +135,7 @@
 		if (MRole.getDefault().isAllow_Info_Asset())
 		{
 			ToolBarButton btnViewItem = new ToolBarButton("InfoAsset");
-			btnViewItem.setLabel(Msg.getMsg(Env.getCtx(), "InfoAsset"));
+			btnViewItem.setLabel(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "InfoAsset")));
 			btnViewItem.setImage("/images/Info16.png");
 			btnViewItem.addEventListener(Events.ON_CLICK, this);
 			vbox.appendChild(btnViewItem);
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/editor/WEditor.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/editor/WEditor.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/editor/WEditor.java	Mon Feb 10 21:08:53 2014 -0500
@@ -74,6 +74,8 @@
 
 	protected boolean hasFocus;
 
+	private Object m_oldValue = null;
+
     /**
      *
      * @param comp
@@ -501,4 +503,39 @@
 		getLabel().setStyle( (getLabel().isZoomable() ? STYLE_ZOOMABLE_LABEL : "") + (mandatory ? STYLE_EMPTY_MANDATORY_LABEL : STYLE_NORMAL_LABEL));
 	}
 	
+	/**
+	 * Set the old value of the field.  For use in future comparisons.
+	 * The old value must be explicitly set though this call.
+	 * @param m_oldValue
+	 */
+	public void set_oldValue() {
+		this.m_oldValue = getValue();
+	}
+
+	/**
+	 * Get the old value of the field explicitly set in the past
+	 * @return
+	 */
+	public Object get_oldValue() {
+		return m_oldValue;
+	}
+	/**
+	 * Has the field changed over time?
+	 * @return true if the old value is different than the current.
+	 */
+	public boolean hasChanged() {
+		// Both or either could be null
+		if(getValue() != null)
+			if(m_oldValue != null)
+				return !m_oldValue.equals(getValue());
+			else
+				return true;
+		else  // getValue() is null
+			if(m_oldValue != null)
+				return true;
+			else
+				return false;
+	}
+
+
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/editor/WLocationEditor.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/editor/WLocationEditor.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/editor/WLocationEditor.java	Mon Feb 10 21:08:53 2014 -0500
@@ -83,12 +83,11 @@
     public WLocationEditor(GridField gridField) {
 		super(new Locationbox(), gridField);
 		m_Location = (MLocationLookup)gridField.getLookup();
+        init();
 	}
 
     private void init()
     {
-    	getComponent().setButtonImage("/images/Online10.png");
-    	
     	popupMenu = new WEditorPopupMenu(false, false, true);
     	popupMenu.addMenuListener(this);
     	if (gridField != null && gridField.getGridTab() != null)
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/editor/WNumberEditor.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/editor/WNumberEditor.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/editor/WNumberEditor.java	Mon Feb 10 21:08:53 2014 -0500
@@ -49,7 +49,8 @@
 {
     public static final String[] LISTENER_EVENTS = {Events.ON_CHANGE, Events.ON_OK};
 
-    public static final int MAX_DISPLAY_LENGTH = 20;
+    public static final int MAX_DISPLAY_LENGTH = 35;
+    public static final int MIN_DISPLAY_LENGTH = 11;
 
     private Object oldValue;
 
@@ -109,6 +110,12 @@
 		if (gridField != null)
 		{
 			getComponent().setTooltiptext(gridField.getDescription());
+	        int displayLength = gridField.getDisplayLength();
+	        if (displayLength > MAX_DISPLAY_LENGTH)
+	            displayLength = MAX_DISPLAY_LENGTH;
+	        else if (displayLength <= 0 || displayLength < MIN_DISPLAY_LENGTH)
+	        	displayLength = MIN_DISPLAY_LENGTH;
+			getComponent().getDecimalbox().setCols(displayLength);
 		}
 
 		if (!DisplayType.isNumeric(displayType))
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/editor/WPAttributeEditor.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/editor/WPAttributeEditor.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/editor/WPAttributeEditor.java	Mon Feb 10 21:08:53 2014 -0500
@@ -15,21 +15,39 @@
 
 
 
+import java.awt.Container;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.beans.PropertyVetoException;
+import java.util.logging.Level;
+
 import org.adempiere.webui.apps.AEnv;
+import org.adempiere.webui.component.Combobox;
 import org.adempiere.webui.component.PAttributebox;
+import org.adempiere.webui.component.Window;
 import org.adempiere.webui.event.ContextMenuEvent;
 import org.adempiere.webui.event.ContextMenuListener;
 import org.adempiere.webui.event.ValueChangeEvent;
+import org.adempiere.webui.panel.InfoPAttributePanel;
+import org.adempiere.webui.panel.InfoProductPanel;
+import org.adempiere.webui.window.FDialog;
 import org.adempiere.webui.window.WFieldRecordInfo;
 import org.adempiere.webui.window.WPAttributeDialog;
+import org.compiere.apps.search.InfoPAttribute;
+import org.compiere.apps.search.InfoProduct;
 import org.compiere.model.GridField;
 import org.compiere.model.GridTab;
 import org.compiere.model.Lookup;
 import org.compiere.model.MAttributeSet;
+import org.compiere.model.MAttributeSetInstance;
+import org.compiere.model.MPAttributeLookup;
 import org.compiere.model.MProduct;
+import org.compiere.swing.CDialog;
 import org.compiere.util.CLogger;
 import org.compiere.util.Env;
+import org.zkoss.zk.ui.Component;
 import org.zkoss.zk.ui.event.Event;
+import org.zkoss.zk.ui.event.EventListener;
 import org.zkoss.zk.ui.event.Events;
 
 /**
@@ -43,17 +61,33 @@
 
 	private static final CLogger log = CLogger.getCLogger(WPAttributeEditor.class);
 
-	private int m_WindowNo;
+	/**	Data Value				*/
+	private Object				m_value = new Object();
+	/** Attribute Where Clause  */
+	private String m_pAttributeWhere = null;
+	/** Column Name - fixed		*/
+	private static String		m_columnName = "M_AttributeSetInstance_ID";
 
-	private Lookup m_mPAttribute;
-
-	private int m_C_BPartner_ID;
-
+	private int 				m_WindowNo;
+	private MPAttributeLookup	m_mPAttribute;
+	private int 				m_C_BPartner_ID;
+	private boolean 			m_searchOnly;
+	private boolean				m_mandatory;
+	private boolean				m_readWrite;
 	private WEditorPopupMenu	popupMenu;
 
-	private Object m_value;
 
-	private GridTab m_GridTab;
+	/** The Grid Tab * */
+	private GridTab m_GridTab; // added for processCallout
+	/** The Grid Field * */
+	private GridField m_GridField; // added for processCallout
+	
+	/**	Calling Window Info				*/
+	private int					m_AD_Column_ID = 0;
+	/** record the value for comparison at a point in the future */
+	private Object m_oldValue;
+	private Object m_oldText;
+	private String m_oldWhere;
 
 	/**	No Instance Key					*/
 	private static Integer		NO_INSTANCE = new Integer(0);
@@ -62,26 +96,62 @@
 	{
 		super(new PAttributebox(), gridField);
 		m_GridTab = gridTab;
+		m_WindowNo = gridField.getWindowNo();
+		m_mPAttribute = (MPAttributeLookup) gridField.getLookup();
+		m_readWrite = false;
 		initComponents();
 	}
 
+	/**
+	 *	Create Product Attribute Set Instance Editor.
+	 *  @param gridTab
+	 *  @param mandatory mandatory
+	 *  @param isReadOnly read only
+	 *  @param isUpdateable updateable
+	 * 	@param WindowNo WindowNo
+	 * 	@param lookup Model Product Attribute
+	 *  @param searchOnly True if only used to search instances
+	 */
+	public WPAttributeEditor(GridTab gridTab, boolean mandatory, boolean isReadOnly, boolean isUpdateable, 
+			int WindowNo, MPAttributeLookup lookup, boolean searchOnly)
+	{
+    	super(new PAttributebox(), m_columnName, null, null, mandatory, isReadOnly, isUpdateable);
+    	if (lookup == null)
+		{
+			throw new IllegalArgumentException("Lookup cannot be null");
+		}
+		m_GridTab = gridTab;
+		//m_text.setName("VPAttribute Text - " + m_columnName);
+		//m_button.setName("VPAttribute Button - " + m_columnName);
+		m_WindowNo = WindowNo;
+		m_mPAttribute = lookup;
+		m_searchOnly = searchOnly;
+		m_mandatory = mandatory;
+		m_readWrite = !isReadOnly && isUpdateable;
+		initComponents();
+	}
+	
 	private void initComponents() {
 		getComponent().setButtonImage("images/PAttribute10.png");
 		getComponent().addEventListener(Events.ON_CLICK, this);
+		getComponent().addEventListener(Events.ON_CHANGE, this);
 
-		m_WindowNo = gridField.getWindowNo();
-		m_mPAttribute = gridField.getLookup();
 		m_C_BPartner_ID = Env.getContextAsInt(Env.getCtx(), m_WindowNo, "C_BPartner_ID");
 
 		//	Popup
 		popupMenu = new WEditorPopupMenu(true, false, false);
 		getComponent().getTextbox().setContext(popupMenu.getId());
+		//  Don't allow direct entry in the text box
+		getComponent().setEnabled(m_readWrite);  //  Enable the control - sets the text box to read/write
+		getComponent().getTextbox().setReadonly(true); // Disable the text box
 		if (gridField != null && gridField.getGridTab() != null)
 		{
 			WFieldRecordInfo.addMenu(popupMenu);
 		}
 		
-		getComponent().getTextbox().setReadonly(true);
+		//getComponent().getTextbox().setReadonly(!m_readWrite);
+		setValue(NO_INSTANCE);
+		set_oldValue();
 	}
 
 	@Override
@@ -102,6 +172,7 @@
 		{
 			getComponent().setText("");
 			m_value = value;
+			m_pAttributeWhere = "";
 			return;
 		}
 
@@ -112,7 +183,20 @@
 		log.fine("Value=" + value);
 		m_value = value;
 		getComponent().setText(m_mPAttribute.getDisplay(value));	//	loads value
-	}
+		m_pAttributeWhere = "EXISTS (SELECT * FROM M_Storage s "
+				+ "WHERE s.M_AttributeSetInstance_ID=" + value
+				+ " AND s.M_Product_ID=p.M_Product_ID)";
+
+	} // setValue
+
+	/**
+	 * Get Attribute Where clause
+	 * @return String
+	 */
+	public String getAttributeWhere()
+	{
+		return m_pAttributeWhere;
+	}	//	getAttributeWhere()
 
 	@Override
 	public Object getValue()
@@ -138,14 +222,16 @@
 			}
 			if (oldText != null && newText != null && oldText.equals(newText))
 			{
-	    	    return;
+	    	    event.stopPropagation();
+				return;
 	    	}
 	        if (oldText == null && newText == null)
 	        {
+	        	event.stopPropagation();
 	        	return;
 	        }
-			ValueChangeEvent changeEvent = new ValueChangeEvent(this, this.getColumnName(), oldText, newText);
-			fireValueChange(changeEvent);
+			//ValueChangeEvent changeEvent = new ValueChangeEvent(this, this.getColumnName(), oldText, newText);
+			//fireValueChange(changeEvent);
 		}
 		else if (Events.ON_CLICK.equals(event.getName()))
 		{
@@ -159,7 +245,15 @@
 	private void cmd_dialog()
 	{
 		//
-		Integer oldValue = (Integer)getValue ();
+		Integer oldValue = 0;
+		try
+		{
+			oldValue = (Integer)getValue ();			
+		}
+		catch(Exception npe)
+		{
+			// Possible Invalid Cast exception if getValue() return new instance of Object.
+		}
 		int oldValueInt = oldValue == null ? 0 : oldValue.intValue ();
 		int M_AttributeSetInstance_ID = oldValueInt;
 		int M_Product_ID = 0;
@@ -171,13 +265,13 @@
 			M_Product_ID = Env.getContextAsInt (Env.getCtx (), m_WindowNo, "M_Product_ID");
 			M_ProductBOM_ID = Env.getContextAsInt (Env.getCtx (), m_WindowNo, "M_ProductBOM_ID");
 		}
+		int M_Locator_ID = -1;
 
 		log.config("M_Product_ID=" + M_Product_ID + "/" + M_ProductBOM_ID
-			+ ",M_AttributeSetInstance_ID=" + M_AttributeSetInstance_ID
-			+ ", AD_Column_ID=" + gridField.getAD_Column_ID());
+			+ ",M_AttributeSetInstance_ID=" + M_AttributeSetInstance_ID);
 
 		//	M_Product.M_AttributeSetInstance_ID = 8418
-		boolean productWindow = (gridField.getAD_Column_ID() == 8418);		//	HARDCODED
+		boolean productWindow = m_AD_Column_ID == 8418;		//	HARDCODED
 
 		//	Exclude ability to enter ASI
 		boolean exclude = true;
@@ -189,7 +283,7 @@
 			if (M_AttributeSet_ID != 0)
 			{
 				MAttributeSet mas = MAttributeSet.get(Env.getCtx(), M_AttributeSet_ID);
-				exclude = mas.excludeEntry(gridField.getAD_Column_ID(), Env.isSOTrx(Env.getCtx(), m_WindowNo));
+				exclude = mas.excludeEntry(m_AD_Column_ID, Env.isSOTrx(Env.getCtx(), m_WindowNo));
 			}
 		}
 
@@ -197,63 +291,50 @@
 		if (M_ProductBOM_ID != 0)	//	Use BOM Component
 			M_Product_ID = M_ProductBOM_ID;
 		//
-		if (!productWindow && (M_Product_ID == 0 || exclude))
-		{
-			changed = true;
-			getComponent().setText(null);
-			M_AttributeSetInstance_ID = 0;
+		// If the VPAttribute component is in a dialog, use the search
+		if (m_searchOnly)
+		{	
+			// Determine if the component is associated with the InfoProduct window
+			Component me = ((Component) this.component.getParent());
+			while (me != null)
+			{
+				if (me instanceof InfoProductPanel)
+					break;
+				me = me.getParent();
+			}
+			//
+			InfoPAttributePanel ia = new InfoPAttributePanel((Window) me);
+			m_pAttributeWhere = ia.getWhereClause();
+			String oldText = getComponent().getText();
+			getComponent().setText(ia.getDisplay());
+			String curText = getComponent().getText();
+			//
+    		ValueChangeEvent changeEvent = new ValueChangeEvent(this, this.getColumnName(), oldText, curText);
+    		this.fireValueChange(changeEvent);
+
 		}
-		else
-		{
-			WPAttributeDialog vad = new WPAttributeDialog (
-				M_AttributeSetInstance_ID, M_Product_ID, m_C_BPartner_ID,
-				productWindow, gridField.getAD_Column_ID(), m_WindowNo);
-			if (vad.isChanged())
+		else {	
+			if (!productWindow && (M_Product_ID == 0 || exclude))
 			{
-				getComponent().setText(vad.getM_AttributeSetInstanceName());
-				M_AttributeSetInstance_ID = vad.getM_AttributeSetInstance_ID();
-				if (m_GridTab != null && !productWindow && vad.getM_Locator_ID() > 0)
-					m_GridTab.setValue("M_Locator_ID", vad.getM_Locator_ID());
 				changed = true;
-			}
-		}
-		/** Selection
-		{
-			//	Get Model
-			MAttributeSetInstance masi = MAttributeSetInstance.get(Env.getCtx(), M_AttributeSetInstance_ID, M_Product_ID);
-			if (masi == null)
-			{
-				log.log(Level.SEVERE, "No Model for M_AttributeSetInstance_ID=" + M_AttributeSetInstance_ID + ", M_Product_ID=" + M_Product_ID);
+				getComponent().setText(null);
+				M_AttributeSetInstance_ID = 0;
 			}
 			else
 			{
-				Env.setContext(Env.getCtx(), m_WindowNo, "M_AttributeSet_ID", masi.getM_AttributeSet_ID());
-				//	Get Attribute Set
-				MAttributeSet as = masi.getMAttributeSet();
-				//	Product has no Attribute Set
-				if (as == null)
-					ADialog.error(m_WindowNo, this, "PAttributeNoAttributeSet");
-				//	Product has no Instance Attributes
-				else if (!as.isInstanceAttribute())
-					ADialog.error(m_WindowNo, this, "PAttributeNoInstanceAttribute");
-				else
+				WPAttributeDialog vad = new WPAttributeDialog (
+					M_AttributeSetInstance_ID, M_Product_ID, m_C_BPartner_ID,
+					productWindow, gridField.getAD_Column_ID(), m_WindowNo);
+				if (vad.isChanged())
 				{
-					int M_Warehouse_ID = Env.getContextAsInt (Env.getCtx (), m_WindowNo, "M_Warehouse_ID");
-					int M_Locator_ID = Env.getContextAsInt (Env.getCtx (), m_WindowNo, "M_Locator_ID");
-					String title = "";
-					PAttributeInstance pai = new PAttributeInstance (
-						Env.getFrame(this), title,
-						M_Warehouse_ID, M_Locator_ID, M_Product_ID, m_C_BPartner_ID);
-					if (pai.getM_AttributeSetInstance_ID() != -1)
-					{
-						m_text.setText(pai.getM_AttributeSetInstanceName());
-						M_AttributeSetInstance_ID = pai.getM_AttributeSetInstance_ID();
-						changed = true;
-					}
+					getComponent().setText(vad.getM_AttributeSetInstanceName());
+					M_AttributeSetInstance_ID = vad.getM_AttributeSetInstance_ID();
+					if (m_GridTab != null && !productWindow && vad.getM_Locator_ID() > 0)
+						m_GridTab.setValue("M_Locator_ID", vad.getM_Locator_ID());
+					changed = true;
 				}
 			}
 		}
-		**/
 
 		//	Set Value
 		if (changed)
@@ -264,9 +345,21 @@
 				setValue(null);
 			else
 				setValue(new Integer(M_AttributeSetInstance_ID));
-
-			ValueChangeEvent vce = new ValueChangeEvent(this, gridField.getColumnName(), new Object(), getValue());
+			// Change Locator
+			if (m_GridTab != null && M_Locator_ID > 0)
+			{
+				log.finest("Change M_Locator_ID="+M_Locator_ID);
+				m_GridTab.setValue("M_Locator_ID", M_Locator_ID);
+			}
+			//
+			String columnName = "M_AttributeSetInstance_ID";
+	 	 	if (m_GridField != null)
+	 	 	{
+	 	 		columnName = m_GridField.getColumnName();
+	 	 	}
+			ValueChangeEvent vce = new ValueChangeEvent(this, columnName, new Object(), getValue());
 			fireValueChange(vce);
+			//
 			if (M_AttributeSetInstance_ID == oldValueInt && m_GridTab != null && gridField != null)
 			{
 				//  force Change - user does not realize that embedded object is already saved.
@@ -309,5 +402,58 @@
 		getComponent().getTextbox().setReadonly(true);
 	}
 
+	/**
+	 * Set the old value of the field.  For use in future comparisons.
+	 * The old value must be explicitly set though this call.
+	 * @param m_oldValue
+	 */
+	public void set_oldValue() {
+		this.m_oldValue = getValue();
+		this.m_oldText = getComponent().getTextbox().getValue();
+		this.m_oldWhere = m_pAttributeWhere;
+	}
+	/**
+	 * Get the old value of the field explicitly set in the past
+	 * @return
+	 */
+	public Object get_oldValue() {
+		return m_oldValue;
+	}
+	/**
+	 * Has the field changed over time?
+	 * @return true if the old value is different than the current.
+	 */
+	public boolean hasChanged() {
+		// Both or either could be null
+		if(getValue() != null)
+			if(m_oldValue != null)
+				return !m_oldValue.equals(getValue());
+			else
+				return true;
+		else  // getValue() is null
+			if(m_oldValue != null)
+				return true;
+
+		if(getComponent().getTextbox().getValue() != null)
+			if(m_oldText != null)
+				return !m_oldText.equals(getComponent().getTextbox().getValue());
+			else
+				return true;
+		else  // m_text is null
+			if(m_oldText != null)
+				return true;
+
+		if(m_pAttributeWhere != null)
+			if(m_oldWhere != null)
+				return !m_oldWhere.equals(m_pAttributeWhere);
+			else
+				return true;
+		else  // m_pAttributeWhere is null
+			if(m_oldWhere != null)
+				return true;
+
+		return false;
+
+	}
 
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/editor/WSearchEditor.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/editor/WSearchEditor.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/editor/WSearchEditor.java	Mon Feb 10 21:08:53 2014 -0500
@@ -17,6 +17,7 @@
 
 package org.adempiere.webui.editor;
 
+import java.awt.event.ActionListener;
 import java.beans.PropertyChangeEvent;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -33,19 +34,31 @@
 import org.adempiere.webui.grid.WBPartner;
 import org.adempiere.webui.panel.InfoBPartnerPanel;
 import org.adempiere.webui.panel.InfoPanel;
+import org.adempiere.webui.panel.InfoPanelFactory;
 import org.adempiere.webui.panel.InfoProductPanel;
 import org.adempiere.webui.window.WFieldRecordInfo;
+import org.compiere.apps.FieldRecordInfo;
+import org.compiere.apps.search.Info;
+import org.compiere.apps.search.InfoFactory;
 import org.compiere.model.GridField;
 import org.compiere.model.Lookup;
+import org.compiere.model.MBPartner;
+import org.compiere.model.MColumn;
+import org.compiere.model.MInvoiceLine;
 import org.compiere.model.MLookup;
 import org.compiere.model.MLookupFactory;
+import org.compiere.model.MOrderLine;
+import org.compiere.model.MProductPrice;
+import org.compiere.model.MQuery;
 import org.compiere.model.MRole;
 import org.compiere.util.CLogger;
 import org.compiere.util.DB;
 import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
 import org.compiere.util.Msg;
+import org.compiere.util.Trx;
 import org.compiere.util.Util;
+import org.eevolution.model.I_PP_Product_BOMLine;
 import org.zkoss.zk.ui.event.Event;
 import org.zkoss.zk.ui.event.Events;
 
@@ -59,13 +72,27 @@
 public class WSearchEditor extends WEditor implements ContextMenuListener, ValueChangeListener, IZoomableEditor
 {
 	private static final String[] LISTENER_EVENTS = {Events.ON_CLICK, Events.ON_CHANGE, Events.ON_OK};
-	private Lookup 				lookup;
+	private Lookup 				m_lookup;
 	private String				m_tableName = null;
 	private String				m_keyColumnName = null;
-	private String 				columnName;
+	private String 				m_columnName;
 	private WEditorPopupMenu	popupMenu;
     private Object              value;
+    private Object				m_oldValue;
     private InfoPanel			infoPanel = null;
+    private Boolean				m_settingValue = false;
+    private Boolean				m_needsUpdate = false;
+    private String				m_lastDisplay = null;
+	/** Override context for sales transactions */
+	private boolean				m_isSOTrxEnvOverride = false;
+	/** Context for sales transactions */
+	private boolean 			m_isSOTrx = true;     //  default
+	/** Does the selected record match the context? */
+	private boolean 			m_isSOMatch = true;
+    
+	//	Field for Value Preference
+	private GridField              m_mField = null;
+
 
 	private static CLogger log = CLogger.getCLogger(WSearchEditor.class);
 
@@ -73,10 +100,11 @@
 	{
 		super(new Searchbox(), gridField);
 
-		lookup = gridField.getLookup();
+		m_mField = gridField;
+		m_lookup = gridField.getLookup();
 		
-		if (lookup != null)
-			columnName = lookup.getColumnName();
+		if (m_lookup != null)
+			m_columnName = m_lookup.getColumnName();
 		
 		init();
 	}
@@ -95,7 +123,10 @@
 
 	@Override
 	public void setReadWrite(boolean readWrite) {
-		getComponent().setEnabled(readWrite);
+		if (m_lookup != null && m_lookup.getDisplayType() == DisplayType.Search)
+			getComponent().setEnabled(readWrite, true);
+		else
+			getComponent().setEnabled(readWrite);
 	}
 
 
@@ -118,9 +149,9 @@
 			throw new IllegalArgumentException("Lookup cannot be null");
 		}
 
-		this.lookup = lookup;
-        columnName = lookup.getColumnName();
-		super.setColumnName(columnName);
+		this.m_lookup = lookup;
+        m_columnName = lookup.getColumnName();
+		super.setColumnName(m_columnName);
 		init();
 	}
 
@@ -134,8 +165,8 @@
 			throw new IllegalArgumentException("Lookup cannot be null");
 		}
 
-		this.lookup = lookup;
-        this.columnName = columnName;
+		this.m_lookup = lookup;
+        this.m_columnName = columnName;
 		super.setColumnName(columnName);
 		init();
 	}
@@ -143,19 +174,19 @@
 
 	/**
      * initialise editor
-     * @param columnName columnName
+     * @param m_columnName columnName
 	 */
 	private void init()
 	{
 
-		columnName = this.getColumnName();
+		m_columnName = this.getColumnName();
                 
-		if (columnName.equals("C_BPartner_ID"))
+		if (m_columnName.equals("C_BPartner_ID"))
 		{
 			popupMenu = new WEditorPopupMenu(true, true, true, true, true);
 			getComponent().setButtonImage("/images/BPartner10.png");
 		}
-		else if (columnName.equals("M_Product_ID"))
+		else if (m_columnName.equals("M_Product_ID"))
 		{
 			popupMenu = new WEditorPopupMenu(true, true, true, false, false);
 			getComponent().setButtonImage("/images/Product10.png");
@@ -186,7 +217,7 @@
         this.value = value;
 		if (value != null && !"".equals(String.valueOf(value)))
 		{
-		    String text = lookup.getDisplay(value);
+		    String text = m_lookup.getDisplay(value);
 
             if (text.startsWith("_"))
             {
@@ -199,6 +230,7 @@
 		{
 			getComponent().setText("");
 		}
+		m_lastDisplay = getDisplay();
 	}
 
 	@Override
@@ -213,25 +245,28 @@
 		return getComponent().getText();
 	}
 
+	/**
+	 *  Action Listener Interface
+	 *  @param listener listener
+	 */
+	public void addActionListener(ActionListener listener)
+	{
+		//m_combo.addActionListener(listener);
+		//m_text.addActionListener(listener);
+	}   //  addActionListener
+
 	public void onEvent(Event e)
 	{
+		if(m_settingValue) // Ignore events if in the middle of setting the value
+		{
+			return;
+		}
 		if (Events.ON_CHANGE.equals(e.getName()) || Events.ON_OK.equals(e.getName()))
 		{
-			if (infoPanel != null)
-		 	{
-				infoPanel.detach();
-		 	 	infoPanel = null;
-		 	}
 			actionText(getComponent().getText());
-
 		}
 		else if (Events.ON_CLICK.equals(e.getName()))
 		{
-			if (infoPanel != null)
-			{
-				infoPanel.detach();
-				infoPanel = null;
-			}
 			actionButton("");
 		}
 	}
@@ -261,11 +296,11 @@
 
 	public void actionZoom()
 	{
-	   	AEnv.actionZoom(lookup, getValue());
+	   	AEnv.actionZoom(m_lookup, getValue());
 	}
     private void actionZoom(Object value)
     {
-        AEnv.actionZoom(lookup, value);
+        AEnv.actionZoom(m_lookup, value);
     }
 
 	public void onMenu(ContextMenuEvent evt)
@@ -312,24 +347,52 @@
 
 	private void actionText(String text)
 	{
+
+		if (infoPanel != null) // An info panel is open
+	 	{
+			if(!m_needsUpdate) // If no changes are in progress, close the panel
+			{
+				infoPanel.detach();
+				infoPanel = null;
+			}
+	 	}
+
+		// Nothing entered, just pressing enter again => ignore - teo_sarca BF [ 1834399 ]
+		if (text != null && text.length() > 0 && text.equals(m_lastDisplay))
+		{
+			log.finest("Nothing entered [SKIP]");
+			m_needsUpdate = false;
+			return;
+		}
+
+		m_needsUpdate = true;  //Something changed
 		//	Nothing entered
 		if (text == null || text.length() == 0 || text.equals("%"))
 		{
 			actionButton(text);
 			return;
 		}
+		
+
 		text = text.toUpperCase();
 		log.config(getColumnName() + " - " + text);
 
 		//	Exact first
 		PreparedStatement pstmt = null;
-		String finalSQL = Msg.parseTranslation(Env.getCtx(), getDirectAccessSQL(text));
+		ResultSet rs = null;
+		String rSQL = getDirectAccessSQL(text);
+		if(rSQL == null || rSQL.length() == 0){
+			// Search should have been disabled for this field.
+			log.severe("Search enabled on field " + getColumnName() + ". Associated table has no standard/identifier columns.");
+			return;
+		}
+		String finalSQL = Msg.parseTranslation(Env.getCtx(), rSQL);
 		int id = -3;
 
 		try
 		{
 			pstmt = DB.prepareStatement(finalSQL, null);
-			ResultSet rs = pstmt.executeQuery();
+			rs = pstmt.executeQuery();
 			if (rs.next())
 			{
 				id = rs.getInt(1);		//	first
@@ -346,15 +409,19 @@
 		}
 
 		//	Try like
-		if (id == -3 && !text.endsWith("%"))
+		if (id == -3)
 		{
-			text += "%";
-			finalSQL = Msg.parseTranslation(Env.getCtx(), getDirectAccessSQL(text));
-
+			rSQL = getDirectAccessSQL(Info.getSQLText(text));
+			if(rSQL == null || rSQL.length() == 0){
+				// Search should have been disabled for this field.
+				log.severe("Search enabled on field " + getColumnName() + ". Associated table has no standard/identifier columns.");
+				return;
+			}
+			finalSQL = Msg.parseTranslation(Env.getCtx(), rSQL);
 			try
 			{
 				pstmt = DB.prepareStatement(finalSQL, null);
-				ResultSet rs = pstmt.executeQuery();
+				rs = pstmt.executeQuery();
 				if (rs.next())
 				{
 					id = rs.getInt(1);		//	first
@@ -403,6 +470,8 @@
 	{
 		log.fine("Value=" + value);
 
+		m_settingValue = true;
+		
 		ValueChangeEvent evt = new ValueChangeEvent(this, this.getColumnName(), getValue(), value);
 		// -> ADTabpanel - valuechange
 		fireValueChange(evt);
@@ -416,12 +485,15 @@
 		
 		if (value == null && getValue() == null)
 			updated = true;
-		else if (value != null && value.equals(getValue()))
+		else if (value != null && value.equals(getValue()) && !m_needsUpdate)
 			updated = true;
 		if (!updated)
 		{
 			setValue(value);
 		}
+		
+		m_settingValue = false;  // last in the chain of changes.
+		m_needsUpdate = false;
 	}	//	actionCombo
 
 	/**
@@ -431,7 +503,7 @@
 	
 	private void actionBPartner (boolean newRecord)
 	{
-		WBPartner vbp = new WBPartner (lookup.getWindowNo());
+		WBPartner vbp = new WBPartner (m_lookup.getWindowNo());
 		int BPartner_ID = 0;
 		
 		//  if update, get current value
@@ -457,7 +529,7 @@
 			return;
 		
 		//  Maybe new BPartner - put in cache
-		lookup.getDirect(new Integer(result), false, true);
+		m_lookup.getDirect(new Integer(result), false, true);
 		setValue(new Integer(result));
 		actionCombo (new Integer(result));      //  data binding
 		
@@ -466,128 +538,214 @@
 	
 	private void actionButton(String queryValue)
 	{
-		if (lookup == null)
+		if (m_lookup == null)
 			return;		//	leave button disabled
 		
+		// If an infoPanel is already open, close it.
+		if (infoPanel != null)
+		{
+			infoPanel.detach();
+			infoPanel = null;
+		}
+
 		/**
 		 *  Three return options:
 		 *  - Value Selected & OK pressed   => store result => result has value
 		 *  - Cancel pressed                => store null   => result == null && cancelled
-		 *  - Window closed                 -> ignore       => result == null && !cancalled
+		 *  - Window closed                 -> ignore       => result == null && !cancelled
 		 */
 
+		m_settingValue = true;  // We're changing something - ignore other events;
+		//
 		Object result[] = null;			
-		boolean cancelled = false;	
-
-		String col = lookup.getColumnName();		//	fully qualified name
-
+		boolean cancelled = false;
+		boolean multipleSelection = false;
+		boolean modal = true;
+		boolean saveResults = true;
+		
+		int record_id = 0;
+		//
+		String col = m_lookup.getColumnName();		//	fully qualified name
 		if (col.indexOf('.') != -1)
 			col = col.substring(col.indexOf('.')+1);
-
 		//  Zoom / Validation
 		String whereClause = getWhereClause();
+		//
+		log.fine(col + ", Zoom=" + m_lookup.getZoom() + " (" + whereClause + ")");
+		//
+		//  If the record has a value (ID) find the name.  The displayed text could be different.
+		if (queryValue.length() == 0 && getValue() != null && !getValue().equals(""))
+		{
+			Object currentValue = getValue();
+			try{
+				record_id = ((Number)currentValue).intValue();
+				queryValue = "";
+			} catch (Exception e) {
+				//  Can't cast the string "" to a number.
+			}
+		}
+		//
+		String infoPanelFactoryClass = m_lookup.getInfoPanelFactoryClass();
+		if (infoPanelFactoryClass != null && infoPanelFactoryClass.trim().length() > 0)
+		{
+			try {
+				Class<InfoPanelFactory> clazz = (Class<InfoPanelFactory>)this.getClass().getClassLoader().loadClass(infoPanelFactoryClass);
+				InfoPanelFactory factory = clazz.newInstance();
+				if (m_tableName == null)	//	sets table name & key column
+				{
+					if(!hasSearchableColumns()){
+						// Search should have been disabled for this field.
+						log.severe("Search enabled on field " + m_columnName + ". Associated table has no standard/identifier columns.");
+						return;
+					}
+				}
+				// multipleSelection assumed false for custom info windows
+				infoPanel = factory.create (m_lookup.getWindowNo(), modal,
+						m_tableName, m_keyColumnName, record_id, queryValue, multipleSelection, saveResults,
+						 whereClause);
+				//
+			} catch (Exception e) {
+				log.log(Level.SEVERE, "Failed to load custom InfoFactory - " + e.getLocalizedMessage(), e);
+			}
+		}
+		else if (col.equals("M_Product_ID"))
+		{			
+			//	Reset
+			resetTabInfo();
+			//
+			int M_Warehouse_ID = Env.getContextAsInt(Env.getCtx(), m_lookup.getWindowNo(), "M_Warehouse_ID");
+			int M_PriceList_ID = Env.getContextAsInt(Env.getCtx(), m_lookup.getWindowNo(), "M_PriceList_ID");
+			//
+			if(m_mField != null)
+			{
+				int AD_Table_ID = MColumn.getTable_ID(Env.getCtx(), m_mField.getAD_Column_ID(), null);
+				// TODO hard-coded - add to AD_Column?
+				multipleSelection = (MOrderLine.Table_ID ==  AD_Table_ID) || 
+									(MInvoiceLine.Table_ID == AD_Table_ID) || 
+									(I_PP_Product_BOMLine.Table_ID == AD_Table_ID) || 
+									(MProductPrice.Table_ID == AD_Table_ID);
+			}
+			//	Show Info
+			infoPanel = new InfoProductPanel(m_lookup.getWindowNo(), modal,
+					M_Warehouse_ID, M_PriceList_ID, record_id, queryValue, multipleSelection, saveResults, whereClause);
 
-		log.fine(col + ", Zoom=" + lookup.getZoom() + " (" + whereClause + ")");
-
-		// boolean resetValue = false;	// Reset value so that is always treated as new entry
-
-		if (col.equals("M_Product_ID"))
-		{
-			//	Reset
-			Env.setContext(Env.getCtx(), lookup.getWindowNo(), Env.TAB_INFO, "M_Product_ID", "0");
-			Env.setContext(Env.getCtx(), lookup.getWindowNo(), Env.TAB_INFO, "M_AttributeSetInstance_ID", "0");
-			Env.setContext(Env.getCtx(), lookup.getWindowNo(), Env.TAB_INFO, "M_Lookup_ID", "0");
-
-			//  Replace Value with name if no value exists
-			if (queryValue.length() == 0 && getComponent().getText().length() > 0)
-				queryValue = "@" + getComponent().getText() + "@";   //  Name indicator - otherwise Value
-
-			int M_Warehouse_ID = Env.getContextAsInt(Env.getCtx(), lookup.getWindowNo(), "M_Warehouse_ID");
-			int M_PriceList_ID = Env.getContextAsInt(Env.getCtx(), lookup.getWindowNo(), "M_PriceList_ID");
-
-			//	Show Info
-			InfoProductPanel ip = new InfoProductPanel (lookup.getWindowNo(),
-					M_Warehouse_ID, M_PriceList_ID, true, queryValue, whereClause);
-
-			ip.setVisible(true);
-			ip.setTitle(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "InfoProduct")));
-			ip.setStyle("border: 2px");
-			ip.setClosable(true);
-			ip.setAttribute("mode", "modal");
-			ip.addValueChangeListener(this);
-			infoPanel = ip;
-			AEnv.showWindow(ip);
-			
-			cancelled = ip.isCancelled();
-			result = ip.getSelectedKeys();
 		}
 		else if (col.equals("C_BPartner_ID"))
 		{
-			//  Replace Value with name if no value exists
-			if (queryValue.length() == 0 && getComponent().getText().length() > 0)
-				queryValue = getComponent().getText();
-
-			boolean isSOTrx = true;     //  default
-
-			if (Env.getContext(Env.getCtx(), lookup.getWindowNo(), "IsSOTrx").equals("N"))
-				isSOTrx = false;
-
-			InfoBPartnerPanel ip = new InfoBPartnerPanel(queryValue, lookup.getWindowNo(), isSOTrx,false, whereClause);
-
-			ip.setVisible(true);
-			ip.setTitle(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "InfoBPartner")));
-			ip.setStyle("border: 2px");
-			ip.setClosable(true);
-			ip.setAttribute("mode", "modal");
-			ip.addValueChangeListener(this);
-			infoPanel = ip;
-			AEnv.showWindow(ip);
-
-			cancelled = ip.isCancelled();
-			result = ip.getSelectedKeys();
+			resetTabInfo();
+			//
+			setIsSOTrx(m_isSOTrxEnvOverride, false);
+			//  If the record has a value, set the ID and isSOMatch
+			//  If we have a record id, set isSOMatch
+			if (record_id > 0)
+			{
+				String trxName = Trx.createTrxName();
+				MBPartner bp = new MBPartner(Env.getCtx(), record_id, trxName);
+				m_isSOMatch = (m_isSOTrx && bp.isCustomer()) || (!m_isSOTrx && bp.isVendor());
+				Trx.get(trxName, false).close();
+			}
+			//
+			infoPanel = new InfoBPartnerPanel(m_lookup.getWindowNo(), modal, record_id, queryValue, 
+												m_isSOTrx, m_isSOMatch, multipleSelection, saveResults, whereClause);
 		}
 		else	//	General Info
 		{
 			if (m_tableName == null)	//	sets table name & key column
 				getDirectAccessSQL("*");
+			//
+			infoPanel = InfoPanel.create(m_lookup.getWindowNo(), modal, m_tableName, m_keyColumnName, 
+											record_id, queryValue, multipleSelection, saveResults, whereClause);
+		}
+		//
+		if (infoPanel != null){
+			infoPanel.addValueChangeListener(this);
+			AEnv.showWindow(infoPanel);
+			//
+			cancelled = infoPanel.isCancelled();
+			result = infoPanel.getSelectedKeys();
+			//
+			infoPanel = null;
+		}
+		//  Result
+		if (isReadWrite())
+		{
+			if (result != null && result.length > 0)
+			{
+				//ensure data binding happen
+				if (result.length > 1)
+					actionCombo (result);
+				else
+					actionCombo (result[0]);
+			}
+			else if (cancelled)
+			{
+				log.config(getColumnName() + " - Result = null (cancelled)");
+				actionCombo(null);
+			}
+			else
+			{
+				log.config(getColumnName() + " - Result = null (not cancelled)");
+				actionCombo(getValue());  //Reset the combo box to the current value
+			}
+		}
+		else
+			m_settingValue = false;
+	}
 
-            if (queryValue.length() == 0 && getComponent().getText().length() > 0)
-                queryValue = getComponent().getText();
+	/**
+	 * 	Determines if the lookup has searchable (text) fields.	
+	 */
+	private boolean hasSearchableColumns()
+	{
+		boolean retValue = false;
 
-			InfoPanel ig = InfoPanel.create(lookup.getWindowNo(), m_tableName,m_keyColumnName,queryValue, false, whereClause);
-			ig.setVisible(true);
-			ig.setStyle("border: 2px");
-			ig.setClosable(true);
-			ig.setAttribute("mode", "modal");
-			ig.addValueChangeListener(this);
-			infoPanel = ig;
-			AEnv.showWindow(ig);
+		m_tableName = MQuery.getZoomTableName(m_columnName);
+		m_keyColumnName = MQuery.getZoomColumnName(m_columnName);
 
-			cancelled = ig.isCancelled();
-			result = ig.getSelectedKeys();
-
-		}
-
-		infoPanel = null;
-		//  Result
-		if (result != null && result.length > 0)
+		if (   m_columnName.equals("M_Product_ID") 
+			|| m_columnName.equals("C_BPartner_ID")
+			|| m_columnName.equals("C_Order_ID")
+			|| m_columnName.equals("C_Invoice_ID")
+			|| m_columnName.equals("M_InOut_ID")
+			|| m_columnName.equals("C_Payment_ID")
+			|| m_columnName.equals("GL_JournalBatch_ID")
+			|| m_columnName.equals("SalesRep_ID"))
 		{
-			//ensure data binding happen
-			if (result.length > 1)
-				actionCombo (result);
-			else
-				actionCombo (result[0]);
-		}
-		else if (cancelled)
-		{
-			log.config(getColumnName() + " - Result = null (cancelled)");
-			actionCombo(null);
+			retValue = true;
 		}
 		else
 		{
-			log.config(getColumnName() + " - Result = null (not cancelled)");
+			/** Check Well Known Columns of Table - assumes TableDir	**/
+			String query = "SELECT t.TableName, c.ColumnName "
+				+ "FROM AD_Column c "
+				+ " INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID AND t.IsView='N')"
+				+ " WHERE (c.ColumnName IN ('DocumentNo', 'Value', 'Name') OR c.IsIdentifier='Y')"
+				+ " AND c.AD_Reference_ID IN (10,14)"
+				+ " AND EXISTS (SELECT * FROM AD_Column cc WHERE cc.AD_Table_ID=t.AD_Table_ID"
+					+ " AND cc.IsKey='Y' AND cc.ColumnName=?)";
+			PreparedStatement pstmt = null;
+			ResultSet rs = null;
+			try
+			{
+				pstmt = DB.prepareStatement(query, null);
+				pstmt.setString(1, m_keyColumnName);
+				rs = pstmt.executeQuery();
+				if (rs.next())
+				{
+					retValue = true;
+				}
+			}
+			catch (SQLException ex)
+			{
+				log.log(Level.SEVERE, query, ex);
+			}
+			finally
+			{
+				DB.close(rs, pstmt);
+				rs = null; pstmt = null;
+			}
 		}
-		
+		return retValue;
 	}
 
 	/**
@@ -609,21 +767,31 @@
 
 		if (m_columnName.equals("M_Product_ID"))
 		{
-			//	Reset
-			Env.setContext(Env.getCtx(), lookup.getWindowNo(), Env.TAB_INFO, "M_Product_ID", "0");
-			Env.setContext(Env.getCtx(), lookup.getWindowNo(), Env.TAB_INFO, "M_AttributeSetInstance_ID", "0");
-			Env.setContext(Env.getCtx(), lookup.getWindowNo(), Env.TAB_INFO, "M_Locator_ID", "0");
-
-			sql.append("SELECT M_Product_ID FROM M_Product WHERE (UPPER(Value) LIKE ")
-				.append(DB.TO_STRING(text))
-				.append(" OR UPPER(Name) LIKE ").append(DB.TO_STRING(text))
-				.append(" OR UPC LIKE ").append(DB.TO_STRING(text)).append(")");
+			sql.append("SELECT M_Product_ID FROM M_Product WHERE (");
+			if (text.startsWith("@") && text.endsWith("@"))
+			{
+				sql.append("UPPER(Name) LIKE  ")
+					.append(DB.TO_STRING(text.substring(1,text.length()-1))).append(")");
+			}
+			else
+			{
+				sql.append("UPPER(Value) LIKE ").append(DB.TO_STRING(text))
+					.append(" OR UPPER(Name) LIKE ").append(DB.TO_STRING(text))
+					.append(" OR UPPER(SKU) LIKE ").append(DB.TO_STRING(text))
+					.append(" OR UPPER(UPC) LIKE ").append(DB.TO_STRING(text)).append(")");
+			}
 		}
 		else if (m_columnName.equals("C_BPartner_ID"))
 		{
-			sql.append("SELECT C_BPartner_ID FROM C_BPartner WHERE (UPPER(Value) LIKE ")
-				.append(DB.TO_STRING(text))
-				.append(" OR UPPER(Name) LIKE ").append(DB.TO_STRING(text)).append(")");
+			sql.append("SELECT C_BPartner_ID FROM C_BPartner WHERE (");
+			//	Put query string in Name if not fully numeric
+    		if (!text.matches(".*\\D+.*")) // If text has no non-digit characters ...
+    			//  search against the Value field
+				sql.append("UPPER(Value) LIKE ").append(DB.TO_STRING(text));
+    		else
+    			// A few non-digit characters might be in the name. E.g. 451Group, 1st Choice, ...
+    			sql.append("UPPER(Name) LIKE ").append(DB.TO_STRING(text)); 
+			sql.append(")");
 		}
 		else if (m_columnName.equals("C_Order_ID"))
 		{
@@ -653,36 +821,27 @@
 		else if (m_columnName.equals("SalesRep_ID"))
 		{
 			sql.append("SELECT AD_User_ID FROM AD_User WHERE UPPER(Name) LIKE ")
-				.append(DB.TO_STRING(text));
-			
+				.append(DB.TO_STRING(text));			
 			m_tableName = "AD_User";
 			m_keyColumnName = "AD_User_ID";
 		}
-		
 		//	Predefined
-		
 		if (sql.length() > 0)
 		{
 			String wc = getWhereClause();
-			
 			if (wc != null && wc.length() > 0)
 				sql.append(" AND ").append(wc);
-			
 			sql.append(" AND IsActive='Y'");
 			//	***
-			
 			log.finest(m_columnName + " (predefined) " + sql.toString());
-			
 			return MRole.getDefault().addAccessSQL(sql.toString(),
 				m_tableName, MRole.SQL_NOTQUALIFIED, MRole.SQL_RO);
 		}
 		
 		//	Check if it is a Table Reference
-		
-		if (lookup != null && lookup instanceof MLookup)
+		if (m_lookup != null && m_lookup instanceof MLookup)
 		{
-			int AD_Reference_ID = ((MLookup)lookup).getAD_Reference_Value_ID();
-		
+			int AD_Reference_ID = ((MLookup)m_lookup).getAD_Reference_Value_ID();
 			if (AD_Reference_ID != 0)
 			{
 				boolean isValueDisplayed = false;
@@ -752,8 +911,7 @@
 			} // Table Reference
 		} // MLookup
 		
-		/** Check Well Known Columns of Table - assumes TableDir	**/
-		
+		//  Check Well Known Columns of Table - assumes TableDir
 		String query = "SELECT t.TableName, c.ColumnName "
 			+ "FROM AD_Column c "
 			+ " INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID AND t.IsView='N') "
@@ -761,45 +919,32 @@
 			+ " AND c.AD_Reference_ID IN (10,14)"
 			+ " AND EXISTS (SELECT * FROM AD_Column cc WHERE cc.AD_Table_ID=t.AD_Table_ID"
 				+ " AND cc.IsKey='Y' AND cc.ColumnName=?)";
-		
-		m_keyColumnName = m_columnName;
 		sql = new StringBuffer();
 		PreparedStatement pstmt = null;
-		
+		ResultSet rs = null;
 		try
 		{
 			pstmt = DB.prepareStatement(query, null);
 			pstmt.setString(1, m_keyColumnName);
-			ResultSet rs = pstmt.executeQuery();
-		
+			rs = pstmt.executeQuery();
 			while (rs.next())
 			{
 				if (sql.length() != 0)
 					sql.append(" OR ");
-			
 				m_tableName = rs.getString(1);
 				sql.append("UPPER(").append(rs.getString(2)).append(") LIKE ").append(DB.TO_STRING(text));
 			}
-			
-			rs.close();
-			pstmt.close();
-			pstmt = null;
 		}
 		catch (SQLException ex)
 		{
 			log.log(Level.SEVERE, query, ex);
 		}
-		
-		try
+		finally
 		{
-			if (pstmt != null)
-				pstmt.close();
+			DB.close(rs, pstmt);
+			rs = null; pstmt = null;
 		}
-		catch (SQLException ex1)
-		{
-		}
-		pstmt = null;
-		//
+		// Return null if nothing found.
 		if (sql.length() == 0)
 		{
 			log.log(Level.SEVERE, m_columnName + " (TableDir) - no standard/identifier columns");
@@ -810,9 +955,7 @@
 			.append(m_columnName).append(" FROM ").append(m_tableName)
 			.append(" WHERE ").append(sql)
 			.append(" AND IsActive='Y'");
-		
 		String wc = getWhereClause();
-		
 		if (wc != null && wc.length() > 0)
 			retValue.append(" AND ").append(wc);
 		//	***
@@ -825,13 +968,13 @@
 	{
 		String whereClause = "";
 
-		if (lookup == null)
+		if (m_lookup == null)
 			return "";
 
-		if (lookup.getZoomQuery() != null)
-			whereClause = lookup.getZoomQuery().getWhereClause();
+		if (m_lookup.getZoomQuery() != null)
+			whereClause = m_lookup.getZoomQuery().getWhereClause();
 
-		String validation = lookup.getValidation();
+		String validation = m_lookup.getValidation();
 
 		if (validation == null)
 			validation = "";
@@ -846,7 +989,7 @@
 
 		if (whereClause.indexOf('@') != -1)
 		{
-			String validated = Env.parseContext(Env.getCtx(), lookup.getWindowNo(), whereClause, false);
+			String validated = Env.parseContext(Env.getCtx(), m_lookup.getWindowNo(), whereClause, false);
 
 			if (validated.length() == 0)
 				log.severe(getColumnName() + " - Cannot Parse=" + whereClause);
@@ -918,4 +1061,84 @@
 		}
 		return null;
 	}
+	
+	/**
+	 * Set the old value of the field.  For use in future comparisons.
+	 * The old value must be explicitly set though this call.
+	 * @param m_oldValue
+	 */
+	public void set_oldValue() {
+		this.m_oldValue = getValue();
+	}
+	/**
+	 * Get the old value of the field explicitly set in the past
+	 * @return
+	 */
+	public Object get_oldValue() {
+		return m_oldValue;
+	}
+	/**
+	 * Has the field changed over time?
+	 * @return true if the old value is different than the current.
+	 */
+	public boolean hasChanged() {
+		// Both or either could be null
+		if(getValue() != null)
+			if(m_oldValue != null)
+				return !m_oldValue.equals(getValue());
+			else
+				return true;
+		else  // getValue() is null
+			if(m_oldValue != null)
+				return true;
+			else
+				return false;
+	}
+
+	/**
+	 * Reset Env.TAB_INFO context variables
+	 * @param m_columnName
+	 */
+	private void resetTabInfo()
+	{
+		if (this.m_lookup == null)
+			return;
+		String col = m_lookup.getColumnName();		//	fully qualified name
+		if (col.indexOf('.') != -1)
+			col = col.substring(col.indexOf('.')+1);
+		//
+		// TODO : hard-coded
+		final String[] infoNames;
+		if (col.equals("M_Product_ID"))
+		{
+			infoNames = new String[]{"M_Product_ID","M_AttributeSetInstance_ID","M_Locator_ID","M_Lookup_ID"};
+		}
+		else if (col.equals("C_BPartner_ID"))
+		{
+			infoNames = new String[]{"C_BPartner_ID","AD_User_ID","C_BPartner_Location_ID"};
+		}
+        else {
+			infoNames = new String[]{};
+		}
+		for (String name : infoNames)
+		{
+			Env.setContext(Env.getCtx(), m_lookup.getWindowNo(), Env.TAB_INFO, name, null);
+		}
+	}
+
+	/**
+	 * @param override - true to override the environment, false to use environment
+	 * @param trx the m_isSOTrx to set
+	 */
+	public void setIsSOTrx(boolean override, boolean trx) {
+		m_isSOTrxEnvOverride = override;
+		if (m_isSOTrxEnvOverride)
+			m_isSOTrx = trx;
+		else
+			if (Env.getContext(Env.getCtx(), m_lookup.getWindowNo(), "IsSOTrx").equals("N"))
+				m_isSOTrx = false;
+			else
+				m_isSOTrx = true;
+	}
+
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/editor/WTableDirEditor.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/editor/WTableDirEditor.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/editor/WTableDirEditor.java	Mon Feb 10 21:08:53 2014 -0500
@@ -63,6 +63,7 @@
     
     private Lookup  lookup;
     private Object oldValue;
+    private Object m_oldValue;
     private WEditorPopupMenu popupMenu;
        
     public WTableDirEditor(GridField gridField)
@@ -115,7 +116,7 @@
     	this.lookup = lookup;
     	init();
     }
-    
+
     private void init()
     {
         getComponent().setWidth("200px"); 
@@ -145,7 +146,7 @@
         if (gridField != null) 
         {
         	popupMenu = new WEditorPopupMenu(zoom, true, true);
-        	if (gridField != null &&  gridField.getGridTab() != null)
+        	if (gridField.getGridTab() != null)
     		{
     			WFieldRecordInfo.addMenu(popupMenu);
     		}
@@ -197,14 +198,16 @@
                 //still not in list, reset to zero
                 if (!getComponent().isSelected(value))
                 {
-                	if (value instanceof Integer && gridField.getDisplayType() != DisplayType.ID) // for IDs is ok to be out of the list
-                	{
-                		getComponent().setValue(null);
-                		if (curValue == null)
-                			curValue = value;
-                		ValueChangeEvent changeEvent = new ValueChangeEvent(this, this.getColumnName(), curValue, null);
-            	        super.fireValueChange(changeEvent);
-                		oldValue = null;
+                	if (gridField != null){
+	                	if (value instanceof Integer && gridField.getDisplayType() != DisplayType.ID) // for IDs is ok to be out of the list
+	                	{
+	                		getComponent().setValue(null);
+	                		if (curValue == null)
+	                			curValue = value;
+	                		ValueChangeEvent changeEvent = new ValueChangeEvent(this, this.getColumnName(), curValue, null);
+	            	        super.fireValueChange(changeEvent);
+	                		oldValue = null;
+	                	}
                 	}
                 }
             }
@@ -241,7 +244,7 @@
     		getComponent().removeAllItems();
 
     	if (isReadWrite())
-    	{
+    	{    		
 	        if (lookup != null)
 	        {
 	            int size = lookup.getSize();
@@ -424,4 +427,45 @@
 		if ((lookup != null) && (!lookup.isValidated() || !lookup.isLoaded()))
 			this.actionRefresh();
     }
+	
+	/**
+	 * Set the old value of the field.  For use in future comparisons.
+	 * The old value must be explicitly set though this call.
+	 * @param m_oldValue
+	 */
+	public void set_oldValue() {
+		this.m_oldValue = getValue();
+	}
+	/**
+	 * Get the old value of the field explicitly set in the past
+	 * @return
+	 */
+	public Object get_oldValue() {
+		return m_oldValue;
+	}
+	/**
+	 * Has the field changed over time?
+	 * @return true if the old value is different than the current.
+	 */
+	public boolean hasChanged() {
+		// Both or either could be null
+		// null and " " are equivalent
+		if(getValue() != null)
+			if(m_oldValue != null)
+				return !m_oldValue.equals(getValue()); 
+			else
+				if (getValue() != " ")  // Equivalent to null
+					return true; 
+				else
+					return false; // m_oldValue == null, getValue() == " "
+		else  // getValue() is null
+			if(m_oldValue != null)
+				if (m_oldValue != " ")  // Equivalent to null
+					return true;
+				else
+					return false; // m_oldValue == " ", getValue() == null 
+			else
+				return false; // Both null
+	}
+
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/ADTabpanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/ADTabpanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/ADTabpanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -892,11 +892,11 @@
         		if (e.Record_ID != null
         				&& e.Record_ID instanceof Integer
         				&& ((Integer)e.Record_ID != gridTab.getRecord_ID()))
-        			deleteNode((Integer)e.Record_ID);
+        			rowChanged(false,(Integer)e.Record_ID);
         		else
-        			setSelectedNode(gridTab.getRecord_ID());
+        			rowChanged(true, gridTab.getRecord_ID());
         	else
-        		setSelectedNode(gridTab.getRecord_ID());
+        		rowChanged(true, gridTab.getRecord_ID());
         }
 
         if (listPanel.isVisible()) {
@@ -911,67 +911,7 @@
 
     }
 
-    private void deleteNode(int recordId) {
-		if (recordId <= 0) return;
-
-		SimpleTreeModel model = (SimpleTreeModel) treePanel.getTree().getModel();
-
-		if (treePanel.getTree().getSelectedItem() != null) {
-			SimpleTreeNode treeNode = (SimpleTreeNode) treePanel.getTree().getSelectedItem().getValue();
-			MTreeNode data = (MTreeNode) treeNode.getData();
-			if (data.getNode_ID() == recordId) {
-				model.removeNode(treeNode);
-				return;
-			}
-		}
-
-		SimpleTreeNode treeNode = model.find(null, recordId);
-		if (treeNode != null) {
-			model.removeNode(treeNode);
-		}
-	}
-
-	private void addNewNode() {
-    	if (gridTab.getRecord_ID() > 0) {
-	    	String name = (String)gridTab.getValue("Name");
-			String description = (String)gridTab.getValue("Description");
-			boolean summary = gridTab.getValueAsBoolean("IsSummary");
-			String imageIndicator = (String)gridTab.getValue("Action");  //  Menu - Action
-			//
-			SimpleTreeModel model = (SimpleTreeModel) treePanel.getTree().getModel();
-			SimpleTreeNode treeNode = model.getRoot();
-			MTreeNode root = (MTreeNode) treeNode.getData();
-			MTreeNode node = new MTreeNode (gridTab.getRecord_ID(), 0, name, description,
-					root.getNode_ID(), summary, imageIndicator, false, null);
-			SimpleTreeNode newNode = new SimpleTreeNode(node, new ArrayList<Object>());
-			model.addNode(newNode);
-			int[] path = model.getPath(model.getRoot(), newNode);
-			Treeitem ti = treePanel.getTree().renderItemByPath(path);
-			treePanel.getTree().setSelectedItem(ti);
-    	}
-	}
-
-	private void setSelectedNode(int recordId) {
-		if (recordId <= 0) return;
-
-		if (treePanel.getTree().getSelectedItem() != null) {
-			SimpleTreeNode treeNode = (SimpleTreeNode) treePanel.getTree().getSelectedItem().getValue();
-			MTreeNode data = (MTreeNode) treeNode.getData();
-			if (data.getNode_ID() == recordId) return;
-		}
-
-		SimpleTreeModel model = (SimpleTreeModel) treePanel.getTree().getModel();
-		SimpleTreeNode treeNode = model.find(null, recordId);
-		if (treeNode != null) {
-			int[] path = model.getPath(model.getRoot(), treeNode);
-			Treeitem ti = treePanel.getTree().renderItemByPath(path);
-			treePanel.getTree().setSelectedItem(ti);
-		} else {
-			addNewNode();
-		}
-	}
-
-	/**
+    /**
 	 * Toggle between form and grid view
 	 */
 	public void switchRowPresentation() {
@@ -1066,8 +1006,33 @@
         	for (EmbeddedPanel panel : includedPanel)
         		panel.tabPanel.query(false, 0, 0);
         }
+		
+		//  Sync tree
+		if (treePanel == null || gridTab.getRecord_ID() <= 0)
+			return;
+		
+		rowChanged(true, gridTab.getRecord_ID());
+		
 	}
 
+	/**
+	 *  Row Changed - synchronize with Tree
+	 *
+	 *  @param  save    true the row was saved (changed/added), false if the row was deleted
+	 *  @param  keyID   the ID of the row changed
+	 */
+	public void rowChanged (boolean save, int keyID)
+	{
+		String name = (String)gridTab.getValue("Name");
+		String description = (String)gridTab.getValue("Description");
+		Boolean IsSummary = (Boolean)gridTab.getValue("IsSummary");
+		boolean summary = IsSummary != null && IsSummary.booleanValue();
+		String imageIndicator = (String)gridTab.getValue("Action");  //  Menu - Action
+		//
+		treePanel.nodeChanged(save, keyID, name, description,
+			summary, imageIndicator);
+	}   //  rowChanged
+	
 	private void createEmbeddedPanelUI(EmbeddedPanel ep) {
 		org.zkoss.zul.Row row = new Row();
 		row.setSpans("5");
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/ADTreePanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/ADTreePanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/ADTreePanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -17,6 +17,7 @@
 import org.adempiere.webui.component.Checkbox;
 import org.adempiere.webui.component.SimpleTreeModel;
 import org.adempiere.webui.util.TreeUtils;
+import org.compiere.model.MTreeNode;
 import org.compiere.util.Env;
 import org.compiere.util.Msg;
 import org.zkoss.zk.ui.event.Event;
@@ -24,8 +25,10 @@
 import org.zkoss.zk.ui.event.Events;
 import org.zkoss.zul.Panel;
 import org.zkoss.zul.Panelchildren;
+import org.zkoss.zul.SimpleTreeNode;
 import org.zkoss.zul.Toolbar;
 import org.zkoss.zul.Tree;
+import org.zkoss.zul.Treeitem;
 
 /**
  * 
@@ -147,4 +150,72 @@
 			collapseAll();
 	}
 	//
+	
+	/**************************************************************************
+	 *  Node Changed - synchronize Node
+	 *
+	 *  @param  save    true the node was saved (changed/added), false if the row was deleted
+	 *  @param  keyID   the ID of the row changed
+	 *  @param  name	name
+	 *  @param  description	description
+	 *  @param  isSummary	summary node
+	 *  @param  imageIndicator image indicator
+	 */
+	public void nodeChanged (boolean save, int keyID,
+		String name, String description, boolean isSummary, String imageIndicator)
+	{
+		if (tree == null)
+			return;
+		
+		//	if ID==0=root - don't update it
+		if (keyID == 0)
+			return;	
+			
+		//  try to find the node
+		SimpleTreeModel model = (SimpleTreeModel) tree.getModel();
+		SimpleTreeNode root = model.getRoot();
+		SimpleTreeNode node = model.find(null, keyID);
+		
+		//  Node not found and saved -> new
+		if (node == null && save)
+		{
+			MTreeNode rootData = (MTreeNode) root.getData();
+			MTreeNode mTreeNode = new MTreeNode (keyID, 0, name, description,
+				rootData.getNode_ID(), isSummary, imageIndicator, false, null);
+			SimpleTreeNode newNode = new SimpleTreeNode(mTreeNode, null); 
+			model.addNode(root, newNode, 0);
+			int[] path = model.getPath(model.getRoot(), newNode);
+			Treeitem ti = tree.renderItemByPath(path);
+			tree.setSelectedItem(ti);
+		}
+
+		//  Node found and saved -> change
+		else if (node != null && save)
+		{
+			MTreeNode mTreeNode = (MTreeNode) node.getData();
+			mTreeNode.setName (name);
+			mTreeNode.setAllowsChildren(isSummary);
+			int[] path = model.getPath(model.getRoot(), node);
+			Treeitem ti = tree.renderItemByPath(path);
+			tree.setSelectedItem(ti);
+		}
+
+		//  Node found and not saved -> delete
+		else if (node != null && !save)
+		{
+			model.removeNode(node);
+		}
+
+		//  Error
+		else
+		{
+			node = null;
+		}
+
+		//  Nothing to display
+		if (node == null)
+			return;
+
+	}   //  nodeChanged
+
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/AbstractADWindowPanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/AbstractADWindowPanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/AbstractADWindowPanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -2054,7 +2054,7 @@
 			if (ps != null && ps.equals("Y"))
 			{
 				new org.adempiere.webui.acct.WAcctViewer(Env.getContextAsInt (ctx, curWindowNo, "AD_Client_ID"),
-						tableId, recordId);
+						tableId, recordId, true);  // Open as a modal window.
 			}
 			else
 			{
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoAssetPanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoAssetPanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoAssetPanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -22,19 +22,17 @@
 import java.sql.Timestamp;
 
 import org.adempiere.webui.apps.AEnv;
-import org.adempiere.webui.component.Grid;
-import org.adempiere.webui.component.GridFactory;
 import org.adempiere.webui.component.Label;
 import org.adempiere.webui.component.Row;
 import org.adempiere.webui.component.Rows;
 import org.adempiere.webui.component.Textbox;
 import org.adempiere.webui.editor.WEditor;
 import org.adempiere.webui.editor.WSearchEditor;
-import org.adempiere.webui.event.ValueChangeEvent;
 import org.adempiere.webui.event.ValueChangeListener;
-import org.adempiere.webui.event.WTableModelEvent;
 import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
+import org.compiere.model.MAsset;
+import org.compiere.model.MColumn;
 import org.compiere.model.MLookupFactory;
 import org.compiere.model.MQuery;
 import org.compiere.util.DisplayType;
@@ -42,13 +40,6 @@
 import org.compiere.util.Msg;
 import org.zkoss.zk.ui.event.EventListener;
 import org.zkoss.zk.ui.event.Events;
-import org.zkoss.zkex.zul.Borderlayout;
-import org.zkoss.zkex.zul.Center;
-import org.zkoss.zkex.zul.North;
-import org.zkoss.zkex.zul.South;
-import org.zkoss.zul.Div;
-import org.zkoss.zul.Separator;
-import org.zkoss.zul.Vbox;
 
 /**
 * Based on InfoPayment written by Jorg Janke
@@ -59,6 +50,10 @@
 * Zk Port
 * @author Elaine
 * @version	InfoAsset.java Adempiere Swing UI 3.4.1 
+* 
+*
+ * @author Michael McKay, ADEMPIERE-72 VLookup and Info Window improvements
+ * 	<li>https://adempiere.atlassian.net/browse/ADEMPIERE-72
 */
 
 public class InfoAssetPanel extends InfoPanel implements ValueChangeListener, EventListener
@@ -69,13 +64,13 @@
 	private static final long serialVersionUID = -3324796198694097770L;
 
 	/** From Clause             */
-	private static String s_assetFROM = "A_ASSET a"
+	private static String s_From = "A_ASSET a"
 		+ " LEFT OUTER JOIN M_Product p ON (a.M_Product_ID=p.M_Product_ID)"
 		+ " LEFT OUTER JOIN C_BPartner bp ON (a.C_BPartner_ID=bp.C_BPartner_ID)"
 		+ " LEFT OUTER JOIN AD_User u ON (a.AD_User_ID=u.AD_User_ID)";
 
 	/**  Array of Column Info    */
-	private static final ColumnInfo[] s_assetLayout = {
+	private static final ColumnInfo[] s_Layout = {
 		new ColumnInfo(" ", "a.A_Asset_ID", IDColumn.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "Value"), "a.Value", String.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "Name"), "a.Name", String.class),
@@ -87,6 +82,7 @@
 		new ColumnInfo(Msg.translate(Env.getCtx(), "VersionNo"), "a.VersionNo", String.class)
 	};
 
+	private int fieldID = 0;
 	private Textbox fieldValue = new Textbox();
 	private Textbox fieldName = new Textbox();
 	
@@ -96,54 +92,57 @@
 	private Label labelValue = new Label();
 	private Label labelName = new Label();
 	
-	private Borderlayout layout;
-
-	private Vbox southBody;
-
+	/**
+	 *	Standard Constructor - opens in non-modal mode.
+	 * @param WindowNo 			window no
+	 * @param record_id			The record_id of the asset
+	 * @param value    			Query Value or Name if enclosed in @
+	 * @param multiSelection 	multiple selections
+	 * @param whereClause 		where clause
+	 */
+	public InfoAssetPanel(	int WindowNo, int record_id, String value,
+							boolean multiSelection, String whereClause)
+	{
+		this(WindowNo, true, record_id, value, multiSelection, false, whereClause);
+	}	
+	
 	/**
 	 *	Standard Constructor
 	 * @param WindowNo window no
-	 * @param A_Asset_ID asset
-	 * @param value    Query Value or Name if enclosed in @
+	 * @param record_id The record ID to find
+	 * @param value Query value to find, exclusive of record_id
+	 * @param saveResults true if results are saved in context
 	 * @param multiSelection multiple selections
 	 * @param whereClause where clause
-	 */
-	public InfoAssetPanel(	int WindowNo, int A_Asset_ID, String value,
-							boolean multiSelection, String whereClause)
-	{
-		this(WindowNo, A_Asset_ID, value, multiSelection, whereClause, true);
-	}
-
-	/**
-	 *	Standard Constructor
-	 * @param WindowNo window no
-	 * @param A_Asset_ID asset
-	 * @param value    Query Value or Name if enclosed in @
-	 * @param multiSelection multiple selections
-	 * @param whereClause where clause
+	 * @param modal True if window is opened in modal mode.
 	 */
 	
-	public InfoAssetPanel(	int WindowNo, int A_Asset_ID, String value,
-							boolean multiSelection, String whereClause, boolean lookup)
+	public InfoAssetPanel(	int WindowNo, boolean modal, int record_id, String value,
+							boolean multiSelection, boolean saveResults, String whereClause)
 	{
-		super (WindowNo, "a", "A_Asset_ID", multiSelection, whereClause, lookup);
+		super (WindowNo, modal, "a", "A_Asset_ID", multiSelection, saveResults, whereClause);
 		
-		log.info(value + ", ID=" + A_Asset_ID + ", WHERE=" + whereClause);
+		log.info(value + ", ID=" + record_id + ", WHERE=" + whereClause);
 		setTitle(Msg.getMsg(Env.getCtx(), "InfoAsset"));
-
+		//
+		StringBuffer where = new StringBuffer();
+		where.append("a.IsActive='Y'");
+		if (whereClause != null && whereClause.length() > 0)
+			where.append(" AND ").append(whereClause);
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause("a.Value");
+		//
 		statInit();
-		initInfo(value, A_Asset_ID, whereClause);
-
-		int no = contentPanel.getRowCount();
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
+		initInfo(record_id, value, whereClause);
 		
-		//	AutoQuery
-		if (value != null && value.length() > 0)
-			executeQuery();
-		
+		//  Auto query
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
+			prepareAndExecuteQuery();
+		//
 		p_loadedOK = true;
-	} // InfoProduct
+	} // InfoAssetPanel
 	
 	/**
 	 *	Static Setup - add fields to parameterPanel
@@ -156,24 +155,30 @@
 		
 		labelValue.setValue(Msg.getMsg(Env.getCtx(), "Value"));
 		fieldValue.addEventListener(Events.ON_CHANGE, this);
+		fieldValue.setAttribute("zk_component_ID", "Lookup_Criteria_fieldValue");
 		
 		labelName.setValue(Msg.getMsg(Env.getCtx(), "Name"));
 		fieldName.addEventListener(Events.ON_CANCEL, this);
+		fieldName.setAttribute("zk_component_ID", "Lookup_Criteria_fieldName");
 		// From A_Asset.
 		fBPartner_ID = new WSearchEditor(
-				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 8065, DisplayType.Search), 
-				Msg.translate(Env.getCtx(), "C_BPartner_ID"), "", false, false, true);
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+						MColumn.getColumn_ID(MAsset.Table_Name, MAsset.COLUMNNAME_C_BPartner_ID),
+						DisplayType.Search), 
+						Msg.translate(Env.getCtx(), "C_BPartner_ID"), "", false, false, true);
 		fBPartner_ID.addValueChangeListener(this);
+		fBPartner_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_fBPartner_ID");
 		
 		fProduct_ID = new WSearchEditor(
-				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 8047, DisplayType.Search), 
-				Msg.translate(Env.getCtx(), "M_Product_ID"), "", false, false, true);
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0,  
+						MColumn.getColumn_ID(MAsset.Table_Name, MAsset.COLUMNNAME_M_Product_ID), 
+						DisplayType.Search), 
+						Msg.translate(Env.getCtx(), "M_Product_ID"), "", false, false, true);
 		fProduct_ID.addValueChangeListener(this);
+		fProduct_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_fProduct_ID");
 		
-		Grid grid = GridFactory.newGridLayout();
 		
 		Rows rows = new Rows();
-		grid.appendChild(rows);
 		
 		Row row = new Row();
 		rows.appendChild(row);
@@ -189,40 +194,8 @@
 		row.appendChild(fProduct_ID.getLabel().rightAlign());
 		row.appendChild(fProduct_ID.getComponent());
 		
-		layout = new Borderlayout();
-        layout.setWidth("100%");
-        layout.setHeight("100%");
-        if (!isLookup())
-        {
-        	layout.setStyle("position: absolute");
-        }
-        this.appendChild(layout);
-
-        North north = new North();
-        layout.appendChild(north);
-		north.appendChild(grid);
-
-        Center center = new Center();
-		layout.appendChild(center);
-		center.setFlex(true);
-		Div div = new Div();
-		div.appendChild(contentPanel);
-		if (isLookup())
-			contentPanel.setWidth("99%");
-        else
-        	contentPanel.setStyle("width: 99%; margin: 0px auto;");
-        contentPanel.setVflex(true);
-		div.setStyle("width :100%; height: 100%");
-		center.appendChild(div);
-        
-		South south = new South();
-		layout.appendChild(south);
-		southBody = new Vbox();
-		southBody.setWidth("100%");
-		south.appendChild(southBody);
-		southBody.appendChild(confirmPanel);
-		southBody.appendChild(new Separator());
-		southBody.appendChild(statusBar);
+		p_criteriaGrid.appendChild(rows);
+		super.setSizes();
 	}
 	
 	/**
@@ -231,23 +204,48 @@
 	 *  @param whereClause where clause
 	 */
 	
-	private void initInfo (String value, int A_Asset_ID, String whereClause)
+	private void initInfo (int record_id, String value, String whereClause)
 	{
-		//	Create Grid
-		StringBuffer where = new StringBuffer();
-		where.append("a.IsActive='Y'");
-		
-		if (whereClause != null && whereClause.length() > 0)
-			where.append(" AND ").append(whereClause);
-		
-		prepareTable(s_assetLayout, s_assetFROM, where.toString(), "a.Value");
+		//
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
 
-		//  Set Value
-		if (value == null)
-			value = "%";
-		
-		if (!value.endsWith("%"))
-			value += "%";
+		//  Set Value and boolean criteria (if any)
+		if (!(record_id == 0))
+		{
+			fieldID = record_id;
+		}
+		else
+		{	
+			// Use the value if any
+			if (value != null && value.length() > 0)
+			{
+				fieldValue.setText(value);
+			}
+			else
+			{
+				//  Try to find the context - A_Asset_ID
+	        	String aid = Env.getContext(Env.getCtx(), p_WindowNo, "A_Asset_ID");
+				if (aid != null && aid.length() != 0)
+				{
+					fieldID = new Integer(aid).intValue();
+				}
+				//  C_BPartner_ID
+				String bp = Env.getContext(Env.getCtx(), p_WindowNo, "C_BPartner_ID");
+				if (bp != null && bp.length() != 0)
+				{
+					fBPartner_ID.setValue(new Integer(bp).intValue());
+				}
+				//  M_Product_ID
+				String pid = Env.getContext(Env.getCtx(), p_WindowNo, "M_Product_ID");
+				if (pid != null && pid.length() != 0)
+				{
+					fProduct_ID.setValue(new Integer(pid).intValue());
+				}
+			}
+		}
 	} // initInfo
 	
 	/*************************************************************************/
@@ -261,41 +259,26 @@
 	protected String getSQLWhere()
 	{
 		StringBuffer sql = new StringBuffer();
-	
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if (!(fieldID == 0))
+			sql.append(" AND a.A_Asset_ID = ?");
 		//	=> Value
-		
-		String value = fieldValue.getText().toUpperCase();
-		
-		if (!(value.equals("") || value.equals("%")))
+		if (isValidSQLText(fieldValue))
 			sql.append(" AND UPPER(a.Value) LIKE ?");
-		
 		//	=> Name
-		
-		String name = fieldName.getText().toUpperCase();
-		
-		if (!(name.equals("") || name.equals("%")))
+		if (isValidSQLText(fieldName))
 			sql.append (" AND UPPER(a.Name) LIKE ?");
-		
 		//	C_BPartner_ID
-		
-		Integer C_BPartner_ID = null;
-		
-		if (fBPartner_ID.getDisplay() != "")
-			C_BPartner_ID = (Integer)fBPartner_ID.getValue();
-		
+		Integer C_BPartner_ID = (Integer)fBPartner_ID.getValue();
 		if (C_BPartner_ID != null)
 			sql.append (" AND a.C_BPartner_ID=").append(C_BPartner_ID);
-
 		//	M_Product_ID
-		
-		Integer M_Product_ID = null;
-		
-		if (fProduct_ID.getDisplay() != "")
-			M_Product_ID = (Integer)fProduct_ID.getValue();
-		
+		Integer M_Product_ID = (Integer)fProduct_ID.getValue();
 		if (M_Product_ID != null)
 			sql.append (" AND a.M_Product_ID=").append(M_Product_ID);
-
+		//
 		return sql.toString();
 	} // getSQLWhere
 
@@ -311,31 +294,23 @@
 	protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
 	{
 		int index = 1;
-		
+		//  => ID
+		if(!(fieldID ==0))
+		{
+			pstmt.setInt(index++, fieldID);
+			log.fine("Record_ID: " + fieldID);
+		}
 		//	=> Value
-		
-		String value = fieldValue.getText().toUpperCase();
-		
-		if (!(value.equals("") || value.equals("%")))
+		if (isValidSQLText(fieldValue))
 		{
-			if (!value.endsWith("%"))
-				value += "%";
-		
-			pstmt.setString(index++, value);
-			log.fine("Value: " + value);
+			pstmt.setString(index++, getSQLText(fieldValue));
+			log.fine("Value: " + fieldValue.getText());
 		}
-		
 		//	=> Name
-		
-		String name = fieldName.getText().toUpperCase();
-		
-		if (!(name.equals("") || name.equals("%")))
+		if (isValidSQLText(fieldName))
 		{
-			if (!name.endsWith("%"))
-				name += "%";
-		
-			pstmt.setString(index++, name);
-			log.fine("Name: " + name);
+			pstmt.setString(index++, getSQLText(fieldName));
+			log.fine("Name: " + fieldName.getText());
 		}
 	} // setParameters
 
@@ -346,7 +321,7 @@
 	
 	public void saveSelectionDetail()
 	{
-		int row = contentPanel.getSelectedRow();
+		int row = p_table.getSelectedRow();
 		
 		if (row == -1)
 			return;
@@ -357,34 +332,14 @@
 		Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "A_Asset_ID", ID == null ? "0" : ID.toString());
 	} // saveSelectionDetail
 
-	/*************************************************************************/
-	/**
-	 *	Show History
-	 */
-
-	protected void showHistory()
-	{
-		log.info( "InfoAsset.showHistory");
-	}	//	showHistory
-
-	/**
-	 *	Has History
-	 *  @return true
-	 */
-	
-	protected boolean hasHistory()
-	{
-		return false;
-	} // hasHistory
-
 	// Elaine 2008/12/16
 	/**
 	 *	Zoom
 	 */
-	public void zoom()
+	public void zoom(int record_id)
 	{
 		log.info( "InfoAsset.zoom");
-		Integer A_Asset_ID = getSelectedRowKey();
+		Integer A_Asset_ID = record_id;
 		
 		if (A_Asset_ID == null)
 			return;
@@ -408,47 +363,4 @@
 		return true;
 	} // hasZoom
 
-	/**
-	 *	Customize
-	 */
-	
-	protected void customize()
-	{
-		log.info( "InfoAsset.customize");
-	} // customize
-
-	/**
-	 *	Has Customize
-	 *  @return false
-	 */
-	
-	protected boolean hasCustomize()
-	{
-		return false; // for now
-	} // hasCustomize
-	
-	public void tableChanged(WTableModelEvent event) 
-	{
-		
-	}
-	
-	public void valueChange(ValueChangeEvent evt)
-	{
-		if (fBPartner_ID.equals(evt.getSource()))
-		{
-	    	fBPartner_ID.setValue(evt.getNewValue());
-		}
-		
-		if (fProduct_ID.equals(evt.getSource()))
-		{
-			fProduct_ID.setValue(evt.getNewValue());
-		}
-	}
-
-	@Override
-	protected void insertPagingComponent()
-    {
-		southBody.insertBefore(paging, southBody.getFirstChild());
-		layout.invalidate();
-	}
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoAssignmentPanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoAssignmentPanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoAssignmentPanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -20,40 +20,32 @@
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 import java.sql.Timestamp;
+import java.text.SimpleDateFormat;
 import java.util.Date;
-import java.util.logging.Level;
 
 import org.adempiere.webui.apps.AEnv;
 import org.adempiere.webui.component.Button;
 import org.adempiere.webui.component.Datebox;
-import org.adempiere.webui.component.Grid;
-import org.adempiere.webui.component.GridFactory;
 import org.adempiere.webui.component.Label;
 import org.adempiere.webui.component.Row;
 import org.adempiere.webui.component.Rows;
 import org.adempiere.webui.editor.WEditor;
-import org.adempiere.webui.editor.WSearchEditor;
-import org.adempiere.webui.event.ValueChangeEvent;
+import org.adempiere.webui.editor.WTableDirEditor;
 import org.adempiere.webui.event.ValueChangeListener;
-import org.adempiere.webui.event.WTableModelEvent;
 import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
+import org.compiere.model.MColumn;
 import org.compiere.model.MLookupFactory;
 import org.compiere.model.MQuery;
+import org.compiere.model.MResource;
+import org.compiere.model.MResourceType;
 import org.compiere.util.DB;
 import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
 import org.compiere.util.Msg;
-import org.zkoss.zk.ui.event.Event;
 import org.zkoss.zk.ui.event.EventListener;
 import org.zkoss.zk.ui.event.Events;
-import org.zkoss.zkex.zul.Borderlayout;
-import org.zkoss.zkex.zul.Center;
-import org.zkoss.zkex.zul.North;
-import org.zkoss.zkex.zul.South;
 import org.zkoss.zul.Div;
-import org.zkoss.zul.Separator;
-import org.zkoss.zul.Vbox;
 
 /**
 * Based on InfoAssignment written by Jorg Janke
@@ -64,6 +56,9 @@
 * Zk Port
 * @author Elaine
 * @version	InfoAssignment.java Adempiere Swing UI 3.4.1
+*
+ * @author Michael McKay, ADEMPIERE-72 VLookup and Info Window improvements
+ * 	<li>https://adempiere.atlassian.net/browse/ADEMPIERE-72
 */
 
 public class InfoAssignmentPanel extends InfoPanel implements EventListener, ValueChangeListener
@@ -72,6 +67,9 @@
 	 * 
 	 */
 	private static final long serialVersionUID = -935642651768066799L;
+	
+	private int fieldID = 0;
+	
 	private WEditor fieldResourceType;
 	private WEditor fieldResource;
 	
@@ -82,19 +80,20 @@
 
 	private Label labelFrom = new Label(Msg.translate(Env.getCtx(), "DateFrom"));
 	private Label labelTo = new Label(Msg.translate(Env.getCtx(), "DateTo"));
-	private Borderlayout layout;
-	private Vbox southBody;
 
 	/** From Clause             */
-	private static String s_assignmentFROM =
+	private static String s_From =
 		"S_ResourceAssignment ra, S_ResourceType rt, S_Resource r, C_UOM uom";
-
-	private static String s_assignmentWHERE =
+	/** Where Clause             */
+	private static String s_Where =
 		"ra.IsActive='Y' AND ra.S_Resource_ID=r.S_Resource_ID "
 		+ "AND r.S_ResourceType_ID=rt.S_ResourceType_ID AND rt.C_UOM_ID=uom.C_UOM_ID";
+	/** Order Clause             */
+	private static String s_Order =
+		"rt.Name, r.Name";
 
 	/**  Array of Column Info    */
-	private static ColumnInfo[] s_assignmentLayout = {
+	private static ColumnInfo[] s_Layout = {
 		new ColumnInfo(" ", "ra.S_ResourceAssignment_ID", IDColumn.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "S_ResourceType_ID"), "rt.Name", String.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "S_Resource_ID"), "r.Name", String.class),
@@ -106,79 +105,73 @@
 	};
 
 	/**
-	 *  Constructor
+	 *  Deprecated Constructor
 	 *  
 	 *  @param WindowNo WindowNo
 	 *  @param  value   Query value Name or Value if contains numbers
 	 *  @param multiSelection multiple selection
 	 *  @param whereClause where clause
 	 */
-	public InfoAssignmentPanel (int WindowNo,
+	@Deprecated
+	public InfoAssignmentPanel (int WindowNo, 
 		String value, boolean multiSelection, String whereClause)
 	{
-		this(WindowNo, value, multiSelection, whereClause, true);
+		this(WindowNo, true, 0, value, multiSelection, false, whereClause);
+	}
+
+	/**
+	 *  Constructor
+	 *  
+	 *  @param WindowNo WindowNo
+	 *  @param record_id The record ID to find
+	 *  @param value query value to find, exclusive of record_id
+	 *  @param multiSelection multiple selection
+	 *  @param saveResults  True if results will be saved, false for info only
+	 *  @param whereClause where clause
+	 */
+	public InfoAssignmentPanel (int WindowNo, int record_id, 
+		String value, boolean multiSelection, String whereClause)
+	{
+		this(WindowNo, true, record_id, value, multiSelection, false, whereClause);
 	}
 	
 	/**
 	 *  Constructor
 	 *
 	 *  @param WindowNo WindowNo
-	 *  @param  value   Query value Name or Value if contains numbers
+	 *  @param modal True if window is opened in modal mode.
+	 *  @param record_id The record ID to find
+	 *  @param value query value to find, exclusive of record_id
 	 *  @param multiSelection multiple selection
+	 *  @param saveResults  True if results will be saved (modal), false for info only (non-modal)
 	 *  @param whereClause where clause
 	 */
-	public InfoAssignmentPanel (int WindowNo,
-		String value, boolean multiSelection, String whereClause, boolean lookup)
+	public InfoAssignmentPanel (int WindowNo, boolean modal, int record_id, 
+		String value, boolean multiSelection, boolean saveResults, String whereClause)
 	{
-		super (WindowNo, "ra", "S_ResourceAssignment_ID",
-			multiSelection, whereClause, lookup);
+		super (WindowNo, modal, "ra", "S_ResourceAssignment_ID",
+			multiSelection, saveResults, whereClause);
 		log.info(value);
 		setTitle(Msg.getMsg(Env.getCtx(), "InfoAssignment"));
+		//
+		StringBuffer where = new StringBuffer(s_Where);
+		if (whereClause != null && whereClause.length() > 0)
+			where.append(" AND ").append(whereClause);
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause(s_Order);
+		//		
+		statInit();
+		initInfo (record_id, value, whereClause);
 
-		if (!initLookups())
-			return;
-		
-		statInit();
-		initInfo (value, whereClause);
+		//  Auto query
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
+			prepareAndExecuteQuery();
 
-		int no = contentPanel.getRowCount();
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
-		
 		p_loadedOK = true;
 	} // InfoAssignmentPanel
 	
-	/**
-	 * 	Initialize Lookups
-	 * 	@return true if OK
-	 */
-	
-	private boolean initLookups()
-	{
-		try
-		{
-			int AD_Column_ID = 6851; //	S_Resource.S_ResourceType_ID
-
-			fieldResourceType = new WSearchEditor (
-					MLookupFactory.get(Env.getCtx(), p_WindowNo, 0, AD_Column_ID, DisplayType.TableDir), 
-					Msg.translate(Env.getCtx(), "S_ResourceType_ID"), "", false, false, true);
-			
-			AD_Column_ID = 6826; //	S_ResourceAssignment.S_Resource_ID
-			
-			fieldResource = new WSearchEditor (
-					MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, AD_Column_ID, DisplayType.TableDir), 
-					Msg.translate(Env.getCtx(), "S_Resource_ID"), "", false, false, true);
-		}
-		catch (Exception e)
-		{
-			log.log(Level.SEVERE, "InfoAssignment.initLookup");
-			return false;
-		}
-
-		bNew.setImage("/images/New16.png");
-		
-		return true;
-	} // initLookups
 
 	/**
 	 *	Static Setup - add fields to parameterPanel.
@@ -189,15 +182,39 @@
 	
 	private void statInit()
 	{
+		fieldResourceType = new WTableDirEditor (
+				MLookupFactory.get(Env.getCtx(), p_WindowNo, 0, 
+						MColumn.getColumn_ID(MResourceType.Table_Name, MResourceType.COLUMNNAME_S_ResourceType_ID), 
+						DisplayType.TableDir), 
+				Msg.translate(Env.getCtx(), "S_ResourceType_ID"), "", false, false, true);
+		fieldResourceType.getComponent().addEventListener(Events.ON_CHANGE, this);;
+		fieldResourceType.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_S_ResourceType_ID");
+		
+		fieldResource = new WTableDirEditor (
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0,
+						MColumn.getColumn_ID(MResource.Table_Name, MResource.COLUMNNAME_S_Resource_ID), 
+						DisplayType.TableDir), 
+				Msg.translate(Env.getCtx(), "S_Resource_ID"), "", false, false, true);
+		fieldResource.getComponent().addEventListener(Events.ON_CHANGE, this);
+		fieldResource.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_S_Resource_ID");
+
+		bNew.setImage("/images/New16.png");
 		fieldFrom.setWidth("180px");
 		fieldTo.setWidth("180px");
 		
+		fieldFrom.setAttribute("zk_component_ID", "Lookup_Criteria_fieldFrom");
+		fieldFrom.addEventListener(Events.ON_CHANGE, this);
+		fieldTo.setAttribute("zk_component_ID", "Lookup_Criteria_fieldTo");
+		fieldTo.addEventListener(Events.ON_CHANGE, this);
+		
+		SimpleDateFormat dateFormat = DisplayType.getDateFormat(DisplayType.Date, AEnv.getLanguage(Env.getCtx()));
+		fieldFrom.setFormat(dateFormat.toPattern());
+		fieldTo.setFormat(dateFormat.toPattern());
+
 		bNew.addEventListener(Events.ON_CLICK, this);
-		
-		Grid grid = GridFactory.newGridLayout();
-		
+		bNew.setAttribute("zk_component_ID", "Lookup_Criteria_bNew");
+
 		Rows rows = new Rows();
-		grid.appendChild(rows);
 		
 		Row row = new Row();
 		rows.appendChild(row);
@@ -220,41 +237,9 @@
 		div.appendChild(fieldTo);
 		row.appendChild(div);
 		row.appendChild(bNew);
-		
-		layout = new Borderlayout();
-        layout.setWidth("100%");
-        layout.setHeight("100%");
-        if (!isLookup())
-        {
-        	layout.setStyle("position: absolute");
-        }
-        this.appendChild(layout);
-
-        North north = new North();
-        layout.appendChild(north);
-		north.appendChild(grid);
-
-        Center center = new Center();
-		layout.appendChild(center);
-		center.setFlex(true);
-		div = new Div();
-		div.appendChild(contentPanel);
-		if (isLookup())
-			contentPanel.setWidth("99%");
-        else
-        	contentPanel.setStyle("width: 99%; margin: 0px auto;");
-        contentPanel.setVflex(true);
-		div.setStyle("width :100%; height: 100%");
-		center.appendChild(div);
-        
-		South south = new South();
-		layout.appendChild(south);
-		southBody = new Vbox();
-		southBody.setWidth("100%");
-		south.appendChild(southBody);
-		southBody.appendChild(confirmPanel);
-		southBody.appendChild(new Separator());
-		southBody.appendChild(statusBar);
+				
+		p_criteriaGrid.appendChild(rows);
+		super.setSizes();
 	}
 	
 	/**
@@ -263,38 +248,49 @@
 	 *  @param whereClause where clause
 	 */
 	
-	private void initInfo(String value, String whereClause)
+	private void initInfo(int record_id, String value, String whereClause)
 	{
-		//  C_BPartner bp, AD_User c, C_BPartner_Location l, C_Location a
+		//
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
 
-		//	Create Grid
-		
-		StringBuffer where = new StringBuffer(s_assignmentWHERE);
-		
-		if (whereClause != null && whereClause.length() > 0)
-			where.append(" AND ").append(whereClause);
-		
-		prepareTable(s_assignmentLayout, s_assignmentFROM,
-			where.toString(), "rt.Name,r.Name,ra.AssignDateFrom");
+		if (!(record_id == 0))  // A record is defined
+        {
+        	fieldID = record_id;
+        }
+        else
+        {
+			if (value != null && value.length() > 0)
+			{
+				//	Nowhere to use the value in this info dialog
+			}
+			else
+			{
+				//  Try to find the fieldID from the context
+	        	String sra = Env.getContext(Env.getCtx(), p_WindowNo, "S_ResourceAssignment_ID");
+				if (sra != null && sra.length() != 0)
+				{
+					fieldID = new Integer(sra).intValue();
+				}
+				//  Find the criteria in the context
+				//  S_Resource_Type_ID
+	        	String srt = Env.getContext(Env.getCtx(), p_WindowNo, "S_ResourceType_ID");
+				if (srt != null && srt.length() > 0)
+				{
+		    			fieldResourceType.setValue(new Integer(srt));
+				}
+				//  S_Resource_ID
+	        	String sr = Env.getContext(Env.getCtx(), p_WindowNo, "S_Resource_ID");
+				if (sr != null && sr.length() > 0)
+				{
+		    			fieldResource.setValue(new Integer(sr));
+				}
+			}
+        }
 	} // initInfo
 	
-	/*************************************************************************/
-
-	/**
-	 *  Event Listener
-	 *
-	 * 	@param e event
-	 */
-	public void onEvent (Event e)
-	{
-		//  don't requery if fieldValue and fieldName are empty
-		//	return;
-
-		super.onEvent(e);
-	} // onEvent
-
-	/*************************************************************************/
-
 	/**
 	 *  Get dynamic WHERE part of SQL
 	 *	To be overwritten by concrete classes
@@ -304,26 +300,27 @@
 	protected String getSQLWhere()
 	{
 		StringBuffer sql = new StringBuffer();
-
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if(!(fieldID == 0))
+			sql.append(" AND ra.S_ResourceAssignment_ID=").append(fieldID);
+		//
 		Integer S_ResourceType_ID = (Integer)fieldResourceType.getValue();
-		
 		if (S_ResourceType_ID != null)
 			sql.append(" AND rt.S_ResourceType_ID=").append(S_ResourceType_ID.intValue());
-
+		//
 		Integer S_Resource_ID = (Integer)fieldResource.getValue();
-		
 		if (S_Resource_ID != null)
 			sql.append(" AND r.S_Resource_ID=").append(S_Resource_ID.intValue());
-
+		//
 		Date f = fieldFrom.getValue();
 		Timestamp ts = f != null ? new Timestamp(f.getTime()) : null;
-		
 		if (ts != null)
 			sql.append(" AND TRUNC(ra.AssignDateFrom, 'DD')>=").append(DB.TO_DATE(ts,false));
-
+		//
 		Date t = fieldTo.getValue();
 		ts = t != null ? new Timestamp(t.getTime()) : null;
-
 		if (ts != null)
 			sql.append(" AND TRUNC(ra.AssignDateTo, 'DD')<=").append(DB.TO_DATE(ts,false));
 		
@@ -343,46 +340,6 @@
 	}
 
 	/**
-	 *  History dialog
-	 *	To be overwritten by concrete classes
-	 */
-	
-	protected void showHistory()
-	{
-	}
-
-	/**
-	 *  Has History (false)
-	 *	To be overwritten by concrete classes
-	 *  @return true if it has history (default false)
-	 */
-	
-	protected boolean hasHistory()
-	{
-		return false;
-	}
-
-	/**
-	 *  Customize dialog
-	 *	To be overwritten by concrete classes
-	 */
-	
-	protected void customize()
-	{
-	}
-
-	/**
-	 *  Has Customize (false)
-	 *	To be overwritten by concrete classes
-	 *  @return true if it has customize (default false)
-	 */
-	
-	protected boolean hasCustomize()
-	{
-		return false;
-	}
-
-	/**
 	 *  Zoom action
 	 *	To be overwritten by concrete classes
 	 */
@@ -422,22 +379,36 @@
 	
 	protected void saveSelectionDetail()
 	{
+		// No context to save??
 	}
 
-	public void valueChange(ValueChangeEvent evt) 
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
 	{
-		
+		//  All the tracked fields
+		return(
+			fieldResourceType.hasChanged()	||
+			fieldResource.hasChanged() ||
+			fieldFrom.hasChanged() ||
+			fieldTo.hasChanged()
+			);
+			
 	}
-
-	public void tableChanged(WTableModelEvent event) 
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
 	{
-	}
-		
-	@Override
-	protected void insertPagingComponent()
-    {
-		southBody.insertBefore(paging, southBody.getFirstChild());
-		layout.invalidate();
+		fieldResourceType.set_oldValue();
+		fieldResource.set_oldValue();
+		fieldFrom.set_oldValue();
+		fieldTo.set_oldValue();
+		return;
 	}
 
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoBPartnerPanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoBPartnerPanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoBPartnerPanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -19,36 +19,43 @@
 
 import java.math.BigDecimal;
 import java.sql.PreparedStatement;
+import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.ArrayList;
+import java.util.logging.Level;
 
 import org.adempiere.webui.apps.AEnv;
 import org.adempiere.webui.component.Checkbox;
-import org.adempiere.webui.component.Grid;
-import org.adempiere.webui.component.GridFactory;
 import org.adempiere.webui.component.Label;
+import org.adempiere.webui.component.ListboxFactory;
 import org.adempiere.webui.component.Row;
 import org.adempiere.webui.component.Rows;
+import org.adempiere.webui.component.Tab;
+import org.adempiere.webui.component.Tabbox;
+import org.adempiere.webui.component.Tabpanel;
+import org.adempiere.webui.component.Tabpanels;
+import org.adempiere.webui.component.Tabs;
 import org.adempiere.webui.component.Textbox;
-import org.adempiere.webui.event.WTableModelEvent;
+import org.adempiere.webui.component.WListbox;
 import org.adempiere.webui.event.WTableModelListener;
+import org.compiere.apps.search.Info_Column;
 import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
+import org.compiere.model.MLocation;
 import org.compiere.model.MQuery;
 import org.compiere.util.CLogger;
+import org.compiere.util.DB;
 import org.compiere.util.Env;
-import org.compiere.util.KeyNamePair;
 import org.compiere.util.Msg;
+import org.compiere.util.Trx;
 import org.compiere.util.Util;
+import org.zkoss.zk.ui.Component;
+import org.zkoss.zk.ui.event.Event;
 import org.zkoss.zk.ui.event.EventListener;
 import org.zkoss.zk.ui.event.Events;
 import org.zkoss.zkex.zul.Borderlayout;
 import org.zkoss.zkex.zul.Center;
 import org.zkoss.zkex.zul.North;
-import org.zkoss.zkex.zul.South;
-import org.zkoss.zul.Div;
-import org.zkoss.zul.Separator;
-import org.zkoss.zul.Vbox;
 
 /**
 *	Search Business Partner and return selection
@@ -57,7 +64,10 @@
 * 
 * 	Zk Port
 * 	@author Elaine
-* 	@version	InfoBPartner.java Adempiere Swing UI 3.4.1 
+* 	
+ * @author Michael McKay, ADEMPIERE-72 VLookup and Info Window improvements
+ * 	<li>https://adempiere.atlassian.net/browse/ADEMPIERE-72
+* 	@version	InfoBPartner.java Adempiere Swing UI 3.7.1 
 */
 
 
@@ -67,367 +77,552 @@
 	 * 
 	 */
 	private static final long serialVersionUID = 5677624151607188344L;
-	private Label lblValue ;
+
+	
+	/**
+	 *	Standard Constructor
+	 *  @param record_id 	ID of current record, if known.  0 otherwise.
+	 *  @param queryvalue   Query value Name or Value if contains only numbers
+	 *  @param isSOTrx  if false, query vendors only
+	 *  @param isSOMatch	Should the customer/vendor only checkbox be checked?
+	 *  @param whereClause where clause
+	 */
+	@Deprecated
+	public InfoBPartnerPanel(int record_id, String value,int windowNo, 
+				boolean isSOTrx, boolean isSOMatch, 
+				boolean multipleSelection, 
+				String whereClause)
+	{
+		this(windowNo, true, record_id, value, isSOTrx, isSOMatch, multipleSelection, 
+				false, whereClause);
+
+	}
+
+	/**
+	 *	Standard Constructor
+	 *  @param record_id 	ID of current record, if known.  0 otherwise.
+	 *  @param queryvalue   Query value Name or Value if contains only numbers
+	 *  @param isSOTrx  if false, query vendors only
+	 *  @param isSOMatch	Should the customer/vendor only checkbox be checked?
+	 *  @param saveResults  True if results will be saved, false for info only
+	 *  @param whereClause where clause
+	 *  @param modal True if window is opened in modal mode.
+	 */
+	public InfoBPartnerPanel(int windowNo, boolean modal, int record_id, String value, 
+				boolean isSOTrx, boolean isSOMatch, boolean multipleSelection, 
+				boolean saveResults, String whereClause)
+	{
+
+		super (windowNo, modal, "C_BPartner", "C_BPartner_ID", multipleSelection, saveResults, whereClause);
+		log.info(value + ", WHERE=" + whereClause);
+		setTitle(Msg.getMsg(Env.getCtx(), "InfoBPartner"));
+		m_isSOTrx = isSOTrx;
+		m_isSOMatch = isSOMatch;
+		//
+		StringBuffer where = new StringBuffer();
+		where.append("C_BPartner.IsSummary='N' AND C_BPartner.IsActive='Y'");
+		if (whereClause != null && whereClause.length() > 0)
+			where.append(" AND ").append(whereClause);
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause(s_Order);
+		//
+		setShowTotals(true);
+		//
+        statInit();
+		initInfo(record_id, value, false);
+        //
+        if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
+        {
+        	prepareAndExecuteQuery();
+        }
+        //
+        p_loadedOK = true;
+	}
+
+	/** SalesOrder Trx          */
+	private boolean 		m_isSOTrx = false;
+	private boolean			m_isSOMatch = true;
+
+	private int m_AD_User_ID = -1;
+    private int m_C_BPartner_Location_ID = -1;
+
+	/** From Clause             */
+	private static String s_From = "C_BPartner";
+	/** Order Clause             */
+	private static String s_Order = "C_BPartner.Value";
+
+	/**  Array of Column Info    */
+	private static Info_Column[] s_Layout = {
+		new Info_Column(" ", "C_BPartner.C_BPartner_ID", IDColumn.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "Value"), "C_BPartner.Value", String.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "Name"), "C_BPartner.Name", String.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "C_BP_Group_ID"), "(SELECT bpg.Name FROM C_BP_Group bpg WHERE bpg.C_BP_Group_ID = C_BPartner.C_BP_Group_ID)", String.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "TotalOpenBalance"), "C_BPartner.TotalOpenBalance", BigDecimal.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "SO_CreditAvailable"), "C_BPartner.SO_CreditLimit-C_BPartner.SO_CreditUsed AS SO_CreditAvailable", BigDecimal.class, true, true, null),
+		new Info_Column(Msg.translate(Env.getCtx(), "SO_CreditUsed"), "C_BPartner.SO_CreditUsed", BigDecimal.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "Revenue"), "C_BPartner.ActualLifetimeValue", BigDecimal.class)
+	};
+	
+	
+	private int fieldID = 0; 
+	private Label labelValue ;
 	private Textbox fieldValue ;
-	private Label lblName;
+	private Label labelName;
 	private Textbox fieldName ;
-	private Label lblContact ;
+	private Label labelContact ;
 	private Textbox fieldContact;
-	private Label lblEMail ;
+	private Label labelEMail ;
 	private Textbox fieldEMail;
-	private Label lblPostal;
+	private Label labelPostal;
 	private Textbox fieldPostal;
-	private Label lblPhone;
+	private Label labelPhone;
 	private Textbox fieldPhone;
 	private Checkbox checkAND ;
 	private Checkbox checkCustomer;
 
-	private int m_AD_User_ID_index = -1; // Elaine 2008/12/16
-    private int m_C_BPartner_Location_ID_index = -1;
-		
-	/** SalesOrder Trx          */
-	private boolean 		m_isSOTrx;
-		
 	/**	Logger			*/
 	protected CLogger log = CLogger.getCLogger(getClass());
-	private Borderlayout layout;
-	private Vbox southBody;
 	
-	/** From Clause             */
-	private static String s_partnerFROM = "C_BPartner"
-		+ " LEFT OUTER JOIN C_BPartner_Location l ON (C_BPartner.C_BPartner_ID=l.C_BPartner_ID AND l.IsActive='Y')"
-		+ " LEFT OUTER JOIN AD_User c ON (C_BPartner.C_BPartner_ID=c.C_BPartner_ID AND (c.C_BPartner_Location_ID IS NULL OR c.C_BPartner_Location_ID=l.C_BPartner_Location_ID) AND c.IsActive='Y')" 
-		+ " LEFT OUTER JOIN C_Location a ON (l.C_Location_ID=a.C_Location_ID)";
-	
-	/**  Array of Column Info    */
-	private static ColumnInfo[] s_partnerLayout = {
-		new ColumnInfo(" ", "C_BPartner.C_BPartner_ID", IDColumn.class),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "Value"), "C_BPartner.Value", String.class),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "Name"), "C_BPartner.Name", String.class),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "Contact"), "c.Name AS Contact", KeyNamePair.class, "c.AD_User_ID"),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "SO_CreditAvailable"), "C_BPartner.SO_CreditLimit-C_BPartner.SO_CreditUsed AS SO_CreditAvailable", BigDecimal.class, true, true, null),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "SO_CreditUsed"), "C_BPartner.SO_CreditUsed", BigDecimal.class),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "Phone"), "c.Phone", String.class),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "Postal"), "a.Postal", KeyNamePair.class, "l.C_BPartner_Location_ID"),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "City"), "a.City", String.class),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "TotalOpenBalance"), "C_BPartner.TotalOpenBalance", BigDecimal.class),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "Revenue"), "C_BPartner.ActualLifetimeValue", BigDecimal.class),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "Address1"), "a.Address1", String.class),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "IsShipTo"), "l.IsShipTo", Boolean.class),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "IsBillTo"), "l.IsBillTo", Boolean.class)
-	};
+	private Tabbox detailTabBox = new Tabbox();
+	private WListbox contactTbl = ListboxFactory.newDataTable();
+	private String m_sqlContact;
+	private WListbox addressTbl = ListboxFactory.newDataTable();
+	private String m_sqlAddress;
+	private int m_C_BPartner_ID = 0;
+	private static int ADDRESS_INDEX;
 
 	/**
-	 *	Standard Constructor
-	 *  @param  queryvalue   Query value Name or Value if contains numbers
-	 *  @param isSOTrx  if false, query vendors only
-	 *  @param whereClause where clause
+	 *  Initialize the zk components.
 	 */
-	public InfoBPartnerPanel(String queryValue,int windowNo, boolean isSOTrx,boolean multipleSelection, String whereClause)
-	{		
-		this(queryValue, windowNo, isSOTrx, multipleSelection, whereClause, true);
-	}
-
-	/**
-	 *	Standard Constructor
-	 *  @param  queryvalue   Query value Name or Value if contains numbers
-	 *  @param isSOTrx  if false, query vendors only
-	 *  @param whereClause where clause
-	 */
-	public InfoBPartnerPanel(String queryValue,int windowNo, boolean isSOTrx,boolean multipleSelection, String whereClause, boolean lookup)
-	{
-
-		super (windowNo, "C_BPartner", "C_BPartner_ID",multipleSelection, whereClause, lookup);
-		setTitle(Msg.getMsg(Env.getCtx(), "InfoBPartner"));
-		m_isSOTrx = isSOTrx;
-        initComponents();
-        init();
-		initInfo(queryValue, whereClause);
-        
-        int no = contentPanel.getRowCount();
-        setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-        setStatusDB(Integer.toString(no));
-        //
-		if (queryValue != null && queryValue.length()>0)
-		{
-			 executeQuery();
-             renderItems();
-        }
-		p_loadedOK = true; // Elaine 2008/07/28
-			
-	}
-	
 	private void initComponents()
 	{
-		lblValue = new Label();
-		lblValue.setValue(Util.cleanAmp(Msg.translate(Env.getCtx(), "Value")));
-		lblName = new Label();
-		lblName.setValue(Util.cleanAmp(Msg.translate(Env.getCtx(), "Name")));
-		lblContact = new Label();
-		lblContact.setValue(Msg.translate(Env.getCtx(), "Contact"));
-		lblEMail = new Label();
-		lblEMail.setValue(Msg.getMsg(Env.getCtx(), "EMail"));
-		lblPostal = new Label();
-		lblPostal.setValue(Msg.getMsg(Env.getCtx(), "Postal"));
-		lblPhone = new Label();
-		lblPhone.setValue(Msg.translate(Env.getCtx(), "Phone"));
+		labelValue = new Label();
+		labelValue.setValue(Util.cleanAmp(Msg.translate(Env.getCtx(), "Value")));
+		labelName = new Label();
+		labelName.setValue(Util.cleanAmp(Msg.translate(Env.getCtx(), "Name")));
+		labelContact = new Label();
+		labelContact.setValue(Msg.translate(Env.getCtx(), "Contact"));
+		labelEMail = new Label();
+		labelEMail.setValue(Msg.getMsg(Env.getCtx(), "EMail"));
+		labelPostal = new Label();
+		labelPostal.setValue(Msg.getMsg(Env.getCtx(), "Postal"));
+		labelPhone = new Label();
+		labelPhone.setValue(Msg.translate(Env.getCtx(), "Phone"));
 		
+		fieldID = 0; //Record_ID
+		//
 		fieldValue = new Textbox();
 		fieldValue.setMaxlength(40);
+		fieldValue.setAttribute("zk_component_ID", "Lookup_Criteria_fieldValue");
+		fieldValue.addEventListener(Events.ON_CHANGE, this);
+		//
 		fieldName = new Textbox();
 		fieldName.setMaxlength(40);
+		fieldName.setAttribute("zk_component_ID", "Lookup_Criteria_fieldName");
+		fieldName.addEventListener(Events.ON_CHANGE, this);
+		//
 		fieldContact = new Textbox();
 		fieldContact.setMaxlength(40);
+		fieldContact.setAttribute("zk_component_ID", "Lookup_Criteria_fieldContact");
+		fieldContact.addEventListener(Events.ON_CHANGE, this);
+		//
 		fieldEMail = new Textbox();
 		fieldEMail.setMaxlength(40);
+		fieldEMail.setAttribute("zk_component_ID", "Lookup_Criteria_fieldEMail");
+		fieldEMail.addEventListener(Events.ON_CHANGE, this);
+		//
 		fieldPostal = new Textbox();
 		fieldPostal.setMaxlength(40);
+		fieldPostal.setAttribute("zk_component_ID", "Lookup_Criteria_fieldPostal");
+		fieldPostal.addEventListener(Events.ON_CHANGE, this);
+		//
 		fieldPhone = new Textbox();
 		fieldPhone.setMaxlength(40);
-		
+		fieldPhone.setAttribute("zk_component_ID", "Lookup_Criteria_fieldPhone");
+		fieldPhone.addEventListener(Events.ON_CHANGE, this);
+		//
 		checkAND = new Checkbox();
-		checkAND.setLabel(Msg.getMsg(Env.getCtx(), "SearchAND"));
-		checkAND.setChecked(true);
-		checkAND.addEventListener(Events.ON_CHECK, this);
+		checkAND.setText(Msg.getMsg(Env.getCtx(), "SearchAND"));
+		checkAND.setName("SearchAND");
+		checkAND.setTooltiptext(Msg.getMsg(Env.getCtx(), "SearchANDInfo"));
+		checkAND.setSelected(true);
+		checkAND.addActionListener(this);
+		checkAND.setAttribute("zk_component_ID", "Lookup_Criteria_checkAND");
+		//
 		checkCustomer = new Checkbox();
-		checkCustomer.setChecked(true);
-		checkCustomer.addEventListener(Events.ON_CHECK, this);
+		checkCustomer.addActionListener(this);
+		checkCustomer.setAttribute("zk_component_ID", "Lookup_Criteria_checkCustomer");
+		checkCustomer.setName("checkCustomer");
 		if (m_isSOTrx)
 			checkCustomer.setLabel(Msg.getMsg(Env.getCtx(), "OnlyCustomers"));
 		else
 			checkCustomer.setLabel(Msg.getMsg(Env.getCtx(), "OnlyVendors"));
+		checkCustomer.setSelected(m_isSOMatch);
 	}
 	
-	private void init()
+	private void statInit()
 	{
+		initComponents();
+
 		fieldValue.setWidth("100%");
 		fieldContact.setWidth("100%");
 		fieldPhone.setWidth("100%");
-		
 		fieldName.setWidth("100%");
 		fieldEMail.setWidth("100%");
 		fieldPostal.setWidth("100%");
 		
-		Grid grid = GridFactory.newGridLayout();
-		
 		Rows rows = new Rows();
-		grid.appendChild(rows);
 		
 		Row row = new Row();
 		rows.appendChild(row);
-		row.appendChild(lblValue.rightAlign());
+		row.appendChild(labelValue.rightAlign());
 		row.appendChild(fieldValue);
-		row.appendChild(lblContact.rightAlign());
+		row.appendChild(labelContact.rightAlign());
 		row.appendChild(fieldContact);
-		row.appendChild(lblPhone.rightAlign());
+		row.appendChild(labelPhone.rightAlign());
 		row.appendChild(fieldPhone);
 		row.appendChild(checkCustomer);
 
 		row = new Row();
 		rows.appendChild(row);
-		row.appendChild(lblName.rightAlign());
+		row.appendChild(labelName.rightAlign());
 		row.appendChild(fieldName);
-		row.appendChild(lblEMail.rightAlign());
+		row.appendChild(labelEMail.rightAlign());
 		row.appendChild(fieldEMail);
-		row.appendChild(lblPostal.rightAlign());
+		row.appendChild(labelPostal.rightAlign());
 		row.appendChild(fieldPostal);
 		row.appendChild(checkAND);
         
-		layout = new Borderlayout();
-        layout.setWidth("100%");
-        layout.setHeight("100%");
-        if (!isLookup())
-        {
-        	layout.setStyle("position: absolute");
-        }
-        this.appendChild(layout);
+		statusBar.setEastVisibility(false);
+		
+		//  Contact Tab
+        ColumnInfo[] s_layoutContact = new ColumnInfo[]{
+        		new ColumnInfo(" ", "AD_User_ID", IDColumn.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "C_Greeting_ID"), "(SELECT g.Greeting from C_Greeting g WHERE g.C_Greeting_ID = AD_User.C_Greeting_ID)", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Name"), "Name", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Title"), "Title", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "C_Location_ID"), "(SELECT a.Name from C_BPartner_Location a WHERE AD_User.C_BPartner_Location_ID=a.C_BPartner_Location_ID)", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Phone"), "Phone", String.class),
+           		new ColumnInfo(Msg.translate(Env.getCtx(), "Phone2"), "Phone2", String.class),
+           		new ColumnInfo(Msg.translate(Env.getCtx(), "Fax"), "Fax", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "EMail"), "EMail", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "LastContact"), "LastContact", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "LastResult"), "LastResult", String.class)};
+        //  From Clause
+        String s_sqlFrom = "AD_User";
+        //  Where Clause					
+        String s_sqlWhere = "C_BPartner_ID = ?  and IsActive = 'Y'";
+        m_sqlContact = contactTbl.prepareTable(s_layoutContact, s_sqlFrom, s_sqlWhere, false, "AD_User");
+        contactTbl.setMultiSelection(false);
+        contactTbl.autoSize();
+        contactTbl.getModel().addTableModelListener(this);
+        contactTbl.setAttribute("zk_component_ID", "Lookup_Data_Contact");
+        
+        //  Location Tab
+        ColumnInfo[] s_layoutAddress = new ColumnInfo[]{
+        		new ColumnInfo(" ", "l.C_BPartner_Location_ID", IDColumn.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Name"), "l.Name", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Phone"), "l.Phone", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Phone2"), "l.Phone2", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Fax"), "l.Fax", String.class),        		
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Address"), "a.Address1", String.class), // Replaced with parsed value
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "IsShipTo"), "l.IsShipTo", Boolean.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "IsBillTo"), "l.IsBillTo", Boolean.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "IsRemitTo"), "l.IsRemitTo", Boolean.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "IsPayFrom"), "l.IsPayFrom", Boolean.class)};
+        ADDRESS_INDEX = 5;
+        /**	From Clause							*/
+        String s_locationFrom = "C_BPartner_Location l" 
+    		+ " LEFT OUTER JOIN C_Location a ON (l.C_Location_ID=a.C_Location_ID)";
+        /** Where Clause						*/
+        String s_locationWhere = "l.C_BPartner_ID = ? and l.IsActive = 'Y'";
+        m_sqlAddress = addressTbl.prepareTable(s_layoutAddress, s_locationFrom, s_locationWhere, false, "l");
+        addressTbl.setMultiSelection(false);
+        addressTbl.autoSize();
+        addressTbl.getModel().addTableModelListener(this);
+        addressTbl.setAttribute("zk_component_ID", "Lookup_Data_Address");
+		//
+        detailTabBox.setHeight("100%");
+        Tabpanels tabPanels = new Tabpanels();
+		detailTabBox.appendChild(tabPanels);
+		Tabs tabs = new Tabs();
+		detailTabBox.appendChild(tabs);
 
-        North north = new North();
-        layout.appendChild(north);
-		north.appendChild(grid);
+		Tab tab = new Tab(Util.cleanAmp(Msg.translate(Env.getCtx(), "Contact")));
+		tab.addEventListener(Events.ON_SELECT, this);
+		tabs.appendChild(tab);
+		Tabpanel desktopTabPanel = new Tabpanel();
+		desktopTabPanel.setHeight("100%");
+		desktopTabPanel.appendChild(contactTbl);
+		tabPanels.appendChild(desktopTabPanel);
 
-        Center center = new Center();
-		layout.appendChild(center);
-		center.setFlex(true);
-		Div div = new Div();
-		div.appendChild(contentPanel);
-		if (isLookup())
-			contentPanel.setWidth("99%");
-        else
-        	contentPanel.setStyle("width: 99%; margin: 0px auto;");
-        contentPanel.setVflex(true);
-		div.setStyle("width :100%; height: 100%");
-		center.appendChild(div);
+		tab = new Tab(Msg.translate(Env.getCtx(), "Location"));
+		tab.addEventListener(Events.ON_SELECT, this);
+		tabs.appendChild(tab);
+		desktopTabPanel = new Tabpanel();
+		desktopTabPanel.setHeight("100%");
+		desktopTabPanel.appendChild(addressTbl);
+		tabPanels.appendChild(desktopTabPanel);
+		
+		tabs.setAttribute("zk_component_ID", "Subordinate_Tabs");
+	
+		Borderlayout southSP = new Borderlayout();
+		Center center = new Center();
+		North north = new North();
+		center.appendChild(detailTabBox);
+		southSP.appendChild(north);
+		southSP.appendChild(center);
+        
+		p_centerSouth.setTitle(Msg.translate(Env.getCtx(), "ContactAndAddress"));
+		p_centerSouth.setTooltiptext(Msg.translate(Env.getCtx(), "ContactAndAddress"));
+		p_centerSouth.appendChild(southSP);
+		p_criteriaGrid.appendChild(rows);
+		super.setSizes();
+		
+		contactTbl.addActionListener(new EventListener() {
+			public void onEvent(Event event) throws Exception {
+				int leadRowKey = 0;
 
-		South south = new South();
-		layout.appendChild(south);
-		southBody = new Vbox();
-		southBody.setWidth("100%");
-		south.appendChild(southBody);
-		southBody.appendChild(confirmPanel);
-		southBody.appendChild(new Separator());
-		southBody.appendChild(statusBar);
-        		
+				if (contactTbl != null || contactTbl.getRowCount() > 0)
+					leadRowKey = contactTbl.getLeadRowKey();
+		    	
+				if (m_AD_User_ID != leadRowKey)
+		    	{
+					m_AD_User_ID = leadRowKey;  //  From the contact table
+		    	}
+			}
+		});
+
+		addressTbl.addActionListener(new EventListener() {
+			public void onEvent(Event event) throws Exception {
+				int leadRowKey = 0;
+
+				if (addressTbl != null || addressTbl.getRowCount() > 0)
+					leadRowKey = addressTbl.getLeadRowKey();
+		    	
+				if (m_C_BPartner_Location_ID != leadRowKey)
+		    	{
+					m_C_BPartner_Location_ID = leadRowKey;  //  From the main table
+		    	}
+			}
+		});
+
 	}	
 	
 	/**
+	 *	Reset the Criteria Info - init with blank data
+	 */		
+	protected void initInfo()
+	{
+		initInfo(0,"", true);
+	}
+
+	/**
 	 *	Dynamic Init
 	 *  @param value value
 	 *  @param whereClause where clause
 	 */
 		
-	private void initInfo(String value, String whereClause)
-	{
-			/**	From
-				C_BPartner
-				 LEFT OUTER JOIN C_BPartner_Location l ON (C_BPartner.C_BPartner_ID=l.C_BPartner_ID AND l.IsActive='Y') 
-				 LEFT OUTER JOIN AD_User c ON (C_BPartner.C_BPartner_ID=c.C_BPartner_ID AND (c.C_BPartner_Location_ID IS NULL OR c.C_BPartner_Location_ID=l.C_BPartner_Location_ID) AND c.IsActive='Y') 
-				 LEFT OUTER JOIN C_Location a ON (l.C_Location_ID=a.C_Location_ID)
-			**/
-
-			//	Create Grid
-			StringBuffer where = new StringBuffer();
-			where.append("C_BPartner.IsSummary='N' AND C_BPartner.IsActive='Y'");
-			if (whereClause != null && whereClause.length() > 0)
-				where.append(" AND ").append(whereClause);
-			//
-                          
-			prepareTable(s_partnerLayout, s_partnerFROM, where.toString(), "C_BPartner.Value");
-			
-			// Get indexes
-            for (int i = 0; i < p_layout.length; i++)
-            {
-            	// Elaine 2008/12/16
-            	if (p_layout[i].getKeyPairColSQL().indexOf("AD_User_ID") != -1)
-    				m_AD_User_ID_index = i;
-            	//
-                if (p_layout[i].getKeyPairColSQL().indexOf("C_BPartner_Location_ID") != -1)
-                    m_C_BPartner_Location_ID_index = i;
-            }
-            //  Set Value
-			if (value == null)
-				value = "%";
-			if (!value.endsWith("%"))
-				value += "%";
-
-			//	Put query string in Name if not numeric
-			if (value.equals("%"))
-				fieldName.setText(value);
-			//	No Numbers entered
-			else if ((value.indexOf('0')+value.indexOf('1')+value.indexOf('2')+value.indexOf('3')+value.indexOf('4') +value.indexOf('5')
-				+value.indexOf('6')+value.indexOf('7')+value.indexOf('8')+value.indexOf('9')) == -10)
+	private void initInfo(int record_id, String value, boolean reset)
+	{			
+	    //
+	    if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
+		//  In case of reset, clear all parameters to ensure we are at a known starting point.
+		if(reset)
+		{
+			clearParameters();
+		}
+		//
+	    if (!(record_id == 0))  // A record is defined
+	    {
+	    	fieldID = record_id;
+	    }
+	    else
+	    {
+			if (value != null && value.length() > 0)
 			{
-				if (value.startsWith("%"))
-					fieldName.setText(value);
-				else
-					fieldName.setText("%" + value);
+				//	Put query string in Name if not fully numeric
+	    		if (!value.matches(".*\\D+.*")) // If value has no non-digit characters, use the Value
+	    			fieldValue.setText(value);
+	    		else
+	    			fieldName.setText(value);  // A few non-digit characters might be in the name. E.g. 451Group, 1st Choice, ...
 			}
-			//	Number entered
 			else
-				fieldValue.setText(value);
+			{
+				//  Try to find the fieldID from the context
+	        	String bp = Env.getContext(Env.getCtx(), p_WindowNo, "C_BPartner_ID");
+				if (bp != null && bp.length() != 0)
+				{
+					fieldID = new Integer(bp).intValue();
+				}
+			}
+	    }
 	}	//	initInfo
 
 	/**
-	 *  Set Parameters for Query.
-	 *  (as defined in getSQLWhere)
-	 *  @param pstmt pstmt
-	 *  @param forCount for counting records
-	 *  @throws SQLException
+	 * A record was selected - take action to sync subordinate tables if any
+	 * @param key of the selected record
 	 */
-	public void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
+	protected void recordSelected(int key)
 	{
-		int index = 1;
-		//	=> Value
-		String value = fieldValue.getText().toUpperCase();
-		if (!(value.equals("") || value.equals("%")))
+		m_C_BPartner_ID = key;
+		refresh();
+		p_centerSouth.setOpen(true);
+		return;
+	}
+	/**
+	 * No record was selected - take action to sync subordinate tables if any
+	 */
+	protected void noRecordSelected()
+	{
+		//  Nothing was selected, or the query is empty
+		//  - close the panel
+		m_C_BPartner_ID = 0;
+    	p_centerSouth.setOpen(false);
+		return;
+	}
+
+    public void onEvent(Event e)
+    {
+    	// Handle panel specific actions and pass the event to the parent class
+
+		if(!p_loadedOK)
+			return;
+				
+		Component component = e.getTarget();
+		
+		if(component != null)
 		{
-			if (!value.endsWith("%"))
-				value += "%";
-			pstmt.setString(index++, value);
-			log.fine("Value: " + value);
+			if (component instanceof Tab) // a tab in the subordinate panel is selected
+			{
+				refresh();
+				return;
+			}
+		} 
+		
+		super.onEvent(e);
+
+    }
+	/**
+	 * 	Refresh Query
+	 */
+	protected void refresh()
+	{				
+		PreparedStatement pstmt = null;
+		ResultSet rs = null;
+
+		int leadRowKey = 0;
+
+		if (p_table != null || p_table.getRowCount() > 0)
+			leadRowKey = p_table.getLeadRowKey();
+    	
+		if (m_C_BPartner_ID != leadRowKey)
+    	{
+			m_C_BPartner_ID = leadRowKey;  //  From the main table
+    	}
+
+		if (detailTabBox.getSelectedIndex() == 0)
+		{
+			//  Contact tab	
+			log.finest(m_sqlContact);
+			try
+			{
+				pstmt = DB.prepareStatement(m_sqlContact, null);
+				pstmt.setInt(1, m_C_BPartner_ID);
+				rs = pstmt.executeQuery();
+				contactTbl.loadTable(rs);
+				rs.close();
+			}
+			catch (Exception e)
+			{
+				log.log(Level.WARNING, m_sqlContact, e);
+			}
+			finally
+			{
+				DB.close(rs, pstmt);
+				rs = null; pstmt = null;
+			}
 		}
-		//	=> Name
-		String name = fieldName.getText().toUpperCase();
-		if (!(name.equals("") || name.equals("%")))
+		else
 		{
-			if (!name.endsWith("%"))
-				name += "%";
-			pstmt.setString(index++, name);
-			log.fine("Name: " + name);
+			//  Address tab	
+			log.finest(m_sqlAddress);
+			try
+			{
+				pstmt = DB.prepareStatement(m_sqlAddress, null);
+				pstmt.setInt(1, m_C_BPartner_ID);
+				rs = pstmt.executeQuery();
+				addressTbl.loadTable(rs);
+				rs.close();
+			}
+			catch (Exception e)
+			{
+				log.log(Level.WARNING, m_sqlContact, e);
+			}
+			finally
+			{
+				DB.close(rs, pstmt);
+				rs = null; pstmt = null;
+			}
+	
+			String trxName = Trx.createTrxName();
+	        for (int row=0; row < addressTbl.getRowCount(); row++)
+			{
+				int loc_id = 0;
+				Object loc_data = addressTbl.getValueAt(row, addressTbl.getKeyColumnIndex());
+	            if (loc_data != null && loc_data instanceof IDColumn)
+	            {
+	            	IDColumn dataColumn = (IDColumn) loc_data;
+	        		loc_id = dataColumn.getRecord_ID();
+	            }
+	
+				MLocation loc = MLocation.getBPLocation(Env.getCtx(), loc_id, trxName);
+				addressTbl.setValueAt(loc.toString(), row, ADDRESS_INDEX);
+			}
+			Trx.get(trxName, false).close();
+			addressTbl.autoSize();
 		}
-		//	=> Contact
-		String contact = fieldContact.getText().toUpperCase();
-		if (!(contact.equals("") || contact.equals("%")))
-		{
-			if (!contact.endsWith("%"))
-				contact += "%";
-			pstmt.setString(index++, contact);
-			log.fine("Contact: " + contact);
-		}
-		//	=> EMail
-		String email = fieldEMail.getText().toUpperCase();
-		if (!(email.equals("") || email.equals("%")))
-		{
-			if (!email.endsWith("%"))
-				email += "%";
-			pstmt.setString(index++, email);
-			log.fine("EMail: " + email);
-		}
-		//	=> Phone
-		String phone = fieldPhone.getText().toUpperCase();
-		if (!(phone.equals("") || phone.equals("%")))
-		{
-			if (!phone.endsWith("%"))
-				phone += "%";
-			pstmt.setString(index++, phone);
-			log.fine("Phone: " + phone);
-		}
-		//	=> Postal
-		String postal = fieldPostal.getText().toUpperCase();
-		if (!(postal.equals("") || postal.equals("%")))
-		{
-			if (!postal.endsWith("%"))
-				postal += "%";
-			pstmt.setString(index++, postal);
-			log.fine("Postal: " + postal);
-		}
-	}   //  setParameters
+	}	//	refresh
 
-	/*************************************************************************/
-	/*************************************************************************/
 	/**
 	 *	Construct SQL Where Clause and define parameters.
 	 *  (setParameters needs to set parameters)
 	 *  Includes first AND
 	 *  @return WHERE clause
 	 */
-	public String getSQLWhere()
+	protected String getSQLWhere()
 	{
 		ArrayList<String> list = new ArrayList<String>();
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if(!(fieldID == 0))
+			list.add("C_BPartner.C_BPartner_ID = ?");
 		//	=> Value
-		String value = fieldValue.getText().toUpperCase();
-		if (!(value.equals("") || value.equals("%")))
+		if (isValidSQLText(fieldValue))
 			list.add ("UPPER(C_BPartner.Value) LIKE ?");
 		//	=> Name
-		String name = fieldName.getText().toUpperCase();
-		if (!(name.equals("") || name.equals("%")))
+		if (isValidSQLText(fieldName))
 			list.add ("UPPER(C_BPartner.Name) LIKE ?");
 		//	=> Contact
-		String contact = fieldContact.getText().toUpperCase();
-		if (!(contact.equals("") || contact.equals("%")))
-			list.add ("UPPER(c.Name) LIKE ?");
+		if (isValidSQLText(fieldContact))
+			list.add ("C_BPartner.C_BPartner_ID IN (SELECT C_BPartner_ID from AD_User c WHERE UPPER(c.Name) LIKE ?)");
 		//	=> EMail
-		String email = fieldEMail.getText().toUpperCase();
-		if (!(email.equals("") || email.equals("%")))
-			list.add ("UPPER(c.EMail) LIKE ?");
+		if (isValidSQLText(fieldEMail))
+			list.add ("C_BPartner.C_BPartner_ID IN (SELECT C_BPartner_ID from AD_User c WHERE UPPER(c.EMail) LIKE ?)");
 		//	=> Phone
-		String phone = fieldPhone.getText().toUpperCase();
-		if (!(phone.equals("") || phone.equals("%")))
-			list.add ("UPPER(c.Phone) LIKE ?");
+		if (isValidSQLText(fieldPhone))
+			list.add ("C_BPartner.C_BPartner_ID IN (SELECT C_BPartner_ID from AD_User c WHERE UPPER(c.Phone) LIKE ?)");
 		//	=> Postal
-		String postal = fieldPostal.getText().toUpperCase();
-		if (!(postal.equals("") || postal.equals("%")))
-			list.add ("UPPER(a.Postal) LIKE ?");
+		if (isValidSQLText(fieldPostal))
+			list.add ("C_BPartner_ID IN (Select C_BPartner_ID FROM C_BPartner_Location bpl, "
+					+ "C_Location l where l.C_Location_ID = bpl.C_Location_ID AND UPPER(Postal) LIKE ?)");
+
 		StringBuffer sql = new StringBuffer();
 		int size = list.size();
 		//	Just one
@@ -435,7 +630,7 @@
 			sql.append(" AND ").append(list.get(0));
 		else if (size > 1)
 		{
-			boolean AND = checkAND.isChecked();
+			boolean AND = checkAND.isSelected();
 			sql.append(" AND ");
 			if (!AND)
 				sql.append("(");
@@ -448,8 +643,9 @@
 			if (!AND)
 				sql.append(")");
 		}
-			//	Static SQL
-		if (checkCustomer.isChecked())
+
+		//	Static SQL
+		if (checkCustomer.isSelected())
 		{
 			sql.append(" AND ");
 			if (m_isSOTrx)
@@ -458,8 +654,62 @@
 				sql.append ("C_BPartner.IsVendor='Y'");
 		}
 		return sql.toString();
+	}	//	getSQLWhere
 
-	}	//	getSQLWhere
+	/**
+	 *  Set Parameters for Query.
+	 *  (as defined in getSQLWhere)
+	 *  @param pstmt pstmt
+	 *  @param forCount for counting records
+	 *  @throws SQLException
+	 */
+	protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
+	{
+		
+		int index = 1;
+		//  => ID
+		if (!(fieldID == 0))
+		{
+			pstmt.setInt(index++, fieldID);
+			log.fine("Record ID: " + fieldID);
+		}
+		//	=> Value
+		if (isValidSQLText(fieldValue))
+		{
+			pstmt.setString(index++, getSQLText(fieldValue));
+			log.fine("Value: " + fieldValue.getText());
+		}
+		//	=> Name
+		if (isValidSQLText(fieldName))
+		{
+			pstmt.setString(index++, getSQLText(fieldName));
+			log.fine("Name: " + fieldName.getText());
+		}
+		//	=> Contact
+		if (isValidSQLText(fieldContact))
+		{
+			pstmt.setString(index++, getSQLText(fieldContact));
+			log.fine("Contact: " + fieldContact.getText());
+		}
+		//	=> EMail
+		if (isValidSQLText(fieldEMail))
+		{
+			pstmt.setString(index++, getSQLText(fieldEMail));
+			log.fine("EMail: " + fieldEMail.getText());
+		}
+		//	=> Phone
+		if (isValidSQLText(fieldPhone))
+		{
+			pstmt.setString(index++, getSQLText(fieldPhone));
+			log.fine("Phone: " + fieldPhone.getText());
+		}
+		//	=> Postal
+		if (isValidSQLText(fieldPostal))
+		{
+			pstmt.setString(index++, getSQLText(fieldPostal));
+			log.fine("Postal: " + fieldPostal);
+		}
+	}   //  setParameters
     
     /*************************************************************************/
 
@@ -469,32 +719,40 @@
      */
     public void saveSelectionDetail()
     {
-        int row = contentPanel.getSelectedRow();
+        int row = p_table.getSelectedRow();
         if (row == -1)
             return;
 
-        int AD_User_ID = 0;
-        int C_BPartner_Location_ID = 0;
-        
         // Elaine 2008/12/16
-        if (m_AD_User_ID_index != -1)
+        if (m_AD_User_ID == -1)
         {
-            Object data =contentPanel.getValueAt(row, m_AD_User_ID_index);
-            if (data instanceof KeyNamePair)
-            	AD_User_ID = ((KeyNamePair)data).getKey();
+			int leadRowKey = -1;
+
+			if (contactTbl != null || contactTbl.getRowCount() > 0)
+				leadRowKey = contactTbl.getLeadRowKey();
+	    	
+			if (m_AD_User_ID != leadRowKey)
+	    	{
+				m_AD_User_ID = leadRowKey;  //  From the main table
+	    	}
         }
         //
-        if (m_C_BPartner_Location_ID_index != -1)
+        if (m_C_BPartner_Location_ID == -1)
         {
-            Object data =contentPanel.getValueAt(row, m_C_BPartner_Location_ID_index);
-            if (data instanceof KeyNamePair)
-                C_BPartner_Location_ID = ((KeyNamePair)data).getKey();
+			int leadRowKey = -1;
+
+			if (addressTbl != null || addressTbl.getRowCount() > 0)
+				leadRowKey = addressTbl.getLeadRowKey();
+	    	
+			if (m_C_BPartner_Location_ID != leadRowKey)
+	    	{
+				m_C_BPartner_Location_ID = leadRowKey;  //  From the main table
+	    	}
         }
         //  publish for Callout to read
-        Integer ID = getSelectedRowKey();
-        Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "C_BPartner_ID", ID == null ? "0" : ID.toString());
-        Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "AD_User_ID", String.valueOf(AD_User_ID));
-        Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "C_BPartner_Location_ID", String.valueOf(C_BPartner_Location_ID));
+        Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "C_BPartner_ID", String.valueOf(m_C_BPartner_ID));
+        Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "AD_User_ID", String.valueOf(m_AD_User_ID));
+        Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "C_BPartner_Location_ID", String.valueOf(m_C_BPartner_Location_ID));
        
     }   //  saveSelectionDetail
     
@@ -532,7 +790,6 @@
 		Integer C_BPartner_ID = getSelectedRowKey();
 		if (C_BPartner_ID == null)
 			return;
-	//	AEnv.zoom(MBPartner.Table_ID, C_BPartner_ID.intValue(), true);	//	SO
 
 		MQuery query = new MQuery("C_BPartner");
 		query.addRestriction("C_BPartner_ID", MQuery.EQUAL, C_BPartner_ID);
@@ -550,27 +807,58 @@
 		return true;
 	}	//	hasZoom
 
+		
 	/**
-	 *	Customize
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
 	 */
-	protected void customize()
+	protected boolean hasOutstandingChanges()
 	{
-		log.info( "InfoBPartner.customize");
-	}	//	customize
+		//  All the tracked fields
+		return(
+			fieldValue.hasChanged()	||
+			fieldName.hasChanged() ||
+			fieldContact.hasChanged() ||
+			fieldEMail.hasChanged() ||
+			fieldPhone.hasChanged() ||
+			fieldPostal.hasChanged() ||
+			checkCustomer.hasChanged() ||
+			checkAND.hasChanged()
+			);
+			
+	}
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		fieldValue.set_oldValue();
+		fieldName.set_oldValue();
+		fieldContact.set_oldValue();
+		fieldEMail.set_oldValue();
+		fieldPhone.set_oldValue();
+		fieldPostal.set_oldValue();
+		checkCustomer.set_oldValue();
+		checkAND.set_oldValue();
+		return;
+	}
 
-	/**
-	 *	Has Customize
-	 *  @return false
+    /**
+	 *  Clear all fields and set default values in check boxes
 	 */
-	protected boolean hasCustomize()
+	private void clearParameters()
 	{
-		return false;	//	for now
-	}	//	hasCustomize
-	//
-	
-    public void tableChanged(WTableModelEvent event)
-    {
-        
-    }
-	
+		//  Clear fields and set defaults
+		fieldValue.setText("");
+		fieldName.setText("");
+		fieldContact.setText("");
+		fieldEMail.setText("");
+		fieldPhone.setText("");
+		fieldPostal.setText("");
+		checkCustomer.setSelected(m_isSOMatch);  	//  Customers Only
+		checkAND.setSelected(true); 		//  Use AND
+	}
+
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoCashLinePanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoCashLinePanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoCashLinePanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -21,24 +21,27 @@
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 import java.sql.Timestamp;
-import java.util.Date;
+import java.text.DecimalFormat;
+import java.text.SimpleDateFormat;
 
+import org.adempiere.webui.apps.AEnv;
 import org.adempiere.webui.component.Checkbox;
 import org.adempiere.webui.component.Datebox;
-import org.adempiere.webui.component.Grid;
-import org.adempiere.webui.component.GridFactory;
 import org.adempiere.webui.component.Label;
+import org.adempiere.webui.component.NumberBox;
 import org.adempiere.webui.component.Row;
 import org.adempiere.webui.component.Rows;
-import org.adempiere.webui.component.Textbox;
-import org.adempiere.webui.editor.WEditor;
 import org.adempiere.webui.editor.WSearchEditor;
-import org.adempiere.webui.event.ValueChangeEvent;
+import org.adempiere.webui.editor.WTableDirEditor;
 import org.adempiere.webui.event.ValueChangeListener;
-import org.adempiere.webui.event.WTableModelEvent;
+import org.compiere.apps.search.Info_Column;
 import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
+import org.compiere.model.MCash;
+import org.compiere.model.MCashLine;
+import org.compiere.model.MColumn;
 import org.compiere.model.MLookupFactory;
+import org.compiere.model.MQuery;
 import org.compiere.util.DB;
 import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
@@ -46,14 +49,7 @@
 import org.compiere.util.Util;
 import org.zkoss.zk.ui.event.EventListener;
 import org.zkoss.zk.ui.event.Events;
-import org.zkoss.zkex.zul.Borderlayout;
-import org.zkoss.zkex.zul.Center;
-import org.zkoss.zkex.zul.North;
-import org.zkoss.zkex.zul.South;
-import org.zkoss.zul.Div;
 import org.zkoss.zul.Hbox;
-import org.zkoss.zul.Separator;
-import org.zkoss.zul.Vbox;
 
 /**
 * Based on InfoCashLine written by Jorg Janke
@@ -64,6 +60,9 @@
 * Zk Port
 * @author Elaine
 * @version	InfoCashLine.java Adempiere Swing UI 3.4.1 
+ *
+ * @author Michael McKay, ADEMPIERE-72 VLookup and Info Window improvements
+ * 	<li>https://adempiere.atlassian.net/browse/ADEMPIERE-72
 */
 
 public class InfoCashLinePanel extends InfoPanel implements ValueChangeListener, EventListener
@@ -72,33 +71,39 @@
 	 * 
 	 */
 	private static final long serialVersionUID = 3042929765363185887L;
-	private Textbox fName = new Textbox();
-	private Textbox fAmtTo = new Textbox();
-	private Textbox fAmtFrom = new Textbox();
 	
-	private WEditor fCashBook_ID;
-	private WEditor fInvoice_ID;
-	private WEditor fBankAccount_ID;
+	private int fieldID = 0;
+
+	private NumberBox fAmtTo = new NumberBox(false);
+	private NumberBox fAmtFrom = new NumberBox(false);
+	
+	private WSearchEditor fCash_ID;
+	private WTableDirEditor fCashBook_ID;
+	private WSearchEditor fInvoice_ID;
+	private WSearchEditor fPayment_ID;
+	private WTableDirEditor fCharge_ID;
+	private WTableDirEditor fBankAccount_ID;
 	
 	private Datebox fDateFrom = new Datebox();
 	private Datebox fDateTo = new Datebox();
 
 	private Checkbox cbAbsolute = new Checkbox();
 
-	private Label lName = new Label(Msg.translate(Env.getCtx(), "Name"));
 	private Label lDateFrom = new Label(Msg.translate(Env.getCtx(), "StatementDate"));
 	private Label lDateTo = new Label("-");
 	private Label lAmtFrom = new Label(Msg.translate(Env.getCtx(), "Amount")); 
 	private Label lAmtTo = new Label("-");
-	private Borderlayout layout;
-	private Vbox southBody;
+	/** From Clause             */
+	private static String s_From = "C_CashLine cl INNER JOIN C_Cash c ON (cl.C_Cash_ID=c.C_Cash_ID)";
+	/** Order Clause             */
+	private static String s_Order = "2,3,cl.Line";
 
 	/**  Array of Column Info    */
-	private static final ColumnInfo[] s_cashLayout = {
+	private static final ColumnInfo[] s_Layout = {
 		new ColumnInfo(" ", "cl.C_CashLine_ID", IDColumn.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "C_CashBook_ID"),
 			"(SELECT cb.Name FROM C_CashBook cb WHERE cb.C_CashBook_ID=c.C_CashBook_ID)", String.class),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "Name"),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "C_Cash_ID"),
 			"c.Name", String.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "StatementDate"),
 			"c.StatementDate", Timestamp.class),
@@ -110,6 +115,10 @@
 			"(SELECT i.DocumentNo||'_'||" + DB.TO_CHAR("i.DateInvoiced",DisplayType.Date,Env.getAD_Language(Env.getCtx()))
 				+ "||'_'||" + DB.TO_CHAR("i.GrandTotal",DisplayType.Amount,Env.getAD_Language(Env.getCtx()))
 				+ " FROM C_Invoice i WHERE i.C_Invoice_ID=cl.C_Invoice_ID)", String.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "C_Payment_ID"),
+				"(SELECT p.DocumentNo||'_'||" + DB.TO_CHAR("p.DateTrx",DisplayType.Date,Env.getAD_Language(Env.getCtx()))
+					+ "||'_'||" + DB.TO_CHAR("p.PayAmt",DisplayType.Amount,Env.getAD_Language(Env.getCtx()))
+					+ " FROM C_Payment p WHERE p.C_Payment_ID=cl.C_Payment_ID)", String.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "C_BankAccount_ID"),
 			"(SELECT b.Name||' '||ba.AccountNo FROM C_Bank b, C_BankAccount ba WHERE b.C_Bank_ID=ba.C_Bank_ID AND ba.C_BankAccount_ID=cl.C_BankAccount_ID)", String.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "C_Charge_ID"),
@@ -130,179 +139,326 @@
 	 *  @param multiSelection multiple selections
 	 *  @param whereClause where clause
 	 */
+	@Deprecated
 	protected InfoCashLinePanel(	int WindowNo, String value,
 									boolean multiSelection, String whereClause)
 	{
-		this(WindowNo, value, multiSelection, whereClause, true);
+		this(WindowNo, true, 0, value, multiSelection, false, whereClause);
+	}
+	
+	/**
+	 *  Detail Protected Constructor
+	 *  
+	 *  @param WindowNo window no
+	 *  @param record_id The record ID to find
+	 *  @param value Query value to find, exclusive of record_id
+	 *  @param multiSelection multiple selections
+	 *  @param whereClause where clause
+	 */
+	protected InfoCashLinePanel(	int WindowNo, int record_id, String value,
+									boolean multiSelection, String whereClause)
+	{
+		this(WindowNo, true, record_id, value, multiSelection, false, whereClause);
 	}
 	
 	/**
 	 *  Detail Protected Constructor
 	 *
-	 *  @param WindowNo window no
-	 *  @param value query value
-	 *  @param multiSelection multiple selections
-	 *  @param whereClause where clause
+	 * @param WindowNo window no
+	 * @param record_id The record ID to find
+	 * @param value Query value to find, exclusive of record_id
+	 * @param saveResults true if results are saved in context
+	 * @param multiSelection multiple selections
+	 * @param whereClause where clause
+	 * @param modal True if window is opened in modal mode.
 	 */
-	protected InfoCashLinePanel(	int WindowNo, String value,
-									boolean multiSelection, String whereClause, boolean lookup)
+	protected InfoCashLinePanel(	int WindowNo, boolean modal, int record_id, String value,
+									boolean multiSelection, boolean saveResults, String whereClause)
 	{
-		super (WindowNo, "cl", "C_CashLine_ID", multiSelection, whereClause, lookup);
+		super (WindowNo, modal, "cl", "C_CashLine_ID", multiSelection, saveResults, whereClause);
 		log.info( "InfoCashLine");
 		setTitle(Msg.getMsg(Env.getCtx(), "InfoCashLine"));
-
-		try
+		//
+		StringBuffer where = new StringBuffer("cl.IsActive='Y'");	
+		if (whereClause.length() > 0)
+			where.append(" AND ").append(Util.replace(whereClause, "C_CashLine.", "cl."));
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause(s_Order);
+		//
+		setShowTotals(true);
+		//
+		statInit();
+		initInfo (record_id, value, false);
+		
+		//  Auto query - no value field
+		if(autoQuery() || record_id != 0 )
 		{
-			statInit();
-			p_loadedOK = initInfo ();
+			prepareAndExecuteQuery();
 		}
-		catch (Exception e)
-		{
-			return;
-		}
-
-		int no = contentPanel.getRowCount();
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
-		
-		if (value != null && value.length() > 0)
-		{
-			fName .setValue(value);
-			executeQuery();
-		}
+        //
+        p_loadedOK = true;
 	} // InfoCashLinePanel
 	
 	/**
 	 *	Static Setup - add fields to parameterPanel
 	 *  @throws Exception if Lookups cannot be created
 	 */
-	
-	private void statInit() throws Exception
-	{
-		fName.setWidth("180px");
-		fDateFrom.setWidth("165px");
-		fDateTo.setWidth("165px");
-		fAmtFrom.setWidth("180px");
-		fAmtTo.setWidth("180px");
+	private void statInit()
+	{		
+		// 	Format the dates and number boxes
+		fDateFrom.setWidth("97px");
+		fDateTo.setWidth("97px");
+		fAmtFrom.getDecimalbox().setWidth("90px");
+		fAmtTo.getDecimalbox().setWidth("90px");
 		
-		fName.addEventListener(Events.ON_CHANGE, this);
+		fDateFrom.setAttribute("zk_component_ID", "Lookup_Criteria_DateFrom");
+		fDateFrom.addEventListener(Events.ON_CHANGE, this);
+		fDateTo.setAttribute("zk_component_ID", "Lookup_Criteria_DateTo");
+		fDateTo.addEventListener(Events.ON_CHANGE, this);
+		fAmtFrom.setAttribute("zk_component_ID", "Lookup_Criteria_AmtFrom");
+		fAmtFrom.addEventListener(Events.ON_CHANGE, this);
+		fAmtTo.setAttribute("zk_component_ID", "Lookup_Criteria_AmtTo");
+		fAmtTo.addEventListener(Events.ON_CHANGE, this);		
+		
+		SimpleDateFormat dateFormat = DisplayType.getDateFormat(DisplayType.Date, AEnv.getLanguage(Env.getCtx()));
+		fDateFrom.setFormat(dateFormat.toPattern());
+		fDateTo.setFormat(dateFormat.toPattern());
+
+		DecimalFormat format = DisplayType.getNumberFormat(DisplayType.Amount, AEnv.getLanguage(Env.getCtx()));
+		
+		fAmtFrom.getDecimalbox().setFormat(format.toPattern());
+		fAmtFrom.getDecimalbox().setStyle("text-align:right; " + fAmtFrom.getDecimalbox().getStyle());
+		fAmtTo.getDecimalbox().setFormat(format.toPattern());
+		fAmtTo.getDecimalbox().setStyle("text-align:right; " + fAmtTo.getDecimalbox().getStyle());
+		
+		//  Create the main criteria fields
+		
+		//  5241 - C_Cash.C_Cash_ID
+		fCash_ID = new WSearchEditor(
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, p_TabNo, 
+						MColumn.getColumn_ID(MCash.Table_Name, MCash.COLUMNNAME_C_Cash_ID), 
+						DisplayType.TableDir),
+				Msg.translate(Env.getCtx(), "C_Cash_ID"), "", false, false, true);
+		fCash_ID.addValueChangeListener(this);
+		fCash_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_C_Cash_ID");
 		
 		// 5249 - C_Cash.C_CashBook_ID
-		fCashBook_ID = new WSearchEditor(
-				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 5249, DisplayType.TableDir), 
+		fCashBook_ID = new WTableDirEditor(
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+						MColumn.getColumn_ID(MCash.Table_Name, MCash.COLUMNNAME_C_CashBook_ID),
+						DisplayType.TableDir), 
 				Msg.translate(Env.getCtx(), "C_CashBook_ID"), "", false, false, true);
-		fCashBook_ID.addValueChangeListener(this);
+		fCashBook_ID.getComponent().addEventListener(Events.ON_CHANGE, this);
+		//fCashBook_ID.addValueChangeListener(this);
+		fCashBook_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_C_CashBook_ID");
+		//  Width is set in WTableDirEditor to 200px.  Make it more flexible;
+		fCashBook_ID.getComponent().setWidth("100%");
 		
 		// 5354 - C_CashLine.C_Invoice_ID
 		fInvoice_ID = new WSearchEditor(
-				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 5354, DisplayType.Search), 
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+						MColumn.getColumn_ID(MCashLine.Table_Name, MCashLine.COLUMNNAME_C_Invoice_ID), 
+						DisplayType.Search), 
 				Msg.translate(Env.getCtx(), "C_Invoice_ID"), "", false, false, true);
 		fInvoice_ID.addValueChangeListener(this);
-		
-		//	5295 - C_CashLine.C_BankAccount_ID
-		fBankAccount_ID = new WSearchEditor(
-				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 5295, DisplayType.TableDir), 
-				Msg.translate(Env.getCtx(), "C_BankAccount_ID"), "", false, false, true);
-		fBankAccount_ID.addValueChangeListener(this);
+		fInvoice_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_C_Invoice_ID");
 		
 		//	5296 - C_CashLine.C_Charge_ID
-		//	5291 - C_CashLine.C_Cash_ID
+		fPayment_ID = new WSearchEditor(
+				MLookupFactory.get(Env.getCtx(), p_WindowNo, 0,
+						MColumn.getColumn_ID(MCashLine.Table_Name, MCashLine.COLUMNNAME_C_Payment_ID),
+						DisplayType.TableDir),
+				Msg.translate(Env.getCtx(), "C_Payment_ID"), "", false, false, true);
+		fPayment_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_C_Payment_ID");
 
+		//	5295 - C_CashLine.C_BankAccount_ID
+		fBankAccount_ID = new WTableDirEditor(
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+						MColumn.getColumn_ID(MCashLine.Table_Name, MCashLine.COLUMNNAME_C_BankAccount_ID), 
+						DisplayType.TableDir), 
+				Msg.translate(Env.getCtx(), "C_BankAccount_ID"), "", false, false, true);
+		fBankAccount_ID.getComponent().addEventListener(Events.ON_CHANGE, this);
+		//fBankAccount_ID.addValueChangeListener(this);
+		fBankAccount_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_C_BankAccount_ID");
+		//  Width is set in WTableDirEditor to 200px.  Make it more flexible;
+		fBankAccount_ID.getComponent().setWidth("100%");
+		
+		//	5296 - C_CashLine.C_Charge_ID
+		fCharge_ID = new WTableDirEditor(
+				MLookupFactory.get(Env.getCtx(), p_WindowNo, 0,
+						MColumn.getColumn_ID(MCashLine.Table_Name, MCashLine.COLUMNNAME_C_Charge_ID),
+						DisplayType.TableDir),
+				Msg.translate(Env.getCtx(), "C_Charge_ID"), "", false, false, true);
+		fCharge_ID.getComponent().addEventListener(Events.ON_CHANGE, this);
+		fCharge_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_C_Charge_ID");
+		//  Width is set in WTableDirEditor to 200px.  Make it more flexible;
+		fCharge_ID.getComponent().setWidth("100%");
+		
 		cbAbsolute.setLabel(Msg.translate(Env.getCtx(), "AbsoluteAmt"));
 		cbAbsolute.addEventListener(Events.ON_CHECK, this);
+		cbAbsolute.setAttribute("zk_component_ID", "Lookup_Criteria_AbsoluteAmt");
+				
 		
-		Grid grid = GridFactory.newGridLayout();
-		
+		//  Setup the criteria.  The rest of the panel is managed by the info.java class
 		Rows rows = new Rows();
-		grid.appendChild(rows);
 		
 		Row row = new Row();
 		rows.appendChild(row);
 		row.appendChild(fCashBook_ID.getLabel().rightAlign());
 		row.appendChild(fCashBook_ID.getComponent());
-		row.appendChild(lName.rightAlign());
-		row.appendChild(fName);
-		row.appendChild(cbAbsolute);
+		row.appendChild(fCash_ID.getLabel().rightAlign());
+		row.appendChild(fCash_ID.getComponent());
 		
 		row = new Row();
-		row.setSpans("1, 1, 1, 2");
 		rows.appendChild(row);
 		row.appendChild(fInvoice_ID.getLabel().rightAlign());
 		row.appendChild(fInvoice_ID.getComponent());
+		row.appendChild(fPayment_ID.getLabel().rightAlign());
+		row.appendChild(fPayment_ID.getComponent());
+		
+		row = new Row();
+		//row.setSpans("1, 1, 1, 1");
+		rows.appendChild(row);
+		row.appendChild(fBankAccount_ID.getLabel().rightAlign());
+		row.appendChild(fBankAccount_ID.getComponent());
 		row.appendChild(lDateFrom.rightAlign());
 		Hbox hbox = new Hbox();
 		hbox.appendChild(fDateFrom);
 		hbox.appendChild(lDateTo);		
 		hbox.appendChild(fDateTo);
 		row.appendChild(hbox);
-		
+
 		row = new Row();
-		row.setSpans("1, 1, 1, 2");
+		//row.setSpans("1, 1, 1, 1");
 		rows.appendChild(row);
-		row.appendChild(fBankAccount_ID.getLabel().rightAlign());
-		row.appendChild(fBankAccount_ID.getComponent());
+		row.appendChild(fCharge_ID.getLabel().rightAlign());
+		row.appendChild(fCharge_ID.getComponent());
 		row.appendChild(lAmtFrom.rightAlign());
 		hbox = new Hbox();
 		hbox.appendChild(fAmtFrom);
 		hbox.appendChild(lAmtTo);
 		hbox.appendChild(fAmtTo);
+		hbox.appendChild(cbAbsolute);
 		row.appendChild(hbox);
-		
-		layout = new Borderlayout();
-        layout.setWidth("100%");
-        layout.setHeight("100%");
-        if (!isLookup())
-        {
-        	layout.setStyle("position: absolute");
-        }
-        this.appendChild(layout);
 
-        North north = new North();
-        layout.appendChild(north);
-		north.appendChild(grid);
-
-        Center center = new Center();
-		layout.appendChild(center);
-		center.setFlex(true);
-		Div div = new Div();
-		div.appendChild(contentPanel);
-		if (isLookup())
-			contentPanel.setWidth("99%");
-        else
-        	contentPanel.setStyle("width: 99%; margin: 0px auto;");
-        contentPanel.setVflex(true);
-		div.setStyle("width :100%; height: 100%");
-		center.appendChild(div);
-        
-		South south = new South();
-		layout.appendChild(south);
-		southBody = new Vbox();
-		southBody.setWidth("100%");
-		south.appendChild(southBody);
-		southBody.appendChild(confirmPanel);
-		southBody.appendChild(new Separator());
-		southBody.appendChild(statusBar);
+		p_criteriaGrid.appendChild(rows);
+		super.setSizes();		
+	}
+	
+	/**
+	 *	Reset Init
+	 *	@return true, if success
+	 */
+	protected void initInfo ()
+	{
+		initInfo(0,"",true);
 	}
 	
 	/**
 	 *	General Init
-	 *	@return true, if success
 	 */
-	private boolean initInfo ()
+	private void initInfo (int record_id, String value, boolean reset)
 	{
-		// Prepare table
-		StringBuffer where = new StringBuffer("cl.IsActive='Y'");
-		
-		if (p_whereClause.length() > 0)
-			where.append(" AND ").append(Util.replace(p_whereClause, "C_CashLine.", "cl."));
-		
-		prepareTable (	s_cashLayout,	"C_CashLine cl INNER JOIN C_Cash c ON (cl.C_Cash_ID=c.C_Cash_ID)",
-						where.toString(), "2,3,cl.Line");
-
-		return true;
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
+	    //  In case of reset, clear all parameters to ensure we are at a known starting point.
+		if(reset)
+		{
+			clearParameters();
+		}
+		//  Set values
+        if (!(record_id == 0))  // A record is defined
+        {
+        	fieldID = record_id;
+        } 
+        else
+        {
+			if (value != null && value.length() > 0)
+			{
+				//  Have nothing to do with a value
+			}
+			else
+			{
+				// Try to find other criteria in the context
+				String id;
+				//  C_CashLine_ID - only if visible
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_CashLine_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fieldID = new Integer(id).intValue();
+				}
+				//  C_Cash_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Cash_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fCash_ID.setValue(new Integer(id).intValue());
+				}
+				//  C_Invoice_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Invoice_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fInvoice_ID.setValue(new Integer(id).intValue());
+				}
+				//  C_Payment_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Payment_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fPayment_ID.setValue(new Integer(id).intValue());
+				}
+				//  C_Cashbook_ID - general - as a default
+				id = Env.getContext(Env.getCtx(), p_WindowNo, "C_CashBook_ID");
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fCashBook_ID.setValue(new Integer(id).intValue());
+				}
+				//  C_BankAccount_ID - window only
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BankAccount_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fBankAccount_ID.setValue(new Integer(id).intValue());
+				}
+				//  C_Charge_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Charge_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fCharge_ID.setValue(new Integer(id).intValue());
+				}
+			}
+		}
 	} // initInfo
 
-	
+	/**
+	 *	Zoom
+	 */
+	public void zoom()
+	{
+		log.info( "InfoCashLine.zoom");
+		Integer C_CashLine_ID = this.getSelectedRowKey();
+		if (C_CashLine_ID == null)
+			return;
+		MQuery query = new MQuery("C_CashLine");
+		query.setZoomTableName("C_CashLine");
+		query.setZoomColumnName("C_CashLine_ID");
+		query.setZoomValue(C_CashLine_ID);
+		query.addRestriction("C_CashLine_ID", MQuery.EQUAL, C_CashLine_ID);
+		query.setRecordCount(1);
+		int AD_WindowNo = getAD_Window_ID("C_Cash", true);	//	SO
+		AEnv.zoom (AD_WindowNo, query);
+	}	//	zoom
+
+	/**
+	 *	Has Zoom
+	 *  @return true
+	 */
+	protected boolean hasZoom()
+	{
+		return true;
+	}	//	hasZoom
+
 	/**************************************************************************
 	 *	Construct SQL Where Clause and define parameters
 	 *  (setParameters needs to set parameters)
@@ -313,24 +469,46 @@
 	protected String getSQLWhere()
 	{
 		StringBuffer sql = new StringBuffer();
-	
-		if (fName.getText().length() > 0)
-			sql.append(" AND UPPER(c.Name) LIKE ?");
-
-		if (fCashBook_ID.getDisplay() != "")
+		//
+		if(isResetRecordID())
+			fieldID = 0;
+		if (!(fieldID ==0))
+			sql.append(" AND cl.C_CashLine_ID = ?");
+		//
+		if (fCash_ID.getValue() != null)
+			sql.append(" AND c.C_Cash_ID=?");
+		//
+		if (fCashBook_ID.getValue() != null)
 			sql.append(" AND c.C_CashBook_ID=?");
-		
-		if (fInvoice_ID.getDisplay() != "")
+		//
+		if (fBankAccount_ID.getValue() != null)
+			sql.append(" AND cl.C_BankAccount_ID=?");
+		//
+		if (fCharge_ID.getValue() != null)
+			sql.append(" AND cl.C_Charge_ID=?");
+		//
+		if (fInvoice_ID.getValue() != null && fPayment_ID.getValue() == null)
 			sql.append(" AND cl.C_Invoice_ID=?");
-		
+		else 
+			if (fInvoice_ID.getValue() == null && fPayment_ID.getValue() != null)
+				sql.append(" AND cl.C_Payment_ID=?");
+			else
+				if (fInvoice_ID.getValue() != null && fPayment_ID.getValue() != null)
+				{
+					sql.append(" AND (cl.C_Invoice_ID=?");
+					sql.append(" OR cl.C_Payment_ID=?)");
+				}
+		//
 		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
 		{
-			Date f = fDateFrom.getValue();
-			Timestamp from = new Timestamp(f.getTime());
+			Timestamp from = null;
+			Timestamp to = null;
 			
-			Date t = fDateTo.getValue();
-			Timestamp to = new Timestamp(t.getTime());
-
+			if (fDateFrom.getValue() != null)
+				from = new Timestamp(fDateFrom.getValue().getTime());
+			if (fDateTo.getValue() != null)
+				to = new Timestamp(fDateTo.getValue().getTime());
+			
 			if (from == null && to != null)
 				sql.append(" AND TRUNC(c.StatementDate, 'DD') <= ?");
 			else if (from != null && to == null)
@@ -338,17 +516,16 @@
 			else if (from != null && to != null)
 				sql.append(" AND TRUNC(c.StatementDate, 'DD') BETWEEN ? AND ?");
 		}
-
-		if (!isEmpty(fAmtFrom.getValue()) || !isEmpty(fAmtTo.getValue()))
+		//
+		if (fAmtFrom.getValue() != null || fAmtTo.getValue() != null)
 		{
-			BigDecimal from = isEmpty(fAmtFrom.getValue()) ? null : new BigDecimal(fAmtFrom.getValue());
-			BigDecimal to = isEmpty(fAmtTo.getValue()) ? null : new BigDecimal(fAmtTo.getValue());
-			
-			if (cbAbsolute .isChecked())
+			BigDecimal from = (BigDecimal)fAmtFrom.getValue();
+			BigDecimal to = (BigDecimal)fAmtTo.getValue();
+			if (cbAbsolute.isSelected())
 				sql.append(" AND ABS(cl.Amount)");
 			else
 				sql.append(" AND cl.Amount");
-
+			//
 			if (from == null && to != null)
 				sql.append(" <=?");
 			else if (from != null && to == null)
@@ -366,10 +543,6 @@
 		return sql.toString();
 	} // getSQLWhere
 
-	private boolean isEmpty(String value) {
-		return value == null || value.trim().length() == 0;
-	}
-
 	/**
 	 *  Set Parameters for Query.
 	 *  (as defined in getSQLWhere)
@@ -381,33 +554,63 @@
 	protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
 	{
 		int index = 1;
-		if (fName.getText().length() > 0)
-			pstmt.setString(index++, getSQLText(fName));
-
+		if (!(fieldID == 0))
+			pstmt.setInt(index++, fieldID);
+		//
+		if (fCash_ID.getValue() != null)
+		{
+			Integer i = (Integer)fCash_ID.getValue();
+			pstmt.setInt(index++, i.intValue());
+			log.fine("Cash Journal=" + i);
+		}
+		//
 		if (fCashBook_ID.getValue() != null)
 		{
-			Integer cb = (Integer)fCashBook_ID.getValue();
-			pstmt.setInt(index++, cb.intValue());
-			log.fine("CashBook=" + cb);
+			Integer i = (Integer)fCashBook_ID.getValue();
+			pstmt.setInt(index++, i.intValue());
+			log.fine("CashBook=" + i);
 		}
-
+		//
+		if (fBankAccount_ID.getValue() != null)
+		{
+			Integer i = (Integer)fBankAccount_ID.getValue();
+			pstmt.setInt(index++, i.intValue());
+			log.fine("BankAccount=" + i);
+		}
+		//
+		if (fCharge_ID.getValue() != null)
+		{
+			Integer i = (Integer)fCharge_ID.getValue();
+			pstmt.setInt(index++, i.intValue());
+			log.fine("Charge=" + i);
+		}
+		//
 		if (fInvoice_ID.getValue() != null)
 		{
 			Integer i = (Integer)fInvoice_ID.getValue();
 			pstmt.setInt(index++, i.intValue());
 			log.fine("Invoice=" + i);
 		}
-
+		//
+		if (fPayment_ID.getValue() != null)
+		{
+			Integer i = (Integer)fPayment_ID.getValue();
+			pstmt.setInt(index++, i.intValue());
+			log.fine("Payment=" + i);
+		}
+		//
 		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
 		{
-			Date f = fDateFrom.getValue();
-			Timestamp from = new Timestamp(f.getTime());
+			Timestamp from = null;
+			Timestamp to = null;
 			
-			Date t = fDateTo.getValue();
-			Timestamp to = new Timestamp(t.getTime());
+			if (fDateFrom.getValue() != null)
+				from = new Timestamp(fDateFrom.getValue().getTime());
+			if (fDateTo.getValue() != null)
+				to = new Timestamp(fDateTo.getValue().getTime());
 
 			log.fine("Date From=" + from + ", To=" + to);
-			
+
 			if (from == null && to != null)
 				pstmt.setTimestamp(index++, to);
 			else if (from != null && to == null)
@@ -418,22 +621,19 @@
 				pstmt.setTimestamp(index++, to);
 			}
 		}
-
-		if (!isEmpty(fAmtFrom.getValue()) || !isEmpty(fAmtTo.getValue()))
+		//
+		if (fAmtFrom.getValue() != null || fAmtTo.getValue() != null)
 		{
-			BigDecimal from = isEmpty(fAmtFrom.getValue()) ? null : new BigDecimal(fAmtFrom.getValue());
-			BigDecimal to = isEmpty(fAmtTo.getValue()) ? null : new BigDecimal(fAmtTo.getValue());
-
-			if (cbAbsolute.isChecked())
+			BigDecimal from = (BigDecimal)fAmtFrom.getValue();
+			BigDecimal to = (BigDecimal)fAmtTo.getValue();
+			if (cbAbsolute.isSelected())
 			{
 				if (from != null)
 					from = from.abs();
 				if (to != null)
 					to = to.abs();
 			}
-			
-			log.fine("Amt From=" + from + ", To=" + to + ", Absolute=" + cbAbsolute.isChecked());
-			
+			log.fine("Amt From=" + from + ", To=" + to + ", Absolute=" + cbAbsolute.isSelected());
 			if (from == null && to != null)
 				pstmt.setBigDecimal(index++, to);
 			else if (from != null && to == null)
@@ -452,37 +652,66 @@
 	} // setParameters
 
 	/**
-	 *  Get SQL WHERE parameter
-	 *  @param f field
-	 *  @return Upper case text with % at the end
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
 	 */
+	protected boolean hasOutstandingChanges()
+	{
+		//  All the tracked fields
+		return(
+			fAmtFrom.hasChanged()	||
+			fAmtTo.hasChanged() ||
+			fBankAccount_ID.hasChanged() ||
+			fCash_ID.hasChanged() ||
+			fCashBook_ID.hasChanged() ||
+			fCharge_ID.hasChanged() ||
+			fDateFrom.hasChanged() ||
+			fDateTo.hasChanged() ||
+			fInvoice_ID.hasChanged() ||
+			fPayment_ID.hasChanged() ||
+			cbAbsolute.hasChanged()
+			);
+			
+	}
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		fAmtFrom.set_oldValue();
+		fAmtTo.set_oldValue();
+		fBankAccount_ID.set_oldValue();
+		fCash_ID.set_oldValue();
+		fCashBook_ID.set_oldValue();
+		fCharge_ID.set_oldValue();
+		fDateFrom.set_oldValue();
+		fDateTo.set_oldValue();
+		fInvoice_ID.set_oldValue();
+		fPayment_ID.set_oldValue();
+		cbAbsolute.set_oldValue();
+		return;
+	}
 	
-	private String getSQLText (Textbox f)
+    /**
+	 *  Clear all fields and set default values in check boxes
+	 */
+	private void clearParameters()
 	{
-		String s = f.getText().toUpperCase();
-		
-		if (!s.endsWith("%"))
-			s += "%";
-		
-		log.fine( "String=" + s);
-		
-		return s;
-	} // getSQLText
-
-	public void valueChange(ValueChangeEvent evt) 
-	{
-		
+		//  Clear fields and set defaults
+		Object nullObject = null;
+		fAmtFrom.setValue(nullObject);
+		fAmtTo.setValue(nullObject);
+		fBankAccount_ID.setValue(null);
+		fCash_ID.setValue(null);
+		fCashBook_ID.setValue(null);
+		fCharge_ID.setValue(null);
+		fDateFrom.setValue(null);
+		fDateTo.setValue(null);
+		fInvoice_ID.setValue(null);
+		fPayment_ID.setValue(null);
+		cbAbsolute.setChecked(false);
 	}
 
-	public void tableChanged(WTableModelEvent event) 
-	{
-	}
-		
-	@Override
-	protected void insertPagingComponent()
-    {
-		southBody.insertBefore(paging, southBody.getFirstChild());
-		layout.invalidate();
-	}
-	
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoGeneralPanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoGeneralPanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoGeneralPanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -25,13 +25,10 @@
 import java.util.ArrayList;
 import java.util.logging.Level;
 
-import org.adempiere.webui.component.Grid;
-import org.adempiere.webui.component.GridFactory;
 import org.adempiere.webui.component.Label;
 import org.adempiere.webui.component.Row;
 import org.adempiere.webui.component.Rows;
 import org.adempiere.webui.component.Textbox;
-import org.adempiere.webui.event.WTableModelEvent;
 import org.adempiere.webui.window.FDialog;
 import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
@@ -41,18 +38,15 @@
 import org.compiere.util.Msg;
 import org.compiere.util.Util;
 import org.zkoss.zk.ui.event.EventListener;
-import org.zkoss.zkex.zul.Borderlayout;
-import org.zkoss.zkex.zul.Center;
-import org.zkoss.zkex.zul.North;
-import org.zkoss.zkex.zul.South;
-import org.zkoss.zul.Div;
-import org.zkoss.zul.Separator;
-import org.zkoss.zul.Vbox;
+import org.zkoss.zk.ui.event.Events;
 
 /**
  * Zk Port
  * @author Elaine
  * @version	InfoGeneral.java Adempiere Swing UI 3.4.1 
+ *
+ * @author Michael McKay, ADEMPIERE-72 VLookup and Info Window improvements
+ * 	<li>https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class InfoGeneralPanel extends InfoPanel implements EventListener
 {
@@ -60,6 +54,8 @@
 	 * 
 	 */
 	private static final long serialVersionUID = -665127800885078238L;
+	
+	private int fieldID = 0;
 	private Textbox txt1;
 	private Textbox txt2;
 	private Textbox txt3;
@@ -69,7 +65,7 @@
 	private Label lbl2;
 	private Label lbl3;
 	private Label lbl4;
-	
+		
 	/** String Array of Column Info */
 	private ColumnInfo[] m_generalLayout;
 	
@@ -78,52 +74,89 @@
 	
 	/** list of query columns (SQL) */
 	private ArrayList<String> m_queryColumnsSql = new ArrayList<String>();
-	private Borderlayout layout;
-	private Vbox southBody;
 	
-	public InfoGeneralPanel(String queryValue, int windowNo,String tableName,String keyColumn, boolean isSOTrx, String whereClause) 
+	/**
+	 *	Standard Constructor
+	 *  @param queryValue Query Value
+	 * 	@param WindowNo window no
+	 * 	@param tableName The name of the table to search
+	 * 	@param keyColumn The name of the keyColumn in the table.
+	 * 	@param multiSelection multiple selections
+	 *  @param saveResults  True if results will be saved, false for info only
+	 * 	@param whereClause where clause
+	 *  @param lookup True if the column has a lookup - open modal
+	 */
+	@Deprecated
+	public InfoGeneralPanel(String queryValue, int windowNo, String tableName, 
+			String keyColumn, boolean multipleSelection, String whereClause) 
 	{
-		super(windowNo, tableName, keyColumn, false,whereClause);
-				
+		this(windowNo, true, 0, queryValue,  tableName, keyColumn, false, false, whereClause);
+	}
+
+	/**
+	 *	Standard Constructor
+	 *  @param record_id The record ID to find
+	 *  @param value Query Value
+	 * 	@param WindowNo window no
+	 * 	@param tableName The name of the table to search
+	 * 	@param keyColumn The name of the keyColumn in the table.
+	 * 	@param multiSelection multiple selections
+	 * 	@param isSOTrx True if the records should be filtered for sales transactions
+	 * 	@param whereClause The where clause of the search
+	 */
+	public InfoGeneralPanel(int record_id, String value, int windowNo, 
+			String tableName, String keyColumn, 
+			boolean multipleSelection, String whereClause) 
+	{
+		this(windowNo, true, record_id, value, tableName, keyColumn, multipleSelection, 
+				false, whereClause);
+	}
+	/**
+	 *	Standard Constructor
+	 *  @param record_id The record ID to find
+	 *  @param value Query Value
+	 * 	@param WindowNo window no
+	 * 	@param tableName The name of the table to search
+	 * 	@param keyColumn The name of the keyColumn in the table.
+	 * 	@param multiSelection multiple selections
+	 * 	@param isSOTrx True if the records should be filtered for sales transactions
+	 * 	@param whereClause The where clause of the search
+	 *  @param lookup True if the column has a lookup - open modal
+	 */
+	public InfoGeneralPanel(int windowNo, boolean modal, int record_id, String value,  
+			String tableName, String keyColumn, 
+			boolean multipleSelection, boolean saveResults, String whereClause) 
+	{
+		super (windowNo, modal, tableName, keyColumn, multipleSelection, saveResults, whereClause);
+		log.info(tableName + " - " + keyColumn + " - " + whereClause);				
 		setTitle(Msg.getMsg(Env.getCtx(), "Info"));
-
-		try
-		{
-			init();
-			initComponents();
-			
-			if (queryValue != null && queryValue.length() > 0)
-			{
-				txt1.setValue(queryValue);
-			}
-
-			p_loadedOK = initInfo ();
-		}
-		catch (Exception e)
-		{
+		//
+		if (!initInfoTable())  // Populates m_generalLayout
 			return;
-		}
-
-		// Elaine 2008/12/15
-		int no = contentPanel.getRowCount();
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
 		//
-		
-		if (queryValue != null && queryValue.length() > 0)
+		setTableLayout(m_generalLayout);
+		setFromClause(tableName);
+		setOrderClause("2");
+		StringBuffer where = new StringBuffer("IsActive='Y'");
+		if (whereClause.length() > 0)
+			where.append(" AND ").append(p_whereClause);
+		setWhereClause(where.toString());
+		//
+		statInit();
+		initInfo (record_id, value);
+		//		
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
         {
-            executeQuery();
-            renderItems();
+			prepareAndExecuteQuery();
         }
-		
+        //
+        p_loadedOK = true;		
 	}
 	
 	private void initComponents()
 	{
-		Grid grid = GridFactory.newGridLayout();
 		
 		Rows rows = new Rows();
-		grid.appendChild(rows);
 		
 		Row row = new Row();
 		rows.appendChild(row);
@@ -135,44 +168,12 @@
 		row.appendChild(txt3);
 		row.appendChild(lbl4.rightAlign());
 		row.appendChild(txt4);
-		
-		layout = new Borderlayout();
-        layout.setWidth("100%");
-        layout.setHeight("100%");
-        if (!isLookup())
-        {
-        	layout.setStyle("position: absolute");
-        }
-        this.appendChild(layout);
 
-        North north = new North();
-        layout.appendChild(north);
-		north.appendChild(grid);
-        
-        Center center = new Center();
-		layout.appendChild(center);
-		center.setFlex(true);
-		Div div = new Div();
-		div.appendChild(contentPanel);
-		if (isLookup())
-			contentPanel.setWidth("99%");
-        else
-        	contentPanel.setStyle("width: 99%; margin: 0px auto;");
-        contentPanel.setVflex(true);
-		div.setStyle("width :100%; height: 100%");
-		center.appendChild(div);
-		
-		South south = new South();
-		layout.appendChild(south);
-		southBody = new Vbox();
-		southBody.setWidth("100%");
-		south.appendChild(southBody);
-		southBody.appendChild(confirmPanel);
-		southBody.appendChild(new Separator());
-		southBody.appendChild(statusBar);
+		p_criteriaGrid.appendChild(rows);
+		super.setSizes();
 	}
 
-	private void init()
+	private void statInit()
 	{
 		txt1 = new Textbox();
 		txt2 = new Textbox();
@@ -183,55 +184,74 @@
 		lbl2 = new Label();
 		lbl3 = new Label();
 		lbl4 = new Label();
+		
+		initComponents();
 	}
 	
-	private boolean initInfo ()
+	protected void initInfo()
 	{
-		if (!initInfoTable())
-			return false;
-
-		//  Prepare table
-		
-		StringBuffer where = new StringBuffer("IsActive='Y'");
-		
-		if (p_whereClause.length() > 0)
-			where.append(" AND ").append(p_whereClause);
-		prepareTable(m_generalLayout, p_tableName, where.toString(), "2");
-
-		//	Set & enable Fields
-		
+		initInfo(0,"");
+	}
+	
+	private void initInfo (int record_id, String value)
+	{
+		//	Set & enable Fields		
 		lbl1.setValue(Util.cleanAmp(Msg.translate(Env.getCtx(), m_queryColumns.get(0).toString())));
-		
+		txt1.setAttribute("zk_component_ID", "Lookup_txt1_" + m_queryColumns.get(0).toString());
+		txt1.addEventListener(Events.ON_CHANGE, this);
+		//
 		if (m_queryColumns.size() > 1)
 		{
 			lbl2.setValue(Msg.translate(Env.getCtx(), m_queryColumns.get(1).toString()));
+			txt2.setAttribute("zk_component_ID", "Lookup_txt2_" + m_queryColumns.get(1).toString());
+			txt2.addEventListener(Events.ON_CHANGE, this);
 		}
 		else
 		{
 			lbl2.setVisible(false);
 			txt2.setVisible(false);
 		}
-		
+		//
 		if (m_queryColumns.size() > 2)
 		{
 			lbl3.setValue(Msg.translate(Env.getCtx(), m_queryColumns.get(2).toString()));
+			txt3.setAttribute("zk_component_ID", "Lookup_txt3_" + m_queryColumns.get(2).toString());
+			txt3.addEventListener(Events.ON_CHANGE, this);
 		}
 		else
 		{
 			lbl3.setVisible(false);
 			txt3.setVisible(false);
 		}
-		
+		//
 		if (m_queryColumns.size() > 3)
 		{
 			lbl4.setValue(Msg.translate(Env.getCtx(), m_queryColumns.get(3).toString()));
+			txt4.setAttribute("zk_component_ID", "Lookup_txt4_" + m_queryColumns.get(3).toString());
+			txt4.addEventListener(Events.ON_CHANGE, this);
 		}
 		else
 		{
 			lbl4.setVisible(false);
 			txt4.setVisible(false);
 		}
-		return true;
+		//  Set values
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
+		
+		if (record_id != 0)
+		{
+			fieldID = record_id;
+		}
+		else
+		{
+			if (value != null && value.length() > 0)
+			{
+				txt1.setValue(value);
+			}
+		}
 	}
 
 	private boolean initInfoTable ()
@@ -410,16 +430,23 @@
 	public String getSQLWhere() 
 	{
 		StringBuffer sql = new StringBuffer();
-		addSQLWhere (sql, 0, txt1.getText().toUpperCase());
-		addSQLWhere (sql, 1, txt2.getText().toUpperCase());
-		addSQLWhere (sql, 2, txt3.getText().toUpperCase());
-		addSQLWhere (sql, 3, txt4.getText().toUpperCase());
+		if(isResetRecordID())  // Set in Info.java.
+			fieldID = 0;
+		
+		if(!(fieldID==0))
+		{
+			sql.append(" AND ").append(getTableName()).append(".").append(getKeyColumn()).append(" = ?");
+		}
+		addSQLWhere (sql, 0, txt1);
+		addSQLWhere (sql, 1, txt2);
+		addSQLWhere (sql, 2, txt3);
+		addSQLWhere (sql, 3, txt4);
 		return sql.toString();
 	}
 	
-	private void addSQLWhere(StringBuffer sql, int index, String value)
+	private void addSQLWhere(StringBuffer sql, int index, Textbox value)
 	{
-		if (!(value.equals("") || value.equals("%")) && index < m_queryColumns.size())
+		if (isValidSQLText(value) && index < m_queryColumns.size())
 		{
 			// Angelo Dabala' (genied) nectosoft: [2893220] avoid to append string parameters directly because of special chars like quote(s)
 			sql.append(" AND UPPER(").append(m_queryColumnsSql.get(index).toString()).append(") LIKE ?");
@@ -427,20 +454,6 @@
 	}
 
 	/**
-	 *  Get SQL WHERE parameter
-	 *  @param f field
-	 *  @return sql part
-	 */
-	private String getSQLText (Textbox f)
-	{
-		String s = f.getText().toUpperCase();
-		if (!s.endsWith("%"))
-			s += "%";
-		log.fine( "String=" + s);
-		return s;
-	}   //  getSQLText
-
-	/**
 	 *  Set Parameters for Query.
 	 *  (as defined in getSQLWhere)
 	 * 	@param pstmt statement
@@ -450,24 +463,44 @@
 	protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
 	{
 		int index = 1;
-		if (txt1.getText().length() > 0)
+		if (!(fieldID == 0))
+			pstmt.setInt(index++, fieldID);
+		if (isValidSQLText(txt1))
 			pstmt.setString(index++, getSQLText(txt1));
-		if (txt2.getText().length() > 0)
+		if (isValidSQLText(txt2))
 			pstmt.setString(index++, getSQLText(txt2));
-		if (txt3.getText().length() > 0)
+		if (isValidSQLText(txt3))
 			pstmt.setString(index++, getSQLText(txt3));
-		if (txt4.getText().length() > 0)
+		if (isValidSQLText(txt4))
 			pstmt.setString(index++, getSQLText(txt4));
 	}   //  setParameters
 
-    public void tableChanged(WTableModelEvent event)
-    {
-    }
-        
-    @Override
-	protected void insertPagingComponent()
-    {
-		southBody.insertBefore(paging, southBody.getFirstChild());
-		layout.invalidate();
-    }
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
+	{
+		//  All the tracked fields
+		return(
+			txt1.hasChanged()	||
+			txt2.hasChanged() ||
+			txt3.hasChanged() ||
+			txt4.hasChanged()
+			);
+	}
+	
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		txt1.set_oldValue();
+		txt2.set_oldValue();
+		txt3.set_oldValue();
+		txt4.set_oldValue();
+		return;
+	}
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoInOutPanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoInOutPanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoInOutPanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -20,24 +20,22 @@
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 import java.sql.Timestamp;
-import java.util.Date;
+import java.text.SimpleDateFormat;
 
 import org.adempiere.webui.apps.AEnv;
 import org.adempiere.webui.component.Checkbox;
 import org.adempiere.webui.component.Datebox;
-import org.adempiere.webui.component.Grid;
-import org.adempiere.webui.component.GridFactory;
 import org.adempiere.webui.component.Label;
 import org.adempiere.webui.component.Row;
 import org.adempiere.webui.component.Rows;
 import org.adempiere.webui.component.Textbox;
 import org.adempiere.webui.editor.WEditor;
 import org.adempiere.webui.editor.WSearchEditor;
-import org.adempiere.webui.event.ValueChangeEvent;
 import org.adempiere.webui.event.ValueChangeListener;
-import org.adempiere.webui.event.WTableModelEvent;
 import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
+import org.compiere.model.MColumn;
+import org.compiere.model.MInOut;
 import org.compiere.model.MLookupFactory;
 import org.compiere.model.MQuery;
 import org.compiere.util.DisplayType;
@@ -46,14 +44,7 @@
 import org.compiere.util.Util;
 import org.zkoss.zk.ui.event.EventListener;
 import org.zkoss.zk.ui.event.Events;
-import org.zkoss.zkex.zul.Borderlayout;
-import org.zkoss.zkex.zul.Center;
-import org.zkoss.zkex.zul.North;
-import org.zkoss.zkex.zul.South;
-import org.zkoss.zul.Div;
 import org.zkoss.zul.Hbox;
-import org.zkoss.zul.Separator;
-import org.zkoss.zul.Vbox;
 
 /**
 * Based on InfoInOut written by Jorg Janke
@@ -64,6 +55,9 @@
 * Zk Port
 * @author Elaine
 * @version	InfoInOut.java Adempiere Swing UI 3.4.1
+*
+ * @author Michael McKay, ADEMPIERE-72 VLookup and Info Window improvements
+ * 	<li>https://adempiere.atlassian.net/browse/ADEMPIERE-72
 */
 
 public class InfoInOutPanel extends InfoPanel implements ValueChangeListener, EventListener
@@ -73,9 +67,12 @@
 	 */
 	private static final long serialVersionUID = -3927370377224858985L;
 
+	private int fieldID = 0;
+	
 	private Textbox fDocumentNo = new Textbox();
 
 	private WEditor fBPartner_ID;
+	private WEditor fShipper_ID;
 
 	private Textbox fDescription = new Textbox();
 	private Textbox fPOReference = new Textbox();
@@ -92,19 +89,24 @@
 	private Label lDateFrom = new Label(Msg.translate(Env.getCtx(), "MovementDate"));
 	private Label lDateTo = new Label("-");
 
-	private Vbox southBody;
-
-	private Borderlayout layout;
-
+	/** From Clause             */
+	private static String s_From = " M_InOut i";
+	/** Order Clause             */
+	private static String s_Order = "2,3,4";
 	/**  Array of Column Info    */
-	private static final ColumnInfo[] s_invoiceLayout = {
+	private static final ColumnInfo[] s_Layout = {
 		new ColumnInfo(" ", "i.M_InOut_ID", IDColumn.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "C_BPartner_ID"), "(SELECT Name FROM C_BPartner bp WHERE bp.C_BPartner_ID=i.C_BPartner_ID)", String.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "MovementDate"), "i.MovementDate", Timestamp.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "DocumentNo"), "i.DocumentNo", String.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "Description"), "i.Description", String.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "POReference"), "i.POReference", String.class),
-		new ColumnInfo(Msg.translate(Env.getCtx(), "IsSOTrx"), "i.IsSOTrx", Boolean.class)
+		new ColumnInfo(Msg.translate(Env.getCtx(), "M_Shipper_ID"), "(SELECT Name FROM M_Shipper ms WHERE ms.M_Shipper_ID = i.M_Shipper_ID)", String.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "ShipDate"), "i.ShipDate", Timestamp.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "TrackingNo"), "i.TrackingNo", String.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "IsDropShip"), "i.IsDropShip", Boolean.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "DropShip_BPartner_ID"), "(SELECT Name FROM C_BPartner bp WHERE bp.C_BPartner_ID=i.DropShip_BPartner_ID)", String.class),		
+		new ColumnInfo(Msg.translate(Env.getCtx(), "DocStatus"), "i.docstatus", String.class)
 	};
 
 	/**
@@ -115,10 +117,10 @@
 	 *  @param multiSelection multiple selections
 	 *  @param whereClause where clause
 	 */
-	protected InfoInOutPanel(	int WindowNo, String value,
+	protected InfoInOutPanel(	int WindowNo, int record_id, String value,
 								boolean multiSelection, String whereClause)
 	{
-		this(WindowNo, value, multiSelection, whereClause, true);
+		this(WindowNo, true, record_id, value, multiSelection, true, whereClause);
 	}
 	
 	/**
@@ -129,64 +131,87 @@
 	 *  @param multiSelection multiple selections
 	 *  @param whereClause where clause
 	 */
-	protected InfoInOutPanel(	int WindowNo, String value,
-								boolean multiSelection, String whereClause, boolean lookup)
+	protected InfoInOutPanel(	int WindowNo, boolean modal, int record_id, String value,
+								boolean multiSelection, boolean saveResults, String whereClause)
 	{
-		super (WindowNo, "i", "M_InOut_ID", multiSelection, whereClause, lookup);
+		super (WindowNo, modal, "i", "M_InOut_ID", multiSelection, saveResults, whereClause);
 		log.info( "InfoInOut");
 		setTitle(Msg.getMsg(Env.getCtx(), "InfoInOut"));
-
-		try
-		{
-			statInit();
-			p_loadedOK = initInfo ();
-		}
-		catch (Exception e)
-		{
-			return;
-		}
-
-		int no = contentPanel.getRowCount();
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
-		
-		if (value != null && value.length() > 0)
-		{
-			fDocumentNo.setValue(value);
-			executeQuery();
-		}
+		//
+		StringBuffer where = new StringBuffer("i.IsActive='Y'");
+		if (whereClause.length() > 0)
+			where.append(" AND ").append(Util.replace(whereClause, "M_InOut.", "i."));
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause(s_Order);
+		//
+		statInit();
+		initInfo (record_id, value);
+		//
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
+        {
+			prepareAndExecuteQuery();
+        }
+        //
+        p_loadedOK = true;
 	} // InfoInOutPanel
 
 	/**
 	 *	Static Setup - add fields to parameterPanel
-	 *  @throws Exception if Lookups cannot be initialized
 	 */
 	
-	private void statInit() throws Exception
+	private void statInit()
 	{
 		fDocumentNo.setWidth("100%");
+		fDocumentNo.addEventListener(Events.ON_CHANGE, this);
+        fDocumentNo.setAttribute("zk_component_ID", "Lookup_Criteria_DocumentNo");
 		fDescription.setWidth("100%");
+		fDescription.addEventListener(Events.ON_CHANGE, this);
+        fDescription.setAttribute("zk_component_ID", "Lookup_Criteria_Description");
 		fPOReference.setWidth("100%");
-		fDateFrom.setWidth("165px");
-		fDateTo.setWidth("165px");
+		fPOReference.addEventListener(Events.ON_CHANGE, this);
+        fPOReference.setAttribute("zk_component_ID", "Lookup_Criteria_POReference");
+
+		// 	Format the dates and number boxes
+		fDateFrom = new Datebox();
+		fDateFrom.setWidth("97px");
+		fDateFrom.setAttribute("zk_component_ID", "Lookup_Criteria_DateFrom");
+		fDateFrom.addEventListener(Events.ON_CHANGE, this);
+		//
+		fDateTo = new Datebox();
+		fDateTo.setWidth("97px");
+		fDateTo.setAttribute("zk_component_ID", "Lookup_Criteria_DateTo");
+		fDateTo.addEventListener(Events.ON_CHANGE, this);
+		//
+		SimpleDateFormat dateFormat = DisplayType.getDateFormat(DisplayType.Date, AEnv.getLanguage(Env.getCtx()));
+		fDateFrom.setFormat(dateFormat.toPattern());
+		fDateTo.setFormat(dateFormat.toPattern());
     	
-		fDocumentNo.addEventListener(Events.ON_CHANGE, this);
-		fDescription.addEventListener(Events.ON_CHANGE, this);
-		fPOReference.addEventListener(Events.ON_CHANGE, this);
 
-		fIsSOTrx.setLabel(Msg.translate(Env.getCtx(), "IsSOTrx"));
+        fIsSOTrx.setLabel(Msg.translate(Env.getCtx(), "IsSOTrx"));
+        fIsSOTrx.setName("IsSOTrx");
+        fIsSOTrx.setAttribute("zk_component_ID", "Lookup_Criteria_IsSoTrx");
+        fIsSOTrx.addActionListener(this);
 		fIsSOTrx.setChecked(!"N".equals(Env.getContext(Env.getCtx(), p_WindowNo, "IsSOTrx")));
-		fIsSOTrx.addEventListener(Events.ON_CHECK, this);
 		
 		fBPartner_ID = new WSearchEditor(
-				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 3499, DisplayType.Search), 
-				Msg.translate(Env.getCtx(), "BPartner"), "", false, false, true);
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0,  
+						MColumn.getColumn_ID(MInOut.Table_Name, MInOut.COLUMNNAME_C_BPartner_ID),
+						DisplayType.Search),  
+				Msg.translate(Env.getCtx(), "C_BPartner_ID"), "", false, false, true);
+		fBPartner_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_C_BPartner_ID");
 		fBPartner_ID.addValueChangeListener(this);
-		
-		Grid grid = GridFactory.newGridLayout();
-		
+		//
+		fShipper_ID = new WSearchEditor(
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+						MColumn.getColumn_ID(MInOut.Table_Name, MInOut.COLUMNNAME_M_Shipper_ID),
+						DisplayType.TableDir),  
+						Msg.translate(Env.getCtx(), "M_Shipper_ID"), "", false, false, true);
+		fShipper_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_M_Shipper_ID");
+		fShipper_ID.addValueChangeListener(this);
+	
 		Rows rows = new Rows();
-		grid.appendChild(rows);
 		
 		Row row = new Row();
 		rows.appendChild(row);
@@ -209,71 +234,63 @@
 		row.appendChild(hbox);
 		
 		row = new Row();
-		row.setSpans("1, 1, 3");
 		rows.appendChild(row);
 		row.appendChild(lPOReference.rightAlign());
 		row.appendChild(fPOReference);		
+		row.appendChild(fShipper_ID.getLabel().rightAlign());
+		row.appendChild(fShipper_ID.getComponent());
 		row.appendChild(new Label());
-		
-		layout = new Borderlayout();
-        layout.setWidth("100%");
-        layout.setHeight("100%");
-        if (!isLookup())
-        {
-        	layout.setStyle("position: absolute");
-        }
-        this.appendChild(layout);
-        
-        North north = new North();
-        layout.appendChild(north);
-		north.appendChild(grid);
-        
-        Center center = new Center();
-		layout.appendChild(center);
-		center.setFlex(true);
-		Div div = new Div();
-		div.appendChild(contentPanel);
-		if (isLookup())
-        	contentPanel.setWidth("99%");
-        else
-        	contentPanel.setStyle("width: 99%; margin: 0px auto;");
-        contentPanel.setVflex(true);
-		div.setStyle("width :100%; height: 100%");
-		center.appendChild(div);
-        
-		South south = new South();
-		layout.appendChild(south);
-		southBody = new Vbox();
-		southBody.setWidth("100%");
-		south.appendChild(southBody);
-		southBody.appendChild(confirmPanel);
-		southBody.appendChild(new Separator());
-		southBody.appendChild(statusBar);
+
+		p_criteriaGrid.appendChild(rows);
+		super.setSizes();
 	}
 	
 	/**
 	 *	General Init
-	 *	@return true, if success
 	 */
 	
-	private boolean initInfo ()
+	private void initInfo (int record_id, String value)
 	{
-		//  Set Defaults
-		String bp = Env.getContext(Env.getCtx(), p_WindowNo, "C_BPartner_ID");
-	
-		if (bp != null && bp.length() != 0)
-			fBPartner_ID.setValue(new Integer(bp));
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
+		//  Set values
+        if (!(record_id == 0))  // A record is defined
+        {
+        	fieldID = record_id;
+        } 
+        else
+        {
+			if (value != null && value.length() > 0)
+			{
+				fDocumentNo.setValue(value);
+			}
+			else
+			{
+				// Try to find other criteria in the context
+				String id;
+				//  M_InOut_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "M_InOut_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fieldID = new Integer(id).intValue();
+				}
 
-		// Prepare table
-		
-		StringBuffer where = new StringBuffer("i.IsActive='Y'");
-		
-		if (p_whereClause.length() > 0)
-			where.append(" AND ").append(Util.replace(p_whereClause, "M_InOut.", "i."));
-		
-		prepareTable(s_invoiceLayout, " M_InOut i", where.toString(), "2,3,4");
+				//  C_BPartner_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BPartner_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+					fBPartner_ID.setValue(new Integer(id));
 
-		return true;
+				//  M_Shipper_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "M_Shipper_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fShipper_ID.setValue(new Integer(id).intValue());
+				}
+
+			}
+        }
 	} // initInfo
 
 	/*************************************************************************/
@@ -289,26 +306,39 @@
 	{
 		StringBuffer sql = new StringBuffer();
 		
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if(!(fieldID == 0))
+			sql.append(" AND i.M_InOut_ID = ?");
+		//
 		if (fDocumentNo.getText().length() > 0)
 			sql.append(" AND UPPER(i.DocumentNo) LIKE ?");
-		
+		//
 		if (fDescription.getText().length() > 0)
 			sql.append(" AND UPPER(i.Description) LIKE ?");
-		
+		//
 		if (fPOReference.getText().length() > 0)
 			sql.append(" AND UPPER(i.POReference) LIKE ?");
-
+		//
 		if (fBPartner_ID.getDisplay() != "")
 			sql.append(" AND i.C_BPartner_ID=?");
-
+		//
+		if (fShipper_ID.getValue() != null)
+			sql.append(" AND i.M_Shipper_ID=?");
+		//
 		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
 		{
-			Date f = fDateFrom.getValue();
-			Timestamp from = new Timestamp(f.getTime());
-			
-			Date t = fDateTo.getValue();
-			Timestamp to = new Timestamp(t.getTime());
-
+			Timestamp from = null;
+			Timestamp to = null;
+			//
+			if (fDateFrom.getValue() != null)
+				from = new Timestamp(fDateFrom.getValue().getTime());
+			if (fDateTo.getValue() != null)
+				to = new Timestamp(fDateTo.getValue().getTime());
+			//
+			log.fine("Date From=" + from + ", To=" + to);
+			//
 			if (from == null && to != null)
 				sql.append(" AND TRUNC(i.MovementDate, 'DD') <= ?");
 			else if (from != null && to == null)
@@ -333,32 +363,45 @@
 	{
 		int index = 1;
 	
+		//  => ID
+		if (!(fieldID == 0))
+			pstmt.setInt(index++, fieldID);
+		//
 		if (fDocumentNo.getText().length() > 0)
 			pstmt.setString(index++, getSQLText(fDocumentNo));
-		
+		//
 		if (fDescription.getText().length() > 0)
 			pstmt.setString(index++, getSQLText(fDescription));
-		
+		//
 		if (fPOReference.getText().length() > 0)
 			pstmt.setString(index++, getSQLText(fPOReference));
-
+		//
 		if (fBPartner_ID.getDisplay() != "")
 		{
 			Integer bp = (Integer)fBPartner_ID.getValue();
 			pstmt.setInt(index++, bp.intValue());
 			log.fine("BPartner=" + bp);
 		}
-
+		//
+		if (fShipper_ID.getValue() != null)
+		{
+			Integer bp = (Integer)fShipper_ID.getValue();
+			pstmt.setInt(index++, bp.intValue());
+			log.fine("Shipper=" + bp);
+		}
+		//
 		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
 		{
-			Date f = fDateFrom.getValue();
-			Timestamp from = new Timestamp(f.getTime());
-			
-			Date t = fDateTo.getValue();
-			Timestamp to = new Timestamp(t.getTime());
-
+			Timestamp from = null;
+			Timestamp to = null;
+			//
+			if (fDateFrom.getValue() != null)
+				from = new Timestamp(fDateFrom.getValue().getTime());
+			if (fDateTo.getValue() != null)
+				to = new Timestamp(fDateTo.getValue().getTime());
+			//
 			log.fine("Date From=" + from + ", To=" + to);
-			
+			//
 			if (from == null && to != null)
 				pstmt.setTimestamp(index++, to);
 			else if (from != null && to == null)
@@ -372,23 +415,6 @@
 		pstmt.setString(index++, fIsSOTrx .isChecked() ? "Y" : "N");
 	} // setParameters
 
-	/**
-	 *  Get SQL WHERE parameter
-	 *  @param f field
-	 *  @return sql part
-	 */
-	
-	private String getSQLText (Textbox f)
-	{
-		String s = f.getText().toUpperCase();
-	
-		if (!s.endsWith("%"))
-			s += "%";
-		
-		log.fine( "String=" + s);
-		return s;
-	} // getSQLText
-
 	// Elaine 2008/12/16
 	/**
 	 *	Zoom
@@ -416,23 +442,39 @@
 	{
 		return true;
 	}	//	hasZoom
-
-	public void valueChange(ValueChangeEvent evt) 
+	
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
 	{
-		if (fBPartner_ID.equals(evt.getSource()))
-		{
-	    	fBPartner_ID.setValue(evt.getNewValue());
-		}
+		//  All the tracked fields
+		return(
+				fDocumentNo.hasChanged()	||
+				fDescription.hasChanged()	||
+				fPOReference.hasChanged()	||
+				fIsSOTrx.hasChanged()	||
+				fBPartner_ID.hasChanged()	||
+				fShipper_ID.hasChanged()	||
+				fDateFrom.hasChanged()	||
+				fDateTo.hasChanged());
 	}
-
-	public void tableChanged(WTableModelEvent event) 
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
 	{
-		
-	}
-
-	@Override
-	protected void insertPagingComponent() {
-		southBody.insertBefore(paging, southBody.getFirstChild());
-		layout.invalidate();
+		fDocumentNo.set_oldValue();
+		fDescription.set_oldValue();
+		fPOReference.set_oldValue();
+		fIsSOTrx.set_oldValue();
+		fBPartner_ID.set_oldValue();
+		fShipper_ID.set_oldValue();
+		fDateFrom.set_oldValue();
+		fDateTo.set_oldValue();
+		return;
 	}
 }
\ No newline at end of file
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoInvoicePanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoInvoicePanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoInvoicePanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -19,43 +19,38 @@
 
 import java.math.BigDecimal;
 import java.sql.PreparedStatement;
+import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Timestamp;
-import java.util.Date;
+import java.text.DecimalFormat;
+import java.text.SimpleDateFormat;
+import java.util.logging.Level;
 
 import org.adempiere.webui.apps.AEnv;
 import org.adempiere.webui.component.Checkbox;
 import org.adempiere.webui.component.Datebox;
-import org.adempiere.webui.component.Grid;
-import org.adempiere.webui.component.GridFactory;
 import org.adempiere.webui.component.Label;
 import org.adempiere.webui.component.NumberBox;
 import org.adempiere.webui.component.Row;
 import org.adempiere.webui.component.Rows;
 import org.adempiere.webui.component.Textbox;
+import org.adempiere.webui.component.WListbox;
 import org.adempiere.webui.editor.WSearchEditor;
-import org.adempiere.webui.event.ValueChangeEvent;
 import org.adempiere.webui.event.ValueChangeListener;
-import org.adempiere.webui.event.WTableModelEvent;
 import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
-import org.compiere.model.MLookup;
+import org.compiere.model.MColumn;
+import org.compiere.model.MInvoice;
 import org.compiere.model.MLookupFactory;
 import org.compiere.model.MQuery;
+import org.compiere.util.DB;
 import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
-import org.compiere.util.KeyNamePair;
 import org.compiere.util.Msg;
+import org.compiere.util.Trx;
 import org.compiere.util.Util;
-import org.zkoss.zk.ui.WrongValueException;
-import org.zkoss.zkex.zul.Borderlayout;
-import org.zkoss.zkex.zul.Center;
-import org.zkoss.zkex.zul.North;
-import org.zkoss.zkex.zul.South;
-import org.zkoss.zul.Div;
+import org.zkoss.zk.ui.event.Events;
 import org.zkoss.zul.Hbox;
-import org.zkoss.zul.Separator;
-import org.zkoss.zul.Vbox;
 
 /**
  * Search Invoice and return selection
@@ -66,7 +61,10 @@
  * Zk Port
  * @author Elaine
  * @version	InfoInvoice.java Adempiere Swing UI 3.4.1 
- **/
+ * 
+ * @author Michael McKay, ADEMPIERE-72 VLookup and Info Window improvements
+ * 	<li>https://adempiere.atlassian.net/browse/ADEMPIERE-72
+*/
 public class InfoInvoicePanel extends InfoPanel implements ValueChangeListener
 {
     /**
@@ -82,10 +80,10 @@
      * @param whereClause where clause
     *
      */
-    protected InfoInvoicePanel(int WindowNo, String value,
+    protected InfoInvoicePanel(int WindowNo, int record_id, String value,
             boolean multiSelection, String whereClause)
     {
-    	this(WindowNo, value, multiSelection, whereClause, true);
+    	this(WindowNo, true, record_id, value, multiSelection, true, whereClause);
     }
     
 	/**
@@ -96,430 +94,518 @@
      * @param whereClause where clause
     *
      */
-    protected InfoInvoicePanel(int WindowNo, String value,
-            boolean multiSelection, String whereClause, boolean lookup)
+    protected InfoInvoicePanel(int WindowNo, boolean modal, int record_id, String value,
+            boolean multiSelection, boolean saveResults, String whereClause)
     {
-        super ( WindowNo, "i", "C_Invoice_ID", multiSelection, whereClause, lookup);
-        
+        super ( WindowNo, modal, "i", "C_Invoice_ID", multiSelection, saveResults, whereClause);       
         setTitle(Msg.getMsg(Env.getCtx(), "InfoInvoice"));
-        //
-        initComponents();
-        init();
-           
-       p_loadedOK = initInfo ();
-       int no = contentPanel.getRowCount();
-       setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-       setStatusDB(Integer.toString(no));
-       if (value != null && value.length() > 0)
-       {
-           String values[] = value.split("_");
-           txtDocumentNo.setText(values[0]);
-           executeQuery();
-           renderItems();
-       }
+		//
+		StringBuffer where = new StringBuffer("i.IsActive='Y'");
+		if (whereClause.length() > 0)
+			where.append(" AND ").append(Util.replace(whereClause, "C_Invoice.", "i."));
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause(s_Order);
+		//
+		setShowTotals(true);
+		//
+		statInit();
+		initInfo (record_id, value);
+		//	AutoQuery
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
+		{
+    	   prepareAndExecuteQuery();
+       	}
+		//
+		p_loadedOK = true;
     }
-
+    
+    private int fieldID = 0;
     private Label lblDocumentNo;
     private Label lblDescription;
     private Label lblDateInvoiced;
     private Label lblGrandTotal;
     
-    private Textbox txtDocumentNo;
-    private Textbox txtDescription;
+    private Textbox fDocumentNo;
+    private Textbox fDescription;
     
-    private Datebox dateFrom;
-    private Datebox dateTo;
+    private Datebox fDateFrom;
+    private Datebox fDateTo;
     
-    private NumberBox amountFrom;
-    private NumberBox amountTo;
+    private NumberBox fAmtFrom;
+    private NumberBox fAmtTo;
     
-    private WSearchEditor editorBPartner;
-    private WSearchEditor editorOrder;
+    private WSearchEditor fBPartner_ID;
+    private WSearchEditor fOrder_ID;
     
-    private Checkbox isSoTrx;
-    private Checkbox isPaid;
-	private Borderlayout layout;
-	private Vbox southBody;
-    
-    /**  Array of Column Info    */
-    private static final ColumnInfo[] s_invoiceLayout = {
-        new ColumnInfo(" ", "i.C_Invoice_ID", IDColumn.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "C_BPartner_ID"), "(SELECT Name FROM C_BPartner bp WHERE bp.C_BPartner_ID=i.C_BPartner_ID)", String.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "DateInvoiced"), "i.DateInvoiced", Timestamp.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "DueDate"), "i.DueDate", Timestamp.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "DocumentNo"), "i.DocumentNo", String.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "C_Currency_ID"), "(SELECT ISO_Code FROM C_Currency c WHERE c.C_Currency_ID=i.C_Currency_ID)", String.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "GrandTotal"), "i.GrandTotal",  BigDecimal.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "ConvertedAmount"), "currencyBase(i.GrandTotal, i.C_Currency_ID, i.DateAcct, i.AD_Client_ID, i.AD_Org_ID)", BigDecimal.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "OpenAmt"), "invoiceOpen(C_Invoice_ID,C_InvoicePaySchedule_ID)", BigDecimal.class, true, true, null),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "IsPaid"), "i.IsPaid", Boolean.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "IsSOTrx"), "i.IsSOTrx", Boolean.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "Description"), "i.Description", String.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "POReference"), "i.POReference", String.class),
-        new ColumnInfo("", "''", KeyNamePair.class, "i.C_InvoicePaySchedule_ID")
+    private Checkbox fIsSOTrx;
+    private Checkbox fIsPaid;
+
+	private WListbox scheduleTbl = null;
+	private String m_sqlSchedule;
+
+	private int 				m_C_Invoice_ID = 0;
+
+	/** From Clause             */
+	private static String s_From = " C_Invoice i";
+	/** Order Clause             */
+	private static String s_Order = "2,3";
+
+   /**  Array of Column Info    */
+    private static final ColumnInfo[] s_Layout = {
+		new ColumnInfo(" ", "i.C_Invoice_ID", IDColumn.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "C_BPartner_ID"), "(SELECT Name FROM C_BPartner bp WHERE bp.C_BPartner_ID=i.C_BPartner_ID)", String.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "DateInvoiced"), "i.DateInvoiced", Timestamp.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "DocumentNo"), "i.DocumentNo", String.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "C_Currency_ID"), "(SELECT ISO_Code FROM C_Currency c WHERE c.C_Currency_ID=i.C_Currency_ID)", String.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "GrandTotal"), "i.GrandTotal",  BigDecimal.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "ConvertedAmount"), "currencyBase(i.GrandTotal, i.C_Currency_ID, i.DateAcct, i.AD_Client_ID, i.AD_Org_ID)", BigDecimal.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "OpenAmt"), "invoiceOpen(C_Invoice_ID,0)", BigDecimal.class, true, true, null),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "C_PaymentTerm_ID"), "(SELECT pt.Name FROM C_PaymentTerm pt WHERE pt.C_PaymentTerm_ID = i.C_PaymentTerm_ID)", String.class),		
+		new ColumnInfo(Msg.translate(Env.getCtx(), "IsPaid"), "i.IsPaid", Boolean.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "IsSOTrx"), "i.IsSOTrx", Boolean.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "Description"), "i.Description", String.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "POReference"), "i.POReference", String.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "DocStatus"), "i.docstatus", String.class),
     };
-    
-    private static int INDEX_PAYSCHEDULE = s_invoiceLayout.length - 1;  //  last item
-   
+
+	//  Invoice payment schedule info
+	/** From Clause             */
+	private static String s_subFrom = " C_Invoice_v i";
+    /** Where Clause						*/
+    private static String s_subWhere = "i.C_Invoice_ID = ?";
+	/**  Array of Column Info    */
+    private static ColumnInfo[] s_subLayout = new ColumnInfo[] {
+		new ColumnInfo(" ", "i.C_InvoicePaySchedule_ID", IDColumn.class),
+		new ColumnInfo(Msg.getMsg(Env.getCtx(), "Payment #"), "(SELECT ((SELECT COUNT(C_Invoice_ID) AS payno"
+				+			   " FROM C_Invoice_V"
+				+			   " WHERE C_Invoice_ID = civ.C_Invoice_ID"
+				+			   " AND duedate <= civ.duedate"
+				+			   " GROUP BY C_Invoice_ID) || ' / ' ||"
+				+			   " (SELECT COUNT(C_Invoice_ID) as numpmts"
+				+			   " FROM C_Invoice_V"
+				+			   " WHERE C_Invoice_ID = civ.C_Invoice_ID"
+				+			   " GROUP BY C_Invoice_ID)) as numpaymts"
+				+			   " FROM C_Invoice_v civ WHERE i.C_Invoice_ID=civ.C_Invoice_ID"
+				+														" AND (i.C_InvoicePaySchedule_ID IS NULL"
+				+														" OR i.C_InvoicePaySchedule_ID = civ.C_InvoicePaySchedule_ID))", String.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "DueDate"), "i.DueDate", Timestamp.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "C_Currency_ID"), "(SELECT ISO_Code FROM C_Currency c WHERE c.C_Currency_ID=i.C_Currency_ID)", String.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "GrandTotal"), "i.GrandTotal",  BigDecimal.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "ConvertedAmount"), "currencyBase(i.GrandTotal, i.C_Currency_ID, i.DateAcct, i.AD_Client_ID, i.AD_Org_ID)", BigDecimal.class),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "OpenAmt"), "invoiceOpen(C_Invoice_ID,C_InvoicePaySchedule_ID)", BigDecimal.class, true, true, null),
+		new ColumnInfo(Msg.translate(Env.getCtx(), "IsPaid"), "CASE WHEN invoiceOpen(C_Invoice_ID,C_InvoicePaySchedule_ID) <= 0 THEN 'Y' ELSE 'N' END", Boolean.class)
+	};
+
     private void initComponents()
     {
         lblDocumentNo = new Label(Util.cleanAmp(Msg.translate(Env.getCtx(), "DocumentNo")));
         lblDescription = new Label(Msg.translate(Env.getCtx(), "Description"));
         lblDateInvoiced = new Label(Msg.translate(Env.getCtx(), "DateInvoiced"));
         lblGrandTotal = new Label(Msg.translate(Env.getCtx(), "GrandTotal"));
-        
-        txtDocumentNo = new Textbox();
-        txtDescription = new Textbox();
-        
-        dateFrom = new Datebox();
-        dateTo= new Datebox();
-        
-        amountFrom = new NumberBox(false);
-        amountTo = new NumberBox(false);
-        
-        isPaid = new Checkbox();
-        isPaid.setLabel(Msg.translate(Env.getCtx(), "IsPaid"));
-        isPaid.setChecked(false);
-        isSoTrx = new Checkbox();
-        isSoTrx.setLabel(Msg.translate(Env.getCtx(), "IsSOTrx"));
-        isSoTrx.setChecked(!"N".equals(Env.getContext(Env.getCtx(), p_WindowNo, "IsSOTrx")));
-        MLookup lookupBP = MLookupFactory.get(Env.getCtx(), p_WindowNo,
-                0, 3499, DisplayType.Search);
-        editorBPartner = new WSearchEditor(lookupBP, Msg.translate(
-                Env.getCtx(), "C_BPartner_ID"), "", false, false, true);
-        editorBPartner.addValueChangeListener(this);
-        
-        MLookup lookupOrder = MLookupFactory.get(Env.getCtx(), p_WindowNo,
-                0, 4247, DisplayType.Search);
-        editorOrder = new WSearchEditor(lookupOrder, Msg.translate(
-                Env.getCtx(), "C_Order_ID"), "", false, false, true);
-        editorOrder.addValueChangeListener(this);
+        //
+        fDocumentNo = new Textbox();
+        fDocumentNo.addEventListener(Events.ON_CHANGE, this);
+        fDocumentNo.setAttribute("zk_component_ID", "Lookup_Criteria_DocumentNo");
+        fDescription = new Textbox();
+        fDescription.addEventListener(Events.ON_CHANGE, this);
+        fDescription.setAttribute("zk_component_ID", "Lookup_Criteria_Description");
+		// 	Format the dates and number boxes
+        fDateFrom = new Datebox();
+        fDateTo = new Datebox();
+		fDateFrom.setWidth("97px");
+		fDateTo.setWidth("97px");
+		//
+		fDateFrom.setAttribute("zk_component_ID", "Lookup_Criteria_DateFrom");
+		fDateFrom.addEventListener(Events.ON_CHANGE, this);
+		fDateTo.setAttribute("zk_component_ID", "Lookup_Criteria_DateTo");
+		fDateTo.addEventListener(Events.ON_CHANGE, this);
+		//
+		SimpleDateFormat dateFormat = DisplayType.getDateFormat(DisplayType.Date, AEnv.getLanguage(Env.getCtx()));
+		fDateFrom.setFormat(dateFormat.toPattern());
+		fDateTo.setFormat(dateFormat.toPattern());
+		//
+		DecimalFormat format = DisplayType.getNumberFormat(DisplayType.Amount, AEnv.getLanguage(Env.getCtx()));
+		fAmtFrom = new NumberBox(false);
+		fAmtFrom.getDecimalbox().setWidth("90px");
+		fAmtFrom.getDecimalbox().setFormat(format.toPattern());
+		fAmtFrom.getDecimalbox().setStyle("text-align:right; " + fAmtFrom.getDecimalbox().getStyle());
+		fAmtFrom.setAttribute("zk_component_ID", "Lookup_Criteria_AmtFrom");
+		fAmtFrom.addEventListener(Events.ON_CHANGE, this);
+		fAmtTo = new NumberBox(false);
+		fAmtTo.getDecimalbox().setWidth("90px");
+		fAmtTo.getDecimalbox().setFormat(format.toPattern());
+		fAmtTo.getDecimalbox().setStyle("text-align:right; " + fAmtTo.getDecimalbox().getStyle());
+		fAmtTo.setAttribute("zk_component_ID", "Lookup_Criteria_AmtTo");
+		fAmtTo.addEventListener(Events.ON_CHANGE, this);		
+        //
+        fIsPaid = new Checkbox();
+        fIsPaid.setLabel(Msg.translate(Env.getCtx(), "IsPaid"));
+        fIsPaid.setAttribute("zk_component_ID", "Lookup_Criteria_IsPaid");
+        fIsPaid.addActionListener(this);
+        //
+        fIsSOTrx = new Checkbox();
+        fIsSOTrx.setLabel(Msg.translate(Env.getCtx(), "IsSOTrx"));
+        fIsSOTrx.setAttribute("zk_component_ID", "Lookup_Criteria_IsSoTrx");
+        fIsSOTrx.addActionListener(this);
+        //
+		fBPartner_ID = new WSearchEditor(
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0,  
+						MColumn.getColumn_ID(MInvoice.Table_Name, MInvoice.COLUMNNAME_C_BPartner_ID),
+						DisplayType.Search),  
+				Msg.translate(Env.getCtx(), "C_BPartner_ID"), "", false, false, true);
+		fBPartner_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_C_BPartner_ID");
+		fBPartner_ID.addValueChangeListener(this);
+        //
+        fOrder_ID = new WSearchEditor(
+        		MLookupFactory.get(Env.getCtx(), p_WindowNo,0, 
+        				MColumn.getColumn_ID(MInvoice.Table_Name, MInvoice.COLUMNNAME_C_Order_ID), 
+        				DisplayType.Search), 
+                Msg.translate(Env.getCtx(), "C_Order_ID"), "", false, false, true);
+        fOrder_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_C_Order_ID");
+        fOrder_ID.addValueChangeListener(this);
     }
     
-    private void init()
+    private void statInit()
     {
-    	txtDocumentNo.setWidth("100%");
-    	txtDescription.setWidth("100%");
-    	dateFrom.setWidth("165px");
-		dateTo.setWidth("165px");
-		amountFrom.getDecimalbox().setWidth("155px");
-		amountTo.getDecimalbox().setWidth("155px");
+    	initComponents();
     	
-        Grid grid = GridFactory.newGridLayout();
-		
+    	fDocumentNo.setWidth("100%");
+    	fDescription.setWidth("100%");
+    	fDateFrom.setWidth("165px");
+		fDateTo.setWidth("165px");
+		fAmtFrom.getDecimalbox().setWidth("155px");
+		fAmtTo.getDecimalbox().setWidth("155px");
+    			
 		Rows rows = new Rows();
-		grid.appendChild(rows);
 		
 		Row row = new Row();
 		rows.appendChild(row);
 		row.appendChild(lblDocumentNo.rightAlign());
-		row.appendChild(txtDocumentNo);
-		row.appendChild(editorBPartner.getLabel().rightAlign());
-		row.appendChild(editorBPartner.getComponent());
-		row.appendChild(isSoTrx);
-		row.appendChild(isPaid);
+		row.appendChild(fDocumentNo);
+		row.appendChild(fBPartner_ID.getLabel().rightAlign());
+		row.appendChild(fBPartner_ID.getComponent());
+		row.appendChild(fIsSOTrx);
+		row.appendChild(fIsPaid);
 		
 		row = new Row();
 		row.setSpans("1, 1, 1, 3");
 		rows.appendChild(row);
 		row.appendChild(lblDescription.rightAlign());
-		row.appendChild(txtDescription);
+		row.appendChild(fDescription);
 		row.appendChild(lblDateInvoiced.rightAlign());
 		Hbox hbox = new Hbox();
-		hbox.appendChild(dateFrom);
+		hbox.appendChild(fDateFrom);
 		hbox.appendChild(new Label("-"));
-		hbox.appendChild(dateTo);
+		hbox.appendChild(fDateTo);
 		row.appendChild(hbox);
 		
 		row = new Row();
 		row.setSpans("1, 1, 1, 3");
 		rows.appendChild(row);
-		row.appendChild(editorOrder.getLabel().rightAlign());
-		row.appendChild(editorOrder.getComponent());
+		row.appendChild(fOrder_ID.getLabel().rightAlign());
+		row.appendChild(fOrder_ID.getComponent());
 		row.appendChild(lblGrandTotal.rightAlign());
 		hbox = new Hbox();
-		hbox.appendChild(amountFrom);
+		hbox.appendChild(fAmtFrom);
 		hbox.appendChild(new Label("-"));
-		hbox.appendChild(amountTo);
+		hbox.appendChild(fAmtTo);
 		row.appendChild(hbox);
+
+		p_criteriaGrid.appendChild(rows);
 		
-		layout = new Borderlayout();
-        layout.setWidth("100%");
-        layout.setHeight("100%");
-        if (!isLookup())
-        {
-        	layout.setStyle("position: absolute");
-        }
-        this.appendChild(layout);
+		scheduleTbl = new WListbox();
+		m_sqlSchedule = scheduleTbl.prepareTable(s_subLayout, s_subFrom, s_subWhere, false, "i");
+		scheduleTbl.setMultiSelection(false);
+		scheduleTbl.autoSize();
+		scheduleTbl.setAttribute("zk_component_ID", "Lookup_Data_Schedule");
+		scheduleTbl.setShowTotals(true);
 
-        North north = new North();
-        layout.appendChild(north);
-		north.appendChild(grid);
+		p_centerSouth.appendChild(scheduleTbl);
+		p_centerSouth.setTitle(Msg.translate(Env.getCtx(), "C_InvoicePaySchedule_ID"));
+		p_centerSouth.setTooltiptext(Msg.translate(Env.getCtx(), "C_InvoicePaySchedule_ID"));
 
-        Center center = new Center();
-		layout.appendChild(center);
-		center.setFlex(true);
-		Div div = new Div();
-		div.appendChild(contentPanel);
-		if (isLookup())
-			contentPanel.setWidth("99%");
-        else
-        	contentPanel.setStyle("width: 99%; margin: 0px auto;");
-        contentPanel.setVflex(true);
-		div.setStyle("width :100%; height: 100%");
-		center.appendChild(div);
-        
-		South south = new South();
-		layout.appendChild(south);
-		southBody = new Vbox();
-		southBody.setWidth("100%");
-		south.appendChild(southBody);
-		southBody.appendChild(confirmPanel);
-		southBody.appendChild(new Separator());
-		southBody.appendChild(statusBar);
+		super.setSizes();
+    }
+    
+    protected void initInfo()
+    {
+    	initInfo(0,"");
     }
     
     /**
      *  General Init
-     *  @return true, if success
      */
-    private boolean initInfo ()
+    private void initInfo (int record_id, String value)
     {
-        //  Set Defaults
-        String bp = Env.getContext(Env.getCtx(), p_WindowNo, "C_BPartner_ID");
-        if (bp != null && bp.length() != 0)
-            editorBPartner.setValue(new Integer(bp));
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
 
-        //  prepare table
-        StringBuffer where = new StringBuffer("i.IsActive='Y'");
-        if (p_whereClause.length() > 0)
-            where.append(" AND ").append(Util.replace(p_whereClause, "C_Invoice.", "i."));
-        prepareTable(s_invoiceLayout,
-            " C_Invoice_v i",   //  corrected for CM
-            where.toString(),
-            "2,3,4,5");
-        //
-        return true;
-           
+		//  Set values
+        if (!(record_id == 0))  // A record is defined
+        {
+        	fieldID = record_id;
+        	
+        	// Have to set isPaid and isSOTrx to match or the query will return no results
+			String trxName = Trx.createTrxName();
+			MInvoice mi = new MInvoice(Env.getCtx(),record_id,trxName);
+        	fIsPaid.setSelected(mi.isPaid());
+        	fIsSOTrx.setSelected(mi.isSOTrx());
+        	mi = null;
+        	Trx.get(trxName, false).close();
+        }
+        else  // Try to find other criteria in the context
+        {
+			String id;
+			
+			//  C_BPartner_ID
+			id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BPartner_ID", true);
+			if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				fBPartner_ID.setValue(new Integer(id));
+			
+			//  C_Order_ID
+			id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Order_ID", true);
+			if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				fOrder_ID.setValue(new Integer(id));
+
+			//  IsSOTrx - Window context
+			id = Env.getContext(Env.getCtx(), p_WindowNo, "IsSOTrx", true);
+			if (id != null && id.length() != 0 && (id == "Y" || id == "N"))
+			{
+				fIsSOTrx.setSelected(id == "Y");
+			}
+			
+			//  The value passed in from the field
+			if (value != null && value.length() > 0)
+			{
+				fDocumentNo.setValue(value);			
+			}
+			else
+			{
+				//  C_Invoice_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Invoice_ID", true);
+				if (id != null && id.length() != 0  && (new Integer(id).intValue() > 0))
+				{
+					fieldID = new Integer(id).intValue();
+					
+		        	// Have to set isPaid and isSOTrx to match or the query will return no results
+					String trxName = Trx.createTrxName();
+					MInvoice mi = new MInvoice(Env.getCtx(),record_id,trxName);
+		        	fIsPaid.setSelected(mi.isPaid());
+		        	fIsSOTrx.setSelected(mi.isSOTrx());
+		        	mi = null;
+		        	Trx.get(trxName, false).close();
+				}				
+			}
+        }
     }   //  initInfo
-    @Override
-    public String getSQLWhere()
-    {
-        StringBuffer sql = new StringBuffer();
-        if (txtDocumentNo.getText().length() > 0)
-            sql.append(" AND UPPER(i.DocumentNo) LIKE ?");
-        if (txtDescription.getText().length() > 0)
-            sql.append(" AND UPPER(i.Description) LIKE ?");
-        //
-        if (editorBPartner.getValue() != null)
-            sql.append(" AND i.C_BPartner_ID=?");
-        //
-        if (editorOrder.getValue() != null)
-            sql.append(" AND i.C_Order_ID=?");
-        Date fromDate = null;
-        Date toDate = null;
-        try
-        {
-            fromDate = dateFrom.getValue();
-        }
-        catch (WrongValueException e)
-        {
-            
-        }
-        try
-        {
-            toDate = dateTo.getValue();
-        }
-        catch (WrongValueException e)
-        {
-            
-        }
-        if (fromDate == null && toDate != null)
-        {
-            sql.append(" AND TRUNC(i.DateInvoiced, 'DD') <= ?");
-        }
-        else if (fromDate != null && toDate == null)
-        {
-            sql.append(" AND TRUNC(i.DateInvoiced, 'DD') >= ?");
-        }
-        else if (fromDate != null && toDate != null)
-        {
-                sql.append(" AND TRUNC(i.DateInvoiced, 'DD') BETWEEN ? AND ?");
-        }
-        //
-        Double fromAmount = null;
-        Double toAmount = null;
-        if (!Util.isEmpty(amountFrom.getText()))
-        {
-            try
-            {
-                fromAmount = Double.parseDouble(amountFrom.getText());
-            }
-            catch (NumberFormatException e)
-            {
-                
-            }
-        }
-        if (!Util.isEmpty(amountTo.getText()))
-        {
-            try
-            {
-                toAmount = Double.parseDouble(amountTo.getText());
-            }
-            catch (NumberFormatException e)
-            {
-                
-            }
-        }
-        if (fromAmount == null && toAmount != null)
-        {
-            sql.append(" AND i.GrandTotal <= ?");
-        }
-        else if (fromAmount != null && toAmount == null)
-        {
-            sql.append(" AND i.GrandTotal >= ?");
-        }
-        else if (fromAmount != null && toAmount != null)
-        {
-              sql.append(" AND i.GrandTotal BETWEEN ? AND ?");
-        }
-        sql.append(" AND i.IsPaid=? AND i.IsSOTrx=?");
 
-        log.finer(sql.toString());
-        return sql.toString();
-    }
+	/**************************************************************************
+	 *	Construct SQL Where Clause and define parameters.
+	 *  (setParameters needs to set parameters)
+	 *  Includes first AND
+	 *  @return sql
+	 */
+	protected String getSQLWhere()
+	{
+		StringBuffer sql = new StringBuffer();
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if(!(fieldID == 0))
+			sql.append(" AND i.C_Invoice_ID = ?");
+		//
+		if (isValidSQLText(fDocumentNo))
+			sql.append(" AND UPPER(i.DocumentNo) LIKE ?");
+		//
+		if (isValidSQLText(fDescription))
+			sql.append(" AND UPPER(i.Description) LIKE ?");
+		//
+		if (fBPartner_ID.getValue() != null)
+			sql.append(" AND i.C_BPartner_ID=?");
+		//
+		if (fOrder_ID.getValue() != null)
+			sql.append(" AND i.C_Order_ID=?");
+		//
+		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
+		{
+			Timestamp from = null;
+			Timestamp to = null;
+			//
+			if (fDateFrom.getValue() != null)
+				from = new Timestamp(fDateFrom.getValue().getTime());
+			if (fDateTo.getValue() != null)
+				to = new Timestamp(fDateTo.getValue().getTime());
+			//
+			log.fine("Date From=" + from + ", To=" + to);
+			//
+			if (from == null && to != null)
+				sql.append(" AND TRUNC(i.DateInvoiced, 'DD') <= ?");
+			else if (from != null && to == null)
+				sql.append(" AND TRUNC(i.DateInvoiced, 'DD') >= ?");
+			else if (from != null && to != null)
+				sql.append(" AND TRUNC(i.DateInvoiced, 'DD') BETWEEN ? AND ?");
+		}
+		//
+		if (fAmtFrom.getValue() != null || fAmtTo.getValue() != null)
+		{
+			BigDecimal from = (BigDecimal)fAmtFrom.getValue();
+			BigDecimal to = (BigDecimal)fAmtTo.getValue();
+			if (from == null && to != null)
+				sql.append(" AND i.GrandTotal <= ?");
+			else if (from != null && to == null)
+				sql.append(" AND i.GrandTotal >= ?");
+			else if (from != null && to != null)
+				sql.append(" AND i.GrandTotal BETWEEN ? AND ?");
+		}
+		//
+		sql.append(" AND i.IsPaid=? AND i.IsSOTrx=?");
 
-    @Override
-    protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
-    {
-        int index = 1;
-        if (txtDocumentNo.getText().length() > 0)
-            pstmt.setString(index++, getSQLText(txtDocumentNo));
-        if (txtDescription.getText().length() > 0)
-            pstmt.setString(index++, getSQLText(txtDescription));
-        
-        //
-        if (editorBPartner.getValue() != null)
-        {
-            Integer bp = (Integer)editorBPartner.getValue();
-            pstmt.setInt(index++, bp.intValue());
-            log.fine("BPartner=" + bp);
-        }
-        //
-        if (editorOrder.getValue() != null)
-        {
-            Integer order = (Integer)editorOrder.getValue();
-            pstmt.setInt(index++, order.intValue());
-            log.fine("Order=" + order);
-        }
-        Date fromD = null;
-        Date toD = null;
-        Timestamp from = null;
-        Timestamp to = null;
-        try
-        {
-            if (dateFrom.getValue() != null)
-            {
-                fromD = dateFrom.getValue();
-                from = new Timestamp(fromD.getTime());
-            }
-        }
-        catch (WrongValueException e)
-        {
-            
-        }
-        try
-        {
-            if (dateTo.getValue() != null)
-            {
-                toD = dateTo.getValue();
-                to = new Timestamp(toD.getTime());
-            }
-        }
-        catch (WrongValueException e)
-        {
-            
-        }
-        
-        log.fine("Date From=" + from + ", To=" + to);
-        if (from == null && to != null)
-        {
-            pstmt.setTimestamp(index++, to);
-        }
-        else if (from != null && to == null)
-        {
-            pstmt.setTimestamp(index++, from);
-        }
-        else if (from != null && to != null)
-        {
-            pstmt.setTimestamp(index++, from);
-            pstmt.setTimestamp(index++, to);
-        }
-    
-    //
-        BigDecimal fromBD = null;
-        BigDecimal toBD = null;
-        Double fromAmt = null;
-        Double toAmt = null;
-        
-        if (!Util.isEmpty(amountFrom.getText()))
-        {
-            try
-            {
-                fromAmt = Double.parseDouble(amountFrom.getText());
-                fromBD = BigDecimal.valueOf(fromAmt);
-            }
-            catch (Exception e)
-            {
-                
-            }
-        }
-        
-        if (!Util.isEmpty(amountTo.getText()))
-        {
-            try
-            {
-                toAmt = Double.parseDouble(amountTo.getText());
-                toBD = BigDecimal.valueOf(toAmt);
-            }
-            catch (Exception e)
-            {
-                
-            }
-        }
-        
-        if (fromBD == null && toBD != null)
-        {
-            pstmt.setBigDecimal(index++, toBD);
-        }
-        else if (fromBD != null && toBD == null)
-        {
-            pstmt.setBigDecimal(index++, fromBD);
-        }
-        else if (fromBD != null && toBD != null)
-        {
-              pstmt.setBigDecimal(index++, fromBD);
-              pstmt.setBigDecimal(index++, toBD);
-        }
-        pstmt.setString(index++,isPaid.isChecked() ? "Y" : "N");
-        pstmt.setString(index++,isSoTrx.isChecked() ? "Y" : "N");
-       
-    }
+	//	log.fine( "InfoInvoice.setWhereClause", sql.toString());
+		return sql.toString();
+	}	//	getSQLWhere
 
-    /**
-     *  Get SQL WHERE parameter
-     *  @param f field
-     *  @return sql
-     */
-    private String getSQLText (Textbox f)
-    {
-        String s = f.getText().toUpperCase();
-        if (!s.endsWith("%"))
-            s += "%";
-        log.fine("String=" + s);
-        return s;
-    }   //  getSQLText
-    
+	/**
+	 *  Set Parameters for Query.
+	 *  (as defined in getSQLWhere)
+	 *  @param pstmt statement
+	 *  @param forCount for counting records
+	 *  @throws SQLException
+	 */
+	protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
+	{
+		int index = 1;
+		//  => ID
+		if (!(fieldID == 0))
+			pstmt.setInt(index++, fieldID);
+		if (isValidSQLText(fDocumentNo))
+			pstmt.setString(index++, getSQLText(fDocumentNo));
+		if (isValidSQLText(fDescription))
+			pstmt.setString(index++, getSQLText(fDescription));
+		//
+		if (fBPartner_ID.getValue() != null)
+		{
+			Integer bp = (Integer)fBPartner_ID.getValue();
+			pstmt.setInt(index++, bp.intValue());
+			log.fine("BPartner=" + bp);
+		}
+		//
+		if (fOrder_ID.getValue() != null)
+		{
+			Integer order = (Integer)fOrder_ID.getValue();
+			pstmt.setInt(index++, order.intValue());
+			log.fine("Order=" + order);
+		}
+		//
+		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
+		{
+			Timestamp from = null;
+			Timestamp to = null;
+			//
+			if (fDateFrom.getValue() != null)
+				from = new Timestamp(fDateFrom.getValue().getTime());
+			if (fDateTo.getValue() != null)
+				to = new Timestamp(fDateTo.getValue().getTime());
+			//
+			log.fine("Date From=" + from + ", To=" + to);
+			//
+			if (from == null && to != null)
+				pstmt.setTimestamp(index++, to);
+			else if (from != null && to == null)
+				pstmt.setTimestamp(index++, from);
+			else if (from != null && to != null)
+			{
+				pstmt.setTimestamp(index++, from);
+				pstmt.setTimestamp(index++, to);
+			}
+		}
+		//
+		if (fAmtFrom.getValue() != null || fAmtTo.getValue() != null)
+		{
+			BigDecimal from = (BigDecimal)fAmtFrom.getValue();
+			BigDecimal to = (BigDecimal)fAmtTo.getValue();
+			log.fine("Amt From=" + from + ", To=" + to);
+			if (from == null && to != null)
+				pstmt.setBigDecimal(index++, to);
+			else if (from != null && to == null)
+				pstmt.setBigDecimal(index++, from);
+			else if (from != null && to != null)
+			{
+				pstmt.setBigDecimal(index++, from);
+				pstmt.setBigDecimal(index++, to);
+			}
+		}
+			pstmt.setString(index++, fIsPaid.isSelected() ? "Y" : "N");
+			pstmt.setString(index++, fIsSOTrx.isSelected() ? "Y" : "N");
+	}   //  setParameters
+
+	/**
+	 * A record was selected - take action to sync subordinate tables if any
+	 */
+	protected void recordSelected(int key)
+	{
+		//  Found and selected the same record or selected the first record
+    	if (m_C_Invoice_ID != key)
+    	{
+    		refresh();
+    	}
+       	p_centerSouth.setOpen(p_table.getSelectedCount()>0);
+		return;
+	}
+	/**
+	 * No record was selected - take action to sync subordinate tables if any
+	 */
+	protected void noRecordSelected()
+	{
+		//  Nothing was selected, or the query is empty
+		//  - close the panel
+		m_C_Invoice_ID = 0;
+		p_centerLayout.getSouth().setOpen(false);
+		return;
+	}
+
+	/**
+	 * 	Refresh Query
+	 */
+	protected void refresh()
+	{
+    	String sql;
+		PreparedStatement pstmt = null;
+		ResultSet rs = null;
+
+		int leadRowKey = p_table.getLeadRowKey();
+		
+    	if (m_C_Invoice_ID != leadRowKey)
+		{
+    		m_C_Invoice_ID = leadRowKey;
+    		
+    		//  Payment Schedule table
+			sql = m_sqlSchedule;
+	
+			log.finest(sql);
+			try
+			{
+				pstmt = DB.prepareStatement(sql, null);
+				pstmt.setInt(1, m_C_Invoice_ID);
+				rs = pstmt.executeQuery();
+				scheduleTbl.loadTable(rs);
+				rs.close();
+			}
+			catch (Exception e)
+			{
+				log.log(Level.WARNING, sql, e);
+			}
+			finally
+			{
+				DB.close(rs, pstmt);
+				rs = null; pstmt = null;
+			}
+		}			
+	}	//	refresh
+
     // Elaine 2008/12/16
 	/**
 	 *	Zoom
@@ -533,7 +619,7 @@
 		MQuery query = new MQuery("C_Invoice");
 		query.addRestriction("C_Invoice_ID", MQuery.EQUAL, C_Invoice_ID);
 		query.setRecordCount(1);
-		int AD_WindowNo = getAD_Window_ID("C_Invoice", isSoTrx.isSelected());
+		int AD_WindowNo = getAD_Window_ID("C_Invoice", fIsSOTrx.isSelected());
 		AEnv.zoom (AD_WindowNo, query);
 	}	//	zoom
 
@@ -547,22 +633,6 @@
 	}	//	hasZoom
 	//
     
-    public void tableChanged(WTableModelEvent event)
-    {
-        
-    }
-    public void valueChange(ValueChangeEvent evt)
-    {
-        if (editorBPartner.equals(evt.getSource()))
-        {
-            editorBPartner.setValue(evt.getNewValue());
-        }
-        if (editorOrder.equals(evt.getSource()))
-        {
-            editorOrder.setValue(evt.getNewValue());
-        }
-    }
-
 	@Override
 	protected void saveSelectionDetail()
 	{
@@ -570,24 +640,12 @@
 		Integer ID = getSelectedRowKey();
 		Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "C_Invoice_ID", ID == null ? "0" : ID.toString());
 		//
-		int C_InvoicePaySchedule_ID = 0;
-		int row = contentPanel.getSelectedRow();
-		if (row >= 0)
-		{
-			Object value = contentPanel.getValueAt(row, INDEX_PAYSCHEDULE);
-			if (value != null && value instanceof KeyNamePair)
-				C_InvoicePaySchedule_ID = ((KeyNamePair)value).getKey();
-		}
-		if (C_InvoicePaySchedule_ID <= 0)	//	not selected
+		Integer C_InvoicePaySchedule_ID = scheduleTbl.getSelectedRowKey();
+		if (C_InvoicePaySchedule_ID == null || C_InvoicePaySchedule_ID.intValue() <= 0)	//	not selected
 			Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "C_InvoicePaySchedule_ID", "0");
 		else
-			Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "C_InvoicePaySchedule_ID", String.valueOf(C_InvoicePaySchedule_ID));
-	}
-
-	@Override
-	protected void insertPagingComponent()
-	{
-		southBody.insertBefore(paging, southBody.getFirstChild());
-		layout.invalidate();
+		{
+			Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "C_InvoicePaySchedule_ID", C_InvoicePaySchedule_ID.toString());
+		}
 	}
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoOrderPanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoOrderPanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoOrderPanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -21,41 +21,35 @@
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 import java.sql.Timestamp;
-import java.util.Date;
+import java.text.DecimalFormat;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
 
 import org.adempiere.webui.apps.AEnv;
 import org.adempiere.webui.component.Checkbox;
 import org.adempiere.webui.component.Datebox;
-import org.adempiere.webui.component.Grid;
-import org.adempiere.webui.component.GridFactory;
 import org.adempiere.webui.component.Label;
 import org.adempiere.webui.component.NumberBox;
 import org.adempiere.webui.component.Row;
 import org.adempiere.webui.component.Rows;
 import org.adempiere.webui.component.Textbox;
 import org.adempiere.webui.editor.WSearchEditor;
-import org.adempiere.webui.event.ValueChangeEvent;
 import org.adempiere.webui.event.ValueChangeListener;
-import org.adempiere.webui.event.WTableModelEvent;
 import org.compiere.apps.search.Info_Column;
-import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
-import org.compiere.model.MLookup;
+import org.compiere.model.MColumn;
 import org.compiere.model.MLookupFactory;
+import org.compiere.model.MOrder;
 import org.compiere.model.MQuery;
 import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
 import org.compiere.util.Msg;
+import org.compiere.util.Trx;
 import org.compiere.util.Util;
-import org.zkoss.zk.ui.WrongValueException;
-import org.zkoss.zkex.zul.Borderlayout;
-import org.zkoss.zkex.zul.Center;
-import org.zkoss.zkex.zul.North;
-import org.zkoss.zkex.zul.South;
-import org.zkoss.zul.Div;
+import org.zkoss.zk.ui.Component;
+import org.zkoss.zk.ui.event.Event;
+import org.zkoss.zk.ui.event.Events;
 import org.zkoss.zul.Hbox;
-import org.zkoss.zul.Separator;
-import org.zkoss.zul.Vbox;
 
 /**
  * Search Order info and return selection
@@ -67,88 +61,82 @@
  * Zk Port
  * @author Elaine
  * @version	InfoOrder.java Adempiere Swing UI 3.4.1
- **/
+ *
+ * @author Michael McKay, ADEMPIERE-72 VLookup and Info Window improvements
+ * 	<li>https://adempiere.atlassian.net/browse/ADEMPIERE-72
+*/
 public class InfoOrderPanel extends InfoPanel implements ValueChangeListener
 {
     /**
 	 * 
 	 */
 	private static final long serialVersionUID = 8725276769956103867L;
+
+	private int fieldID = 0;
+	
 	private Label lblDocumentNo;
     private Label lblDescription;
     private Label lblDateOrdered;
     private Label lblOrderRef;
     private Label lblGrandTotal;
     
-    private Textbox txtDocumentNo;
-    private Textbox txtDescription;
-    private Textbox txtOrderRef;
+    private Textbox fDocumentNo;
+    private Textbox fDescription;
+    private Textbox fPOReference;
     
-    private Datebox dateFrom;
-    private Datebox dateTo;
+    private Datebox fDateFrom;
+    private Datebox fDateTo;
     
-    private NumberBox amountFrom;
-    private NumberBox amountTo;
+    private NumberBox fAmtFrom;
+    private NumberBox fAmtTo;
     
-    private WSearchEditor editorBPartner;
+    private WSearchEditor fBPartner_ID;
     
-    private Checkbox isSoTrx;
-    private Checkbox isDelivered;
-	private Borderlayout layout;
-	private Vbox southBody;
+    private Checkbox fIsSOTrx;
+    private Checkbox fIsDelivered;
    
-    /**  Array of Column Info    */
-    private static final ColumnInfo[] s_invoiceLayout = {
-        new ColumnInfo(" ", "o.C_Order_ID", IDColumn.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "C_BPartner_ID"), "(SELECT Name FROM C_BPartner bp WHERE bp.C_BPartner_ID=o.C_BPartner_ID)", String.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "DateOrdered"), "o.DateOrdered", Timestamp.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "DocumentNo"), "o.DocumentNo", String.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "C_Currency_ID"), "(SELECT ISO_Code FROM C_Currency c WHERE c.C_Currency_ID=o.C_Currency_ID)", String.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "GrandTotal"), "o.GrandTotal",  BigDecimal.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "ConvertedAmount"), "currencyBase(o.GrandTotal,o.C_Currency_ID,o.DateAcct, o.AD_Client_ID,o.AD_Org_ID)", BigDecimal.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "IsSOTrx"), "o.IsSOTrx", Boolean.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "Description"), "o.Description", String.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "POReference"), "o.POReference", String.class),
-        new ColumnInfo(Msg.translate(Env.getCtx(), "IsDelivered"), "o.IsDelivered", Boolean.class),
-    };
+	/** From Clause             */
+	private static String s_From = " C_Order o";
+	/** Order Clause             */
+	private static String s_Order = "2,3,4";
+	/**  Array of Column Info    */
+	private static Info_Column[] s_Layout = null;
+
     
-    protected InfoOrderPanel(int WindowNo, String value,
+    protected InfoOrderPanel(int WindowNo, int record_id, String value,
             boolean multiSelection, String whereClause)
     {
-    	this(WindowNo, value, multiSelection, whereClause, true);
+    	this(WindowNo, true, record_id, value, multiSelection, true, whereClause);
     }
 
-    protected InfoOrderPanel(int WindowNo, String value,
-            boolean multiSelection, String whereClause, boolean lookup)
+    protected InfoOrderPanel(int WindowNo, boolean modal, int record_id, String value,
+            boolean multiSelection, boolean saveResults, String whereClause)
     {
-        super ( WindowNo, "o", "C_Order_ID", multiSelection, whereClause, lookup);
+        super ( WindowNo, modal, "o", "C_Order_ID", multiSelection, saveResults, whereClause);
         log.info( "InfoOrder");
         setTitle(Msg.getMsg(Env.getCtx(), "InfoOrder"));
         //
-  
-		try
-		{
-	        initComponents();
-	        init();
-	        p_loadedOK = initInfo ();
-		}
-		catch (Exception e)
-		{
-			return;
-		}
+		//
+		StringBuffer where = new StringBuffer("o.IsActive='Y'");
+		if (whereClause.length() > 0)
+			where.append(" AND ").append(Util.replace(whereClause, "C_Order.", "o."));
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause(s_Order);
+		//
+		setShowTotals(true);
+		//
+		statInit();
+		initInfo (record_id, value);
+
+		//	AutoQuery
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
+        	prepareAndExecuteQuery();
 		
-        int no = contentPanel.getRowCount();
-        setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-        setStatusDB(Integer.toString(no));
-        //
-        if (value != null && value.length() > 0)
-        {
-            String values[] = value.split("_");
-            txtDocumentNo.setText(values[0]);
-            executeQuery();
-            renderItems();
-        }
+		p_loadedOK = true;
     }
+
     public void initComponents()
     {
         lblDocumentNo = new Label(Util.cleanAmp(Msg.translate(Env.getCtx(), "DocumentNo")));
@@ -157,356 +145,366 @@
         lblOrderRef = new Label(Msg.translate(Env.getCtx(), "POReference"));
         lblGrandTotal = new Label(Msg.translate(Env.getCtx(), "GrandTotal"));
         
-        txtDocumentNo = new Textbox();
-        txtDescription = new Textbox();
-        txtOrderRef = new Textbox();
+        fDocumentNo = new Textbox();
+        fDocumentNo.addEventListener(Events.ON_CHANGE, this);
+        fDocumentNo.setAttribute("zk_component_ID", "Lookup_Criteria_DocumentNo");
+        fDescription = new Textbox();
+        fDescription.addEventListener(Events.ON_CHANGE, this);
+        fDescription.setAttribute("zk_component_ID", "Lookup_Criteria_Description");
+        fPOReference = new Textbox();
+        fPOReference.addEventListener(Events.ON_CHANGE, this);
+        fPOReference.setAttribute("zk_component_ID", "Lookup_Criteria_POReference");
+		// 	Format the dates and number boxes
+		fDateFrom = new Datebox();
+		fDateFrom.setWidth("97px");
+		fDateFrom.setAttribute("zk_component_ID", "Lookup_Criteria_DateFrom");
+		fDateFrom.addEventListener(Events.ON_CHANGE, this);
+		//
+		fDateTo = new Datebox();
+		fDateTo.setWidth("97px");
+		fDateTo.setAttribute("zk_component_ID", "Lookup_Criteria_DateTo");
+		fDateTo.addEventListener(Events.ON_CHANGE, this);
+		//
+		SimpleDateFormat dateFormat = DisplayType.getDateFormat(DisplayType.Date, AEnv.getLanguage(Env.getCtx()));
+		fDateFrom.setFormat(dateFormat.toPattern());
+		fDateTo.setFormat(dateFormat.toPattern());
+		//
+		fAmtFrom = new NumberBox(false);
+		fAmtFrom.getDecimalbox().setWidth("90px");
+		fAmtFrom.setAttribute("zk_component_ID", "Lookup_Criteria_AmtFrom");
+		fAmtFrom.addEventListener(Events.ON_CHANGE, this);
+		//
+		fAmtTo = new NumberBox(false);
+		fAmtTo.getDecimalbox().setWidth("90px");
+		fAmtTo.setAttribute("zk_component_ID", "Lookup_Criteria_AmtTo");
+		fAmtTo.addEventListener(Events.ON_CHANGE, this);		
+		//
+		DecimalFormat format = DisplayType.getNumberFormat(DisplayType.Amount, AEnv.getLanguage(Env.getCtx()));
+		fAmtFrom.getDecimalbox().setFormat(format.toPattern());
+		fAmtFrom.getDecimalbox().setStyle("text-align:right; " + fAmtFrom.getDecimalbox().getStyle());
+		fAmtTo.getDecimalbox().setFormat(format.toPattern());
+		fAmtTo.getDecimalbox().setStyle("text-align:right; " + fAmtTo.getDecimalbox().getStyle());
+        //
+        fIsSOTrx = new Checkbox();
+        fIsSOTrx.setLabel(Msg.translate(Env.getCtx(), "IsSOTrx"));
+        fIsSOTrx.setName("IsSOTrx");
+        fIsSOTrx.setAttribute("zk_component_ID", "Lookup_Criteria_IsSoTrx");
+        fIsSOTrx.setAttribute("IsDynamic", "True");
+        fIsSOTrx.addActionListener(this);
         
-        dateFrom = new Datebox();
-        dateTo= new Datebox();
+        fIsDelivered = new Checkbox();
+        fIsDelivered.setLabel(Msg.translate(Env.getCtx(), "IsDelivered"));
+        fIsDelivered.setName("IsDelivered");
+        fIsDelivered.setAttribute("zk_component_ID", "Lookup_Criteria_IsDelivered");
+        fIsDelivered.addActionListener(this);
         
-        amountFrom = new NumberBox(false);
-        amountTo = new NumberBox(false);
-        
-        isSoTrx = new Checkbox();
-        isSoTrx.setLabel(Msg.translate(Env.getCtx(), "IsSOTrx"));
-        isSoTrx.setChecked(!"N".equals(Env.getContext(Env.getCtx(), p_WindowNo, "IsSOTrx")));
-        
-        isDelivered = new Checkbox();
-        isDelivered.setLabel(Msg.translate(Env.getCtx(), "IsDelivered"));
-        isDelivered.setChecked(!"N".equals(Env.getContext(Env.getCtx(), p_WindowNo, "IsDelivered")));
-        
-        MLookup lookupBP = MLookupFactory.get(Env.getCtx(), p_WindowNo,
-                0, 3499, DisplayType.Search);
-        editorBPartner = new WSearchEditor(lookupBP, Msg.translate(
-                Env.getCtx(), "C_BPartner_ID"), "", true, false, true);
-        editorBPartner.addValueChangeListener(this);
-        
+		fBPartner_ID = new WSearchEditor(
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0,  
+						MColumn.getColumn_ID(MOrder.Table_Name, MOrder.COLUMNNAME_C_BPartner_ID),
+						DisplayType.Search),  
+				Msg.translate(Env.getCtx(), "C_BPartner_ID"), "", false, false, true);
+		fBPartner_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_C_BPartner_ID");
+		fBPartner_ID.addValueChangeListener(this);       
     }
     
-    public void init()
+    public void statInit()
     {
-    	txtDocumentNo.setWidth("100%");
-    	txtDescription.setWidth("100%");
-    	txtOrderRef.setWidth("100%");
-    	dateFrom.setWidth("165px");
-		dateTo.setWidth("165px");
-		amountFrom.getDecimalbox().setWidth("155px");
-		amountTo.getDecimalbox().setWidth("155px");
-		
-    	Grid grid = GridFactory.newGridLayout();
+    	initComponents();
+    	
+    	fDocumentNo.setWidth("100%");
+    	fDescription.setWidth("100%");
+    	fPOReference.setWidth("100%");
+    	fDateFrom.setWidth("165px");
+		fDateTo.setWidth("165px");
+		fAmtFrom.getDecimalbox().setWidth("155px");
+		fAmtTo.getDecimalbox().setWidth("155px");
 		
 		Rows rows = new Rows();
-		grid.appendChild(rows);
 		
 		Row row = new Row();
 		rows.appendChild(row);
 		row.appendChild(lblDocumentNo.rightAlign());
-		row.appendChild(txtDocumentNo);
-		row.appendChild(editorBPartner.getLabel().rightAlign());
-		row.appendChild(editorBPartner.getComponent());
-		row.appendChild(isSoTrx);
+		row.appendChild(fDocumentNo);
+		row.appendChild(fBPartner_ID.getLabel().rightAlign());
+		row.appendChild(fBPartner_ID.getComponent());
+		row.appendChild(fIsSOTrx);
 		
 		row = new Row();
 		row.setSpans("1, 1, 1, 2");
 		rows.appendChild(row);
 		row.appendChild(lblDescription.rightAlign());
-		row.appendChild(txtDescription);
+		row.appendChild(fDescription);
 		row.appendChild(lblDateOrdered.rightAlign());
 		Hbox hbox = new Hbox();
-		hbox.appendChild(dateFrom);
+		hbox.appendChild(fDateFrom);
 		hbox.appendChild(new Label("-"));
-		hbox.appendChild(dateTo);
-		hbox.appendChild(isDelivered);
+		hbox.appendChild(fDateTo);
+		hbox.appendChild(fIsDelivered);
 		row.appendChild(hbox);
 		
-		
-		
-		
 		row = new Row();
 		row.setSpans("1, 1, 1, 2");
 		rows.appendChild(row);
 		row.appendChild(lblOrderRef.rightAlign());
-		row.appendChild(txtOrderRef);
+		row.appendChild(fPOReference);
 		row.appendChild(lblGrandTotal.rightAlign());
 		hbox = new Hbox();
-		hbox.appendChild(amountFrom);
+		hbox.appendChild(fAmtFrom);
 		hbox.appendChild(new Label("-"));
-		hbox.appendChild(amountTo);
+		hbox.appendChild(fAmtTo);
 		row.appendChild(hbox);
         
-		layout = new Borderlayout();
-        layout.setWidth("100%");
-        layout.setHeight("100%");
-        if (!isLookup())
-        {
-        	layout.setStyle("position: absolute");
-        }
-        this.appendChild(layout);
-
-        North north = new North();
-        layout.appendChild(north);
-		north.appendChild(grid);
-
-        Center center = new Center();
-		layout.appendChild(center);
-		center.setFlex(true);
-		Div div = new Div();
-		div.appendChild(contentPanel);
-		if (isLookup())
-			contentPanel.setWidth("99%");
-        else
-        	contentPanel.setStyle("width: 99%; margin: 0px auto;");
-        contentPanel.setVflex(true);
-		div.setStyle("width :100%; height: 100%");
-		center.appendChild(div);
-        
-		South south = new South();
-		layout.appendChild(south);
-		southBody = new Vbox();
-		southBody.setWidth("100%");
-		south.appendChild(southBody);
-		southBody.appendChild(confirmPanel);
-		southBody.appendChild(new Separator());
-		southBody.appendChild(statusBar);
+		p_criteriaGrid.appendChild(rows);
+		super.setSizes();
     }
 
     /**
      *  General Init
      *  @return true, if success
      */
-    private boolean initInfo ()
-    {
-        //  Set Defaults
-        String bp = Env.getContext(Env.getCtx(), p_WindowNo, "C_BPartner_ID");
-        if (bp != null && bp.length() != 0)
-            editorBPartner.setValue(new Integer(bp));
+    private void initInfo (int record_id, String value)
+    {		
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
+		//
+		if (record_id != 0)
+		{
+			fieldID = record_id;
+			
+			// Have to set boolean fields in query
+			String trxName = Trx.createTrxName();
+			MOrder o = new MOrder(Env.getCtx(),record_id,trxName);
+			fIsSOTrx.setSelected(o.isSOTrx());
+			fIsDelivered.setSelected(o.isDelivered());
+			o = null;
+			Trx.get(trxName, false).close();	
+		}
+		else  // Try to find other criteria in the context
+		{
+			String id;
 
-        //  prepare table
-        StringBuffer where = new StringBuffer("o.IsActive='Y'");
-        if (p_whereClause.length() > 0)
-            where.append(" AND ").append(Util.replace(p_whereClause, "C_Order.", "o."));
-       prepareTable(s_invoiceLayout,
-            " C_Order o",
-            where.toString(),"2,3,4");
+			//  C_BPartner_ID - restrict the search to the current BPartner
+			id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BPartner_ID", true);
+			if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				fBPartner_ID.setValue(new Integer(id));
 
-        return true;
+			//  The value passed in from the field
+			if (value != null && value.length() > 0)
+			{
+				fDocumentNo.setValue(value);
+			}
+			else
+			{
+				//  C_Order_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Order_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fieldID = new Integer(id).intValue();
+
+					// Have to set boolean fields in query
+					String trxName = Trx.createTrxName();
+					MOrder o = new MOrder(Env.getCtx(),record_id,trxName);
+					fIsSOTrx.setSelected(o.isSOTrx());
+					fIsDelivered.setSelected(o.isDelivered());
+					o = null;
+					Trx.get(trxName, false).close();	
+				}
+			}
+		}
     }   //  initInfo
+ 
+	/**
+	 *  Get Table Layout
+	 *
+	 * @return array of Column_Info
+	 */
+	protected Info_Column[] getTableLayout()
+	{
+
+		ArrayList<Info_Column> list = new ArrayList<Info_Column>();
+		list.add(new Info_Column(" ", "o.C_Order_ID", IDColumn.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "C_BPartner_ID"), "(SELECT Name FROM C_BPartner bp WHERE bp.C_BPartner_ID=o.C_BPartner_ID)", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "DateOrdered"), "o.DateOrdered", Timestamp.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "DocumentNo"), "o.DocumentNo", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "C_Currency_ID"), "(SELECT ISO_Code FROM C_Currency c WHERE c.C_Currency_ID=o.C_Currency_ID)", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "GrandTotal"), "o.GrandTotal",  BigDecimal.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "ConvertedAmount"), "currencyBase(o.GrandTotal,o.C_Currency_ID,o.DateAcct, o.AD_Client_ID,o.AD_Org_ID)", BigDecimal.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "IsSOTrx"), "o.IsSOTrx", Boolean.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "Description"), "o.Description", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "POReference"), "o.POReference", String.class));
+		if (fIsSOTrx.isChecked())
+		{
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "IsDelivered"), "o.IsDelivered", Boolean.class));
+		}
+		else
+		{
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "Received"), "o.IsDelivered", Boolean.class));
+		}
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "DocStatus"), "o.docstatus", String.class));
+		//
+		s_Layout = new Info_Column[list.size()];
+		list.toArray(s_Layout);
+		//
+		return s_Layout;
+	}   //  getTableLayout
+
     @Override
     public String getSQLWhere()
     {
-        StringBuffer sql = new StringBuffer();
-        if (txtDocumentNo.getText().length() > 0)
-            sql.append(" AND UPPER(o.DocumentNo) LIKE ?");
-        if (txtDescription.getText().length() > 0)
-            sql.append(" AND UPPER(o.Description) LIKE ?");
-        if (txtOrderRef.getText().length() > 0)
-            sql.append(" AND UPPER(o.POReference) LIKE ?");
-        //
-        if (editorBPartner.getValue() != null)
-            sql.append(" AND o.C_BPartner_ID=?");
-        //
-        Date fromDate = null;
-        Date toDate = null;
-        try
-        {
-            fromDate = dateFrom.getValue();
-        }
-        catch (WrongValueException e)
-        {
-            
-        }
-        try
-        {
-            toDate = dateTo.getValue();
-        }
-        catch (WrongValueException e)
-        {
-            
-        }
-        if (fromDate == null && toDate != null)
-        {
-            sql.append(" AND TRUNC(o.DateOrdered, 'DD') <= ?");
-        }
-        else if (fromDate != null && toDate == null)
-        {
-            sql.append(" AND TRUNC(o.DateOrdered, 'DD') >= ?");
-        }
-        else if (fromDate != null && toDate != null)
-        {    
-                sql.append(" AND TRUNC(o.DateOrdered, 'DD') BETWEEN ? AND ?");
-        }
-        //
-        Double fromAmount = null;
-        Double toAmount = null;
-        if (amountFrom.getText() != null && amountFrom.getText().trim().length() > 0)
-        {
-            try
-            {
-                fromAmount = Double.parseDouble(amountFrom.getText());
-            }
-            catch (NumberFormatException e)
-            {
-                
-            }
-        }
-        if (amountTo.getText() != null && amountTo.getText().trim().length() > 0)
-        {
-            try
-            {
-                toAmount = Double.parseDouble(amountTo.getText());
-            }
-            catch (NumberFormatException e)
-            {
-                
-            }
-        }
-        if (fromAmount == null && toAmount != null)
-        {
-            sql.append(" AND o.GrandTotal <= ?");
-        }
-        else if (fromAmount != null && toAmount == null)
-        {
-            sql.append(" AND o.GrandTotal >= ?");
-        }
-        else if (fromAmount != null && toAmount != null)
-        {
-              sql.append(" AND o.GrandTotal BETWEEN ? AND ?");
-        }
-        sql.append(" AND o.IsSOTrx=?");
-    	sql.append(" AND o.IsDelivered=?");
+		StringBuffer sql = new StringBuffer();
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if(!(fieldID == 0))
+			sql.append(" AND o.C_Order_ID = ?");
+		//
+		if (isValidSQLText(fDocumentNo))
+			sql.append(" AND UPPER(o.DocumentNo) LIKE ?");
+		//
+		if (isValidSQLText(fDescription))
+			sql.append(" AND UPPER(o.Description) LIKE ?");
+		//
+		if (isValidSQLText(fPOReference))
+			sql.append(" AND UPPER(o.POReference) LIKE ?");
+		//
+		if (fBPartner_ID.getValue() != null)
+			sql.append(" AND o.C_BPartner_ID=?");
+		//
+		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
+		{
+			Timestamp from = null;
+			Timestamp to = null;
+			//
+			if (fDateFrom.getValue() != null)
+				from = new Timestamp(fDateFrom.getValue().getTime());
+			if (fDateTo.getValue() != null)
+				to = new Timestamp(fDateTo.getValue().getTime());
+			//
+			log.fine("Date From=" + from + ", To=" + to);
+			//
+			if (from == null && to != null)
+				sql.append(" AND TRUNC(o.DateOrdered, 'DD') <= ?");
+			else if (from != null && to == null)
+				sql.append(" AND TRUNC(o.DateOrdered, 'DD') >= ?");
+			else if (from != null && to != null)
+				sql.append(" AND TRUNC(o.DateOrdered, 'DD') BETWEEN ? AND ?");
+		}
+		//
+		if (fAmtFrom.getValue() != null || fAmtTo.getValue() != null)
+		{
+			BigDecimal from = (BigDecimal)fAmtFrom.getValue();
+			BigDecimal to = (BigDecimal)fAmtTo.getValue();
+			if (from == null && to != null)
+				sql.append(" AND o.GrandTotal <= ?");
+			else if (from != null && to == null)
+				sql.append(" AND o.GrandTotal >= ?");
+			else if (from != null && to != null)
+				sql.append(" AND o.GrandTotal BETWEEN ? AND ?");
+		}
+		sql.append(" AND o.IsSOTrx=?");
+		sql.append(" AND o.IsDelivered=?");
 
-        log.finer(sql.toString());
-        return sql.toString();
+		log.finer(sql.toString());
+		return sql.toString();
     }
 
     @Override
     protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
     {
-        int index = 1;
-        if (txtDocumentNo.getText().length() > 0)
-            pstmt.setString(index++, getSQLText(txtDocumentNo));
-        if (txtDescription.getText().length() > 0)
-            pstmt.setString(index++, getSQLText(txtDescription));
-        if (txtOrderRef.getText().length() > 0)
-            pstmt.setString(index++, getSQLText(txtOrderRef));
-        //
-        if (editorBPartner.getValue() != null)
-        {
-            Integer bp = (Integer)editorBPartner.getValue();
-            pstmt.setInt(index++, bp.intValue());
-            log.fine("BPartner=" + bp);
-        }
-        //
-        
-            Date fromD = null;
-            Date toD = null;
-            Timestamp from = null;
-            Timestamp to = null;
-            try
-            {
-                if (dateFrom.getValue() != null)
-                {
-                    fromD = dateFrom.getValue();
-                    from = new Timestamp(fromD.getTime());
-                }
-            }
-            catch (WrongValueException e)
-            {
-                
-            }
-            try
-            {
-                if (dateTo.getValue() != null)
-                {
-                    toD = dateTo.getValue();
-                    to = new Timestamp(toD.getTime());
-                }
-            }
-            catch (WrongValueException e)
-            {
-                
-            }
-            
-            log.fine("Date From=" + from + ", To=" + to);
-            if (from == null && to != null)
-            {
-                pstmt.setTimestamp(index++, to);
-            }
-            else if (from != null && to == null)
-            {
-                pstmt.setTimestamp(index++, from);
-            }
-            else if (from != null && to != null)
-            {
-                pstmt.setTimestamp(index++, from);
-                pstmt.setTimestamp(index++, to);
-            }
-        
-        //
-        BigDecimal fromBD = null;
-        BigDecimal toBD = null;
-        Double fromAmt = null;
-        Double toAmt = null;
-        
-        if (amountFrom.getText() != null && amountFrom.getText().trim().length() > 0)
-        {
-            try
-            {
-                fromAmt = Double.parseDouble(amountFrom.getText());
-                fromBD = BigDecimal.valueOf(fromAmt);
-            }
-            catch (Exception e)
-            {
-                
-            }
-        }
-        
-        if (amountTo.getText() != null && amountTo.getText().trim().length() > 0)
-        {
-            try
-            {
-                toAmt = Double.parseDouble(amountTo.getText());
-                toBD = BigDecimal.valueOf(toAmt);
-            }
-            catch (Exception e)
-            {
-                
-            }
-        }
-        
-        if (fromBD == null && toBD != null)
-        {
-            pstmt.setBigDecimal(index++, toBD);
-        }
-        else if (fromBD != null && toBD == null)
-        {
-            pstmt.setBigDecimal(index++, fromBD);
-        }
-        else if (fromBD != null && toBD != null)
-        {
-              pstmt.setBigDecimal(index++, fromBD);
-              pstmt.setBigDecimal(index++, toBD);
-        }
-        
-        pstmt.setString(index++, isSoTrx.isChecked() ? "Y" : "N");
-        pstmt.setString(index++, isDelivered.isSelected() ? "Y" : "N");
-        
+		int index = 1;
+		//  => ID
+		if (!(fieldID == 0))
+			pstmt.setInt(index++, fieldID);
+		if (isValidSQLText(fDocumentNo))
+			pstmt.setString(index++, getSQLText(fDocumentNo));
+		if (isValidSQLText(fDescription))
+			pstmt.setString(index++, getSQLText(fDescription));
+		if (isValidSQLText(fPOReference))
+			pstmt.setString(index++, getSQLText(fPOReference));
+		//
+		if (fBPartner_ID.getValue() != null)
+		{
+			Integer bp = (Integer)fBPartner_ID.getValue();
+			pstmt.setInt(index++, bp.intValue());
+			log.fine("BPartner=" + bp);
+		}
+		//
+		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
+		{
+			Timestamp from = null;
+			Timestamp to = null;
+			//
+			if (fDateFrom.getValue() != null)
+				from = new Timestamp(fDateFrom.getValue().getTime());
+			if (fDateTo.getValue() != null)
+				to = new Timestamp(fDateTo.getValue().getTime());
+			//
+			log.fine("Date From=" + from + ", To=" + to);
+			//
+			if (from == null && to != null)
+				pstmt.setTimestamp(index++, to);
+			else if (from != null && to == null)
+				pstmt.setTimestamp(index++, from);
+			else if (from != null && to != null)
+			{
+				pstmt.setTimestamp(index++, from);
+				pstmt.setTimestamp(index++, to);
+			}
+		}
+		//
+		if (fAmtFrom.getValue() != null || fAmtTo.getValue() != null)
+		{
+			BigDecimal from = (BigDecimal)fAmtFrom.getValue();
+			BigDecimal to = (BigDecimal)fAmtTo.getValue();
+			log.fine("Amt From=" + from + ", To=" + to);
+			if (from == null && to != null)
+				pstmt.setBigDecimal(index++, to);
+			else if (from != null && to == null)
+				pstmt.setBigDecimal(index++, from);
+			else if (from != null && to != null)
+			{
+				pstmt.setBigDecimal(index++, from);
+				pstmt.setBigDecimal(index++, to);
+			}
+		}
+		pstmt.setString(index++, fIsSOTrx.isSelected() ? "Y" : "N");
+		pstmt.setString(index++, fIsDelivered.isSelected() ? "Y" : "N");
     }
 
-    /**
-     *  Get SQL WHERE parameter
-     *  @param f field
-     *  @return sql
-     */
-    private String getSQLText (Textbox f)
+    public void onEvent(Event e)
     {
-        String s = f.getText().toUpperCase();
-        if (!s.endsWith("%"))
-            s += "%";
-        log.fine("String=" + s);
-        return s;
-    }   //  getSQLText
-    
+    	// Handle specific actions if possible or pass the event to the parent class
+
+		if(!p_loadedOK)
+			return;
+
+		Component component = e.getTarget();
+		
+		if(component != null)
+		{
+			if (component instanceof Checkbox)
+			{
+				Checkbox cb = (Checkbox) component;
+				//  ShowDetail check box
+				if (cb.getName() != null && cb.getName().equals("IsSOTrx"))
+				{
+					if (cb.isChecked())
+					{
+				        fIsDelivered.setLabel(Msg.translate(Env.getCtx(), "IsDelivered"));
+					}
+					else
+					{
+				        fIsDelivered.setLabel(Msg.translate(Env.getCtx(), "Received"));
+					}
+				}
+			}
+		} 
+		//
+		super.onEvent(e);
+    }
+
     // Elaine 2008/12/16
 	/**
 	 *	Zoom
@@ -520,7 +518,7 @@
 		MQuery query = new MQuery("C_Order");
 		query.addRestriction("C_Order_ID", MQuery.EQUAL, C_Order_ID);
 		query.setRecordCount(1);
-		int AD_WindowNo = getAD_Window_ID("C_Order", isSoTrx.isSelected());
+		int AD_WindowNo = getAD_Window_ID("C_Order", fIsSOTrx.isSelected());
 		AEnv.zoom (AD_WindowNo, query);
 	}	//	zoom
 
@@ -533,25 +531,45 @@
 		return true;
 	}	//	hasZoom
 	//
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
+	{
+		//  All the tracked fields
+		return(
+			fAmtFrom.hasChanged()	||
+			fAmtTo.hasChanged() ||
+			fBPartner_ID.hasChanged() ||
+			fDescription.hasChanged() ||
+			fDocumentNo.hasChanged() ||
+			fDateFrom.hasChanged() ||
+			fDateTo.hasChanged() ||
+			fIsDelivered.hasChanged() ||
+			fIsSOTrx.hasChanged() ||
+			fPOReference.hasChanged()
+			);
+			
+	}
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		fAmtFrom.set_oldValue();
+		fAmtTo.set_oldValue() ;
+		fBPartner_ID.set_oldValue() ;
+		fDescription.set_oldValue() ;
+		fDocumentNo.set_oldValue() ;
+		fDateFrom.set_oldValue() ;
+		fDateTo.set_oldValue() ;
+		fIsDelivered.set_oldValue() ;
+		fIsSOTrx.set_oldValue() ;
+		fPOReference.set_oldValue();
+		return;
+	}
 
-    public void tableChanged(WTableModelEvent event)
-    {
-        
-    }
-    
-    public void valueChange(ValueChangeEvent evt)
-    {
-        if (editorBPartner.equals(evt.getSource()))
-        {
-            editorBPartner.setValue(evt.getNewValue());
-        }
-        
-    }
-
-    @Override
-	protected void insertPagingComponent()
-    {
-		southBody.insertBefore(paging, southBody.getFirstChild());
-		layout.invalidate();
-	}
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoPAttributeInstancePanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoPAttributeInstancePanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoPAttributeInstancePanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -66,9 +66,9 @@
 		int M_Warehouse_ID, int M_Locator_ID, int M_Product_ID, int C_BPartner_ID)
 	{
 		super();
-		setTitle(Msg.getMsg(Env.getCtx(), "PAttributeInstance"));
+		setTitle(Msg.getMsg(Env.getCtx(), "PAttributeInstance") + ": " + title);
 		
-		init (M_Warehouse_ID, M_Locator_ID, M_Product_ID, C_BPartner_ID);
+		init (M_Warehouse_ID, M_Locator_ID, M_Product_ID, C_BPartner_ID, parent);
 		AEnv.showCenterWindow(parent, this);
 	}	//	PAttributeInstance
 
@@ -79,7 +79,7 @@
 	 *	@param M_Product_ID product
 	 *	@param C_BPartner_ID partner
 	 */
-	private void init (int M_Warehouse_ID, int M_Locator_ID, int M_Product_ID, int C_BPartner_ID)
+	private void init (int M_Warehouse_ID, int M_Locator_ID, int M_Product_ID, int C_BPartner_ID, Window window)
 	{
 		log.info("M_Warehouse_ID=" + M_Warehouse_ID 
 			+ ", M_Locator_ID=" + M_Locator_ID
@@ -87,6 +87,7 @@
 		m_M_Warehouse_ID = M_Warehouse_ID;
 		m_M_Locator_ID = M_Locator_ID;
 		m_M_Product_ID = M_Product_ID;
+		m_window = window;
 		try
 		{
 			jbInit();
@@ -110,6 +111,9 @@
 	private int					m_M_AttributeSetInstance_ID = -1;
 	private String				m_M_AttributeSetInstanceName = null;
 	private String				m_sql;
+	private boolean 			m_wasCancelled;
+	private Window				m_window;
+
 	/**	Logger			*/
 	private static CLogger log = CLogger.getCLogger(PAttributeInstance.class);
 
@@ -120,10 +124,30 @@
 	private void jbInit() throws Exception
 	{
         showAll.setText(Msg.getMsg(Env.getCtx(), "ShowAll"));
+        showAll.addActionListener(this);
+        showAll.setAttribute("zk_component_ID", "Lookup_Criteria_showAll");        
+        m_table.setAttribute("zk_component_ID", "Lookup_Data_ASIResults");        
+
         
 		Borderlayout borderlayout = new Borderlayout();
-        borderlayout.setWidth("700px");
-        borderlayout.setHeight("400px");
+		
+		//
+		//this.doModal();
+		setAttribute(Window.MODE_MODAL, Boolean.TRUE);
+		//setAttribute(Window.MODE_KEY, Window.MODE_MODAL);
+		setBorder("normal");
+		setClosable(true);
+		this.setContentStyle("overflow: auto");
+        this.setSizable(true);      
+        this.setMaximizable(true);
+		//
+        //  As a modal window, the panel can't extend past the parent
+ 		this.setWidth("100%");
+		this.setHeight("100%");
+		this.setMaximized(true);
+		//
+        borderlayout.setWidth("100%");
+        borderlayout.setHeight("100%");
         borderlayout.setStyle("border: none; position: relative");
         this.appendChild(borderlayout);
         
@@ -151,12 +175,14 @@
 	/**	Table Column Layout Info			*/
 	private static ColumnInfo[] s_layout = new ColumnInfo[] 
 	{
-		new ColumnInfo(" ", "s.M_AttributeSetInstance_ID", IDColumn.class),
+		new ColumnInfo(" ", "asi.M_AttributeSetInstance_ID", IDColumn.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "Description"), "asi.Description", String.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "Lot"), "asi.Lot", String.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "SerNo"), "asi.SerNo", String.class), 
 		new ColumnInfo(Msg.translate(Env.getCtx(), "GuaranteeDate"), "asi.GuaranteeDate", Timestamp.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "M_Locator_ID"), "l.Value", KeyNamePair.class, "s.M_Locator_ID"),
+//		new ColumnInfo(Msg.translate(Env.getCtx(), "M_Product_ID"), "p.Value", KeyNamePair.class, "p.M_Product_ID"), // @Trifon - Not sure if this need to be shown
+//		new ColumnInfo(Msg.translate(Env.getCtx(), "M_AttributeSet_ID"), "st.Name", KeyNamePair.class, "st.M_AttributeSet_ID"), // @Trifon - Not sure if this need to be shown
 		new ColumnInfo(Msg.translate(Env.getCtx(), "QtyOnHand"), "s.QtyOnHand", Double.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "QtyReserved"), "s.QtyReserved", Double.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "QtyOrdered"), "s.QtyOrdered", Double.class),
@@ -166,16 +192,22 @@
 		new ColumnInfo(Msg.translate(Env.getCtx(), "ShelfLifeRemainingPct"), "CASE WHEN p.GuaranteeDays > 0 THEN TRUNC(((daysbetween(asi.GuaranteeDate, SYSDATE))/p.GuaranteeDays)*100) ELSE 0 END", Integer.class),
 	};
 	/**	From Clause							*/
-	private static String s_sqlFrom = "M_Storage s"
-		+ " INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID)"
-		+ " INNER JOIN M_Product p ON (s.M_Product_ID=p.M_Product_ID)"
-		+ " LEFT OUTER JOIN M_AttributeSetInstance asi ON (s.M_AttributeSetInstance_ID=asi.M_AttributeSetInstance_ID)";
-	/** Where Clause						*/
-	private static String s_sqlWhere = "s.M_Product_ID=? AND l.M_Warehouse_ID=?"; 
-	private static String s_sqlWhereWithoutWarehouse = " s.M_Product_ID=?"; 
+	private static String s_sqlFrom = "M_AttributeSetInstance asi"
+		+ " INNER JOIN M_AttributeSet st ON (st.M_AttributeSet_ID=asi.M_AttributeSet_ID )"
+		+ " LEFT OUTER JOIN M_Storage s ON (s.M_AttributeSetInstance_ID=asi.M_AttributeSetInstance_ID)"
+		+ " LEFT OUTER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID)"
+		+ " LEFT OUTER JOIN M_Product p ON (s.M_Product_ID=p.M_Product_ID) "
+	;
+	//  To see all related Attribute Sets, add OR "
+	//+                                   "(asi.M_AttributeSet_ID = p.M_AttributeSet_ID AND p.M_AttributeSetInstance_ID = 0)
+	//  to the last join clause
 
-	private String	m_sqlNonZero = " AND (s.QtyOnHand<>0 OR s.QtyReserved<>0 OR s.QtyOrdered<>0)";
-	private String	m_sqlMinLife = "";
+	/** Where Clause						*/ 
+	private static String s_sqlWhereWithoutWarehouse = " p.M_Product_ID=?";
+	private static String s_sqlWhereSameWarehouse = " AND (l.M_Warehouse_ID=? OR 0=?)";
+
+	private static String	s_sqlNonZero = " AND (s.QtyOnHand<>0 OR s.QtyReserved<>0 OR s.QtyOrdered<>0)";
+	private static String	s_sqlMinLife = "";
 
 	/**
 	 * 	Dynamic Init
@@ -220,19 +252,18 @@
 			}
 			if (ShelfLifeMinPct > 0)
 			{
-				m_sqlMinLife = " AND COALESCE(TRUNC(((daysbetween(asi.GuaranteeDate, SYSDATE))/p.GuaranteeDays)*100),0)>=" + ShelfLifeMinPct;
+				s_sqlMinLife = " AND COALESCE(TRUNC(((daysbetween(asi.GuaranteeDate, SYSDATE))/p.GuaranteeDays)*100),0)>=" + ShelfLifeMinPct;
 				log.config( "PAttributeInstance.dynInit - ShelfLifeMinPct=" + ShelfLifeMinPct);
 			}
 			if (ShelfLifeMinDays > 0)
 			{
-				m_sqlMinLife += " AND COALESCE((daysbetween(asi.GuaranteeDate, SYSDATE)),0)>=" + ShelfLifeMinDays;
+				s_sqlMinLife += " AND COALESCE((daysbetween(asi.GuaranteeDate, SYSDATE)),0)>=" + ShelfLifeMinDays;
 				log.config( "PAttributeInstance.dynInit - ShelfLifeMinDays=" + ShelfLifeMinDays);
 			}
 		}	//	BPartner != 0
 
-		m_sql = m_table.prepareTable (s_layout, s_sqlFrom, 
-					m_M_Warehouse_ID == 0 ? s_sqlWhereWithoutWarehouse : s_sqlWhere, false, "s")
-				+ " ORDER BY asi.GuaranteeDate, s.QtyOnHand";	//	oldest, smallest first
+		m_sql = m_table.prepareTable (s_layout, s_sqlFrom, s_sqlWhereWithoutWarehouse + s_sqlNonZero, false, "asi")
+		+ " ORDER BY asi.GuaranteeDate, s.QtyOnHand";	//	oldest, smallest first
 		//
 		m_table.setMultiSelection(false);
 		m_table.getModel().addTableModelListener(this);
@@ -250,9 +281,9 @@
 		if (!showAll.isSelected())
 		{
 			sql = m_sql.substring(0, pos) 
-				+ m_sqlNonZero;
-			if (m_sqlMinLife.length() > 0)
-				sql += m_sqlMinLife;
+				+ s_sqlWhereSameWarehouse;
+			if (s_sqlMinLife.length() > 0)
+				sql += s_sqlMinLife;
 			sql += m_sql.substring(pos);
 		}
 		//
@@ -263,8 +294,11 @@
 		{
 			pstmt = DB.prepareStatement(sql, null);
 			pstmt.setInt(1, m_M_Product_ID);
-			if (m_M_Warehouse_ID != 0)
+			if ( !showAll.isSelected() ) {
 				pstmt.setInt(2, m_M_Warehouse_ID);
+				pstmt.setInt(3, m_M_Warehouse_ID);
+			}
+
 			rs = pstmt.executeQuery();
 			m_table.loadTable(rs);
 		}
@@ -288,12 +322,14 @@
 		if (e.getTarget().getId().equals(ConfirmPanel.A_OK))
 		{
 			dispose();
+			m_wasCancelled = false;
 		}
 		else if (e.getTarget().getId().equals(ConfirmPanel.A_CANCEL))
 		{
 			dispose();
 			m_M_AttributeSetInstance_ID = -1;
 			m_M_AttributeSetInstanceName = null;
+			m_wasCancelled = true;
 		}
 		else if (e.getTarget() == showAll)
 		{
@@ -371,4 +407,13 @@
 		return m_M_Locator_ID;
 	}	//	getM_Locator_ID
 
+	/**
+	 * 	Was Cancelled?
+	 *	@return true if cancelled
+	 */
+	public boolean wasCancelled()
+	{
+		return m_wasCancelled;
+	}
+
 }	//	PAttributeInstance
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoPAttributePanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoPAttributePanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoPAttributePanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -32,7 +32,6 @@
 import org.adempiere.webui.component.Window;
 import org.adempiere.webui.editor.WNumberEditor;
 import org.adempiere.webui.editor.WStringEditor;
-import org.compiere.apps.search.InfoPAttribute;
 import org.compiere.model.MAttribute;
 import org.compiere.model.MAttributeSet;
 import org.compiere.model.MRole;
@@ -55,6 +54,8 @@
  * This class is based on org.compiere.apps.search.InfoPAttribute written by Jorg Janke
  * @author Elaine
  *
+ * @author Michael McKay, ADEMPIERE-72 VLookup and Info Window improvements
+ * 	<li>https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public class InfoPAttributePanel extends Window implements EventListener
 {
@@ -96,6 +97,8 @@
 	
 	/**	Resulting Query			*/
 	private String		m_query = "";
+	/** String representation	*/
+	private String		m_display = "";
 	/**	Product Attribure Editors	*/
 	private ArrayList<Component>	m_productEditors = new ArrayList<Component>();
 	private ArrayList<Component>	m_productEditorsTo = new ArrayList<Component>();
@@ -103,7 +106,7 @@
 	private ArrayList<Component>	m_instanceEditors = new ArrayList<Component>();
 	private ArrayList<Component>	m_instanceEditorsTo = new ArrayList<Component>();
 	/**	Logger			*/
-	private static CLogger log = CLogger.getCLogger(InfoPAttribute.class);
+	private static CLogger log = CLogger.getCLogger(InfoPAttributePanel.class);
 
 	private Rows rows = null;
 	private ConfirmPanel confirmPanel = new ConfirmPanel(true);
@@ -168,6 +171,7 @@
 		guaranteeDateSelection.appendItem(s + " <", s + " <");
 		guaranteeDateSelection.appendItem(s + " =", s + " =");
 		guaranteeDateSelection.appendItem(s + " >", s + " >");
+		guaranteeDateSelection.setAttribute("zk_component_ID", "InfoPAttributePanel_guaranteeDateSelection");
 		initLotSelection();
 		
 		//	Fixed Instance Selection Fields
@@ -182,6 +186,7 @@
 			row.appendChild(div);
 			row.appendChild(serNoField.getComponent());
 			serNoField.getComponent().setWidth("150px");
+			serNoField.getComponent().setAttribute("zk_component_ID", "InfoPAttributePanel_serNoField");
 		}
 		
 		if (isLot) {
@@ -193,7 +198,8 @@
 			row.appendChild(div);
 			row.appendChild(lotField.getComponent());
 			lotField.getComponent().setWidth("150px");
-
+			lotField.getComponent().setAttribute("zk_component_ID", "InfoPAttributePanel_lotField");
+			
 			row = new Row();
 			rows.appendChild(row);
 			div = new Div();
@@ -211,6 +217,7 @@
 			div.appendChild(guaranteeDateSelection);
 			row.appendChild(div);
 			row.appendChild(guaranteeDateField);
+			guaranteeDateField.setAttribute("zk_component_ID", "InfoPAttributePanel_guaranteeDateField");
 		}
 	}	//	dynInit
 
@@ -235,6 +242,7 @@
 			+ " ORDER BY IsInstanceAttribute, Name", 
 			"M_Attribute", MRole.SQL_NOTQUALIFIED, MRole.SQL_RO);
 		boolean instanceLine = false;
+		boolean productLine = false;
 		try
 		{
 			pstmt = DB.prepareStatement(sql, null);
@@ -246,7 +254,27 @@
 				String description = rs.getString(3);
 				String attributeValueType = rs.getString(4);
 				boolean isInstanceAttribute = "Y".equals(rs.getString(5)); 
-				//	Instance switch
+				// Add label for product attributes if there are any 
+				if (!productLine && !isInstanceAttribute)
+				{
+					Row row = new Row();
+					rows.appendChild(row);
+					row.setSpans("2");
+    				Label group = new Label(Msg.translate(Env.getCtx(), "IsProductAttribute")); 
+    				row.appendChild(group);
+    				rows.appendChild(row);
+    				
+    				row = new Row();
+					rows.appendChild(row);
+					row.setSpans("2");
+                    Separator separator = new Separator();
+                    separator.setBar(true);
+        			row.appendChild(separator);
+        			rows.appendChild(row);
+        			
+					productLine = true;
+				}
+				//	Add label for Instances attributes
 				if (!instanceLine && isInstanceAttribute)
 				{
 					Row row = new Row();
@@ -305,6 +333,8 @@
 				row.appendChild(field);
 				//
 				field.setId(String.valueOf(attribute_ID));
+				field.setAttribute("zk_component_ID", "InfoPAttributePanel_field_" + name);
+				//
 				if (isInstanceAttribute)
 					m_instanceEditors.add(field);
 				else
@@ -324,6 +354,9 @@
 					row.appendChild(div);
 					row.appendChild(fieldTo);
 				}
+				if (fieldTo != null)
+					fieldTo.setAttribute("zk_component_ID", "InfoPAttributePanel_fieldTo_" + name);
+				
 				if (isInstanceAttribute)
 					m_instanceEditorsTo.add(fieldTo);
 				else
@@ -454,6 +487,7 @@
 		lotSelection.setMultiple(false);
 		lotSelection.setMold("select");
 		lotSelection.setWidth("150px");
+		lotSelection.setAttribute("zk_component_ID", "InfoPAttributePanel_lotSelection");
 		for(int i = 0; i < items.length; i++)
 			lotSelection.appendItem(items[i].getName(), items[i]);
 	}	//	initLotSelection
@@ -468,12 +502,14 @@
 	{
 		if (e.getTarget().getId().equals(ConfirmPanel.A_OK))
 		{
+			setDisplay();
 			createQuery();
 			dispose();
 		}
 		else if (e.getTarget().getId().equals(ConfirmPanel.A_CANCEL))
 		{
 			m_query = null;
+			m_display = null;
 			dispose();
 		}
 	}	//	actionPerformed
@@ -700,5 +736,90 @@
 	{
 		return m_query;
 	}	//	getQuery
+	/**
+	 * Get Display 
+	 * @return String representation of the attribute set instances.
+	 */
+	public String getDisplay()
+	{
+		return m_display;
+	}
+	/**
+	 *   Set the display text
+	 */
+	private void setDisplay()
+	{
+		StringBuffer display = new StringBuffer();
+		if (serNoField != null && serNoField.getValue().toString().length() > 0)
+			display.append(serNoField.getValue().toString() + "-");
+		if (lotField != null && lotField.getValue().toString().length() > 0)
+			display.append(lotField.getValue().toString() + "-");
+		if (lotSelection != null && lotSelection.getSelectedItem().getValue().toString().length() > 0)
+			display.append(lotSelection.getSelectedItem().getValue().toString() + "-");
+		if (guaranteeDateField != null && guaranteeDateField.getValue() != null)
+			display.append(guaranteeDateSelection.getSelectedItem().getValue().toString() + guaranteeDateField.getValue().toString() + "-");
+    
+		for (int i = 0; i < m_productEditors.size(); i++)
+		{
+			Component c = (Component)m_productEditors.get(i);
+			Component cTo = (Component)m_productEditorsTo.get(i);
+			if (c instanceof Listbox)
+			{
+				Listbox field = (Listbox)c;
+				display.append(field.getSelectedItem().getValue().toString() + "-");
+			}
+			else if (c instanceof NumberBox)
+			{
+				NumberBox field = (NumberBox)c;
+				display.append(field.getValue().toString() + "-");
+				NumberBox fieldTo = (NumberBox)cTo;
+				display.append(fieldTo.getValue().toString() + "-");
+				 
+			}
+			else
+			{
+				Textbox field = (Textbox)c;
+				display.append(field.getValue() + "-");
+			}
+		}
+
+		for (int i = 0; i < m_instanceEditors.size(); i++)
+		{
+			Component c = (Component)m_instanceEditors.get(i);
+			Component cTo = (Component)m_instanceEditorsTo.get(i);
+			if (c instanceof Listbox)
+			{
+				Listbox field = (Listbox)c;
+				display.append(field.getSelectedItem().getValue().toString() + "-");
+			}
+			else if (c instanceof NumberBox)
+			{
+				NumberBox field = (NumberBox)c;
+				display.append(field.getValue().toString() + "-");
+				NumberBox fieldTo = (NumberBox)cTo;
+				display.append(fieldTo.getValue().toString() + "-");
+				 
+			}
+			else
+			{
+				Textbox field = (Textbox)c;
+				display.append(field.getValue() + "-");
+			}
+		}
+		//  TODO - there is a more elegant way to do this.
+		while (display.toString().contains("--") && display.length() > 1)
+		{
+				display.delete(display.indexOf("--"), display.indexOf("--")+1);
+		}
+		while (display.toString().startsWith("-") && display.length() > 1)
+		{
+			display.delete(0, 1);
+		}
+		while (display.toString().endsWith("-") && display.length() > 1)
+		{
+			display.delete(display.length()-1, display.length());
+		}
+		m_display = display.toString();
+	}  // set display
 
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoPanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoPanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoPanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -32,11 +32,23 @@
 
 import org.adempiere.webui.apps.AEnv;
 import org.adempiere.webui.apps.BusyDialog;
+import org.adempiere.webui.component.Button;
+import org.adempiere.webui.component.Checkbox;
+import org.adempiere.webui.component.Combobox;
 import org.adempiere.webui.component.ConfirmPanel;
+import org.adempiere.webui.component.Grid;
+import org.adempiere.webui.component.GridFactory;
+import org.adempiere.webui.component.Label;
 import org.adempiere.webui.component.ListModelTable;
+import org.adempiere.webui.component.Row;
+import org.adempiere.webui.component.Rows;
+import org.adempiere.webui.component.Textbox;
 import org.adempiere.webui.component.WListItemRenderer;
 import org.adempiere.webui.component.WListbox;
 import org.adempiere.webui.component.Window;
+import org.adempiere.webui.editor.WPAttributeEditor;
+import org.adempiere.webui.editor.WSearchEditor;
+import org.adempiere.webui.editor.WTableDirEditor;
 import org.adempiere.webui.event.ValueChangeEvent;
 import org.adempiere.webui.event.ValueChangeListener;
 import org.adempiere.webui.event.WTableModelEvent;
@@ -46,20 +58,30 @@
 import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
 import org.compiere.model.MRole;
+import org.compiere.model.MSysConfig;
 import org.compiere.model.MTable;
 import org.compiere.util.CLogger;
 import org.compiere.util.DB;
 import org.compiere.util.Env;
 import org.compiere.util.KeyNamePair;
 import org.compiere.util.Msg;
+import org.compiere.util.Util;
 import org.zkoss.zk.au.out.AuEcho;
+import org.zkoss.zk.ui.Component;
 import org.zkoss.zk.ui.event.Event;
 import org.zkoss.zk.ui.event.EventListener;
 import org.zkoss.zk.ui.event.Events;
+import org.zkoss.zk.ui.event.SelectEvent;
 import org.zkoss.zk.ui.util.Clients;
+import org.zkoss.zkex.zul.Borderlayout;
+import org.zkoss.zkex.zul.Center;
+import org.zkoss.zkex.zul.North;
+import org.zkoss.zkex.zul.South;
+import org.zkoss.zkex.zul.West;
 import org.zkoss.zul.ListModelExt;
 import org.zkoss.zul.Listitem;
 import org.zkoss.zul.Paging;
+import org.zkoss.zul.Separator;
 import org.zkoss.zul.event.ZulEvents;
 
 /**
@@ -71,6 +93,9 @@
  * Zk Port
  * @author Elaine
  * @version	Info.java Adempiere Swing UI 3.4.1
+ *
+ * @author Michael McKay, ADEMPIERE-72 VLookup and Info Window improvements
+ * 	<li>https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
 public abstract class InfoPanel extends Window implements EventListener, WTableModelListener, ListModelExt
 {
@@ -82,41 +107,50 @@
 	private final static int PAGE_SIZE = 100;
 	
     public static InfoPanel create (int WindowNo,
-            String tableName, String keyColumn, String value,
+            String tableName, String keyColumn, int record_id, String value,
             boolean multiSelection, String whereClause)
+    {
+    	return create(WindowNo, true, tableName, keyColumn, record_id, value,
+            multiSelection, true, whereClause);
+    }
+    
+    public static InfoPanel create (int WindowNo, boolean modal,
+            String tableName, String keyColumn, int record_id, String value,
+            boolean multiSelection, boolean saveResult, String whereClause)
         {
+    	
             InfoPanel info = null;
 
             if (tableName.equals("C_BPartner"))
-                info = new InfoBPartnerPanel (value,WindowNo, !Env.getContext(Env.getCtx(),"IsSOTrx").equals("N"),
-                        multiSelection, whereClause);
+                info = new InfoBPartnerPanel (WindowNo, modal, record_id, value, 
+                				!Env.getContext(Env.getCtx(),"IsSOTrx").equals("N"), false,
+                				multiSelection, saveResult, whereClause);
             else if (tableName.equals("M_Product"))
-                info = new InfoProductPanel ( WindowNo,  0,0, 
-                        multiSelection, value,whereClause);
+                info = new InfoProductPanel ( WindowNo, modal, 0, 0, 
+                        record_id, value, multiSelection, saveResult, whereClause);
             else if (tableName.equals("C_Invoice"))
-                info = new InfoInvoicePanel ( WindowNo, value,
-                        multiSelection, whereClause);
+                info = new InfoInvoicePanel ( WindowNo, modal, record_id, value,
+                        multiSelection, saveResult, whereClause);
             else if (tableName.equals("A_Asset"))
-                info = new InfoAssetPanel (WindowNo, 0, value,
-                        multiSelection, whereClause);
+                info = new InfoAssetPanel (WindowNo, modal, record_id, value,
+                        multiSelection, saveResult, whereClause);
             else if (tableName.equals("C_Order"))
-                info = new InfoOrderPanel ( WindowNo, value,
-                        multiSelection, whereClause);
+                info = new InfoOrderPanel ( WindowNo, modal, record_id, value,
+                        multiSelection, saveResult, whereClause);
             else if (tableName.equals("M_InOut"))
-                info = new InfoInOutPanel (WindowNo, value,
-                        multiSelection, whereClause);
+                info = new InfoInOutPanel (WindowNo, modal, record_id, value,
+                        multiSelection, saveResult, whereClause);
             else if (tableName.equals("C_Payment"))
-                info = new InfoPaymentPanel (WindowNo, value, multiSelection, whereClause);
+                info = new InfoPaymentPanel (WindowNo, modal, record_id, value, multiSelection, saveResult, whereClause);
             else if (tableName.equals("C_CashLine"))
-               info = new InfoCashLinePanel (WindowNo, value,
-                        multiSelection, whereClause);
+               info = new InfoCashLinePanel (WindowNo, modal, record_id, value,
+                        multiSelection, saveResult, whereClause);
             else if (tableName.equals("S_ResourceAssigment"))
-                info = new InfoAssignmentPanel (WindowNo, value,
-                        multiSelection, whereClause);
+                info = new InfoAssignmentPanel (WindowNo, modal, record_id, value,
+                        multiSelection, saveResult, whereClause);
             else
-                info = new InfoGeneralPanel (value, WindowNo,  
-                    tableName, keyColumn, 
-                    multiSelection, whereClause);
+                info = new InfoGeneralPanel (WindowNo, modal, record_id, value,  
+                    tableName, keyColumn, multiSelection, saveResult, whereClause);
             //
             return info;
     
@@ -128,8 +162,8 @@
 	 */
 	public static void showBPartner (int WindowNo)
 	{
-		InfoBPartnerPanel info = new InfoBPartnerPanel ( "", WindowNo,
-			!Env.getContext(Env.getCtx(),"IsSOTrx").equals("N"),false, "", false);
+		InfoBPartnerPanel info = new InfoBPartnerPanel (WindowNo, false, 0, "", 
+			true, false, true, false, "");
 		AEnv.showWindow(info);
 	}   //  showBPartner
 
@@ -140,7 +174,7 @@
 	 */
 	public static void showAsset (int WindowNo)
 	{
-		InfoPanel info = new InfoAssetPanel (WindowNo, 0, "", false, "", false);
+		InfoPanel info = new InfoAssetPanel (WindowNo, false, 0, "", false, false, "");
 		AEnv.showWindow(info);
 	}   //  showBPartner
 
@@ -151,10 +185,10 @@
 	 */
 	public static void showProduct (int WindowNo)
 	{
-		InfoPanel info = new InfoProductPanel(WindowNo, 
+		InfoPanel info = new InfoProductPanel(WindowNo, false, 
 				Env.getContextAsInt(Env.getCtx(), WindowNo, "M_Warehouse_ID"),
 				Env.getContextAsInt(Env.getCtx(), WindowNo, "M_PriceList_ID"),
-				false, "", "", false);
+				0, "", false, false, "");
 		AEnv.showWindow(info);
 	}   //  showProduct
 	
@@ -166,7 +200,7 @@
 	 */
 	public static void showOrder (int WindowNo, String value)
 	{
-		InfoPanel info = new InfoOrderPanel(WindowNo, "", false, "", false);
+		InfoPanel info = new InfoOrderPanel(WindowNo, false, 0, value, false, false, "");
 		AEnv.showWindow(info);
 	}   //  showOrder
 
@@ -178,7 +212,7 @@
 	 */
 	public static void showInvoice (int WindowNo, String value)
 	{
-		InfoPanel info = new InfoInvoicePanel(WindowNo, "", false, "", false);
+		InfoPanel info = new InfoInvoicePanel(WindowNo, false, 0, value, false, false, "");
 		AEnv.showWindow(info);
 	}   //  showInvoice
 
@@ -190,8 +224,8 @@
 	 */
 	public static void showInOut (int WindowNo, String value)
 	{
-		InfoPanel info = new InfoInOutPanel (WindowNo, value,
-			false, "", false);
+		InfoPanel info = new InfoInOutPanel (WindowNo, false, 0, value,
+			false, false, "");
 		AEnv.showWindow(info);
 	}   //  showInOut
 
@@ -203,8 +237,8 @@
 	 */
 	public static void showPayment (int WindowNo, String value)
 	{
-		InfoPanel info = new InfoPaymentPanel (WindowNo, value,
-			false, "", false);
+		InfoPanel info = new InfoPaymentPanel (WindowNo, false, 0, value,
+			false, false, "");
 		AEnv.showWindow(info);
 	}   //  showPayment
 
@@ -216,8 +250,8 @@
 	 */
 	public static void showCashLine (int WindowNo, String value)
 	{
-		InfoPanel info = new InfoCashLinePanel (WindowNo, value,
-			false, "", false);
+		InfoPanel info = new InfoCashLinePanel (WindowNo, false, 0, value,
+			false, false, "");
 		AEnv.showWindow(info);
 	}   //  showCashLine
 
@@ -229,14 +263,14 @@
 	 */
 	public static void showAssignment (int WindowNo, String value)
 	{
-		InfoPanel info = new InfoAssignmentPanel (WindowNo, value,
-			false, "", false);
+		InfoPanel info = new InfoAssignmentPanel (WindowNo, false, 0, value,
+			false, false, "");
 		AEnv.showWindow(info);
 	}   //  showAssignment
 
 	/** Window Width                */
 	static final int        INFO_WIDTH = 800;
-	private boolean m_lookup;
+	private boolean m_modal;
 
 	/**************************************************
      *  Detail Constructor 
@@ -246,22 +280,24 @@
      * @param whereClause   whereClause
 	 */
 	protected InfoPanel (int WindowNo,
-		String tableName, String keyColumn,boolean multipleSelection,
+		String tableName, String keyColumn, boolean multipleSelection,
 		 String whereClause)
 	{
-		this(WindowNo, tableName, keyColumn, multipleSelection, whereClause, true);
+		this(WindowNo, true, tableName, keyColumn, multipleSelection, true, whereClause);
 	}
 		
 	/**************************************************
      *  Detail Constructor
      * @param WindowNo  WindowNo
+     * @param modal
      * @param tableName tableName
      * @param keyColumn keyColumn
+	 * @param saveResults flag if the results will be saved in context
      * @param whereClause   whereClause
 	 */
-	protected InfoPanel (int WindowNo,
-		String tableName, String keyColumn,boolean multipleSelection,
-		 String whereClause, boolean lookup)
+	protected InfoPanel (int WindowNo, boolean modal,
+		String tableName, String keyColumn, boolean multipleSelection, boolean saveResults,
+		 String whereClause)
 	{
 
 		log.info("WinNo=" + p_WindowNo + " " + whereClause);
@@ -269,8 +305,15 @@
 		p_tableName = tableName;
 		p_keyColumn = keyColumn;
         p_multipleSelection = multipleSelection;
-        m_lookup = lookup;
-		
+        p_saveResults = saveResults;
+        m_modal = modal;
+		//
+        p_TabNo = 0;
+		p_height = SessionManager.getAppDesktop().getClientInfo().desktopHeight * 90 / 100;
+		p_width = SessionManager.getAppDesktop().getClientInfo().desktopWidth * 80 / 100;
+
+		init();
+		//
 		if (whereClause == null || whereClause.indexOf('@') == -1)
 			p_whereClause = whereClause;
 		else
@@ -279,27 +322,81 @@
 			if (p_whereClause.length() == 0)
 				log.log(Level.SEVERE, "Cannot parse context= " + whereClause);
 		}
-		init();
 		
 		this.setAttribute(ITabOnSelectHandler.ATTRIBUTE_KEY, new ITabOnSelectHandler() {
 			public void onSelect() {
 				scrollToSelectedRow();
 			}
+			
 		});
+		
+		p_table.addActionListener(new EventListener() {
+			public void onEvent(Event event) throws Exception {
+
+				if (p_table.getRowCount() == 0)
+				{
+					enableButtons();		
+					return;
+				}
+				//
+				
+				if (event.getName().equals("onSelect"))
+				{
+					SelectEvent se = ((SelectEvent) event);
+					setNumRecordsSelected(se.getSelectedItems().size());
+					recordSelected(p_table.getLeadRowKey());
+					p_selectedRecordKey = p_table.getLeadRowKey();
+				}
+
+				enableButtons();		
+			}
+		});
+		
+		p_table.getModel().addTableModelListener(this);
+
 	}	//	InfoPanel
 	
-	private void init()
+	/**
+	 *  Called to set the sizes of the layout after the children are loaded.
+	 */
+	protected void setSizes()
 	{
-		if (isLookup())
+		//  TODO this can be removed if Zk is upgraded to 5+.  Use vflex=min for all layout areas except 
+		//  the p_centerCenter which should fill the remaining space.
+		// Have to set the criteriaGrid height specifically.  58 is the height of the reset button and label.
+		// p_criteriaGrid is assumed to hold a Rows component that is non null and has children.
+		int rowHeight = (25*((Rows) p_criteriaGrid.getFirstChild()).getChildren().size());
+		rowHeight = rowHeight > 58 ? rowHeight : 58;
+		p_northLayout.setHeight(rowHeight + "px");
+		p_southLayout.setHeight("70px");
+		
+		if (p_centerNorth.getChildren().size() == 0)
+			p_centerNorth.detach();
+
+		if (p_centerSouth.getChildren().size() > 0)
+		{
+			int detailHeight = (p_height * 25 / 100);
+			p_centerSouth.setHeight(detailHeight + "px");
+		}
+		else
+		{
+			p_centerSouth.detach();
+		}
+
+	}
+	
+	protected void init()
+	{
+		if (isModal())
 		{
 			setAttribute(Window.MODE_KEY, Window.MODE_MODAL);
 			setBorder("normal");
 			setClosable(true);
-			int height = SessionManager.getAppDesktop().getClientInfo().desktopHeight * 85 / 100;
-    		int width = SessionManager.getAppDesktop().getClientInfo().desktopWidth * 80 / 100;
-    		setWidth(width + "px");
-    		setHeight(height + "px");
-    		this.setContentStyle("overflow: auto");
+			setWidth(p_width + "px");
+			setHeight(p_height + "px");
+    		setContentStyle("overflow: auto");
+            setSizable(true);      
+            setMaximizable(true);        
 		}
 		else
 		{
@@ -312,28 +409,136 @@
 		
         confirmPanel = new ConfirmPanel(true, true, false, true, true, true);  // Elaine 2008/12/16
         confirmPanel.addActionListener(Events.ON_CLICK, this);
-        confirmPanel.setStyle("border-top: 2px groove #444; padding-top: 4px");
+        confirmPanel.setStyle("border-top: 2px; border-bottome: 2px; padding: 4px");
         
         // Elaine 2008/12/16
 		confirmPanel.getButton(ConfirmPanel.A_CUSTOMIZE).setVisible(hasCustomize());
 		confirmPanel.getButton(ConfirmPanel.A_HISTORY).setVisible(hasHistory());
 		confirmPanel.getButton(ConfirmPanel.A_ZOOM).setVisible(hasZoom());		
+		confirmPanel.getButton(ConfirmPanel.A_OK).setVisible(p_saveResults);
+
+		checkAutoQuery.setText(Msg.getMsg(Env.getCtx(), "AutoRefresh"));
+		checkAutoQuery.setTooltip(Msg.getMsg(Env.getCtx(), "AutoRefresh"));
+		checkAutoQuery.setName("AutoQuery");
+		checkAutoQuery.setSelected(MSysConfig.getValue(SYSCONFIG_INFO_AUTO_QUERY,"Y",Env.getAD_Client_ID(Env.getCtx())).equals("Y"));  
+		checkAutoQuery.setAttribute("zk_component_ID", "Lookup_Confirm_checkAutoQuery");
+		checkAutoQuery.addActionListener(this);
+		confirmPanel.getButton(ConfirmPanel.A_REFRESH).getParent().insertBefore(checkAutoQuery, confirmPanel.getButton(ConfirmPanel.A_REFRESH));
+		confirmPanel.getButton(ConfirmPanel.A_REFRESH).getParent().insertBefore(new Separator("vertical"), confirmPanel.getButton(ConfirmPanel.A_REFRESH));
 		//
-		if (!isLookup()) 
-		{
-			confirmPanel.getButton(ConfirmPanel.A_OK).setVisible(false);
-		}
+        
+		statusBar.setEastVisibility(false);
+		statusBar.setAttribute("zk_component_ID", "info_statusBar");
+		//
+		Center center = new Center();
+		center.appendChild(confirmPanel);
+		p_southLayout.appendChild(center);
+		South south = new South();
+		south.appendChild(statusBar);
+		p_southLayout.appendChild(south);
 		
-        this.setSizable(true);      
-        this.setMaximizable(true);
+		//
+		// Reset button
+		bReset = confirmPanel.createButton(ConfirmPanel.A_RESET);
+		bReset.addActionListener(this);
+		lblReset = new Label();
+		lblReset.setValue(Util.cleanAmp(Msg.translate(Env.getCtx(), "Reset")));
+
+        p_table.setOddRowSclass(null);
+        p_table.setAttribute("zk_component_ID", "Lookup_Data_SearchResults");        
+        p_table.setVflex(true);
         
+        p_centerLayout.setWidth("100%");
+        //p_centerLayout.setHeight("100%");
+        if (isModal())
+        	p_centerLayout.setStyle("border: none; position: relative");
+        else
+        	p_centerLayout.setStyle("border: none; position: absolute");
+
+		p_centerLayout.appendChild(p_centerNorth);  // May be empty
+		p_centerLayout.appendChild(p_centerCenter); // the table
+		p_centerLayout.appendChild(p_centerSouth);  // detail tabs or other
+        //
+		p_centerCenter.appendChild(p_table);
+		p_centerCenter.setAutoscroll(true);
+        p_centerCenter.setFlex(true);
+		//
+		p_centerSouth.setCollapsible(true);
+		p_centerSouth.setSplittable(true);
+		p_centerSouth.setFlex(true);
+
+		//  Setup the north reset button and criteria grid
+		West spWest = new West();
+		spWest.setBorder("0");
+		Center spCenter = new Center();
+		spCenter.setBorder("0");
+
+		p_northLayout.setWidth("");
+		p_northLayout.appendChild(spWest);
+		p_northLayout.appendChild(spCenter);
+		// spWest - the reset button
+		Grid bGrid = GridFactory.newGridLayout();
+		Rows bRows = new Rows();
+		Row bRow = new Row();
+		bGrid.appendChild(bRows);
+		bRows.appendChild(bRow);
+		bRow.appendChild(bReset);
+		bRow = new Row();
+		bRows.appendChild(bRow);
+		bRow.appendChild(lblReset);
+		spWest.appendChild(bGrid);
+		
+		// The criteria table
+		spCenter.appendChild(p_criteriaGrid);
+
+        Borderlayout mainPanel = new Borderlayout();
+        mainPanel.setWidth("100%");
+        mainPanel.setHeight("100%");
+        //
+        North north = new North();
+        mainPanel.appendChild(north);
+        north.appendChild(p_northLayout);
+        //
+        center = new Center();
+        mainPanel.appendChild(center);
+        center.appendChild(p_centerLayout);
+        //
+        south = new South();
+        mainPanel.appendChild(south);
+        south.appendChild(p_southLayout);
+        //
+        if (!isModal())
+        {
+        	mainPanel.setStyle("position: absolute");
+        }
+		this.appendChild(mainPanel);
         this.addEventListener(Events.ON_OK, this);
+        this.setVisible(true);
+        
+	}  //  init
+	
+	private static String SYSCONFIG_INFO_AUTO_WILDCARD = "INFO_AUTO_WILDCARD";
+	private static String SYSCONFIG_INFO_AUTO_QUERY = "INFO_AUTO_QUERY";
+	
+	protected ConfirmPanel confirmPanel;
+	protected Borderlayout p_northLayout = new Borderlayout();
+	protected Borderlayout p_centerLayout = new Borderlayout();
+	protected Borderlayout p_southLayout = new Borderlayout();
+    protected North p_centerNorth = new North();
+	protected Center p_centerCenter = new Center();
+	protected South p_centerSouth = new South();
+	protected Grid p_criteriaGrid = GridFactory.newGridLayout();
 
-        contentPanel.setOddRowSclass(null);
-	}  //  init
-	protected ConfirmPanel confirmPanel;
+	protected int p_height;
+	protected int p_width;
+
+	private Button bReset;
+	private Label lblReset = new Label();
+
 	/** Master (owning) Window  */
 	protected int				p_WindowNo;
+	/** Tab No to limit context */
+	protected int				p_TabNo;
 	/** Table Name              */
 	protected String            p_tableName;
 	/** Key Column Name         */
@@ -342,19 +547,40 @@
 	protected boolean			p_multipleSelection;
 	/** Initial WHERE Clause    */
 	protected String			p_whereClause = "";
+	/** Concrete WHERE Clause - used by concrete classes  */
+	protected String			p_concreteWhereClause = "";
 	protected StatusBarPanel statusBar = new StatusBarPanel();
 	/**                    */
     private List<Object> line;
+	/** Tracking for previously selected record				*/
+	protected int 				p_selectedRecordKey = 0;
+    /** A refresh of the data is required. Default true (1st time always) */
+	protected boolean 			p_triggerRefresh = true;
+
+    /** Perform a refresh now */
+    protected boolean 			p_refreshNow = false;
+	/** Will the results of the search be saved?	*/
+	protected boolean 			p_saveResults = true;
+	/** Does the layout need to be rebuilt. True by default (1st time always) */
+	protected boolean 			p_resetColumns = true;
 
 	private boolean			    m_ok = false;
 	/** Cancel pressed - need to differentiate between OK - Cancel - Exit	*/
 	private boolean			    m_cancel = false;
+	/** Reset the record ID - false on load, reset by any action that reruns the query   */
+	protected boolean				m_resetRecordID = false;
 	/** Result IDs              */
 	private ArrayList<Integer>	m_results = new ArrayList<Integer>(3);
     
     private ListModelTable model;
 	/** Layout of Grid          */
 	protected ColumnInfo[]     p_layout;
+	/** SQL FROM Clause          */
+	protected String		    p_sqlFrom;
+	/** SQL Where Clause          */
+	protected String		    p_sqlWhere;
+	/** SQL Where Clause          */
+	protected String		    p_sqlOrder;
 	/** Main SQL Statement      */
 	private String              m_sqlMain;
 	/** Count SQL Statement		*/
@@ -374,7 +600,8 @@
 	/**	Logger			*/
 	protected CLogger log = CLogger.getCLogger(getClass());
 	
-	protected WListbox contentPanel = new WListbox();
+	protected WListbox p_table = new WListbox();
+	protected Checkbox checkAutoQuery = new Checkbox();
 	protected Paging paging;
 	protected int pageNo;
 	private int m_count;
@@ -382,7 +609,11 @@
 	private int cacheEnd;
 	private boolean m_useDatabasePaging = false;
 	private BusyDialog progressWindow;
+	private boolean m_showTotals;
 	
+	/**  record the numbe of selected records in a multi-selection event */
+	protected int p_numRecordsSelected = 0;
+
 	private static final String[] lISTENER_EVENTS = {};
 
 	/**
@@ -412,16 +643,23 @@
 	{
 		statusBar.setStatusDB(text);
 	}	//	setStatusDB
-
+	
 	protected void prepareTable (ColumnInfo[] layout, 
             String from, 
             String where, 
             String orderBy)
 	{
-        String sql =contentPanel.prepareTable(layout, from,
-                where,p_multipleSelection && m_lookup,
+	//  For dynamic columns, we need to wipe the table.
+		if (p_resetColumns)
+		{
+			p_table.clear();
+			//  Prevent repeats
+			p_resetColumns = false;
+		}
+        String sql =p_table.prepareTable(layout, from,
+                where,p_multipleSelection && m_modal,
                 getTableName(),false);
-        p_layout = contentPanel.getLayout();
+        p_layout = p_table.getLayout();
 		m_sqlMain = sql;
 		m_sqlCount = "SELECT COUNT(*) FROM " + from + " WHERE " + where;
 		//
@@ -431,11 +669,98 @@
 			m_sqlOrder = " ORDER BY " + orderBy;			
 	}   //  prepareTable
 
-	
+	/**
+     *  Set the selected row to a particular key if found
+     *  @returns true if successful
+     */
+    protected boolean setSelectedRow(int record_id)
+    {
+        if (p_table == null)
+        {
+        	return false;
+        }
+
+        // Is there a key column?
+        if (p_table.getKeyColumnIndex() == -1)
+        {
+            return false;
+        }
+        
+    	// If the query is empty, return
+        if (p_table.getRowCount() == 0)
+        {
+            return false;
+        }
+
+		if (p_table.isMultiSelection() && p_table.isDefaultSelected()) // Select all by default
+		{
+			return false; // All rows will be selected by default
+		}
+
+        if (record_id <= 0)
+        {
+        	//  Select the first record
+        	p_table.addItemToSelection(p_table.getItemAtIndex(0));
+        	log.fine("Selected the first record shown");
+        	return true;
+        }
+        
+        //  Is the record already selected?
+        Integer selectedKey = (Integer) getSelectedKey();
+        if(selectedKey != null && selectedKey.intValue() == record_id)  //  We're already there
+        	return true;
+        
+        //  Nothing or the wrong row selected - try to find the record in the table
+    	int rows = p_table.getRowCount();
+    	
+    	//  Ignore the total row
+        if (p_table.getShowTotals())
+        	rows = rows - 1;
+
+    	for (int row = 0; row < rows; row++)
+        {
+            Object data = p_table.getModel().getValueAt(row, p_table.getKeyColumnIndex());
+            if (data instanceof IDColumn)
+            {
+                IDColumn dataColumn = (IDColumn)data;
+                if (dataColumn.getRecord_ID() == record_id)
+                {
+                	p_table.addItemToSelection(p_table.getItemAtIndex(row));
+                	log.fine("Record_ID = " + record_id + " found at row " + row);
+                	return true;
+                }
+            }
+        }
+    	
+    	//  record_id not found in the current list.  Select the first shown.
+    	p_table.addItemToSelection(p_table.getItemAtIndex(0));
+    	log.fine("Record_ID = " + record_id + " not found in the current table. Selecting the first record.");
+        return true;
+        
+    }   //  setSelectedRow
+
+	/**
+	 *	autoQuery?
+	 *	- yes if true
+	 *  @return true for automatic queries, else must refresh
+	 */
+	public boolean autoQuery()
+	{
+		return checkAutoQuery.isSelected();
+	}	//	autoQuery
+
+	/**
+	 *  Prepare and Execute the query
+	 */
+	protected void prepareAndExecuteQuery()
+	{
+    	showBusyDialog();
+    	Clients.response(new AuEcho(this, "onQueryCallback", null));
+	}
 	/**************************************************************************
 	 *  Execute Query
 	 */
-	protected void executeQuery()
+	private void executeQuery()
 	{
 		line = new ArrayList<Object>();
 		cacheStart = -1;
@@ -517,7 +842,7 @@
     			model = new ListModelTable(subList);
     			model.setSorter(this);
 	            model.addTableModelListener(this);
-	            contentPanel.setData(model, null);
+	            p_table.setData(model, null);
 	            
 	            pageNo = 0;
         	}
@@ -532,14 +857,14 @@
 	            model = new ListModelTable(readLine(0, -1));
 	            model.setSorter(this);
 	            model.addTableModelListener(this);
-	            contentPanel.setData(model, null);
+	            p_table.setData(model, null);
         	}
         }
        // metas c.ghita@metas.ro : start  
         else
         {
         	model = new ListModelTable();
-            contentPanel.setData(model, null);
+            p_table.setData(model, null);
             
         }
         // metas c.ghita@metas.ro : start
@@ -644,16 +969,16 @@
 	}
 
     private void addDoubleClickListener() {
-		Iterator<?> i = contentPanel.getListenerIterator(Events.ON_DOUBLE_CLICK);
+		Iterator<?> i = p_table.getListenerIterator(Events.ON_DOUBLE_CLICK);
 		while (i.hasNext()) {
 			if (i.next() == this)
 				return;
 		}
-		contentPanel.addEventListener(Events.ON_DOUBLE_CLICK, this);
+		p_table.addEventListener(Events.ON_DOUBLE_CLICK, this);
 	}
     
     protected void insertPagingComponent() {
-		contentPanel.getParent().insertBefore(paging, contentPanel.getNextSibling());
+		p_table.getParent().insertBefore(paging, p_table.getNextSibling());
 	}
     
     public Vector<String> getColumnHeader(ColumnInfo[] p_layout)
@@ -720,7 +1045,7 @@
 	protected void saveSelection ()
 	{
 		//	Already disposed
-		if (contentPanel == null)
+		if (p_table == null)
 			return;
 
 		log.config( "OK=" + m_ok);
@@ -728,7 +1053,7 @@
 		if (!m_ok)      //  did not press OK
 		{
 			m_results.clear();
-			contentPanel = null;
+			p_table = null;
 			this.detach();
             return;
 		}
@@ -758,7 +1083,7 @@
 	 */
 	protected Integer getSelectedRowKey()
 	{
-		Integer key = contentPanel.getSelectedRowKey();
+		Integer key = p_table.getSelectedRowKey();
 		
 		return key;        
 	}   //  getSelectedRowKey
@@ -772,17 +1097,17 @@
     {
         ArrayList<Integer> selectedDataList = new ArrayList<Integer>();
         
-        if (contentPanel.getKeyColumnIndex() == -1)
+        if (p_table.getKeyColumnIndex() == -1)
         {
             return selectedDataList;
         }
         
         if (p_multipleSelection)
         {
-        	int[] rows = contentPanel.getSelectedIndices();
+        	int[] rows = p_table.getSelectedIndices();
             for (int row = 0; row < rows.length; row++)
             {
-                Object data = contentPanel.getModel().getValueAt(rows[row], contentPanel.getKeyColumnIndex());
+                Object data = p_table.getModel().getValueAt(rows[row], p_table.getKeyColumnIndex());
                 if (data instanceof IDColumn)
                 {
                     IDColumn dataColumn = (IDColumn)data;
@@ -797,10 +1122,10 @@
         
         if (selectedDataList.size() == 0)
         {
-        	int row = contentPanel.getSelectedRow();
-    		if (row != -1 && contentPanel.getKeyColumnIndex() != -1)
+        	int row = p_table.getSelectedRow();
+    		if (row != -1 && p_table.getKeyColumnIndex() != -1)
     		{
-    			Object data = contentPanel.getModel().getValueAt(row, contentPanel.getKeyColumnIndex());
+    			Object data = p_table.getModel().getValueAt(row, p_table.getKeyColumnIndex());
     			if (data instanceof IDColumn)
     				selectedDataList.add(((IDColumn)data).getRecord_ID());
     			if (data instanceof Integer)
@@ -845,6 +1170,15 @@
 	}	//	isCancelled
 
 	/**
+	 * 
+	 * @return true if OK button was pressed
+	 */
+	public boolean isOk()
+	{
+		return m_ok;
+	}
+	
+	/**
 	 *	Get where clause for (first) selected key
 	 *  @return WHERE Clause
 	 */
@@ -880,6 +1214,76 @@
 		return sb.toString();
 	}	//	getSelectedSQL;
 
+	/**
+	 *  Test SQL WHERE parameter for validity
+	 *  @param f CText field
+	 *  @return Upper case text with wild cards as configured
+	 */
+	public static boolean isValidSQLText (Textbox f)
+	{
+		if (f != null && f.getText() != null)
+			return isValidSQLText(f.getText());
+		return false;
+	}   //  isValidSQLText
+
+	/**
+	 *  Test SQL WHERE parameter for validity
+	 *  @param s string
+	 *  @return Upper case text with wild cards as configured
+	 */
+	public static boolean isValidSQLText (String s)
+	{
+		// Don't trap single "%".  These can be used to find
+		// all non-null values.
+		if (s.length() > 0)
+			return true;
+		return false;
+	}   //  isValidSQLText
+
+	/**
+	 *  Get SQL WHERE parameter
+	 *  @param f CText field
+	 *  @return Upper case text with wild cards as configured
+	 */
+	public static String getSQLText (Textbox f)
+	{
+		String s = f.getText();
+		return getSQLText(s);
+	}   //  getSQLText
+
+	/**
+	 *  Get SQL WHERE parameter
+	 *  @param s string
+	 *  @return Upper case text with wild cards as configured
+	 */
+	public static String getSQLText (String s)
+	{
+		s = s.toUpperCase();
+		
+		//  Check the configuration for the wild card pattern to apply
+		//  It can be "%*" for first-only, "*%" for last-only, "%*%" for both or "*" for none.
+		//  The pattern string must start and/or end with a "%" symbol.  The "*" symbol can be any string.
+		//  The default is last-only.  "%" or "%%" are valid and will be interpreted as both.
+		String wildCardPattern = MSysConfig.getValue(SYSCONFIG_INFO_AUTO_WILDCARD,"*%",Env.getAD_Client_ID(Env.getCtx()));
+		
+		if (wildCardPattern.startsWith("%"))
+		{
+			if (!s.startsWith("%"))
+				s = "%" + s;
+		}
+
+		if (wildCardPattern.endsWith("%"))
+		{
+			if (!s.endsWith("%"))
+				s += "%";
+		}
+		
+		// Need static logger
+		CLogger mlog = CLogger.get();
+		mlog.fine("String with wild cards: " + s);
+
+		return s;
+	}   //  getSQLText
 		
 		
 	/**
@@ -910,13 +1314,13 @@
 	/**
 	 *  Enable OK, History, Zoom if row/s selected
      *  ---
-     *  Changes: Changed the logic for accomodating multiple selection
+     *  Changes: Changed the logic for accommodating multiple selection
      *  @author ashley
 	 */
 	protected void enableButtons ()
 	{
-		boolean enable = (contentPanel.getSelectedCount() == 1);
-		confirmPanel.getOKButton().setEnabled(contentPanel.getSelectedCount() > 0);
+		boolean enable = (p_table.getSelectedCount() == 1);
+		confirmPanel.getOKButton().setEnabled(p_table.getSelectedCount() > 0);
 		
 		if (hasHistory())
 			confirmPanel.getButton(ConfirmPanel.A_HISTORY).setEnabled(enable);
@@ -1028,81 +1432,212 @@
     
     public void onEvent(Event event)
     {
+    	
+    	// Handle actions 
+
+		if(!p_loadedOK)
+			return;
+
         if  (event!=null)
         {
-            if (event.getTarget().equals(confirmPanel.getButton(ConfirmPanel.A_OK)))
+    		if (event.getName().equals("onOK"))
+    		{
+    			//  The enter key was pressed in a criteria field.  Ignore it.  The key click will trigger
+    			//  other events that will be trapped.
+    			event.stopPropagation();
+    			return;
+    		}
+
+        	Component component = event.getTarget();
+    		
+    		if(component != null)
+    		{
+    			//  Generic components in the criteria fields
+    			if (component instanceof Textbox)
+    			{
+    				Textbox tb = ((Textbox) component);
+
+    				if (tb.hasChanged())
+    				{
+    					p_triggerRefresh = true;
+    				}
+    				else
+    				{
+    					// Special case where text fields don't change but cause an event
+    					// Interpret this as a click of the OK button and close EXCEPT
+    					// if the dialog was opened from a menu.
+    					if (isModal())
+    						dispose(true);  //  Save the selection and close;
+    					else
+    						return;
+    				}
+    			}
+    			else if (component instanceof Checkbox)
+    			{
+    				//  Check box changes generally always cause a refresh
+    				//  Capture changes that don't in a specific event handler
+    				p_triggerRefresh = true;
+    				
+    				Checkbox cb = (Checkbox) component;
+    				if (cb.getName() != null && cb.getName().equals("AutoQuery"))
+    				{
+    					//  Only trigger a refresh if the check box is selected
+    					if(!cb.isSelected())
+    					{
+    						return;
+    					}
+    				}
+    			}
+    			else 
+    			{
+    				//  Assume another type of component
+    				if(event.getName().equals("onChange"))
+					{
+    					if (component instanceof Combobox)
+    					{
+    						 if (hasOutstandingChanges())  //  Test for meaningful changes. Null == " ".
+								 p_triggerRefresh = true;
+    					}
+    					else
+    						p_triggerRefresh = true;	
+					}
+				}
+    			
+    			//  Buttons
+	        	if (component.equals(confirmPanel.getButton(ConfirmPanel.A_OK)))
+	            {
+					//  The enter key is mapped to the Ok button which will close the dialog.
+					//  Don't let this happen if there are outstanding changes to any of the 
+					//  VLookup fields in the criteria
+					if (hasOutstandingChanges())
+					{
+						return;
+					}
+					else
+					{
+						// We might close
+						p_triggerRefresh = false;
+					}
+	                onOk();
+	            }
+	            else if (component == p_table && event.getName().equals(Events.ON_DOUBLE_CLICK))
+	            {
+	            	onDoubleClick();
+	            }
+				else if (component.equals(confirmPanel.getButton(ConfirmPanel.A_RESET)))
+				{
+					//  Created by the reset button, if used, to reset the criteria panel.
+					//  Go back to the defaults
+					p_loadedOK = false;  // Prevent other actions
+					initInfo();  // Should be overridden in the subordinate class
+					p_loadedOK = true;
+					
+					p_triggerRefresh = true;
+					p_refreshNow = true;  // Ignore the autoQuery value and refresh now.
+					
+				}
+				else if (component.equals(confirmPanel.getButton(ConfirmPanel.A_REFRESH)))
+	            {            	
+					//  Refresh always causes a requery in case there are
+					//  changes to the underlying tables - even if the 
+					//  criteria haven't changed.
+					p_resetColumns = true;
+					p_triggerRefresh = true;
+					p_refreshNow = true;	
+	            }
+	            else if (component.equals(confirmPanel.getButton(ConfirmPanel.A_CANCEL)))
+	            {
+	            	m_cancel = true;
+	                dispose(false);  // close
+	            }
+	            // Elaine 2008/12/16
+	            else if (component.equals(confirmPanel.getButton(ConfirmPanel.A_HISTORY)))
+	            {
+	            	if (!p_table.getChildren().isEmpty() && p_table.getSelectedRowKey()!=null)
+	                {
+	            		showHistory();
+	                }
+	            	return;
+	            }
+	    		else if (component.equals(confirmPanel.getButton(ConfirmPanel.A_CUSTOMIZE)))
+	    		{
+	            	if (!p_table.getChildren().isEmpty() && p_table.getSelectedRowKey()!=null)
+	                {
+	            		customize();
+	                }
+	            	return;
+	    		}
+	            //
+	            else if (component.equals(confirmPanel.getButton(ConfirmPanel.A_ZOOM)))
+	            {
+	                if (!p_table.getChildren().isEmpty() && p_table.getSelectedRowKey()!=null)
+	                {
+	                    zoom();
+	                    if (isModal())
+	                    	this.detach();
+	                }
+	                return;
+	            }
+	            else if (component == paging)
+	            {
+	            	int pgNo = paging.getActivePage();
+	            	if (pageNo != pgNo) 
+	            	{
+	            	
+	            		p_table.clearSelection();
+	    			
+	            		pageNo = pgNo;
+	            		int start = pageNo * PAGE_SIZE;
+	            		int end = start + PAGE_SIZE;
+	            		List<Object> subList = readLine(start, end);
+	        			model = new ListModelTable(subList);
+	        			model.setSorter(this);
+	    	            model.addTableModelListener(this);
+	    	            p_table.setData(model, null);
+	    	            
+	    				p_table.setSelectedIndex(0);
+	    			}
+	            }
+    		}
+    		
+    		//  All events, unless trapped above, will get here.
+			//  Check if we need to reset the table.  The flag is reset when
+			//  the table is reset.  The first change triggers the reset.
+			p_resetColumns = p_resetColumns || columnIsDynamic(component);
+			//
+            // Refresh if the autoquery feature is selected or the refresh button is clicked.
+            if( (p_triggerRefresh && autoQuery()) || p_refreshNow)
             {
-                onOk();
-            }
-            else if (event.getTarget() == contentPanel && event.getName().equals(Events.ON_DOUBLE_CLICK))
-            {
-            	onDoubleClick();
-            }
-            else if (event.getTarget().equals(confirmPanel.getButton(ConfirmPanel.A_REFRESH)))
-            {
-            	showBusyDialog();
-            	Clients.response(new AuEcho(this, "onQueryCallback", null));
-            }
-            else if (event.getTarget().equals(confirmPanel.getButton(ConfirmPanel.A_CANCEL)))
-            {
-            	m_cancel = true;
-                dispose(false);
-            }
-            // Elaine 2008/12/16
-            else if (event.getTarget().equals(confirmPanel.getButton(ConfirmPanel.A_HISTORY)))
-            {
-            	if (!contentPanel.getChildren().isEmpty() && contentPanel.getSelectedRowKey()!=null)
-                {
-            		showHistory();
-                }
-            }
-    		else if (event.getTarget().equals(confirmPanel.getButton(ConfirmPanel.A_CUSTOMIZE)))
-    		{
-            	if (!contentPanel.getChildren().isEmpty() && contentPanel.getSelectedRowKey()!=null)
-                {
-            		customize();
-                }
-    		}
-            //
-            else if (event.getTarget().equals(confirmPanel.getButton(ConfirmPanel.A_ZOOM)))
-            {
-                if (!contentPanel.getChildren().isEmpty() && contentPanel.getSelectedRowKey()!=null)
-                {
-                    zoom();
-                    if (isLookup())
-                    	this.detach();
-                }
-            }
-            else if (event.getTarget() == paging)
-            {
-            	int pgNo = paging.getActivePage();
-            	if (pageNo != pgNo) 
-            	{
-            	
-            		contentPanel.clearSelection();
-    			
-            		pageNo = pgNo;
-            		int start = pageNo * PAGE_SIZE;
-            		int end = start + PAGE_SIZE;
-            		List<Object> subList = readLine(start, end);
-        			model = new ListModelTable(subList);
-        			model.setSorter(this);
-    	            model.addTableModelListener(this);
-    	            contentPanel.setData(model, null);
-    	            
-    				contentPanel.setSelectedIndex(0);
-    			}
-            }
-            //default
-            else
-            {
-            	showBusyDialog();
-            	Clients.response(new AuEcho(this, "onQueryCallback", null));
+            	prepareAndExecuteQuery();
+            	p_refreshNow = false;
             }
         }
     }  //  onEvent
 
-	private void showBusyDialog() {
+	/**
+	 * Capture value changes in WSearchEditor components specifically.
+	 * Copy and override as required.
+	 * @param evt
+	 */
+	public void valueChange(ValueChangeEvent evt) 
+	{
+		Object c = null;
+		
+		if (evt.getSource() instanceof WSearchEditor)
+			c = ((WSearchEditor) evt.getSource()).getComponent();
+		else if (evt.getSource() instanceof WPAttributeEditor)
+			c = ((WPAttributeEditor) evt.getSource()).getComponent();
+				
+		if (c == null)
+			return;
+
+		// Pass it off to the event handler to process.
+		Event e = new Event("onChange", (Component) c);
+		onEvent(e);
+
+	}  //  valueChange
+
+	protected void showBusyDialog() {
 		progressWindow = new BusyDialog();
 		progressWindow.setPage(this.getPage());
 		progressWindow.doHighlighted();
@@ -1117,28 +1652,54 @@
     {
     	try
     	{
-            	executeQuery();
-                renderItems();
-            }
+    		if (p_triggerRefresh)  //  Could be false if nothing has changed
+    		{
+    			if (this.p_resetColumns)  //  Reset the table
+    			{
+    				prepareTable(getTableLayout(),
+    						getFromClause(),
+    						getWhereClause(),
+    						getOrderClause());
+    				this.p_table.setShowTotals(getShowTotals());
+    				p_resetColumns = false;
+    			}
+    			//
+    			p_triggerRefresh = false;
+    		}
+    		//  Find what is currently selected
+    		//  Re-selection of the column happens after the query is run
+    		Integer selectedKey = (Integer) getSelectedRowKey();
+            if(selectedKey != null && selectedKey.intValue() != 0)
+            	this.p_selectedRecordKey = selectedKey.intValue();  
+
+    		setFieldOldValues();  // Remember the query criteria values
+            executeQuery();		  // Run the query
+            renderItems();        // Display the table
+    		//  One query has been performed.  From now on, ignore the record_id and use the search criteria.
+    		m_resetRecordID = true; //  A new record ID will be selected
+        }
     	finally
     	{
+    		reselectRecord();	// Try to reselect the same record as was previously selected
+    		refresh();			// Refresh any subordinate tables or other parts of the info window
+    		enableButtons();	// Enable buttons based on the type of record selected
     		hideBusyDialog();
     	}
     }
     
     private void onOk() 
     {
-		if (!contentPanel.getChildren().isEmpty() && contentPanel.getSelectedRowKey()!=null)
+		if (!p_table.getChildren().isEmpty() && p_table.getSelectedRowKey()!=null)
 		{
-		    dispose(true);
+		    dispose(p_saveResults);
 		}
 	}
     
     private void onDoubleClick()
 	{
-		if (isLookup())
+		if (isModal())
 		{
-			dispose(true);
+			dispose(p_saveResults);
 		}
 		else
 		{
@@ -1149,20 +1710,90 @@
 
     public void tableChanged(WTableModelEvent event)
     {
-    	enableButtons();
+		//  Assume a selection event took place
+		// p_selectedRecordKey = p_table.getLeadRowKey();
+    	// enableButtons();    	
     }
     
+    /**
+     * Reselect the record
+     */
+    public void reselectRecord()
+    {
+		//  Try to reselect the record
+		if(!setSelectedRow(p_selectedRecordKey))		
+		{
+			//  Nothing was selected, or the query is empty
+			noRecordSelected();
+			setNumRecordsSelected(0);
+		}
+		else  //  Found and selected the same record or selected the first record
+		{
+			recordSelected(p_table.getLeadRowKey());
+			setNumRecordsSelected(1);
+		}
+		p_selectedRecordKey = p_table.getLeadRowKey();
+    }
+    
+	/**
+	 * Reset the record id
+	 */
+	public boolean isResetRecordID()
+	{
+		return m_resetRecordID;
+	}
+
+	/**
+	 * Refresh the panel following a query
+	 */
+	protected void refresh()
+	{
+		//  Refresh the panel - override.
+	}
+	
+	/**
+	 * Test the object for existence and valid data 
+	 * @param o - one of a WSearchEditor, VAttributeInstance
+	 * @return
+	 */
+	public boolean isValidVObject(Object o)
+	{
+		if (o != null)
+		{
+			try 
+			{
+				if (o instanceof WSearchEditor)
+				{
+					return 	(((WSearchEditor) o).getValue() != null && ((Integer)((WSearchEditor) o).getValue()).intValue() != 0);
+				}
+				else if (o instanceof WTableDirEditor)
+				{
+					return 	(((WTableDirEditor) o).getValue() != null && ((Integer)((WTableDirEditor) o).getValue()).intValue() != 0);
+				}
+				else if (o instanceof WPAttributeEditor)
+				{
+					return 	(((WPAttributeEditor) o).getValue() != null && ((Integer)((WPAttributeEditor) o).getValue()).intValue() != 0);
+				}
+			}
+			catch(ClassCastException e)
+			{
+				return false;
+			}
+		}
+		return false;
+	}
+
     public void zoom()
     {
     	if (listeners != null && listeners.size() > 0)
     	{
 	        ValueChangeEvent event = new ValueChangeEvent(this,"zoom",
-	                   contentPanel.getSelectedRowKey(),contentPanel.getSelectedRowKey());
+	                   p_table.getSelectedRowKey(),p_table.getSelectedRowKey());
 	        fireValueChange(event);
     	}
     	else
     	{
-    		Integer recordId = contentPanel.getSelectedRowKey();
+    		Integer recordId = p_table.getSelectedRowKey();
     		int AD_Table_ID = MTable.getTable_ID(p_tableName);
     		if (AD_Table_ID <= 0)
     		{
@@ -1176,6 +1807,7 @@
     	}
     }
     
+	
     public void addValueChangeListener(ValueChangeListener listener)
     {
         if (listener == null)
@@ -1193,6 +1825,15 @@
            listener.valueChange(event);
         }
     }
+    
+	/**
+	 *	Dispose (not OK)
+	 */
+	public void dispose()
+	{
+		dispose(false);
+	}	//	dispose
+
     /**
      *  Dispose and save Selection
      *  @param ok OK pressed
@@ -1203,7 +1844,7 @@
         m_ok = ok;
 
         //  End Worker
-        if (isLookup())
+        if (isModal())
         {
         	saveSelection();
         }
@@ -1271,18 +1912,173 @@
 		}
 	}
 
-    public boolean isLookup()
+    public boolean isModal()
     {
-    	return m_lookup;
+    	return m_modal;
     }
 
     public void scrollToSelectedRow()
     {
-    	if (contentPanel != null && contentPanel.getSelectedIndex() >= 0) {
-    		Listitem selected = contentPanel.getItemAtIndex(contentPanel.getSelectedIndex());
+    	if (p_table != null && p_table.getSelectedIndex() >= 0) {
+    		Listitem selected = p_table.getItemAtIndex(p_table.getSelectedIndex());
     		if (selected != null) {
     			selected.focus();
     		}
     	}
     }
+    
+	/**
+	 * Determine if the column causes dynamic changes in the table layout
+	 * @param o
+	 * @return true if changes result
+	 */
+	protected boolean columnIsDynamic(Object o)
+	{
+		// List of search fields that cause changes to the table layout
+		// See getProductLayout() and component attribute
+		if (o != null)
+		{
+			Component c = ((Component) o);
+			try {
+				if (c.getAttribute("IsDynamic") != null)
+				{
+					if (c.getAttribute("IsDynamic").equals("True"))
+					{
+						return true;
+					}
+				}			
+			}
+			catch(NullPointerException npe)
+			{
+				return false;
+			}
+		}
+		return false;
+	}
+	
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		//  fieldValue.set_oldValue();
+		return;
+	}
+
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?  Override with specific tests.
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
+	{
+		return false;
+	}
+
+	/**
+	 * Generic init call invoked by the event handler to reset the criteria panel.  
+	 * Used to call class specific initInfo function with reset parameters.
+	 */
+	protected void initInfo ()
+	{
+	}
+
+	protected void setShowTotals(boolean showTotals)
+	{
+		m_showTotals = showTotals;
+		p_table.setShowTotals(m_showTotals);
+	}
+
+	protected boolean getShowTotals()
+	{
+		return m_showTotals;
+	}
+
+	/**
+	 * @return the p_layout
+	 */
+	protected ColumnInfo[] getTableLayout() {
+		return p_layout;
+	}
+
+	/**
+	 * @param p_layout the p_layout to set
+	 */
+	protected void setTableLayout(ColumnInfo[] layout) {
+		this.p_layout = layout;
+	}
+
+	/**
+	 * @return the p_sqlFrom
+	 */
+	protected String getFromClause() {
+		return p_sqlFrom;
+	}
+
+	/**
+	 * @param from the p_sqlFrom to set
+	 */
+	protected void setFromClause(String from) {
+		p_sqlFrom = from;
+	}
+
+	/**
+	 * @return the p_sqlWhere
+	 */
+	protected String getWhereClause() {
+		return p_whereClause;
+	}
+
+	/**
+	 * @param where the p_sqlWhere to set
+	 */
+	protected void setWhereClause(String where) {
+		p_whereClause = where;
+	}
+
+	/**
+	 * @return the p_sqlOrder
+	 */
+	protected String getOrderClause() {
+		return p_sqlOrder;
+	}
+
+	/**
+	 * @param order the p_sqlOrder to set
+	 */
+	protected void setOrderClause(String order) {
+		p_sqlOrder = order;
+	}
+
+	/**
+	 * A record was selected - take action to sync subordinate tables if any
+	 * @param key of the selected record
+	 */
+	protected void recordSelected(int key)
+	{
+		return;
+	}
+	/**
+	 * No record was selected - take action to sync subordinate tables if any
+	 */
+	protected void noRecordSelected()
+	{
+		return;
+	}
+
+	/**
+	 * @return the number of Records Selected
+	 */
+	protected int getNumRecordsSelected() {
+		return p_numRecordsSelected;
+	}
+
+	/**
+	 * @param the number of records selected
+	 */
+	protected void setNumRecordsSelected(int numRecordsSeleted) {
+		p_numRecordsSelected = numRecordsSeleted;
+	}
+
 }	//	Info
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoPanelFactory.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoPanelFactory.java	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,26 @@
+package org.adempiere.webui.panel;
+
+public interface InfoPanelFactory {
+
+	
+	/**
+	 *  Factory Constructor
+     * @param WindowNo  WindowNo
+     * @param modal	Open the window as modal
+     * @param tableName tableName
+     * @param keyColumn keyColumn
+     * @param  record_id The record ID to find
+	 * @param  value query value to find, exclusive of record_id
+	 * @param  multiSelection  allow to select more than one row
+	 * @param saveResults flag if the results will be saved in context
+     * @param whereClause   whereClause
+	 *  
+	 *
+	 * @author Michael McKay, 
+	 * 				<li>ADEMPIERE-72 VLookup and Info Window improvements
+	 * 					https://adempiere.atlassian.net/browse/ADEMPIERE-72
+	 */
+	public InfoPanel create(int WindowNo, boolean modal,
+			String tableName, String keyColumn, int record_id, String value, 
+			boolean multipleSelection, boolean saveResults, String whereClause);
+}
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoPaymentPanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoPaymentPanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoPaymentPanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -21,40 +21,37 @@
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 import java.sql.Timestamp;
-import java.util.Date;
+import java.text.DecimalFormat;
+import java.text.SimpleDateFormat;
 
 import org.adempiere.webui.apps.AEnv;
 import org.adempiere.webui.component.Checkbox;
 import org.adempiere.webui.component.Datebox;
-import org.adempiere.webui.component.Grid;
-import org.adempiere.webui.component.GridFactory;
 import org.adempiere.webui.component.Label;
+import org.adempiere.webui.component.NumberBox;
 import org.adempiere.webui.component.Row;
 import org.adempiere.webui.component.Rows;
 import org.adempiere.webui.component.Textbox;
 import org.adempiere.webui.editor.WEditor;
 import org.adempiere.webui.editor.WSearchEditor;
-import org.adempiere.webui.event.ValueChangeEvent;
 import org.adempiere.webui.event.ValueChangeListener;
-import org.adempiere.webui.event.WTableModelEvent;
+import org.compiere.apps.search.Info_Column;
 import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
+import org.compiere.model.MColumn;
 import org.compiere.model.MLookupFactory;
+import org.compiere.model.MPayment;
 import org.compiere.model.MQuery;
 import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
 import org.compiere.util.Msg;
+import org.compiere.util.Trx;
 import org.compiere.util.Util;
+import org.zkoss.zk.ui.Component;
+import org.zkoss.zk.ui.event.Event;
 import org.zkoss.zk.ui.event.EventListener;
 import org.zkoss.zk.ui.event.Events;
-import org.zkoss.zkex.zul.Borderlayout;
-import org.zkoss.zkex.zul.Center;
-import org.zkoss.zkex.zul.North;
-import org.zkoss.zkex.zul.South;
-import org.zkoss.zul.Div;
 import org.zkoss.zul.Hbox;
-import org.zkoss.zul.Separator;
-import org.zkoss.zul.Vbox;
 
 /**
 * Based on InfoPayment written by Jorg Janke
@@ -65,6 +62,10 @@
 * Zk Port
 * @author Elaine
 * @version	InfoPayment.java Adempiere Swing UI 3.4.1
+* 
+* @author Michael McKay, ADEMPIERE-72 VLookup and Info Window improvements
+* 	<li>https://adempiere.atlassian.net/browse/ADEMPIERE-72
+* 
 */
 
 public class InfoPaymentPanel extends InfoPanel implements ValueChangeListener, EventListener
@@ -73,27 +74,34 @@
 	 * 
 	 */
 	private static final long serialVersionUID = -7346527589727807179L;
-	private Textbox fDocumentNo = new Textbox();
-	private Textbox fAmtTo = new Textbox();
-	private Textbox fAmtFrom = new Textbox();
+	
+	private int fieldID = 0;
+	
+	private Textbox fDocumentNo;
+	private NumberBox fAmtTo;
+	private NumberBox fAmtFrom;
 
 	private WEditor fBPartner_ID;
+	private WEditor fBankAccount_ID;
 
 	private Datebox fDateTo = new Datebox();
 	private Datebox fDateFrom = new Datebox();
 
-	private Checkbox fIsReceipt = new Checkbox();
+	private Checkbox fCheckReceipt = new Checkbox();
+	private Checkbox fCheckPayment = new Checkbox();
 	
 	private Label lDocumentNo = new Label(Msg.translate(Env.getCtx(), "DocumentNo"));
 	private Label lDateFrom = new Label(Msg.translate(Env.getCtx(), "DateTrx"));
 	private Label lDateTo = new Label("-");
 	private Label lAmtFrom = new Label(Msg.translate(Env.getCtx(), "PayAmt"));
 	private Label lAmtTo = new Label("-");
-	private Borderlayout layout;
-	private Vbox southBody;
 
+	/** From Clause             */
+	private static String s_From = " C_Payment_v p";
+	/** Order Clause             */
+	private static String s_Order = "2,3,4";
 	/**  Array of Column Info    */
-	private static final ColumnInfo[] s_paymentLayout = {
+	private static final ColumnInfo[] s_Layout = {
 		new ColumnInfo(" ", "p.C_Payment_ID", IDColumn.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "C_BankAccount_ID"),
 			"(SELECT b.Name || ' ' || ba.AccountNo FROM C_Bank b, C_BankAccount ba WHERE b.C_Bank_ID=ba.C_Bank_ID AND ba.C_BankAccount_ID=p.C_BankAccount_ID)", String.class),
@@ -116,91 +124,132 @@
 		new ColumnInfo(Msg.translate(Env.getCtx(), "WriteOffAmt"),
 			"p.WriteOffAmt",  BigDecimal.class),
 		new ColumnInfo(Msg.translate(Env.getCtx(), "IsAllocated"),
-			"p.IsAllocated",  Boolean.class)
+			"p.IsAllocated",  Boolean.class),
+		new Info_Column(Msg.translate(Env.getCtx(), "DocStatus"), "docstatus", String.class)
+
 	};
 	
 	/**
 	 *  Detail Protected Constructor
 	 *  
-	 *  @param modal modal
 	 *  @param WindowNo window no
+	 *  @param record_id The id of the record to search for
 	 *  @param value query value
 	 *  @param multiSelection multiple selections
 	 *  @param whereClause where clause
 	 */
-	protected InfoPaymentPanel(int WindowNo, String value,
+	protected InfoPaymentPanel(int WindowNo, int record_id, String value,
 			boolean multiSelection, String whereClause)
 	{
-		this(WindowNo, value, multiSelection, whereClause, true);
+		this(WindowNo, true, record_id, value, multiSelection, true, whereClause);
 	}
 	
 	/**
 	 *  Detail Protected Constructor
 	 *
+	 *  @param WindowNo window no
 	 *  @param modal modal
-	 *  @param WindowNo window no
+	 *  @param record_id The id of the record to search for
 	 *  @param value query value
 	 *  @param multiSelection multiple selections
 	 *  @param whereClause where clause
 	 */
-	protected InfoPaymentPanel(int WindowNo, String value,
-			boolean multiSelection, String whereClause, boolean lookup)
+	protected InfoPaymentPanel(int WindowNo, boolean modal, int record_id, String value,
+			boolean multiSelection, boolean saveResults, String whereClause)
 	{
-		super(WindowNo, "p", "C_Payment_ID", multiSelection, whereClause, lookup);
+		super(WindowNo, modal, "p", "C_Payment_ID", multiSelection, saveResults, whereClause);
+		log.info( "InfoPayment");
+		setTitle(Msg.getMsg(Env.getCtx(), "InfoPayment"));
+		//
+		StringBuffer where = new StringBuffer("p.IsActive='Y'");
+		if (whereClause.length() > 0)
+			where.append(" AND ").append(Util.replace(whereClause, "C_Payment.", "p."));
+		setWhereClause(where.toString());
+		setTableLayout(s_Layout);
+		setFromClause(s_From);
+		setOrderClause(s_Order);
+		//
+		setShowTotals(true);
+		//
+		statInit();
+		initInfo (record_id, value);
+
+		//	AutoQuery
+		if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
+			prepareAndExecuteQuery();
 		
-		log.info( "InfoPaymentPanel");
-		setTitle(Msg.getMsg(Env.getCtx(), "InfoPayment"));
-
-		try
-		{
-			statInit();
-			p_loadedOK = initInfo();
-		}
-		catch (Exception e)
-		{
-			return;
-		}
-
-		int no = contentPanel.getRowCount();
-		
-		setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-		setStatusDB(Integer.toString(no));
-		
-		if (value != null && value.length() > 0)
-		{
-			fDocumentNo .setValue(value);
-			executeQuery();
-		}
+		p_loadedOK = true;
 	} // InfoPaymentPanel
 
 	/**
 	 *	Static Setup - add fields to parameterPanel
-	 *  @throws Exception if Lookups cannot be created
-	 */
-	
-	private void statInit() throws Exception
+	 */	
+	private void statInit()
 	{
+		fDocumentNo = new Textbox();
 		fDocumentNo.setWidth("100%");
-		fDateFrom.setWidth("165px");
-		fDateTo.setWidth("165px");
-		fAmtFrom.setWidth("180px");
-		fAmtTo.setWidth("180px");
-		
+        fDocumentNo.addEventListener(Events.ON_CHANGE, this);
+        fDocumentNo.setAttribute("zk_component_ID", "Lookup_Criteria_fDocumentNo");
 		fDocumentNo.addEventListener(Events.ON_CHANGE, this);
 		
-		fIsReceipt.setLabel(Msg.translate(Env.getCtx(), "IsReceipt"));
-		fIsReceipt.addEventListener(Events.ON_CHECK, this);
-		fIsReceipt.setChecked(!"N".equals(Env.getContext(Env.getCtx(), p_WindowNo, "IsSOTrx")));
+		// 	Format the dates and number boxes
+		fDateFrom = new Datebox();
+		fDateFrom.setWidth("97px");
+		fDateFrom.setAttribute("zk_component_ID", "Lookup_Criteria_DateFrom");
+		fDateFrom.addEventListener(Events.ON_CHANGE, this);
+		//
+		fDateTo = new Datebox();
+		fDateTo.setWidth("97px");
+		fDateTo.setAttribute("zk_component_ID", "Lookup_Criteria_DateTo");
+		fDateTo.addEventListener(Events.ON_CHANGE, this);
+		//
+		SimpleDateFormat dateFormat = DisplayType.getDateFormat(DisplayType.Date, AEnv.getLanguage(Env.getCtx()));
+		fDateFrom.setFormat(dateFormat.toPattern());
+		fDateTo.setFormat(dateFormat.toPattern());
+		//
+		fAmtFrom = new NumberBox(false);
+		fAmtFrom.getDecimalbox().setWidth("90px");
+		fAmtFrom.setAttribute("zk_component_ID", "Lookup_Criteria_AmtFrom");
+		fAmtFrom.addEventListener(Events.ON_CHANGE, this);
+		//
+		fAmtTo = new NumberBox(false);
+		fAmtTo.getDecimalbox().setWidth("90px");
+		fAmtTo.setAttribute("zk_component_ID", "Lookup_Criteria_AmtTo");
+		fAmtTo.addEventListener(Events.ON_CHANGE, this);		
+		//
+		DecimalFormat format = DisplayType.getNumberFormat(DisplayType.Amount, AEnv.getLanguage(Env.getCtx()));
+		fAmtFrom.getDecimalbox().setFormat(format.toPattern());
+		fAmtFrom.getDecimalbox().setStyle("text-align:right; " + fAmtFrom.getDecimalbox().getStyle());
+		fAmtTo.getDecimalbox().setFormat(format.toPattern());
+		fAmtTo.getDecimalbox().setStyle("text-align:right; " + fAmtTo.getDecimalbox().getStyle());
+		//
+		fCheckReceipt.setLabel(Msg.translate(Env.getCtx(), "OnlyReceipt"));
+		fCheckReceipt.setName("OnlyReceipt");
+		fCheckReceipt.addEventListener(Events.ON_CHECK, this);
+		fCheckReceipt.setAttribute("zk_component_ID", "Lookup_Criteria_CheckReceipt");
+		//
+		fCheckPayment.setLabel(Msg.translate(Env.getCtx(), "OnlyPayment"));
+		fCheckPayment.setName("OnlyPayment");
+		fCheckPayment.addEventListener(Events.ON_CHECK, this);
+		fCheckPayment.setAttribute("zk_component_ID", "Lookup_Criteria_CheckPayment");
+		//
+		fBPartner_ID = new WSearchEditor(
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0,  
+						MColumn.getColumn_ID(MPayment.Table_Name, MPayment.COLUMNNAME_C_BPartner_ID),
+						DisplayType.Search),  
+				Msg.translate(Env.getCtx(), "C_BPartner_ID"), "", false, false, true);
+		fBPartner_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_C_BPartner_ID");
+		fBPartner_ID.addValueChangeListener(this);       
 		
-		fBPartner_ID = new WSearchEditor(	
-				MLookupFactory.get(Env.getCtx(), p_WindowNo, 0, 3499, DisplayType.Search), 
-				Msg.translate(Env.getCtx(), "C_BPartner_ID"), "", false, false, true);
-		fBPartner_ID.addValueChangeListener(this);
-		
-		Grid grid = GridFactory.newGridLayout();
+		fBankAccount_ID = new WSearchEditor(
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0,  
+						MColumn.getColumn_ID(MPayment.Table_Name, MPayment.COLUMNNAME_C_BankAccount_ID),
+						DisplayType.Search),  
+				Msg.translate(Env.getCtx(), "C_BankAccount_ID"), "", false, false, true);
+		fBankAccount_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_C_BankAccount_ID");
+		fBankAccount_ID.addValueChangeListener(this);       
 		
 		Rows rows = new Rows();
-		grid.appendChild(rows);
 		
 		Row row = new Row();
 		rows.appendChild(row);
@@ -208,20 +257,22 @@
 		row.appendChild(fDocumentNo);
 		row.appendChild(fBPartner_ID.getLabel().rightAlign());
 		row.appendChild(fBPartner_ID.getComponent());
-		row.appendChild(fIsReceipt);
+		row.appendChild(fCheckReceipt);
 		
 		row = new Row();
-		row.setSpans("3, 2");
 		rows.appendChild(row);
+		row.appendChild(fBankAccount_ID.getLabel().rightAlign());
+		row.appendChild(fBankAccount_ID.getComponent());
 		row.appendChild(lDateFrom.rightAlign());
 		Hbox hbox = new Hbox();
 		hbox.appendChild(fDateFrom);
 		hbox.appendChild(lDateTo);
 		hbox.appendChild(fDateTo);
 		row.appendChild(hbox);
+		row.appendChild(fCheckPayment);
 		
 		row = new Row();
-		row.setSpans("3, 2");
+		row.setSpans("3, 1");
 		rows.appendChild(row);
 		row.appendChild(lAmtFrom.rightAlign());
 		hbox = new Hbox();
@@ -229,41 +280,14 @@
 		hbox.appendChild(lAmtTo);
 		hbox.appendChild(fAmtTo);
 		row.appendChild(hbox);
-		
-		layout = new Borderlayout();
-        layout.setWidth("100%");
-        layout.setHeight("100%");
-        if (!isLookup())
-        {
-        	layout.setStyle("position: absolute");
-        }
-        this.appendChild(layout);
 
-        North north = new North();
-        layout.appendChild(north);
-		north.appendChild(grid);
-
-        Center center = new Center();
-		layout.appendChild(center);
-		center.setFlex(true);
-		Div div = new Div();
-		div.appendChild(contentPanel);
-		if (isLookup())
-			contentPanel.setWidth("99%");
-        else
-        	contentPanel.setStyle("width: 99%; margin: 0px auto;");
-        contentPanel.setVflex(true);
-		div.setStyle("width :100%; height: 100%");
-		center.appendChild(div);
-        
-		South south = new South();
-		layout.appendChild(south);
-		southBody = new Vbox();
-		southBody.setWidth("100%");
-		south.appendChild(southBody);
-		southBody.appendChild(confirmPanel);
-		southBody.appendChild(new Separator());
-		southBody.appendChild(statusBar);
+		p_criteriaGrid.appendChild(rows);
+		super.setSizes();
+	}
+	
+	protected void initInfo()
+	{
+		initInfo(0,"");
 	}
 	
 	/**
@@ -271,25 +295,91 @@
 	 *	@return true, if success
 	 */
 	
-	private boolean initInfo ()
+	private void initInfo (int record_id, String value)
 	{
-		//  Set Defaults
-		String bp = Env.getContext(Env.getCtx(), p_WindowNo, "C_BPartner_ID");
-		
-		if (bp != null && bp.length() != 0)
-			fBPartner_ID.setValue(new Integer(bp));
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
 
-		// Prepare table
-		StringBuffer where = new StringBuffer("p.IsActive='Y'");
-		
-		if (p_whereClause.length() > 0)
-			where.append(" AND ").append(Util.replace(p_whereClause, "C_Payment.", "p."));
-		
-		prepareTable(s_paymentLayout, " C_Payment_v p", where.toString(), "2,3,4");
-		
-		return true;
+		//  Set values
+        if (!(record_id == 0))  // A record is defined
+        {
+        	fieldID = record_id;
+        	String trxName = Trx.createTrxName();
+        	MPayment p = new MPayment(Env.getCtx(),record_id, trxName);
+			fCheckReceipt.setSelected(p.isReceipt());
+    		fCheckPayment.setSelected(!p.isReceipt());
+    		p = null;
+    		Trx.get(trxName, false).close();
+        } 
+        else  // Try to find other criteria in the context
+        {
+			String id;
+			
+			//  C_BPartner_ID
+			id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BPartner_ID", true);
+			if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				fBPartner_ID.setValue(new Integer(id));
+			
+			//  The value passed in from the field
+			if (value != null && value.length() > 0)
+			{
+				fDocumentNo.setValue(value);
+			}
+			else
+			{
+				//  C_Payment_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_Payment_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fieldID = new Integer(id).intValue();
+		        	String trxName = Trx.createTrxName();
+		        	MPayment p = new MPayment(Env.getCtx(),record_id, trxName);
+					fCheckReceipt.setSelected(p.isReceipt());
+		    		fCheckPayment.setSelected(!p.isReceipt());
+		    		p = null;
+		    		Trx.get(trxName, false).close();
+				}
+				//  C_BankAccount_ID
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BankAccount_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+					fBankAccount_ID.setValue(new Integer(id));
+			}
+        }
 	} // initInfo
 	
+    public void onEvent(Event e)
+    {
+    	// Handle specific actions if possible or pass the event to the parent class
+
+		if(!p_loadedOK)
+			return;
+
+		Component component = e.getTarget();
+		
+		if(component != null)
+		{
+			if (component instanceof Checkbox)
+			{
+				Checkbox cb = (Checkbox) component;
+				// Make the checkboxes exclusive
+				if(cb.getName() == "OnlyReceipt")
+				{
+					if(fCheckReceipt.isSelected())
+						fCheckPayment.setSelected(false);
+				}
+				if(cb.getName() == "OnlyPayment")
+				{
+					if(fCheckPayment.isSelected())
+						fCheckReceipt.setSelected(false);
+				}
+			}
+		} 
+		//
+		super.onEvent(e);
+    }
+
 	
 	/**************************************************************************
 	 *	Construct SQL Where Clause and define parameters
@@ -301,21 +391,34 @@
 	protected String getSQLWhere()
 	{
 		StringBuffer sql = new StringBuffer();
-		
-		if (fDocumentNo.getText().length() > 0)
+
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if(!(fieldID == 0))
+			sql.append(" AND p.C_Payment_ID = ?");
+		//
+		if (isValidSQLText(fDocumentNo))
 			sql.append(" AND UPPER(p.DocumentNo) LIKE ?");
-
-		if (fBPartner_ID.getDisplay() != "")
+		//
+		if (fBPartner_ID.getValue() != null)
 			sql.append(" AND p.C_BPartner_ID=?");
-
+		//
+		if (fBankAccount_ID.getValue() != null)
+			sql.append(" AND p.C_BankAccount_ID=?");
+		//
 		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
 		{
-			Date f = fDateFrom.getValue();
-			Timestamp from = new Timestamp(f.getTime());
-			
-			Date t = fDateTo.getValue();
-			Timestamp to = new Timestamp(t.getTime());
-
+			Timestamp from = null;
+			Timestamp to = null;
+			//
+			if (fDateFrom.getValue() != null)
+				from = new Timestamp(fDateFrom.getValue().getTime());
+			if (fDateTo.getValue() != null)
+				to = new Timestamp(fDateTo.getValue().getTime());
+			//
+			log.fine("Date From=" + from + ", To=" + to);
+			//
 			if (from == null && to != null)
 				sql.append(" AND TRUNC(p.DateTrx, 'DD') <= ?");
 			else if (from != null && to == null)
@@ -323,12 +426,11 @@
 			else if (from != null && to != null)
 				sql.append(" AND TRUNC(p.DateTrx, 'DD') BETWEEN ? AND ?");
 		}
-
-		if (fAmtFrom.getText() != "" || fAmtTo.getText() != "")
+		//
+		if (fAmtFrom.getValue() != null || fAmtTo.getValue() != null)
 		{
-			BigDecimal from = new BigDecimal(fAmtFrom.getValue());
-			BigDecimal to = new BigDecimal(fAmtTo.getValue());
-			
+			BigDecimal from = (BigDecimal)fAmtFrom.getValue();
+			BigDecimal to = (BigDecimal)fAmtTo.getValue();
 			if (from == null && to != null)
 				sql.append(" AND p.PayAmt <= ?");
 			else if (from != null && to == null)
@@ -337,7 +439,21 @@
 				sql.append(" AND p.PayAmt BETWEEN ? AND ?");
 		}
 		
-		sql.append(" AND p.IsReceipt=?");
+		
+		if (fCheckReceipt.isSelected() && fCheckPayment.isSelected())
+			log.severe("Both Only Receipt and Only Payment selected at the same time.");
+		//	Static SQL
+		if (fCheckReceipt.isSelected())
+		{
+			sql.append(" AND ");
+				sql.append ("p.IsReceipt='Y'");
+		}
+
+		if (fCheckPayment.isSelected())
+		{
+			sql.append(" AND ");
+				sql.append ("p.IsReceipt='N'");
+		}
 
 		log.fine(sql.toString());
 		return sql.toString();
@@ -354,27 +470,39 @@
 	protected void setParameters(PreparedStatement pstmt, boolean forCount) throws SQLException
 	{
 		int index = 1;
-	
-		if (fDocumentNo.getText().length() > 0)
+		//  => ID
+		if (!(fieldID == 0))
+			pstmt.setInt(index++, fieldID);
+		//
+		if (isValidSQLText(fDocumentNo))
 			pstmt.setString(index++, getSQLText(fDocumentNo));
-
-		if (fBPartner_ID.getDisplay() != "")
+		//
+		if (fBPartner_ID.getValue() != null)
 		{
-			Integer bp = (Integer)fBPartner_ID.getValue();
-			pstmt.setInt(index++, bp.intValue());
-			log.fine("BPartner=" + bp);
+			Integer id = (Integer)fBPartner_ID.getValue();
+			pstmt.setInt(index++, id.intValue());
+			log.fine("BPartner=" + id);
 		}
-
+		//
+		if (fBankAccount_ID.getValue() != null)
+		{
+			Integer id = (Integer)fBankAccount_ID.getValue();
+			pstmt.setInt(index++, id.intValue());
+			log.fine("BankAccount=" + id);
+		}
+		//
 		if (fDateFrom.getValue() != null || fDateTo.getValue() != null)
 		{
-			Date f = fDateFrom.getValue();
-			Timestamp from = new Timestamp(f.getTime());
-			
-			Date t = fDateTo.getValue();
-			Timestamp to = new Timestamp(t.getTime());
-			
+			Timestamp from = null;
+			Timestamp to = null;
+			//
+			if (fDateFrom.getValue() != null)
+				from = new Timestamp(fDateFrom.getValue().getTime());
+			if (fDateTo.getValue() != null)
+				to = new Timestamp(fDateTo.getValue().getTime());
+			//
 			log.fine("Date From=" + from + ", To=" + to);
-		
+			//
 			if (from == null && to != null)
 				pstmt.setTimestamp(index++, to);
 			else if (from != null && to == null)
@@ -385,13 +513,12 @@
 				pstmt.setTimestamp(index++, to);
 			}
 		}
-
-		if (fAmtFrom.getText() != "" || fAmtTo.getText() != "")
+		//
+		if (fAmtFrom.getValue() != null || fAmtTo.getValue() != null)
 		{
-			BigDecimal from = new BigDecimal(fAmtFrom.getValue());
-			BigDecimal to = new BigDecimal(fAmtTo.getValue());
+			BigDecimal from = (BigDecimal)fAmtFrom.getValue();
+			BigDecimal to = (BigDecimal)fAmtTo.getValue();
 			log.fine("Amt From=" + from + ", To=" + to);
-			
 			if (from == null && to != null)
 				pstmt.setBigDecimal(index++, to);
 			else if (from != null && to == null)
@@ -402,28 +529,8 @@
 				pstmt.setBigDecimal(index++, to);
 			}
 		}
-		
-		pstmt.setString(index++, fIsReceipt.isChecked() ? "Y" : "N");
 	} // setParameters
 
-	/**
-	 *  Get SQL WHERE parameter
-	 *  @param f field
-	 *  @return Upper case text with % at the end
-	 */
-	
-	private String getSQLText (Textbox f)
-	{
-		String s = f.getText().toUpperCase();
-		
-		if (!s.endsWith("%"))
-			s += "%";
-		
-		log.fine( "String=" + s);
-		
-		return s;
-	} // getSQLText
-
 	// Elaine 2008/12/16
 	/**
 	 *	Zoom
@@ -437,7 +544,7 @@
 		MQuery query = new MQuery("C_Payment");
 		query.addRestriction("C_Payment_ID", MQuery.EQUAL, C_Payment_ID);
 		query.setRecordCount(1);
-		int AD_WindowNo = getAD_Window_ID("C_Payment", fIsReceipt.isSelected());
+		int AD_WindowNo = getAD_Window_ID("C_Payment", fCheckReceipt.isSelected());
 		AEnv.zoom (AD_WindowNo, query);
 	}	//	zoom
 	//
@@ -452,23 +559,42 @@
 		return true;
 	} // hasZoom
 	
-	public void valueChange(ValueChangeEvent evt)
+	
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
 	{
-		if (fBPartner_ID.equals(evt.getSource()))
-		{
-	    	fBPartner_ID.setValue(evt.getNewValue());
-		}
+		//  All the tracked fields
+		return(
+				fDocumentNo.hasChanged()	||
+				fBankAccount_ID.hasChanged()	||
+				fCheckPayment.hasChanged()	||
+				fCheckReceipt.hasChanged()	||
+				fBPartner_ID.hasChanged()	||
+				fAmtFrom.hasChanged() ||
+				fAmtTo.hasChanged() ||
+				fDateFrom.hasChanged()	||
+				fDateTo.hasChanged());
 	}
-
-	public void tableChanged(WTableModelEvent event)
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
 	{
-	}
-		
-	@Override
-	protected void insertPagingComponent()
-	{
-		southBody.insertBefore(paging, southBody.getFirstChild());
-		layout.invalidate();
+		fAmtFrom.set_oldValue();
+		fAmtTo.set_oldValue();
+		fDocumentNo.set_oldValue();
+		fBankAccount_ID.set_oldValue();
+		fCheckPayment.set_oldValue();
+		fCheckReceipt.set_oldValue();
+		fBPartner_ID.set_oldValue();
+		fDateFrom.set_oldValue();
+		fDateTo.set_oldValue();
+		return;
 	}
 
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoProductPanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoProductPanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/InfoProductPanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -44,13 +44,11 @@
 
 import org.adempiere.webui.apps.AEnv;
 import org.adempiere.webui.component.Button;
+import org.adempiere.webui.component.Checkbox;
+import org.adempiere.webui.component.Combobox;
 import org.adempiere.webui.component.ConfirmPanel;
-import org.adempiere.webui.component.Grid;
-import org.adempiere.webui.component.GridFactory;
 import org.adempiere.webui.component.Label;
-import org.adempiere.webui.component.ListItem;
 import org.adempiere.webui.component.ListModelTable;
-import org.adempiere.webui.component.Listbox;
 import org.adempiere.webui.component.ListboxFactory;
 import org.adempiere.webui.component.Row;
 import org.adempiere.webui.component.Rows;
@@ -61,17 +59,25 @@
 import org.adempiere.webui.component.Tabs;
 import org.adempiere.webui.component.Textbox;
 import org.adempiere.webui.component.WListbox;
-import org.adempiere.webui.session.SessionManager;
+import org.adempiere.webui.editor.WPAttributeEditor;
+import org.adempiere.webui.editor.WSearchEditor;
+import org.adempiere.webui.editor.WTableDirEditor;
+import org.adempiere.webui.event.ValueChangeListener;
+import org.compiere.apps.search.Info_Column;
 import org.compiere.minigrid.ColumnInfo;
 import org.compiere.minigrid.IDColumn;
-import org.compiere.model.MClient;
-import org.compiere.model.MDocType;
+import org.compiere.model.MAttributeSet;
+import org.compiere.model.MColumn;
+import org.compiere.model.MLookupFactory;
+import org.compiere.model.MPAttributeLookup;
+import org.compiere.model.MPriceListVersion;
+import org.compiere.model.MProduct;
+import org.compiere.model.MProductCategory;
 import org.compiere.model.MQuery;
-import org.compiere.model.MRole;
-import org.compiere.util.CLogMgt;
+import org.compiere.model.MWarehouse;
 import org.compiere.util.DB;
+import org.compiere.util.DisplayType;
 import org.compiere.util.Env;
-import org.compiere.util.KeyNamePair;
 import org.compiere.util.Msg;
 import org.compiere.util.Util;
 import org.zkoss.zk.ui.Component;
@@ -81,7 +87,6 @@
 import org.zkoss.zkex.zul.Borderlayout;
 import org.zkoss.zkex.zul.Center;
 import org.zkoss.zkex.zul.North;
-import org.zkoss.zkex.zul.South;
 
 /**
  * Search Product and return selection
@@ -91,13 +96,18 @@
  * Zk Port
  * @author Elaine
  * @version	InfoPayment.java Adempiere Swing UI 3.4.1
+ * 
+ * @author Michael McKay, ADEMPIERE-72 VLookup and Info Window improvements
+ * 	<li>https://adempiere.atlassian.net/browse/ADEMPIERE-72
  */
-public class InfoProductPanel extends InfoPanel implements EventListener
+public class InfoProductPanel extends InfoPanel implements EventListener, ValueChangeListener
 {
 	/**
 	 * 
 	 */
 	private static final long serialVersionUID = 6804975825156657866L;
+	private int fieldID = 0;
+	private Label lblBlank = new Label();
 	private Label lblValue = new Label();
 	private Textbox fieldValue = new Textbox();
 	private Label lblName = new Label();
@@ -107,49 +117,52 @@
 	private Label lblSKU = new Label();
 	private Textbox fieldSKU = new Textbox();
 	private Label lblPriceList = new Label();
-	private Listbox pickPriceList = new Listbox();
+	private WTableDirEditor fPriceList_ID = null;
 	private Label lblWarehouse = new Label();
-	private Listbox pickWarehouse = new Listbox();
+	private WTableDirEditor fWarehouse_ID = null;
 	private Label lblVendor = new Label();
-	private Textbox fieldVendor = new Textbox();
+	private WSearchEditor fVendor_ID = WSearchEditor.createBPartner(0);
 	// Elaine 2008/11/21
 	private Label lblProductCategory = new Label();
-	private Listbox pickProductCategory = new Listbox();
+	private WTableDirEditor fProductCategory_ID = null;
 	//
 	private Label lblAS = new Label();
-	private Listbox pickAS = new Listbox();
+	private Label lblASI = new Label();
+	private WTableDirEditor fAS_ID = null;
+	private WPAttributeEditor fASI_ID = null;
+	private Checkbox checkAND;
+	private Checkbox checkOnlyStock;
+	private Checkbox checkShowDetail;
 
 	// Elaine 2008/11/25
-	private Borderlayout borderlayout = new Borderlayout();
 	private Textbox fieldDescription = new Textbox();
-	Tabbox tabbedPane = new Tabbox();
-	WListbox warehouseTbl = ListboxFactory.newDataTable();
-    String m_sqlWarehouse;
-    WListbox substituteTbl = ListboxFactory.newDataTable();
-    String m_sqlSubstitute;
-    WListbox relatedTbl = ListboxFactory.newDataTable();
-    String m_sqlRelated;
+	private Textbox fieldPAttributes = new Textbox();
+	private Tabbox detailTabBox = new Tabbox();
+	private WListbox warehouseTbl = ListboxFactory.newDataTable();
+	private String m_sqlWarehouse;
+	private WListbox substituteTbl = ListboxFactory.newDataTable();
+	private String m_sqlSubstitute;
+	private WListbox relatedTbl = ListboxFactory.newDataTable();
+	private String m_sqlRelated;
+	private WListbox vendorTbl = ListboxFactory.newDataTable();
+	private String m_sqlVendor;
     //Available to Promise Tab
-	private WListbox 			m_tableAtp = ListboxFactory.newDataTable();
+    private Info_Column[]		m_layoutATP = null;
+	private WListbox 			m_tableAtp = null;
+	private ListModelTable 		m_modelAtp = null;	
 	private int 				m_M_Product_ID = 0;
-    int mWindowNo = 0;
+	private int					m_M_Warehouse_ID = 0;
+	private int 				m_M_PriceList_ID = 0;
+	int mWindowNo = 0;
     //
 
 	/**	Search Button				*/
 	private Button	m_InfoPAttributeButton = new Button();
 	/** Instance Button				*/
 	private Button	m_PAttributeButton = null;
-	/** SQL From				*/
-	private static final String s_productFrom =
-		"M_Product p"
-		+ " LEFT OUTER JOIN M_ProductPrice pr ON (p.M_Product_ID=pr.M_Product_ID AND pr.IsActive='Y')"
-		+ " LEFT OUTER JOIN M_AttributeSet pa ON (p.M_AttributeSet_ID=pa.M_AttributeSet_ID)"
-		+ " LEFT OUTER JOIN M_Product_PO ppo ON (p.M_Product_ID=ppo.M_Product_ID)"
-		+ " LEFT OUTER JOIN C_BPartner bp ON (ppo.C_BPartner_ID=bp.C_BPartner_ID)";
 
 	/**  Array of Column Info    */
-	private static ColumnInfo[] s_productLayout = null;
-	private static int INDEX_NAME = 0;
+	private static Info_Column[] s_Layout = null;
 	private static int INDEX_PATTRIBUTE = 0;
 
 
@@ -158,22 +171,24 @@
 	/** Locator						*/
 	private int			m_M_Locator_ID = 0;
 
-	private String		m_pAttributeWhere = null;
-	private int			m_C_BPartner_ID = 0;
+	protected int m_ATP_M_Warehouse_ID;
 
 	/**
 	 *	Standard Constructor
 	 * 	@param WindowNo window no
 	 * 	@param M_Warehouse_ID warehouse
 	 * 	@param M_PriceList_ID price list
-	 * 	@param value    Query Value or Name if enclosed in @
+	 *  @param record_id The record ID to find
+	 *  @param value Query Value or Name if enclosed in @
+	 * 	@param multiSelection multiple selections
+	 *  @param saveResults  True if results will be saved, false for info only
 	 * 	@param whereClause where clause
 	 */
 	public InfoProductPanel(int windowNo,
-		int M_Warehouse_ID, int M_PriceList_ID, boolean multipleSelection,String value,
-		 String whereClause)
+		int M_Warehouse_ID, int M_PriceList_ID, int record_id, String value,
+		boolean multipleSelection, String whereClause)
 	{
-		this(windowNo, M_Warehouse_ID, M_PriceList_ID, multipleSelection, value, whereClause, true);
+		this(windowNo, true, M_Warehouse_ID, M_PriceList_ID, record_id, value, multipleSelection, true, whereClause);
 	}
 
 	/**
@@ -181,40 +196,42 @@
 	 * 	@param WindowNo window no
 	 * 	@param M_Warehouse_ID warehouse
 	 * 	@param M_PriceList_ID price list
-	 * 	@param value    Query Value or Name if enclosed in @
+	 *  @param record_id The record ID to find
+	 *  @param value Query Value or Name if enclosed in @
+	 * 	@param multiSelection multiple selections
+	 *  @param saveResults  True if results will be saved, false for info only
 	 * 	@param whereClause where clause
+	 *  @param modal True if the column has a lookup - open modal
 	 */
-	public InfoProductPanel(int windowNo,
-		int M_Warehouse_ID, int M_PriceList_ID, boolean multipleSelection,String value,
-		 String whereClause, boolean lookup)
+	public InfoProductPanel(int windowNo, boolean modal,
+		int M_Warehouse_ID, int M_PriceList_ID, int record_id, String value,
+		boolean multipleSelection, boolean saveResults, String whereClause)
 	{
-		super (windowNo, "p", "M_Product_ID",multipleSelection, whereClause, lookup);
+		super (windowNo, modal, "p", "M_Product_ID",multipleSelection, saveResults, whereClause);
 		log.info(value + ", Wh=" + M_Warehouse_ID + ", PL=" + M_PriceList_ID + ", WHERE=" + whereClause);
 		setTitle(Msg.getMsg(Env.getCtx(), "InfoProduct"));
+		m_M_Warehouse_ID = M_Warehouse_ID;
+		m_M_PriceList_ID = M_PriceList_ID;
 		//
-		initComponents();
-		init();
-		initInfo (value, M_Warehouse_ID, M_PriceList_ID);
-		m_C_BPartner_ID = Env.getContextAsInt(Env.getCtx(), windowNo, "C_BPartner_ID");
+		//	Modify where clause to fit with column info definitions
+		StringBuffer where = new StringBuffer();
+		where.append("p.IsActive='Y'");
+		//  Modify Where Clause
+		if (whereClause != null && whereClause.length() > 0)
+			where.append(" AND ")   //  replace fully qualified name with alias
+				.append(Util.replace(whereClause, "M_Product.", "p."));
+		setWhereClause(where.toString());
+		//
+		statInit();
+		initInfo (record_id, value, M_Warehouse_ID, M_PriceList_ID, false);
 
-        int no = contentPanel.getRowCount();
-        setStatusLine(Integer.toString(no) + " " + Msg.getMsg(Env.getCtx(), "SearchRows_EnterQuery"), false);
-        setStatusDB(Integer.toString(no));
-		//	AutoQuery
-		if (value != null && value.length() > 0)
+        if(autoQuery() || record_id != 0 || (value != null && value.length() > 0 && value != "%"))
         {
-			executeQuery();
-            renderItems();
-        }
-
-		tabbedPane.setSelectedIndex(0);
-
+        	prepareAndExecuteQuery();
+    	}
+        
 		p_loadedOK = true;
-
-		//Begin - fer_luck @ centuryon
-		mWindowNo = windowNo; // Elaine 2008/12/16
-		//End - fer_luck @ centuryon
-
+		
 	}	//	InfoProductPanel
 
 	/**
@@ -222,6 +239,8 @@
 	 */
 	private void initComponents()
 	{
+		
+		lblBlank.setValue(" ");
 		lblValue = new Label();
 		lblValue.setValue(Util.cleanAmp(Msg.translate(Env.getCtx(), "Value")));
 		lblName = new Label();
@@ -238,133 +257,217 @@
 		//
 		lblAS = new Label();
 		lblAS.setValue(Msg.translate(Env.getCtx(), "M_AttributeSet_ID"));
+		lblASI = new Label();
+		lblASI.setValue(Msg.translate(Env.getCtx(), "M_AttributeSetInstance_ID"));
 		lblWarehouse = new Label();
 		lblWarehouse.setValue(Util.cleanAmp(Msg.getMsg(Env.getCtx(), "Warehouse")));
 		lblVendor = new Label();
 		lblVendor.setValue(Msg.translate(Env.getCtx(), "Vendor"));
 
+		checkOnlyStock = new Checkbox();
+		checkOnlyStock.setAttribute("zk_component_ID", "Lookup_Criteria_checkOnlyStock");
+		checkOnlyStock.setText(Msg.getMsg(Env.getCtx(), "OnlyStock"));
+		checkOnlyStock.setName("OnlyStock");
+		checkOnlyStock.setTooltiptext(Msg.getMsg(Env.getCtx(), "OnlyStockTip"));
+		checkOnlyStock.setSelected(false); // Info may open when searching for non-stock as well.
+		checkOnlyStock.addActionListener(this);
+
+		checkShowDetail = new Checkbox();
+		checkShowDetail.setAttribute("zk_component_ID", "Lookup_Criteria_checkShowDetail");
+		checkShowDetail.setText(Msg.getMsg(Env.getCtx(), "ShowDetail"));
+		checkShowDetail.setName("ShowDetail");
+		checkShowDetail.setTooltiptext(Msg.getMsg(Env.getCtx(), "ShowAttributeDetails"));
+		checkShowDetail.setSelected(false);  
+		checkShowDetail.setEnabled(false);   
+		checkShowDetail.addActionListener(this);
+
+		checkAND = new Checkbox();
+		checkAND.setAttribute("zk_component_ID", "Lookup_Criteria_checkAND");
+		checkAND.setText(Msg.getMsg(Env.getCtx(), "SearchAND"));
+		checkAND.setName("SearchAND");
+		checkAND.setTooltiptext(Msg.getMsg(Env.getCtx(), "SearchANDInfo"));
+		checkAND.setSelected(true);
+		checkAND.addActionListener(this);
+		
 		m_InfoPAttributeButton.setImage("/images/PAttribute16.png");
 		m_InfoPAttributeButton.setTooltiptext(Msg.getMsg(Env.getCtx(), "PAttribute"));
 		m_InfoPAttributeButton.addEventListener(Events.ON_CLICK,this);
 
 		fieldValue = new Textbox();
 		fieldValue.setMaxlength(40);
+		fieldValue.setAttribute("zk_component_ID", "Lookup_Criteria_fieldValue");
+		fieldValue.addEventListener(Events.ON_CHANGE, this);
+		//
 		fieldName = new Textbox();
 		fieldName.setMaxlength(40);
+		fieldName.setAttribute("zk_component_ID", "Lookup_Criteria_fieldName");
+		fieldName.addEventListener(Events.ON_CHANGE, this);
+		//
 		fieldUPC = new Textbox();
 		fieldUPC.setMaxlength(40);
+		fieldUPC.setAttribute("zk_component_ID", "Lookup_Criteria_fieldUPC");
+		fieldUPC.addEventListener(Events.ON_CHANGE, this);
+		//
 		fieldSKU = new Textbox();
 		fieldSKU.setMaxlength(40);
-		pickPriceList = new Listbox();
-		pickPriceList.setRows(0);
-		pickPriceList.setMultiple(false);
-		pickPriceList.setMold("select");
-		pickPriceList.setWidth("150px");
-		pickPriceList.addEventListener(Events.ON_SELECT, this);
+		fieldSKU.setAttribute("zk_component_ID", "Lookup_Criteria_fieldSKU");
+		fieldSKU.addEventListener(Events.ON_CHANGE, this);
+		//
+        // Elaine 2008/11/25
+        fieldDescription.setMultiline(true);
+		fieldDescription.setReadonly(true);
+		fieldDescription.setAttribute("zk_component_ID", "Lookup_Field_Description");
+		//
+		fPriceList_ID = new WTableDirEditor("M_PriceList_Version_ID", false, false, true,
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+						MColumn.getColumn_ID(MPriceListVersion.Table_Name, MPriceListVersion.COLUMNNAME_M_PriceList_Version_ID),
+				DisplayType.TableDir));
+		fPriceList_ID.getComponent().addEventListener(Events.ON_CHANGE, this);
+		fPriceList_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_M_PriceList_Version_ID");
+		fPriceList_ID.getComponent().setAttribute("zk_component_prefix", "Lookup_");
+		fPriceList_ID.getComponent().setAttribute("IsDynamic", "True");
+		fPriceList_ID.getComponent().setAttribute("fieldName", "fPriceList_ID");
+		
+		// Elaine 2008/11/21
+		fProductCategory_ID = new WTableDirEditor("M_Product_Category_ID", false, false, true,
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+						MColumn.getColumn_ID(MProductCategory.Table_Name, MProductCategory.COLUMNNAME_M_Product_Category_ID), DisplayType.TableDir));
+		fProductCategory_ID.getComponent().addEventListener(Events.ON_CHANGE, this);
+		fProductCategory_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_M_ProductCategory_ID");
+		fProductCategory_ID.getComponent().setAttribute("zk_component_prefix", "Lookup_");
+		fProductCategory_ID.getComponent().setAttribute("IsDynamic", "True");
+		fProductCategory_ID.getComponent().setAttribute("fieldName", "fProductCategory_ID");
+		
+		//
+		fAS_ID = new WTableDirEditor("M_AttributeSet_ID", false, false, true,
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0,  
+						MColumn.getColumn_ID(MAttributeSet.Table_Name, MAttributeSet.COLUMNNAME_M_AttributeSet_ID), 
+				DisplayType.TableDir));
+		fAS_ID.getComponent().addEventListener(Events.ON_CHANGE, this);
+		fAS_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_M_PAttributeSet_ID");
+		fAS_ID.getComponent().setAttribute("zk_component_prefix", "Lookup_");
+		fAS_ID.getComponent().setAttribute("IsDynamic", "False");
+		fAS_ID.getComponent().setAttribute("fieldName", "fAS_ID");
+		fAS_ID.getComponent().setWidth("200px");
+		
+		MPAttributeLookup mpaLookup = new MPAttributeLookup(Env.getCtx(), p_WindowNo);
+		fASI_ID = new WPAttributeEditor(null, false, false, true, p_WindowNo, 
+				mpaLookup, true);
+		fASI_ID.addValueChangeListener(this);
+		fASI_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_M_PAttributeSetInstance_ID");
+		fASI_ID.getComponent().setAttribute("zk_component_prefix", "Lookup_");
+		fASI_ID.getComponent().setAttribute("IsDynamic", "False");
+		fASI_ID.getComponent().setAttribute("fieldName", "fASI_ID");
+		fASI_ID.getComponent().setWidth("200px");
 
-		// Elaine 2008/11/21
-		pickProductCategory = new Listbox();
-		pickProductCategory.setRows(0);
-		pickProductCategory.setMultiple(false);
-		pickProductCategory.setMold("select");
-		pickProductCategory.setWidth("150px");
-		pickProductCategory.addEventListener(Events.ON_SELECT, this);
-		//
-		pickAS = new Listbox();
-		pickAS.setRows(0);
-		pickAS.setMultiple(false);
-		pickAS.setMold("select");
-		pickAS.setWidth("150px");
-		pickAS.addEventListener(Events.ON_SELECT, this);
+		fWarehouse_ID = new WTableDirEditor("M_Warehouse_ID", false, false, true,
+				MLookupFactory.get (Env.getCtx(), p_WindowNo, 0, 
+						MColumn.getColumn_ID(MWarehouse.Table_Name, MWarehouse.COLUMNNAME_M_Warehouse_ID),
+				DisplayType.TableDir));
+		fWarehouse_ID.getComponent().addEventListener(Events.ON_CHANGE, this);
+		fWarehouse_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_M_Warehouse_ID");
+		fWarehouse_ID.getComponent().setAttribute("zk_component_prefix", "Lookup_");
+		fWarehouse_ID.getComponent().setAttribute("IsDynamic", "True");
+		fWarehouse_ID.getComponent().setAttribute("fieldName", "fWarehouse_ID");
 
-		pickWarehouse = new Listbox();
-		pickWarehouse.setRows(0);
-		pickWarehouse.setMultiple(false);
-		pickWarehouse.setMold("select");
-		pickWarehouse.setWidth("150px");
-		pickWarehouse.addEventListener(Events.ON_SELECT, this);
-
-		fieldVendor = new Textbox();
-		fieldVendor.setMaxlength(40);
-
-        contentPanel.setVflex(true);
-	}	//	initComponents
-
-	private void init()
-	{
-    	Grid grid = GridFactory.newGridLayout();
-
-		Rows rows = new Rows();
-		grid.appendChild(rows);
-
-		Row row = new Row();
-		rows.appendChild(row);
-		row.appendChild(lblValue.rightAlign());
-		row.appendChild(fieldValue);
-		row.appendChild(lblUPC.rightAlign());
-		row.appendChild(fieldUPC);
-		row.appendChild(lblWarehouse.rightAlign());
-		row.appendChild(pickWarehouse);
-		row.appendChild(m_InfoPAttributeButton);
-
-		row = new Row();
-		row.setSpans("1, 1, 1, 1, 1, 1, 1, 2");
-		rows.appendChild(row);
-		row.appendChild(lblName.rightAlign());
-		row.appendChild(fieldName);
-		row.appendChild(lblSKU.rightAlign());
-		row.appendChild(fieldSKU);
-		row.appendChild(lblVendor.rightAlign());
-		row.appendChild(fieldVendor);
-		//
-
-		row = new Row();
-		rows.appendChild(row);
-		row.appendChild(lblPriceList.rightAlign());
-		row.appendChild(pickPriceList);
-		row.appendChild(lblProductCategory.rightAlign());
-		row.appendChild(pickProductCategory);
-		row.appendChild(lblAS.rightAlign());
-		row.appendChild(pickAS);
 		
-		row = new Row();
-		rows.appendChild(row);
-		row.appendChild(statusBar);
-		row.setSpans("6");
-		statusBar.setEastVisibility(false);
-
+		fVendor_ID.getComponent().getTextbox().setMaxlength(30);
+		fVendor_ID.setIsSOTrx(true, false); // Override the isSOTrx context, Vendors only
+		fVendor_ID.addValueChangeListener(this);
+		fVendor_ID.getComponent().setAttribute("zk_component_ID", "Lookup_Criteria_C_BPartner_ID");
+		fVendor_ID.getComponent().setAttribute("zk_component_prefix", "Lookup_");
+		fVendor_ID.getComponent().setAttribute("IsDynamic", "False");
+		fVendor_ID.getComponent().setAttribute("fieldName", "fVendor_ID");
+		fVendor_ID.getComponent().setWidth("200px");
+		
 		// Product Attribute Instance
 		m_PAttributeButton = confirmPanel.createButton(ConfirmPanel.A_PATTRIBUTE);
 		confirmPanel.addComponentsLeft(m_PAttributeButton);
 		m_PAttributeButton.addActionListener(this);
 		m_PAttributeButton.setEnabled(false);
 
-        // Elaine 2008/11/25
-        fieldDescription.setMultiline(true);
-		fieldDescription.setReadonly(true);
+        //
+		fieldPAttributes.setMultiline(true);
+		fieldPAttributes.setReadonly(true);
+		fieldPAttributes.setAttribute("zk_component_ID", "Lookup_Field_PAAttributes");
 
+        initAtpTab();
+        
+	}	//	initComponents
+
+	private void statInit()
+	{
+		//  Fill the grid, setup the center data table & add the tabs
+		initComponents();
+		
+		Rows rows = new Rows();
+
+		Row row = new Row();
+		rows.appendChild(row);
+		row.setSpans("1, 1, 1, 1, 1, 1");
+		row.appendChild(lblValue.rightAlign());
+		row.appendChild(fieldValue);
+		row.appendChild(lblWarehouse.rightAlign());
+		row.appendChild(fWarehouse_ID.getComponent());
+		row.appendChild(lblBlank.rightAlign());
+		row.appendChild(checkOnlyStock);
+
+		row = new Row();
+		rows.appendChild(row);
+		row.setSpans("1, 1, 1, 1, 1, 1");
+		row.appendChild(lblName.rightAlign());
+		row.appendChild(fieldName);
+		row.appendChild(lblPriceList.rightAlign());
+		row.appendChild(fPriceList_ID.getComponent());
+		row.appendChild(lblAS.rightAlign());
+		row.appendChild(fAS_ID.getComponent());
+		//
+
+		row = new Row();
+		rows.appendChild(row);
+		row.setSpans("1, 1, 1, 1, 1, 1");
+		row.appendChild(lblUPC.rightAlign());
+		row.appendChild(fieldUPC);
+		row.appendChild(lblProductCategory.rightAlign());
+		row.appendChild(fProductCategory_ID.getComponent());
+		row.appendChild(lblASI.rightAlign());
+		row.appendChild(fASI_ID.getComponent());
+		
+		row = new Row();
+		rows.appendChild(row);
+		row.setSpans("1, 1, 1, 1, 1, 1");
+		row.appendChild(lblSKU.rightAlign());
+		row.appendChild(fieldSKU);
+		row.appendChild(lblVendor.rightAlign());
+		row.appendChild(fVendor_ID.getComponent());
+		row.appendChild(lblBlank.rightAlign());
+		row.appendChild(checkAND);
+		
 		//
         ColumnInfo[] s_layoutWarehouse = new ColumnInfo[]{
+        		new ColumnInfo(" ", "M_Warehouse_ID", IDColumn.class),
         		new ColumnInfo(Msg.translate(Env.getCtx(), "Warehouse"), "Warehouse", String.class),
         		new ColumnInfo(Msg.translate(Env.getCtx(), "QtyAvailable"), "sum(QtyAvailable)", Double.class),
         		new ColumnInfo(Msg.translate(Env.getCtx(), "QtyOnHand"), "sum(QtyOnHand)", Double.class),
-        		new ColumnInfo(Msg.translate(Env.getCtx(), "QtyReserved"), "sum(QtyReserved)", Double.class)};
+           		new ColumnInfo(Msg.translate(Env.getCtx(), "QtyReserved"), "sum(QtyReserved)", Double.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "DocumentNote"), "DocumentNote", String.class)};
         /**	From Clause							*/
         String s_sqlFrom = " M_PRODUCT_STOCK_V ";
         /** Where Clause						*/
-        String s_sqlWhere = "Value = ?";
+        String s_sqlWhere = "M_Product_ID = ?";
         m_sqlWarehouse = warehouseTbl.prepareTable(s_layoutWarehouse, s_sqlFrom, s_sqlWhere, false, "M_PRODUCT_STOCK_V");
-		m_sqlWarehouse += " Group By Warehouse, documentnote ";
+        m_sqlWarehouse += " Group By M_Warehouse_ID, Warehouse, documentnote ";
 		warehouseTbl.setMultiSelection(false);
         warehouseTbl.autoSize();
-        warehouseTbl.getModel().addTableModelListener(this);
+        warehouseTbl.setShowTotals(true);
+        //warehouseTbl.getModel().addTableModelListener(this);
+        warehouseTbl.setAttribute("zk_component_ID", "Lookup_Data_Warehouse");
+		
 
         ColumnInfo[] s_layoutSubstitute = new ColumnInfo[]{
         		new ColumnInfo(Msg.translate(Env.getCtx(), "Warehouse"), "orgname", String.class),
-        		new ColumnInfo(
-    					Msg.translate(Env.getCtx(), "Value"),
-    					"(Select Value from M_Product p where p.M_Product_ID=M_PRODUCT_SUBSTITUTERELATED_V.Substitute_ID)",
-    					String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Description"), "description", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Value"), "value", String.class),
     			new ColumnInfo(Msg.translate(Env.getCtx(), "Name"), "Name", String.class),
     			new ColumnInfo(Msg.translate(Env.getCtx(), "QtyAvailable"), "QtyAvailable", Double.class),
   	        	new ColumnInfo(Msg.translate(Env.getCtx(), "QtyOnHand"), "QtyOnHand", Double.class),
@@ -376,13 +479,12 @@
         substituteTbl.setMultiSelection(false);
         substituteTbl.autoSize();
         substituteTbl.getModel().addTableModelListener(this);
+        substituteTbl.setAttribute("zk_component_ID", "Lookup_Data_Substitute");
 
         ColumnInfo[] s_layoutRelated = new ColumnInfo[]{
         		new ColumnInfo(Msg.translate(Env.getCtx(), "Warehouse"), "orgname", String.class),
-        		new ColumnInfo(
-    					Msg.translate(Env.getCtx(), "Value"),
-    					"(Select Value from M_Product p where p.M_Product_ID=M_PRODUCT_SUBSTITUTERELATED_V.Substitute_ID)",
-    					String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Description"), "description", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Value"), "value", String.class),
     			new ColumnInfo(Msg.translate(Env.getCtx(), "Name"), "Name", String.class),
     			new ColumnInfo(Msg.translate(Env.getCtx(), "QtyAvailable"), "QtyAvailable", Double.class),
   	        	new ColumnInfo(Msg.translate(Env.getCtx(), "QtyOnHand"), "QtyOnHand", Double.class),
@@ -394,17 +496,42 @@
         relatedTbl.setMultiSelection(false);
         relatedTbl.autoSize();
         relatedTbl.getModel().addTableModelListener(this);
+        relatedTbl.setAttribute("zk_component_ID", "Lookup_Data_Related");
 
         //Available to Promise Tab
         m_tableAtp.setMultiSelection(false);
+        m_tableAtp.autoSize();
+        m_tableAtp.setShowTotals(true);
+        m_tableAtp.setAttribute("zk_component_ID", "Lookup_Data_ATP");
 
-        tabbedPane.setHeight("100%");
-		Tabpanels tabPanels = new Tabpanels();
-		tabbedPane.appendChild(tabPanels);
+        //Vendor tab
+        ColumnInfo[] s_layoutVendor = new ColumnInfo[]{
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Vendor"), "(SELECT bp.Name FROM C_BPartner bp WHERE bp.C_BPartner_ID = M_PRODUCT_PO.C_BPartner_ID)", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "IsCurrentVendor"), "IsCurrentVendor", Boolean.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "C_UOM_ID"), "(SELECT Name FROM C_UOM WHERE C_UOM_ID = M_PRODUCT_PO.C_UOM_ID)", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "C_Currency_ID"), "(SELECT iso_code FROM C_Currency WHERE C_Currency_ID = M_PRODUCT_PO.C_Currency_ID)", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "PriceList"), "PriceList", BigDecimal.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "PricePO"), "PricePO", BigDecimal.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "VendorProductNo"), "VendorProductNo", String.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "Order_Min"), "Order_Min", Double.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "DeliveryTime_Promised"), "DeliveryTime_Promised", Double.class),
+        		new ColumnInfo(Msg.translate(Env.getCtx(), "DeliveryTime_Actual"), "DeliveryTime_Actual", Double.class)
+    		};
+        s_sqlFrom = "M_PRODUCT_PO";
+        s_sqlWhere = "M_Product_ID = ?";
+        m_sqlVendor = vendorTbl.prepareTable(s_layoutVendor, s_sqlFrom, s_sqlWhere, false, "M_PRODUCT_PO");
+        vendorTbl.setMultiSelection(false);
+        vendorTbl.autoSize();
+        vendorTbl.setAttribute("zk_component_ID", "Lookup_Data_Vendor");
+
+        detailTabBox.setHeight("100%");
+        Tabpanels tabPanels = new Tabpanels();
+		detailTabBox.appendChild(tabPanels);
 		Tabs tabs = new Tabs();
-		tabbedPane.appendChild(tabs);
+		detailTabBox.appendChild(tabs);
 
 		Tab tab = new Tab(Util.cleanAmp(Msg.translate(Env.getCtx(), "Warehouse")));
+		tab.addEventListener(Events.ON_SELECT, this);
 		tabs.appendChild(tab);
 		Tabpanel desktopTabPanel = new Tabpanel();
 		desktopTabPanel.setHeight("100%");
@@ -412,6 +539,7 @@
 		tabPanels.appendChild(desktopTabPanel);
 
 		tab = new Tab(Msg.translate(Env.getCtx(), "Description"));
+		tab.addEventListener(Events.ON_SELECT, this);
 		tabs.appendChild(tab);
 		desktopTabPanel = new Tabpanel();
 		desktopTabPanel.setHeight("100%");
@@ -420,7 +548,18 @@
 		desktopTabPanel.appendChild(fieldDescription);
 		tabPanels.appendChild(desktopTabPanel);
 
+		tab = new Tab(Msg.translate(Env.getCtx(), "ProductAttribute"));
+		tab.addEventListener(Events.ON_SELECT, this);
+		tabs.appendChild(tab);
+		desktopTabPanel = new Tabpanel();
+		desktopTabPanel.setHeight("100%");
+		fieldPAttributes.setWidth("99%");
+		fieldPAttributes.setHeight("99%");
+		desktopTabPanel.appendChild(fieldPAttributes);
+		tabPanels.appendChild(desktopTabPanel);
+		 
 		tab = new Tab(Msg.translate(Env.getCtx(), "Substitute_ID"));
+		tab.addEventListener(Events.ON_SELECT, this);
 		tabs.appendChild(tab);
 		desktopTabPanel = new Tabpanel();
 		desktopTabPanel.setHeight("100%");
@@ -428,6 +567,7 @@
 		tabPanels.appendChild(desktopTabPanel);
 
 		tab = new Tab(Msg.translate(Env.getCtx(), "RelatedProduct_ID"));
+		tab.addEventListener(Events.ON_SELECT, this);
 		tabs.appendChild(tab);
 		desktopTabPanel = new Tabpanel();
 		desktopTabPanel.setHeight("100%");
@@ -435,324 +575,536 @@
 		tabPanels.appendChild(desktopTabPanel);
 
 		tab = new Tab(Msg.getMsg(Env.getCtx(), "ATP"));
+		tab.addEventListener(Events.ON_SELECT, this);
 		tabs.appendChild(tab);
 		desktopTabPanel = new Tabpanel();
 		desktopTabPanel.setHeight("100%");
-		desktopTabPanel.appendChild(m_tableAtp);
+		desktopTabPanel.appendChild(m_tableAtp);		
 		tabPanels.appendChild(desktopTabPanel);
+
+		tab = new Tab(Util.cleanAmp(Msg.translate(Env.getCtx(), "Vendor")));
+		tab.addEventListener(Events.ON_SELECT, this);
+		tabs.appendChild(tab);
+		desktopTabPanel = new Tabpanel();
+		desktopTabPanel.setHeight("100%");
+		desktopTabPanel.appendChild(vendorTbl);
+		tabPanels.appendChild(desktopTabPanel);
+
+		tabs.setAttribute("zk_component_ID", "Subordinate_Tabs");
+
+		//  Add the tabs to the center south layout
+		Borderlayout tabLayout = new Borderlayout();
+		//  
+		North north = new North();
+		tabLayout.appendChild(north);
+		north.appendChild(checkShowDetail);
 		//
-		int height = SessionManager.getAppDesktop().getClientInfo().desktopHeight * 90 / 100;
-		int width = SessionManager.getAppDesktop().getClientInfo().desktopWidth * 80 / 100;
+		Center center = new Center();
+		tabLayout.appendChild(center);
+		center.appendChild(detailTabBox);
 
-        borderlayout.setWidth("100%");
-        borderlayout.setHeight("100%");
-        if (isLookup())
-        	borderlayout.setStyle("border: none; position: relative");
-        else
-        	borderlayout.setStyle("border: none; position: absolute");
-        Center center = new Center();
-        center.setAutoscroll(true);
-        center.setFlex(true);
-		borderlayout.appendChild(center);
-		center.appendChild(contentPanel);
-		South south = new South();
-		int detailHeight = (height * 25 / 100);
-		south.setHeight(detailHeight + "px");
-		south.setCollapsible(true);
-		south.setSplittable(true);
-		south.setFlex(true);
-		south.setTitle(Msg.translate(Env.getCtx(), "WarehouseStock"));
-		south.setTooltiptext(Msg.translate(Env.getCtx(), "WarehouseStock"));
-		borderlayout.appendChild(south);
-		south.appendChild(tabbedPane);
+		//  Set main panel elements.  The other elements are handled by the info.java class
+		p_criteriaGrid.appendChild(rows);
+		p_centerSouth.appendChild(tabLayout);
+		p_centerSouth.setTitle(Msg.translate(Env.getCtx(), "WarehouseStock"));
+		p_centerSouth.setTooltiptext(Msg.translate(Env.getCtx(), "WarehouseStock"));
+		super.setSizes();
 
-        Borderlayout mainPanel = new Borderlayout();
-        mainPanel.setWidth("100%");
-        mainPanel.setHeight("100%");
-        North north = new North();
-        mainPanel.appendChild(north);
-        north.appendChild(grid);
-        center = new Center();
-        mainPanel.appendChild(center);
-        center.appendChild(borderlayout);
-        south = new South();
-        mainPanel.appendChild(south);
-        south.appendChild(confirmPanel);
-        if (!isLookup())
-        {
-        	mainPanel.setStyle("position: absolute");
-        }
+		warehouseTbl.addActionListener(new EventListener() {
+			public void onEvent(Event event) throws Exception {
+				if (warehouseTbl.getRowCount() > 0)
+				{
+					int selectedRow = warehouseTbl.getSelectedRow();
+					if (selectedRow<0) selectedRow = 0;
 
-		this.appendChild(mainPanel);
-		if (isLookup())
-		{
-			this.setWidth(width + "px");
-			this.setHeight(height + "px");
-		}
-
-		contentPanel.addActionListener(new EventListener() {
-			public void onEvent(Event event) throws Exception {
-				int row = contentPanel.getSelectedRow();
-				if (row >= 0) {
-					int M_Warehouse_ID = 0;
-					ListItem listitem = pickWarehouse.getSelectedItem();
-					if (listitem != null)
-						M_Warehouse_ID = (Integer)listitem.getValue();
-
-					int M_PriceList_Version_ID = 0;
-					listitem = pickPriceList.getSelectedItem();
-					if (listitem != null)
-						M_PriceList_Version_ID = (Integer)listitem.getValue();
-
-        			refresh(contentPanel.getValueAt(row,2), M_Warehouse_ID, M_PriceList_Version_ID);
-        			borderlayout.getSouth().setOpen(true);
+					Object wh_data = warehouseTbl.getValueAt(selectedRow, warehouseTbl.getKeyColumnIndex());
+		            
+					if (wh_data != null && wh_data instanceof IDColumn)
+		            {
+		            	IDColumn dataColumn = (IDColumn) wh_data;
+		            	m_ATP_M_Warehouse_ID = dataColumn.getRecord_ID();
+		            }
+					else
+					{
+						m_ATP_M_Warehouse_ID = m_M_Warehouse_ID;
+					}
+				} 
+				else
+				{
+					m_ATP_M_Warehouse_ID = m_M_Warehouse_ID;
 				}
 			}
 		});
-	}
 
-	@Override
-	protected void insertPagingComponent() {
-		North north = new North();
-		north.appendChild(paging);
-		borderlayout.appendChild(north);
 	}
 
 	/**
 	 * 	Refresh Query
 	 */
-	private void refresh(Object obj, int M_Warehouse_ID, int M_PriceList_Version_ID)
+	protected void refresh()
 	{
-		//int M_Product_ID = 0;
-		String sql = m_sqlWarehouse;
-		//Add description to the query
-		sql = sql.replace(" FROM", ", DocumentNote FROM");
-		log.finest(sql);
-		PreparedStatement pstmt = null;
-		ResultSet rs = null;
-		try
-		{
-			pstmt = DB.prepareStatement(sql, null);
-			pstmt.setString(1, (String)obj);
-			rs = pstmt.executeQuery();
-			fieldDescription.setText("");
-			warehouseTbl.loadTable(rs);
-			rs = pstmt.executeQuery();
-			if(rs.next())
-				if(rs.getString("DocumentNote") != null)
-					fieldDescription.setText(rs.getString("DocumentNote"));
-		}
-		catch (Exception e)
-		{
-			log.log(Level.WARNING, sql, e);
-		}
-		finally
-		{
-			DB.close(rs, pstmt);
-			rs = null; pstmt = null;
-		}
+		//  Invoke later to not delay events.
+		//SwingUtilities.invokeLater(new Runnable(){public void run()
+		//{
+	    	int M_PriceList_Version_ID = 0;
+	
+	    	if (fPriceList_ID.getValue() != null)
+	    		M_PriceList_Version_ID = ((Integer) fPriceList_ID.getValue()).intValue();
+	
+	    	String sql;
+			PreparedStatement pstmt = null;
+			ResultSet rs = null;
+			String eol = System.getProperty("line.separator"); 
 
-		m_M_Product_ID = getSelectedRowKey();
+			Boolean queryWarehouse = false;
+			int leadRowKey = 0;
+			
+			if (p_table != null || p_table.getRowCount() > 0)
+				leadRowKey = p_table.getLeadRowKey();
+	    	
+			if (m_M_Product_ID != leadRowKey)
+	    	{
+	    		m_M_Product_ID = leadRowKey;  //  From the main table
+	    		queryWarehouse = true;  //  The product has changed, change the warehouse table
+	    	}
 
-		sql = m_sqlSubstitute;
-		log.finest(sql);
-		try {
-			pstmt = DB.prepareStatement(sql, null);
-			pstmt.setInt(1, m_M_Product_ID);
-			pstmt.setInt(2, M_PriceList_Version_ID);
-			rs = pstmt.executeQuery();
-			substituteTbl.loadTable(rs);
-			rs.close();
-		} catch (Exception e) {
-			log.log(Level.WARNING, sql, e);
-		}
-		finally
-		{
-			DB.close(rs, pstmt);
-			rs = null; pstmt = null;
-		}
+			if(m_M_Product_ID <= 0) 
+			{
+				p_centerLayout.getSouth().setOpen(false);
+				return;
+			}
+			else
+			{
+				p_centerLayout.getSouth().setOpen(true);
+				if (queryWarehouse) // Product has changed and is valid
+				{
+					//  Find the ASI used by the product on the lead row
+					MProduct mp = MProduct.get(Env.getCtx(), m_M_Product_ID);
+					m_M_AttributeSetInstance_ID = mp.getM_AttributeSetInstance_ID();				
+				}
+			}
+			
+			if (detailTabBox.getSelectedIndex() == 0 || detailTabBox.getSelectedIndex() == 5)
+			{
+				if (queryWarehouse)
+				{
+		    		//  Warehouse tab
+					sql = m_sqlWarehouse;
+			
+					log.finest(sql);
+					try
+					{
+						pstmt = DB.prepareStatement(sql, null);
+						pstmt.setInt(1, m_M_Product_ID);
+						rs = pstmt.executeQuery();
+						warehouseTbl.loadTable(rs);
+						rs.close();
+					}
+					catch (Exception e)
+					{
+						log.log(Level.WARNING, sql, e);
+					}
+					finally
+					{
+						DB.close(rs, pstmt);
+						rs = null; pstmt = null;
+					}
+				}
 
-		sql = m_sqlRelated;
-		log.finest(sql);
-		try {
-			pstmt = DB.prepareStatement(sql, null);
-			pstmt.setInt(1, m_M_Product_ID);
-			pstmt.setInt(2, M_PriceList_Version_ID);
-			rs = pstmt.executeQuery();
-			relatedTbl.loadTable(rs);
-			rs.close();
-		} catch (Exception e) {
-			log.log(Level.WARNING, sql, e);
-		}
-		finally
-		{
-			DB.close(rs, pstmt);
-			rs = null; pstmt = null;
-		}
-		initAtpTab(M_Warehouse_ID);
+				if (warehouseTbl.getRowCount() > 0)
+				{
+					int selectedRow = warehouseTbl.getSelectedRow();
+					if (selectedRow<0)
+					{
+						warehouseTbl.setSelectedIndex(0);
+						selectedRow = 0;
+					}
+
+					Object wh_data = warehouseTbl.getValueAt(selectedRow, warehouseTbl.getKeyColumnIndex());
+		            
+					if (wh_data != null && wh_data instanceof IDColumn)
+		            {
+		            	IDColumn dataColumn = (IDColumn) wh_data;
+		            	m_ATP_M_Warehouse_ID = dataColumn.getRecord_ID();
+		            }
+					else
+					{
+						m_ATP_M_Warehouse_ID = m_M_Warehouse_ID;
+					}
+				} 
+				else
+				{
+					m_ATP_M_Warehouse_ID = m_M_Warehouse_ID;
+				}
+
+			}
+			
+	    	if(detailTabBox.getSelectedIndex() == 1)
+			{
+	    		fieldDescription.setText("");
+				//  Description tab
+				if(m_M_Product_ID != 0)
+				{
+					MProduct p = MProduct.get(Env.getCtx(), m_M_Product_ID);
+					if (p.getDescription() != null && p.getDescription().length() > 0)
+						fieldDescription.setText(p.getDescription());
+					if (p.getDocumentNote() != null && p.getDocumentNote().length() > 0)
+					{
+						if (fieldDescription.getText().length() > 0)
+							fieldDescription.setText(fieldDescription.getText() + eol + eol + p.getDocumentNote());
+						else
+							fieldDescription.setText(fieldDescription.getText() + p.getDocumentNote());
+					}
+				}
+				else
+					fieldDescription.setText("");
+			}
+			
+	    	if(detailTabBox.getSelectedIndex() == 2)
+			{
+	    		fieldPAttributes.setText("");
+	    		StringBuffer paText = new StringBuffer();
+	    		
+				//  Product Attributes tab
+				if(m_M_Product_ID != 0)
+				{
+					MProduct p = MProduct.get(Env.getCtx(), m_M_Product_ID);
+					
+					if (p.getM_AttributeSet_ID() == 0 || p.getM_AttributeSetInstance_ID() == 0){
+						// There is no attribute set or attribute set instance associated with the product
+						return;
+					}
+					
+					int M_AttributeSet_ID = p.getM_AttributeSetInstance_ID();
+	
+			        sql = 	"SELECT asi.Lot, asi.SerNo, asi.GuaranteeDate,"
+			        	+ 		" COALESCE(a.SerNoCharSOverwrite, '#'::CHAR(1)),"
+			        	+		" COALESCE(a.SerNoCharEOverwrite, ''::CHAR(1)),"
+			        	+		" COALESCE(a.LotCharSOverwrite, '«'::CHAR(1)),"
+			        	+		" COALESCE(a.LotCharEOverwrite, '»'::CHAR(1))"
+			            +	" FROM M_AttributeSetInstance asi"
+			            +	" INNER JOIN M_AttributeSet a ON (asi.M_AttributeSet_ID=a.M_AttributeSet_ID)"
+			            + 	" WHERE asi.M_AttributeSetInstance_ID=?";
+			            
+					log.finest(sql);
+					try
+					{
+						pstmt = DB.prepareStatement(sql, null);
+						pstmt.setInt(1, M_AttributeSet_ID);
+						rs = pstmt.executeQuery();
+						while (rs.next())
+						{
+							if (rs.getString(1).length() > 0)
+								paText
+									.append(Msg.translate(Env.getCtx(), "Lot")).append(": ")
+									.append(rs.getString(6)).append(rs.getString(1)).append(rs.getString(7)).append(eol);
+							if (rs.getString(1).length() > 0)
+								paText
+									.append(Msg.translate(Env.getCtx(), "SerialNumber")).append(": ")
+									.append(rs.getString(4)).append(rs.getString(2)).append(rs.getString(5)).append(eol);
+							if (rs.getDate(3) != null)
+								paText
+									.append(Msg.translate(Env.getCtx(), "GuaranteeDate")).append(": ").append(rs.getDate(3)).append(eol);
+						}
+						rs.close();
+					}
+					catch (Exception e)
+					{
+						log.log(Level.WARNING, sql, e);
+					}
+					finally
+					{
+						DB.close(rs, pstmt);
+						rs = null; pstmt = null;
+					}
+					//  Instance Attributes - if any
+					sql = 	"SELECT ai.Value, a.Name"
+						+	" FROM M_AttributeInstance ai"
+						+	" INNER JOIN M_Attribute a ON (ai.M_Attribute_ID=a.M_Attribute_ID AND a.IsInstanceAttribute='Y')"
+						+	" WHERE ai.M_AttributeSetInstance_ID=?";
+	
+					log.finest(sql);
+					try
+					{
+						pstmt = DB.prepareStatement(sql, null);
+						pstmt.setInt(1, M_AttributeSet_ID);
+						rs = pstmt.executeQuery();
+						Boolean labeled = false;
+						while (rs.next())
+						{
+							if (!labeled)
+							{
+								paText.append("***  ").append(Msg.translate(Env.getCtx(), "InstanceAttribute")).append("  ***").append(eol);
+								labeled = true;
+							}
+							paText.append("  ").append(rs.getString(2)).append(": ").append(rs.getString(1)).append(eol);
+						}
+						rs.close();
+					}
+					catch (Exception e)
+					{
+						log.log(Level.WARNING, sql, e);
+					}
+					finally
+					{
+						DB.close(rs, pstmt);
+						rs = null; pstmt = null;
+					}
+					//  Product attributes - if any
+					sql = 	"SELECT ai.Value, a.Name"
+						+	" FROM M_AttributeInstance ai"
+						+	" INNER JOIN M_Attribute a ON (ai.M_Attribute_ID=a.M_Attribute_ID AND a.IsInstanceAttribute='N')"
+						+	" WHERE ai.M_AttributeSetInstance_ID=?";
+	
+					log.finest(sql);
+					try
+					{
+						pstmt = DB.prepareStatement(sql, null);
+						pstmt.setInt(1, M_AttributeSet_ID);
+						rs = pstmt.executeQuery();
+						Boolean labeled = false;
+						while (rs.next())
+						{
+							if (!labeled)
+							{
+								paText.append("***  ").append(Msg.translate(Env.getCtx(), "ProductAttribute")).append("  ***").append(eol);
+								labeled = true;
+							}
+							paText.append("  ").append(rs.getString(2)).append(": ").append(rs.getString(1)).append(eol);
+						}
+						rs.close();
+					}
+					catch (Exception e)
+					{
+						log.log(Level.WARNING, sql, e);
+					}
+					finally
+					{
+						DB.close(rs, pstmt);
+						rs = null; pstmt = null;
+					}
+					
+					if (paText.length() > 0)
+						fieldPAttributes.setText(paText.toString());
+				}
+			}
+
+	    	if(detailTabBox.getSelectedIndex() == 3)
+			{
+				//  Substitute tab
+				sql = m_sqlSubstitute;
+				log.finest(sql);
+				try {
+					pstmt = DB.prepareStatement(sql, null);
+					pstmt.setInt(1, m_M_Product_ID);
+					pstmt.setInt(2, M_PriceList_Version_ID);
+					rs = pstmt.executeQuery();
+					substituteTbl.loadTable(rs);
+					rs.close();
+				} catch (Exception e) {
+					log.log(Level.WARNING, sql, e);
+				}
+				finally
+				{
+					DB.close(rs, pstmt);
+					rs = null; pstmt = null;
+				}
+			}
+			
+	    	if(detailTabBox.getSelectedIndex() == 4)
+			{
+				//  Related tab
+				sql = m_sqlRelated;
+				log.finest(sql);
+				try {
+					pstmt = DB.prepareStatement(sql, null);
+					pstmt.setInt(1, m_M_Product_ID);
+					pstmt.setInt(2, M_PriceList_Version_ID);
+					rs = pstmt.executeQuery();
+					relatedTbl.loadTable(rs);
+					rs.close();
+				} catch (Exception e) {
+					log.log(Level.WARNING, sql, e);
+				}
+				finally
+				{
+					DB.close(rs, pstmt);
+					rs = null; pstmt = null;
+				}
+			}
+	    	
+	    	if(detailTabBox.getSelectedIndex() == 5)		
+			{
+	    		if (warehouseTbl.getRowCount() > 0)
+	    			refreshAtpTab();
+	    		else
+	    		{
+	    			clearAtpTab();
+	    		}
+			}
+	    	
+	    	if(detailTabBox.getSelectedIndex() == 6)
+			{
+				//  Vendor tab
+				sql = m_sqlVendor;
+				log.finest(sql);
+				try {
+					pstmt = DB.prepareStatement(sql, null);
+					pstmt.setInt(1, m_M_Product_ID);
+					rs = pstmt.executeQuery();
+					vendorTbl.loadTable(rs);
+					rs.close();
+				} catch (Exception e) {
+					log.log(Level.WARNING, sql, e);
+				}
+				finally
+				{
+					DB.close(rs, pstmt);
+					rs = null; pstmt = null;
+				}
+			}
+
+		//}});
 	}	//	refresh
+	//End - fer_luck @ centuryon
+
+	/**
+	 * clearAtpTab() - wipe the ATP table of data
+	 */
+	private void clearAtpTab()
+	{
+		m_modelAtp = new ListModelTable();
+		m_tableAtp.setRowCount(0);
+		m_tableAtp.setModel(m_modelAtp);
+
+	}  //  clearAtpTab
+	
+	/**
+	 * Generic init call used by inherited class
+	 */
+	protected void initInfo ()
+	{
+		initInfo(0,"",m_M_Warehouse_ID, m_M_PriceList_ID, true);
+	}
 
 	/**
 	 *	Dynamic Init
 	 *
+	 * @param record_id   M_Product_ID if known, otherwise, 0
 	 * @param value value
 	 * @param M_Warehouse_ID warehouse
 	 * @param M_PriceList_ID price list
 	 */
-	private void initInfo (String value, int M_Warehouse_ID, int M_PriceList_ID)
+	private void initInfo (int record_id, String value, int M_Warehouse_ID, int M_PriceList_ID, boolean reset)
 	{
-		//	Pick init
-		fillPicks(M_PriceList_ID);
-		int M_PriceList_Version_ID = findPLV (M_PriceList_ID);
-		//	Set Value or Name
-		if (value.startsWith("@") && value.endsWith("@"))
-			fieldName.setText(value.substring(1,value.length()-1));
-		else
-			fieldValue.setText(value);
-		//	Set Warehouse
-		if (M_Warehouse_ID == 0)
-			M_Warehouse_ID = Env.getContextAsInt(Env.getCtx(), "#M_Warehouse_ID");
-		if (M_Warehouse_ID != 0)
-			setWarehouse (M_Warehouse_ID);
-		// 	Set PriceList Version
-		if (M_PriceList_Version_ID != 0)
-			setPriceListVersion (M_PriceList_Version_ID);
+		if (!(record_id == 0) && value != null && value.length() > 0)
+		{
+			log.severe("Received both a record_id and a value: " + record_id + " - " + value);
+		}
 
-		//	Create Grid
-		StringBuffer where = new StringBuffer();
-		where.append("p.IsActive='Y'");
-		if (M_Warehouse_ID != 0)
-			where.append(" AND p.IsSummary='N'");
-		//  dynamic Where Clause
-		if (p_whereClause != null && p_whereClause.length() > 0)
-			where.append(" AND ")   //  replace fully qalified name with alias
-				.append(Util.replace(p_whereClause, "M_Product.", "p."));
-		//
-		prepareTable(getProductLayout(),
-			s_productFrom,
-			where.toString(),
-			"QtyAvailable DESC, Margin DESC");
+		//  In case of reset, clear all parameters to ensure we are at a known starting point.
+		if(reset)
+		{
+			clearParameters();
+			p_resetColumns = true;
+		}
+		//  Set values
+        if (!(record_id == 0))  // A record is defined
+        {
+        	fieldID = record_id;
+        	fWarehouse_ID.setValue(new Integer(M_Warehouse_ID).intValue());
+        	fPriceList_ID.setValue(findPLV(M_PriceList_ID));
 
-		//
-		pickWarehouse.addEventListener(Events.ON_SELECT,this);
-		pickPriceList.addEventListener(Events.ON_SELECT,this);
-		pickProductCategory.addEventListener(Events.ON_SELECT, this); // Elaine 2008/11/21
-		pickAS.addEventListener(Events.ON_SELECT, this);
-	}	//	initInfo
+        } 
+        else
+        {
+        	fieldID = 0;
+        	
+        	String id;
+			if (value != null && value.length() > 0) //  The VLookup failed to find uniqueness across the direct access SQL fields
+			{
+				//  Match the query performed by the VLookup.  See getDirectAccessSQL().
+				if (value.startsWith("@") && value.endsWith("@"))
+				{
+					fieldName.setText(value.substring(1,value.length()-1));
+				}
+				else
+				{
+					fieldValue.setText(value);
+					fieldName.setText(value);
+					fieldUPC.setText(value);
+					fieldSKU.setText(value);
+				}
+				//
+				fWarehouse_ID.setValue(0);
+	        	//
+	        	fPriceList_ID.setValue(0);
+	        	//
+	        	checkAND.setSelected(false); //  Use OR
+	        	
+			}
+			else
+			{
+				//  No field or value - the general case
+				//  Try to find other criteria in the context
+				//  M_Product_ID - only if visible
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "M_Product_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fieldID = new Integer(id).intValue();
+				}
+				
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "M_PriceList_Version_ID", true);
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+				{
+					fPriceList_ID.setValue(new Integer(id).intValue());
+				}
+				else
+				{	
+						//  OK - make a good guess
+						fPriceList_ID.setValue(findPLV(M_PriceList_ID));
+				}
 
-	/**
-	 *	Fill Picks with values
-	 *
-	 * @param M_PriceList_ID price list
-	 */
-	private void fillPicks (int M_PriceList_ID)
-	{
-		//	Price List
-		String SQL = "SELECT M_PriceList_Version.M_PriceList_Version_ID,"
-			+ " M_PriceList_Version.Name || ' (' || c.Iso_Code || ')' AS ValueName "
-			+ "FROM M_PriceList_Version, M_PriceList pl, C_Currency c "
-			+ "WHERE M_PriceList_Version.M_PriceList_ID=pl.M_PriceList_ID"
-			+ " AND pl.C_Currency_ID=c.C_Currency_ID"
-			+ " AND M_PriceList_Version.IsActive='Y' AND pl.IsActive='Y'";
-		//	Same PL currency as original one
-		if (M_PriceList_ID != 0)
-			SQL += " AND EXISTS (SELECT * FROM M_PriceList xp WHERE xp.M_PriceList_ID=" + M_PriceList_ID
-				+ " AND pl.C_Currency_ID=xp.C_Currency_ID)";
-		//	Add Access & Order
-		SQL = MRole.getDefault().addAccessSQL (SQL, "M_PriceList_Version", true, false)	// fully qualidfied - RO
-			+ " ORDER BY M_PriceList_Version.Name";
-		try
-		{
-			pickPriceList.appendItem("",new Integer(0));
-			PreparedStatement pstmt = DB.prepareStatement(SQL, null);
-			ResultSet rs = pstmt.executeQuery();
-			while (rs.next())
-			{
-				pickPriceList.appendItem(rs.getString(2),new Integer(rs.getInt(1)));
-			}
-			rs.close();
-			pstmt.close();
-
-			//	Warehouse
-			SQL = MRole.getDefault().addAccessSQL (
-				"SELECT M_Warehouse_ID, Value || ' - ' || Name AS ValueName "
-				+ "FROM M_Warehouse "
-				+ "WHERE IsActive='Y'",
-					"M_Warehouse", MRole.SQL_NOTQUALIFIED, MRole.SQL_RO)
-				+ " ORDER BY Value";
-			pickWarehouse.appendItem("", new Integer(0));
-			pstmt = DB.prepareStatement(SQL, null);
-			rs = pstmt.executeQuery();
-			while (rs.next())
-			{
-				pickWarehouse.appendItem(rs.getString("ValueName"), new Integer(rs.getInt("M_Warehouse_ID")));
-			}
-			rs.close();
-			pstmt.close();
-
-			// Elaine 2008/11/21
-			//	Product Category
-			SQL = MRole.getDefault().addAccessSQL (
-				"SELECT M_Product_Category_ID, Value || ' - ' || Name FROM M_Product_Category WHERE IsActive='Y'",
-					"M_Product_Category", MRole.SQL_NOTQUALIFIED, MRole.SQL_RO)
-				+ " ORDER BY Value";
-			for (KeyNamePair kn : DB.getKeyNamePairs(SQL, true)) {
-				pickProductCategory.addItem(kn);
-			}
-
-			//	Attribute Sets
-			SQL = MRole.getDefault().addAccessSQL (
-				"SELECT M_AttributeSet_ID, Name FROM M_AttributeSet WHERE IsActive='Y'",
-					"M_AttributeSet", MRole.SQL_NOTQUALIFIED, MRole.SQL_RO)
-				+ " ORDER BY Name";
-			for (KeyNamePair kn : DB.getKeyNamePairs(SQL, true)) {
-				pickAS.addItem(kn);
+				//  M_Warehouse_ID - general context
+				if(M_Warehouse_ID == 0)
+				{
+					id = Env.getContext(Env.getCtx(), "#M_Warehouse_ID");
+					if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+					{
+						fWarehouse_ID.setValue(new Integer(id).intValue());
+					}
+					else 
+					{
+						id = Env.getContext(Env.getCtx(), p_WindowNo, "M_Warehouse_ID");
+						if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))
+						{
+							fWarehouse_ID.setValue(new Integer(id).intValue());
+						}
+					}
+				}
+				else
+				{
+		        	fWarehouse_ID.setValue(new Integer(M_Warehouse_ID).intValue());
+				}
+				
+				id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BPartner_ID", false);
+				boolean isSOTrx = "Y".equals(Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "IsSOTrx", false));
+				if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0) && !isSOTrx)
+				{
+					fVendor_ID.setValue(new Integer(id).intValue());
+				}			
 			}
 		}
-		catch (SQLException e)
+
+		if (!isValidVObject(fWarehouse_ID))
 		{
-			log.log(Level.SEVERE, SQL, e);
-			setStatusLine(e.getLocalizedMessage(), true);
+			//  Disable the stock button
+			checkOnlyStock.setSelected(false);
+			checkOnlyStock.setEnabled(false);
 		}
-	}	//	fillPicks
-
-	/**
-	 *	Set Warehouse
-	 *
-	 * 	@param M_Warehouse_ID warehouse
-	 */
-	private void setWarehouse(int M_Warehouse_ID)
-	{
-		for (int i = 0; i < pickWarehouse.getItemCount(); i++)
-		{
-			 Integer key = (Integer) pickWarehouse.getItemAtIndex(i).getValue();
-			if (key == M_Warehouse_ID)
-			{
-				pickWarehouse.setSelectedIndex(i);
-				return;
-			}
-		}
-	}	//	setWarehouse
-
-	/**
-	 *	Set PriceList
-	 *
-	 * @param M_PriceList_Version_ID price list
-	 */
-	private void setPriceListVersion(int M_PriceList_Version_ID)
-	{
-		log.config("M_PriceList_Version_ID=" + M_PriceList_Version_ID);
-		for (int i = 0; i < pickPriceList.getItemCount(); i++)
-		{
-			Integer key = (Integer) pickPriceList.getItemAtIndex(i).getValue();
-			if (key == M_PriceList_Version_ID)
-			{
-				pickPriceList.setSelectedIndex(i);
-				return;
-			}
-		}
-		log.fine("NOT found");
-	}	//	setPriceList
+		else
+			checkOnlyStock.setEnabled(true);
+	}	//	initInfo
 
 	/**
 	 *	Find Price List Version and update context
@@ -808,7 +1160,30 @@
 		return retValue;
 	}	//	findPLV
 
-
+	/**************************************************************************
+	 *	Construct SQL From Clause
+	 *  @return SQL From clause
+	 */
+	protected String getFromClause()
+	{
+		/** SQL From				*/
+		String s_productFrom = "M_Product p";
+		
+		if (isValidVObject(fPriceList_ID))
+		{
+			s_productFrom += " LEFT OUTER JOIN (SELECT mpp.M_Product_ID, mpp.M_PriceList_Version_id, mpp.IsActive, mpp.PriceList, mpp.PriceStd, mpp.PriceLimit" 
+			+					" FROM M_ProductPrice mpp, M_PriceList_Version mplv "
+			+					" WHERE mplv.M_PriceList_Version_ID = mpp.M_PriceList_Version_ID AND mplv.IsActive = 'Y') pr"
+			+ " ON (p.M_Product_ID=pr.M_Product_ID AND pr.IsActive='Y')";
+		}
+		s_productFrom += " LEFT OUTER JOIN M_AttributeSet pa ON (p.M_AttributeSet_ID=pa.M_AttributeSet_ID)"
+			+ " LEFT OUTER JOIN M_Product_PO ppo ON (p.M_Product_ID=ppo.M_Product_ID and ppo.IsCurrentVendor='Y' and ppo.IsActive='Y')"
+			+ " LEFT OUTER JOIN M_Product_Category pc ON (p.M_Product_Category_ID=pc.M_Product_Category_ID)"
+			+ " LEFT OUTER JOIN C_BPartner bp ON (ppo.C_BPartner_ID=bp.C_BPartner_ID)";
+		
+		return s_productFrom;
+	}
+	
 	/**************************************************************************
 	 *	Construct SQL Where Clause and define parameters
 	 *  (setParameters needs to set parameters)
@@ -817,60 +1192,94 @@
 	 */
 	public String getSQLWhere()
 	{
-		StringBuffer where = new StringBuffer();
+		ArrayList<String> list = new ArrayList<String>();
+		
+		//  => ID
+		if(isResetRecordID())
+			fieldID = 0;
+		if(!(fieldID == 0))
+		{
+			list.add("p.M_Product_ID = ?");
+		}
+		
+		//  Warehouse - if defined, don't include summary products
+		if (fWarehouse_ID.getValue() != null && ((Integer) fWarehouse_ID.getValue()).intValue() != 0)
+			list.add("p.IsSummary='N'");
 
-		//	Optional PLV
-		int M_PriceList_Version_ID = 0;
-		ListItem listitem = pickPriceList.getSelectedItem();
-		if (listitem != null)
-			M_PriceList_Version_ID = (Integer)listitem.getValue();
-		if (M_PriceList_Version_ID != 0)
-			where.append(" AND pr.M_PriceList_Version_ID=?");
-
-		// Elaine 2008/11/29
+		//  Only Stock items
+		if (checkOnlyStock.isSelected())
+			list.add("p.isStocked = ?");
+		
+		//	Optional Price List Version
+		if (fPriceList_ID.getValue() != null)
+			list.add("pr.M_PriceList_Version_ID=?");
+		
 		//  Optional Product Category
-		if (getM_Product_Category_ID() > 0) {
-			where.append(" AND p.M_Product_Category_ID=?");
+		if (fProductCategory_ID.getValue() != null) {
+			list.add("(p.M_Product_Category_ID=? OR p.M_Product_Category_ID IN "
+			+ 		"(SELECT PPC.M_Product_Category_ID FROM M_Product_Category ppc WHERE "
+			+		" ppc.M_Product_Category_Parent_ID = ?))");
 		}
-		//
-
+		
 		//  Optional Attribute Set
-		if (getM_AttributeSet_ID() > 0) {
-			where.append(" AND p.M_AttributeSet_ID=?");
+		if (fAS_ID.getValue() != null && ((Integer) fAS_ID.getValue()).intValue() != 0) {
+			list.add("p.M_AttributeSet_ID=?");
 		}
-
+		
 		//	Product Attribute Search
-		if (m_pAttributeWhere != null)
+		if (fASI_ID.getAttributeWhere() != null)
 		{
-			where.append(m_pAttributeWhere);
-			return where.toString();
+			String asiWhere = fASI_ID.getAttributeWhere();
+			if (asiWhere.length() > 0)
+			{
+				if (asiWhere.startsWith(" AND "))
+					asiWhere = asiWhere.substring(5);
+				list.add(asiWhere);
+			}
 		}
 
 		//  => Value
-		String value = fieldValue.getText().toUpperCase();
-		if (!(value.equals("") || value.equals("%")))
-			where.append(" AND UPPER(p.Value) LIKE ?");
+		if(isValidSQLText(fieldValue))
+			list.add("UPPER(p.Value) LIKE ?");
 
 		//  => Name
-		String name = fieldName.getText().toUpperCase();
-		if (!(name.equals("") || name.equals("%")))
-			where.append(" AND UPPER(p.Name) LIKE ?");
+		if(isValidSQLText(fieldName))
+			list.add("UPPER(p.Name) LIKE ?");
 
 		//  => UPC
-		String upc = fieldUPC.getText().toUpperCase();
-		if (!(upc.equals("") || upc.equals("%")))
-			where.append(" AND UPPER(p.UPC) LIKE ?");
+		if(isValidSQLText(fieldUPC))
+			list.add("UPPER(p.UPC) LIKE ?");
 
 		//  => SKU
-		String sku = fieldSKU.getText().toUpperCase();
-		if (!(sku.equals("") || sku.equals("%")))
-			where.append(" AND UPPER(p.SKU) LIKE ?");
+		if(isValidSQLText(fieldSKU))
+			list.add("UPPER(p.SKU) LIKE ?");
+
 		//	=> Vendor
-		String vendor = fieldVendor.getText().toUpperCase();
-		if (!(vendor.equals("") || vendor.equals("%")))
-			where.append(" AND UPPER(bp.Name) LIKE ? AND ppo.IsCurrentVendor='Y' AND ppo.IsActive='Y'"); // Elaine 2008/12/16
-
-		return where.toString();
+		if (fVendor_ID.getValue() != null)
+			list.add("ppo.C_BPartner_ID=?");
+		
+		StringBuffer sql = new StringBuffer();
+		int size = list.size();
+		//	Just one
+		if (size == 1)
+			sql.append(" AND ").append(list.get(0));
+		else if (size > 1)
+		{
+			boolean AND = checkAND.isSelected();
+			sql.append(" AND ");
+			if (!AND)
+				sql.append("(");
+			for (int i = 0; i < size; i++)
+			{
+				if (i > 0)
+					sql.append(AND ? " AND " : " OR ");
+				sql.append(list.get(i));
+			}
+			if (!AND)
+				sql.append(")");
+		}
+		
+		return sql.toString();
 	}	//	getSQLWhere
 
 	/**
@@ -885,119 +1294,85 @@
 		int index = 1;
 
 		//  => Warehouse
-		int M_Warehouse_ID = 0;
-		ListItem listitem = pickWarehouse.getSelectedItem();
-		if (listitem != null)
-			M_Warehouse_ID = (Integer)listitem.getValue();
+		Integer id;
+		if (fWarehouse_ID.getValue() != null)
+			id = ((Integer) fWarehouse_ID.getValue());
+		else
+			id = 0;
 		if (!forCount)	//	parameters in select
 		{
 			for (int i = 0; i < p_layout.length; i++)
 			{
 				if (p_layout[i].getColSQL().indexOf('?') != -1)
-					pstmt.setInt(index++, M_Warehouse_ID);
+					pstmt.setInt(index++, id.intValue());
 			}
 		}
-		log.fine("M_Warehouse_ID=" + M_Warehouse_ID + " (" + (index-1) + "*)");
+		log.fine("M_Warehouse_ID=" + id + " (" + (index-1) + "*)");
 
-		//  => PriceList
-		int M_PriceList_Version_ID = 0;
-		ListItem lstitem = pickPriceList.getSelectedItem();
-		if (lstitem != null)
-			M_PriceList_Version_ID = (Integer)lstitem.getValue();
-		if (M_PriceList_Version_ID != 0)
+		//  => ID
+		if(!(fieldID == 0))
 		{
-			pstmt.setInt(index++, M_PriceList_Version_ID);
-			log.fine("M_PriceList_Version_ID=" + M_PriceList_Version_ID);
-		}
-		// Elaine 2008/11/29
-		//  => Product Category
-		int M_Product_Category_ID = getM_Product_Category_ID();
-		if (M_Product_Category_ID > 0) {
-			pstmt.setInt(index++, M_Product_Category_ID);
-			log.fine("M_Product_Category_ID=" + M_Product_Category_ID);
-		}
-		//
-		int M_AttributeSet_ID = getM_AttributeSet_ID();
-		if (M_AttributeSet_ID > 0) {
-			pstmt.setInt(index++, M_AttributeSet_ID);
-			log.fine("M_AttributeSet_ID=" + M_AttributeSet_ID);
-		}
-		//	Rest of Parameter in Query for Attribute Search
-		if (m_pAttributeWhere != null)
-			return;
-
-		//  => Value
-		String value = fieldValue.getText().toUpperCase();
-		if (!(value.equals("") || value.equals("%")))
-		{
-			if (!value.endsWith("%"))
-				value += "%";
-			pstmt.setString(index++, value);
-			log.fine("Value: " + value);
+			pstmt.setInt(index++, fieldID);
+			log.fine("Record ID: " + fieldID);
 		}
 
+		//  => Only Stocked
+		if(checkOnlyStock.isSelected())
+		{
+			pstmt.setString(index++, "Y");
+			log.fine("Only Stocked: " + "Y");
+		}
+		
+		//  => PriceList
+		if (fPriceList_ID.getValue() != null)
+		{
+			id =  ((Integer) fPriceList_ID.getValue());
+			pstmt.setInt(index++, id.intValue());
+			log.fine("M_PriceList_Version_ID=" + id);
+		}
+		//  => Product Category
+		if (fProductCategory_ID.getValue() != null) {
+			id = ((Integer) fProductCategory_ID.getValue());
+			pstmt.setInt(index++, id.intValue());
+			pstmt.setInt(index++, id.intValue());  //  Done twice - see getWhere()
+			log.fine("M_Product_Category_ID=" + id);
+		}
+		//  => Attribute Set - @Trifon
+		
+		if (fAS_ID.getValue() != null && ((Integer) fAS_ID.getValue()).intValue() != 0) {
+			id = ((Integer) fAS_ID.getValue());
+			pstmt.setInt(index++, id.intValue());
+			log.fine("M_AttributeSet_ID=" + id);
+		}
+		//	=> AttributeSetInstance where clause
+		if (fASI_ID.getAttributeWhere() != null)
+		{
+			// No parameter needs to be added
+		}
+		
+		//  => Value
+		if (isValidSQLText(fieldValue))
+			pstmt.setString(index++, getSQLText(fieldValue));
 		//  => Name
-		String name = fieldName.getText().toUpperCase();
-		if (!(name.equals("") || name.equals("%")))
+		if (isValidSQLText(fieldName))
+			pstmt.setString(index++, getSQLText(fieldName));
+		//  => UPC
+		if (isValidSQLText(fieldUPC))
+			pstmt.setString(index++, getSQLText(fieldUPC));
+		//  => SKU
+		if (isValidSQLText(fieldSKU))
+			pstmt.setString(index++, getSQLText(fieldSKU));
+		//  => Vendor
+		if (fVendor_ID.getValue() != null)
 		{
-			if (!name.endsWith("%"))
-				name += "%";
-			pstmt.setString(index++, name);
-			log.fine("Name: " + name);
+			id = (Integer)fVendor_ID.getValue();
+			pstmt.setInt(index++, id.intValue());
+			log.fine("fVendor_ID=" + id);
 		}
 
-		//  => UPC
-		String upc = fieldUPC.getText().toUpperCase();
-		if (!(upc.equals("") || upc.equals("%")))
-		{
-			if (!upc.endsWith("%"))
-				upc += "%";
-			pstmt.setString(index++, upc);
-			log.fine("UPC: " + upc);
-		}
-
-		//  => SKU
-		String sku = fieldSKU.getText().toUpperCase();
-		if (!(sku.equals("") || sku.equals("%")))
-		{
-			if (!sku.endsWith("%"))
-				sku += "%";
-			pstmt.setString(index++, sku);
-			log.fine("SKU: " + sku);
-		}
-
-		//  => Vendor
-		String vendor = fieldVendor.getText().toUpperCase();
-		if (!(vendor.equals("") || vendor.equals("%")))
-		{
-			if (!vendor.endsWith("%"))
-				vendor += "%";
-			pstmt.setString(index++, vendor);
-			log.fine("Vendor: " + vendor);
-		}
 	}   //  setParameters
 
 	/**
-	 * 	Query per Product Attribute.
-	 *  <code>
-	 * 	Available synonyms:
-	 *		M_Product p
-	 *		M_ProductPrice pr
-	 *		M_AttributeSet pa
-	 *	</code>
-	 */
-	private void cmd_InfoPAttribute()
-	{
-		InfoPAttributePanel ia = new InfoPAttributePanel(this);
-		m_pAttributeWhere = ia.getWhereClause();
-		if (m_pAttributeWhere != null)
-		{
-			executeQuery();
-			renderItems();
-		}
-	}	//	cmdInfoAttribute
-
-	/**
 	 *	Show History
 	 */
 	protected void showHistory()
@@ -1007,9 +1382,8 @@
 		if (M_Product_ID == null)
 			return;
 		int M_Warehouse_ID = 0;
-		ListItem listitem = pickWarehouse.getSelectedItem();
-		if (listitem != null)
-			M_Warehouse_ID = (Integer)listitem.getValue();
+		if (fWarehouse_ID.getValue() != null)
+			M_Warehouse_ID = (Integer)fWarehouse_ID.getValue();
 		int M_AttributeSetInstance_ID = m_M_AttributeSetInstance_ID;
 		if (m_M_AttributeSetInstance_ID < -1)	//	not selected
 			M_AttributeSetInstance_ID = 0;
@@ -1059,23 +1433,6 @@
 	}	//	hasZoom
 
 	/**
-	 *	Customize
-	 */
-	protected void customize()
-	{
-		log.info("");
-	}	//	customize
-
-	/**
-	 *	Has Customize
-	 *  @return false (no customize)
-	 */
-	protected boolean hasCustomize()
-	{
-		return false;	//	for now
-	}	//	hasCustomize
-
-	/**
 	 *	Save Selection Settings for PriceList
 	 */
 	protected void saveSelectionDetail()
@@ -1083,15 +1440,15 @@
 		//  publish for Callout to read
 		Integer ID = getSelectedRowKey();
 		Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "M_Product_ID", ID == null ? "0" : ID.toString());
-		ListItem pickPL = (ListItem)pickPriceList.getSelectedItem();
-		if (pickPL!=null)
+		if (fPriceList_ID.getValue()!=null)
 		{
-            Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "M_PriceList_Version_ID",pickPL.getValue().toString());
+			String pickPL = ((Integer) fPriceList_ID.getValue()).toString();
+            Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "M_PriceList_Version_ID",pickPL);
         }
-		ListItem pickWH = (ListItem)pickWarehouse.getSelectedItem();
-		if (pickWH != null)
+		if (fWarehouse_ID.getValue() != null)
         {
-            Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "M_Warehouse_ID",pickWH.getValue().toString());
+			String pickWH = ((Integer)fWarehouse_ID.getValue()).toString();
+            Env.setContext(Env.getCtx(), p_WindowNo, Env.TAB_INFO, "M_Warehouse_ID",pickWH);
         }
 		//
 		if (m_M_AttributeSetInstance_ID == -1)	//	not selected
@@ -1107,73 +1464,84 @@
 				String.valueOf(m_M_Locator_ID));
 		}
 	}	//	saveSelectionDetail
-
+	
 	/**
-	 *  Get Product Layout
+	 *  Get Table Layout
 	 *
 	 * @return array of Column_Info
 	 */
-	protected ColumnInfo[] getProductLayout()
+	protected Info_Column[] getTableLayout()
 	{
-		if (s_productLayout != null)
-			return s_productLayout;
-		//  Euro 13
-		MClient client = MClient.get(Env.getCtx());
-		if ("FRIE".equals(client.getValue()))
+
+		ArrayList<Info_Column> list = new ArrayList<Info_Column>();
+		list.add(new Info_Column(" ", "p.M_Product_ID", IDColumn.class, false));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "Discontinued").substring(0, 1), "p.Discontinued", Boolean.class));
+		//if (!isValidVObject(fProductCategory_ID) || (isValidVObject(fProductCategory_ID) && !checkAND.isSelected()))
+		//{
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "M_Product_Category_ID"), "pc.Name", String.class));
+		//}
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "Value"), "p.Value", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "Name"), "p.Name", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "UPC"), "p.UPC", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "SKU"), "p.SKU", String.class));
+		if (isValidVObject(fPriceList_ID))
 		{
-			final ColumnInfo[] frieLayout = {
-				new ColumnInfo(" ", "p.M_Product_ID", IDColumn.class),
-				new ColumnInfo(Msg.translate(Env.getCtx(), "Name"), "p.Name", String.class),
-				new ColumnInfo(Msg.translate(Env.getCtx(), "QtyAvailable"), "bomQtyAvailable(p.M_Product_ID,?,0) AS QtyAvailable", Double.class, true, true, null),
-				new ColumnInfo(Msg.translate(Env.getCtx(), "PriceList"), "bomPriceList(p.M_Product_ID, pr.M_PriceList_Version_ID) AS PriceList",  BigDecimal.class),
-				new ColumnInfo(Msg.translate(Env.getCtx(), "PriceStd"), "bomPriceStd(p.M_Product_ID, pr.M_PriceList_Version_ID) AS PriceStd", BigDecimal.class),
-				new ColumnInfo("Einzel MWSt", "pr.PriceStd * 1.16", BigDecimal.class),
-				new ColumnInfo("Einzel kompl", "(pr.PriceStd+13) * 1.16", BigDecimal.class),
-				new ColumnInfo("Satz kompl", "((pr.PriceStd+13) * 1.16) * 4", BigDecimal.class),
-				new ColumnInfo(Msg.translate(Env.getCtx(), "QtyOnHand"), "bomQtyOnHand(p.M_Product_ID,?,0) AS QtyOnHand", Double.class),
-				new ColumnInfo(Msg.translate(Env.getCtx(), "QtyReserved"), "bomQtyReserved(p.M_Product_ID,?,0) AS QtyReserved", Double.class),
-				new ColumnInfo(Msg.translate(Env.getCtx(), "QtyOrdered"), "bomQtyOrdered(p.M_Product_ID,?,0) AS QtyOrdered", Double.class),
-				new ColumnInfo(Msg.translate(Env.getCtx(), "Discontinued").substring(0, 1), "p.Discontinued", Boolean.class),
-				new ColumnInfo(Msg.translate(Env.getCtx(), "Margin"), "bomPriceStd(p.M_Product_ID, pr.M_PriceList_Version_ID)-bomPriceLimit(p.M_Product_ID, pr.M_PriceList_Version_ID) AS Margin", BigDecimal.class),
-				new ColumnInfo(Msg.translate(Env.getCtx(), "PriceLimit"), "bomPriceLimit(p.M_Product_ID, pr.M_PriceList_Version_ID) AS PriceLimit", BigDecimal.class),
-				new ColumnInfo(Msg.translate(Env.getCtx(), "IsInstanceAttribute"), "pa.IsInstanceAttribute", Boolean.class)
-			};
-			INDEX_NAME = 2;
-			INDEX_PATTRIBUTE = frieLayout.length - 1;	//	last item
-			s_productLayout = frieLayout;
-			return s_productLayout;
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "PriceList"), "bomPriceList(p.M_Product_ID, pr.M_PriceList_Version_ID) AS PriceList",  BigDecimal.class));
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "PriceStd"), "bomPriceStd(p.M_Product_ID, pr.M_PriceList_Version_ID) AS PriceStd", BigDecimal.class));
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "PriceLimit"), "bomPriceLimit(p.M_Product_ID, pr.M_PriceList_Version_ID) AS PriceLimit", BigDecimal.class));
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "Margin"), "bomPriceStd(p.M_Product_ID, pr.M_PriceList_Version_ID)-bomPriceLimit(p.M_Product_ID, pr.M_PriceList_Version_ID) AS Margin", BigDecimal.class));
 		}
-		//
-		if (s_productLayout == null)
+		if (isValidVObject(fWarehouse_ID))
 		{
-			ArrayList<ColumnInfo> list = new ArrayList<ColumnInfo>();
-			list.add(new ColumnInfo(" ", "p.M_Product_ID", IDColumn.class));
-			list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "Discontinued").substring(0, 1), "p.Discontinued", Boolean.class));
-			list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "Value"), "p.Value", String.class));
-			list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "Name"), "p.Name", String.class));
-			list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "QtyAvailable"), "bomQtyAvailable(p.M_Product_ID,?,0) AS QtyAvailable", Double.class, true, true, null));
-			list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "PriceList"), "bomPriceList(p.M_Product_ID, pr.M_PriceList_Version_ID) AS PriceList",  BigDecimal.class));
-			list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "PriceStd"), "bomPriceStd(p.M_Product_ID, pr.M_PriceList_Version_ID) AS PriceStd", BigDecimal.class));
-			list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "QtyOnHand"), "bomQtyOnHand(p.M_Product_ID,?,0) AS QtyOnHand", Double.class));
-			list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "QtyReserved"), "bomQtyReserved(p.M_Product_ID,?,0) AS QtyReserved", Double.class));
-			list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "QtyOrdered"), "bomQtyOrdered(p.M_Product_ID,?,0) AS QtyOrdered", Double.class));
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "IsStocked"), "p.isStocked", Boolean.class));
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyAvailable"), "case when p.IsBOM='N' and (p.ProductType!='I' OR p.IsStocked='N') then to_number(get_Sysconfig('QTY_TO_SHOW_FOR_SERVICES', '99999', p.ad_client_id, 0), '99999999999') else bomQtyAvailable(p.M_Product_ID,?,0) end AS QtyAvailable", Double.class, true, true, null));
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyOnHand"), "case when p.IsBOM='N' and (p.ProductType!='I' OR p.IsStocked='N') then to_number(get_Sysconfig('QTY_TO_SHOW_FOR_SERVICES', '99999', p.ad_client_id, 0), '99999999999') else bomQtyOnHand(p.M_Product_ID,?,0) end AS QtyOnHand", Double.class));
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyReserved"), "bomQtyReserved(p.M_Product_ID,?,0) AS QtyReserved", Double.class));
+			list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyOrdered"), "bomQtyOrdered(p.M_Product_ID,?,0) AS QtyOrdered", Double.class));
 			if (isUnconfirmed())
 			{
-				list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "QtyUnconfirmed"), "(SELECT SUM(c.TargetQty) FROM M_InOutLineConfirm c INNER JOIN M_InOutLine il ON (c.M_InOutLine_ID=il.M_InOutLine_ID) INNER JOIN M_InOut i ON (il.M_InOut_ID=i.M_InOut_ID) WHERE c.Processed='N' AND i.M_Warehouse_ID=? AND il.M_Product_ID=p.M_Product_ID) AS QtyUnconfirmed", Double.class));
-				list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "QtyUnconfirmedMove"), "(SELECT SUM(c.TargetQty) FROM M_MovementLineConfirm c INNER JOIN M_MovementLine ml ON (c.M_MovementLine_ID=ml.M_MovementLine_ID) INNER JOIN M_Locator l ON (ml.M_LocatorTo_ID=l.M_Locator_ID) WHERE c.Processed='N' AND l.M_Warehouse_ID=? AND ml.M_Product_ID=p.M_Product_ID) AS QtyUnconfirmedMove", Double.class));
+				list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyUnconfirmed"), "(SELECT SUM(c.TargetQty) FROM M_InOutLineConfirm c INNER JOIN M_InOutLine il ON (c.M_InOutLine_ID=il.M_InOutLine_ID) INNER JOIN M_InOut i ON (il.M_InOut_ID=i.M_InOut_ID) WHERE c.Processed='N' AND i.M_Warehouse_ID=? AND il.M_Product_ID=p.M_Product_ID) AS QtyUnconfirmed", Double.class));
+				list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyUnconfirmedMove"), "(SELECT SUM(c.TargetQty) FROM M_MovementLineConfirm c INNER JOIN M_MovementLine ml ON (c.M_MovementLine_ID=ml.M_MovementLine_ID) INNER JOIN M_Locator l ON (ml.M_LocatorTo_ID=l.M_Locator_ID) WHERE c.Processed='N' AND l.M_Warehouse_ID=? AND ml.M_Product_ID=p.M_Product_ID) AS QtyUnconfirmedMove", Double.class));
 			}
-			list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "Margin"), "bomPriceStd(p.M_Product_ID, pr.M_PriceList_Version_ID)-bomPriceLimit(p.M_Product_ID, pr.M_PriceList_Version_ID) AS Margin", BigDecimal.class));
-			list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "Vendor"), "bp.Name", String.class));
-			list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "PriceLimit"), "bomPriceLimit(p.M_Product_ID, pr.M_PriceList_Version_ID) AS PriceLimit", BigDecimal.class));
-			list.add(new ColumnInfo(Msg.translate(Env.getCtx(), "IsInstanceAttribute"), "pa.IsInstanceAttribute", Boolean.class));
-			s_productLayout = new ColumnInfo[list.size()];
-			list.toArray(s_productLayout);
-			INDEX_NAME = 3;
-			INDEX_PATTRIBUTE = s_productLayout.length - 1;	//	last item
 		}
-		return s_productLayout;
-	}   //  getProductLayout
-
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "Vendor"), "bp.Name", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "IsInstanceAttribute"), "pa.IsInstanceAttribute", Boolean.class));
+		//
+		s_Layout = new Info_Column[list.size()];
+		list.toArray(s_Layout);
+		//
+		INDEX_PATTRIBUTE = s_Layout.length - 1;	//	last item
+		//
+		return s_Layout;
+	}   //  getTableLayout
+	/**
+	 *  Get Order Clause
+	 *
+	 * @return orderClause  "
+	 */
+	protected String getOrderClause()
+	{
+		String orderClause = "";
+		if (!isValidVObject(fProductCategory_ID))
+		{
+			orderClause += ", pc.Name";
+		}
+		
+		orderClause += ", Value";
+		
+		if (isValidVObject(fWarehouse_ID))
+		{
+			orderClause += ", QtyAvailable DESC";
+		}
+		if (isValidVObject(fPriceList_ID))
+		{
+			orderClause += ", Margin DESC";
+		}
+		if (orderClause.startsWith(", "))
+			orderClause = orderClause.substring(2);
+		
+		return orderClause;
+	}
 	/**
 	 * 	System has Unforfirmed records
 	 *	@return true if unconfirmed
@@ -1191,48 +1559,107 @@
 		return no > 0;
 	}	//	isUnconfirmed
 
+	
     public void onEvent(Event e)
     {
-    	Component component = e.getTarget();
+    	// Handle specific actions if possible or pass the event to the parent class
 
-    	// Elaine 2008/12/16
-		//  don't requery if fieldValue and fieldName are empty
-		if ((e.getTarget() == pickWarehouse || e.getTarget() == pickPriceList)
-			&& (fieldValue.getText().length() == 0 && fieldName.getText().length() == 0))
+		if(!p_loadedOK)
 			return;
-		//
 
-    	if(component == m_InfoPAttributeButton)
-    	{
-    		cmd_InfoPAttribute();
-    		return;
-    	}
+		Component component = e.getTarget();
+		
+		if(component != null)
+		{
+			//  Handle product info specific fields here
+			if (component.equals(confirmPanel.getButton(ConfirmPanel.A_PATTRIBUTE)))
+			{
+				//  Find the ASI used by the product on the lead row
+				MProduct mp = MProduct.get(Env.getCtx(), m_M_Product_ID);
+				//  Set title and parameters for the PattributeInstance window
+				String title = "";
+				int wh_id = 0;
+				if (isValidVObject(fWarehouse_ID))
+				{
+					title = mp.getName() + " - " + fWarehouse_ID.getDisplay();
+					wh_id = ((Integer) (fWarehouse_ID.getValue())).intValue();
+				}
+				//  Get the business partner from the context - it may be different than the Vendor
+				int bp_id = 0;
+				String s_bp_id = Env.getContext(Env.getCtx(), p_WindowNo, p_TabNo, "C_BPartner_ID", false);
+				if (s_bp_id != null && s_bp_id.length() != 0 && (new Integer(s_bp_id).intValue() > 0))
+					bp_id = new Integer(s_bp_id).intValue();
+				//  Display the window
+				InfoPAttributeInstancePanel pai = new InfoPAttributeInstancePanel (this, title, 
+						wh_id, 0, p_table.getLeadRowKey(), bp_id);
+				
+				if (!pai.wasCancelled())
+				{
+					//  Get the results and update the fASI criteria field
+					m_M_AttributeSetInstance_ID = pai.getM_AttributeSetInstance_ID();
+					m_M_Locator_ID = pai.getM_Locator_ID();
+					if (m_M_AttributeSetInstance_ID > 0)
+						fASI_ID.setValue(m_M_AttributeSetInstance_ID);
+					else
+						fASI_ID.setValue(0); //  No instance
+				}
+				
+				//  Saving here is confusing with multi-selection.  The Product Attribute button shouldn't be enabled
+				//  if multiple records are selected.  Also, don't close the info window if the
+				//  pai window was cancelled or nothing was selected.  Assume the user was just
+				//  looking around.
+				if (p_saveResults && m_M_AttributeSetInstance_ID != -1 && !pai.wasCancelled())  //  If the results are saved, we can save now - an ASI is product specific
+				{
+					dispose(p_saveResults);
+					return;
+				}
+				return;
+			}		
+			else if (component instanceof Combobox)
+			{
+				if(e.getName().equals("onChange"))
+					{
+						//  perform field-specific changes
+						if (component.equals(fWarehouse_ID.getComponent()))
+						{
+							if (!isValidVObject(fWarehouse_ID))
+							{
+								//  Disable the stock button
+								checkOnlyStock.setSelected(false);
+								checkOnlyStock.setEnabled(false);
+							}
+							else
+								checkOnlyStock.setEnabled(true);
+						}
+					}
+				}
+			else if (component instanceof Checkbox)
+			{
+				Checkbox cb = (Checkbox) component;
+				//  ShowDetail check box
+				if (cb.getName() != null && cb.getName().equals("ShowDetail"))
+				{
+					// Refresh only the ATP tab 
+					refreshAtpTab();
+					return;
+				}
+			}
+			else if (component instanceof Tab) // a tab in the ATP panel is selected
+			{
 
-    	m_pAttributeWhere = null;
-    	// Query Product Attribure Instance
-		int row = contentPanel.getSelectedRow();
-		if (component.equals(m_PAttributeButton) && row != -1)
-		{
-			Integer productInteger = getSelectedRowKey();
-			String productName = (String)contentPanel.getValueAt(row, INDEX_NAME);
-
-			ListItem warehouse = pickWarehouse.getSelectedItem();
-			if (productInteger == null || productInteger.intValue() == 0 || warehouse == null)
+				if( detailTabBox.getSelectedIndex() == 5)
+				{	
+					checkShowDetail.setEnabled(true);
+				}
+				else
+				{
+					checkShowDetail.setEnabled(false);				
+				}
+				
+				refresh();				
 				return;
-
-			int M_Warehouse_ID = 0;
-			if(warehouse.getValue() != null)
-				M_Warehouse_ID = ((Integer)warehouse.getValue()).intValue();
-
-			String title = warehouse.getLabel() + " - " + productName;
-			InfoPAttributeInstancePanel pai = new InfoPAttributeInstancePanel(this, title,
-				M_Warehouse_ID, 0, productInteger.intValue(), m_C_BPartner_ID);
-			m_M_AttributeSetInstance_ID = pai.getM_AttributeSetInstance_ID();
-			m_M_Locator_ID = pai.getM_Locator_ID();
-			if (m_M_AttributeSetInstance_ID != -1)
-				dispose(true);
-			return;
-		}
+			}
+		} 
 		//
 		super.onEvent(e);
     }
@@ -1242,196 +1669,268 @@
 	 */
 	protected void enableButtons ()
 	{
-		m_M_AttributeSetInstance_ID = -1;
 		if (m_PAttributeButton != null)
 		{
-			int row = contentPanel.getSelectedRow();
+			if (p_table == null)
+				return;
+
+			int row = p_table.getSelectedIndex();
+			int rows = p_table.getRowCount();
+			if (p_table.getShowTotals())
+				rows = rows-1;
+			
+			if (row < 0 || row > rows)
+			{
+				m_PAttributeButton.setEnabled(false);
+				super.enableButtons();
+				return;
+			}
+
 			boolean enabled = false;
-			if (row >= 0)
+			
+			// Check the lead row - if it has no attribute instances, no button
+			try
 			{
-				Object value = contentPanel.getValueAt(row, INDEX_PATTRIBUTE);
+				Object value = p_table.getValueAt(row, INDEX_PATTRIBUTE);
 				enabled = Boolean.TRUE.equals(value);
 			}
+			catch(Exception e)
+			{
+				enabled = false;
+			}
+
+			if (enabled && p_table.isMultiSelection())
+			{
+				//  Only enable if a single row is selected.  Disable for multiple selections.
+				//  Multiple selections can be checked or just high-lighted.
+				//  If this is called from a selection event, the number of selected keys
+				//  may be different.  Check the event count.
+				//  int checkedRows = p_table.getSelectedKeys().size();
+				// int selectedRows = p_table.get;
+				int checkedRows = getNumRecordsSelected();
+				log.fine("Checked Rows: " + checkedRows);
+				if (checkedRows > 1)
+					enabled = false;
+				//else if (checkedRows == 1)  // SelectedRows could be zero so don't care
+				//{
+				//	//Check that the lead selection is checked
+				//	Object data = p_table.getValueAt(row, p_table.getKeyColumnIndex());
+				//	if (data instanceof IDColumn)
+				//	{
+				//		IDColumn record = (IDColumn)data;
+				//		if (!record.isSelected())
+				//		{
+				//			enabled = false;
+				//			log.fine("Lead selection is not checked!");
+				//		}
+				//	}   
+				//}
+			}
 			m_PAttributeButton.setEnabled(enabled);
 		}
+		super.enableButtons();
 
-		super.enableButtons();
 	}   //  enableButtons
 
     // Elaine 2008/11/26
 	/**
 	 *	Query ATP
 	 */
-	private void initAtpTab (int  m_M_Warehouse_ID)
+	private void initAtpTab ()
 	{
+	
+		//  Table
+		m_tableAtp = ListboxFactory.newDataTable();
+		m_tableAtp.setMultiSelection(false);
+		//m_tableAtp.setRowSelectionAllowed(true);
+		//m_tableAtp.addMouseListener(this);
+		//m_tableAtp.setShowTotals(false);
+		
 		//	Header
-		Vector<String> columnNames = new Vector<String>();
-		columnNames.add(Msg.translate(Env.getCtx(), "Date"));
-		columnNames.add(Msg.translate(Env.getCtx(), "QtyOnHand"));
-		columnNames.add(Msg.translate(Env.getCtx(), "C_BPartner_ID"));
-		columnNames.add(Msg.translate(Env.getCtx(), "QtyOrdered"));
-		columnNames.add(Msg.translate(Env.getCtx(), "QtyReserved"));
-		columnNames.add(Msg.translate(Env.getCtx(), "M_Locator_ID"));
-		columnNames.add(Msg.translate(Env.getCtx(), "M_AttributeSetInstance_ID"));
-		columnNames.add(Msg.translate(Env.getCtx(), "DocumentNo"));
-		columnNames.add(Msg.translate(Env.getCtx(), "M_Warehouse_ID"));
+		ArrayList<Info_Column> list = new ArrayList<Info_Column>();
+		list.add(new Info_Column(" ", "M_Product_ID", IDColumn.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "M_Warehouse_ID"), "Warehouse", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "M_Locator_ID"), "Locator", String.class));
+		list.add(new Info_Column(Msg.getMsg(Env.getCtx(), "Date", true), "Date", Timestamp.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyAvailable"), "QtyAvailable", Double.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyOnHand"), "QtyOnHand", Double.class));
+		list.add(new Info_Column(Msg.getMsg(Env.getCtx(), "ExpectedChange", true), "DeltaQty", Double.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "C_BPartner_ID"), "BP_Name", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyOrdered"), "QtyOrdered", Double.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "QtyReserved"), "QtyReserved", Double.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "M_AttributeSetInstance_ID"), "PASI", String.class));
+		list.add(new Info_Column(Msg.translate(Env.getCtx(), "DocumentNo"), "DocumentNo", String.class));
 
-		//	Fill Storage Data
-		boolean showDetail = CLogMgt.isLevelFine();
-		String sql = "SELECT s.QtyOnHand, s.QtyReserved, s.QtyOrdered,"
-			+ " productAttribute(s.M_AttributeSetInstance_ID), s.M_AttributeSetInstance_ID,";
-		if (!showDetail)
-			sql = "SELECT SUM(s.QtyOnHand), SUM(s.QtyReserved), SUM(s.QtyOrdered),"
-				+ " productAttribute(s.M_AttributeSetInstance_ID), 0,";
-		sql += " w.Name, l.Value "
-			+ "FROM M_Storage s"
-			+ " INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID)"
-			+ " INNER JOIN M_Warehouse w ON (l.M_Warehouse_ID=w.M_Warehouse_ID) "
-			+ "WHERE M_Product_ID=?";
-		if (m_M_Warehouse_ID != 0)
-			sql += " AND l.M_Warehouse_ID=?";
-		if (m_M_AttributeSetInstance_ID > 0)
-			sql += " AND s.M_AttributeSetInstance_ID=?";
-		sql += " AND (s.QtyOnHand<>0 OR s.QtyReserved<>0 OR s.QtyOrdered<>0)";
-		if (!showDetail)
-			sql += " GROUP BY productAttribute(s.M_AttributeSetInstance_ID), w.Name, l.Value";
-		sql += " ORDER BY l.Value";
+		m_layoutATP = new Info_Column[list.size()];
+		list.toArray(m_layoutATP);
 
+	}	//	initAtpTab	
+	
+	/**
+	 *	Refresh ATP
+	 */
+	private void refreshAtpTab ()
+	{
+
+		boolean showDetail = checkShowDetail.isSelected();
+		
 		Vector<Vector<Object>> data = new Vector<Vector<Object>>();
-		double qty = 0;
-		PreparedStatement pstmt = null;
-		ResultSet rs = null;
-		try
+
+		int M_Warehouse_ID = 0;
+
+		// If no warehouse row is selected in the warehouse tab, use the first warehouse
+		// row to prevent array index out of bounds. BF 3051361
+		if (m_ATP_M_Warehouse_ID > 0)
 		{
-			pstmt = DB.prepareStatement(sql, null);
-			pstmt.setInt(1, m_M_Product_ID);
-			if (m_M_Warehouse_ID != 0)
-				pstmt.setInt(2, m_M_Warehouse_ID);
+        		M_Warehouse_ID = m_ATP_M_Warehouse_ID;
+		} 
+		else
+			M_Warehouse_ID = m_M_Warehouse_ID;
+
+		if (M_Warehouse_ID == 0)
+		{
+			// Do nothing and pass blank data to the table
+		}
+		else  // Update the table
+		{
+			//	Create the SELECT ..UNION. clause
+			//  This is done in-line rather than using prepareTable() so we can add a running sum to the data.
+			String sql;
+			if (!showDetail)
+				sql = "(SELECT s.M_Product_ID, w.Name as warehouse, l.value as locator, 0 as ID, now() as Date,"
+					+ " sum(s.QtyOnHand) as AvailQty, null as DeltaQty, null as QtyOrdered, null as QtyReserved,"
+					+ " s.PASI," 
+					+ " null as ASI,"
+					+ " null as BP_Name, null as DocumentNo, 10 as SeqNo";
+			else
+				sql = "(SELECT s.M_Product_ID, w.Name as warehouse, l.value as locator, s.M_AttributeSetInstance_ID as ID, now() as Date,"
+					+ " s.QtyOnHand as AvailQty, null as DeltaQty, null as QtyOrdered, null as QtyReserved,"
+					+ " CASE WHEN PASI  = '' THEN '{' || COALESCE(s.M_AttributeSetInstance_ID,0) || '}' ELSE PASI END as PASI," 
+					+ " COALESCE(M_AttributeSetInstance_ID,0) as ASI," 
+					+ " null as BP_Name, null as DocumentNo,  10 as SeqNo";
+			sql += " FROM (SELECT M_Product_ID, M_Locator_ID, QtyOnHand, QtyReserved, QtyOrdered, COALESCE(productAttribute(M_AttributeSetInstance_ID)::varchar, '') as PASI, COALESCE(M_AttributeSetInstance_ID,0) as M_AttributeSetInstance_ID FROM M_Storage) s "
+				+ " INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID)"
+				+ " INNER JOIN M_Warehouse w ON (l.M_Warehouse_ID=w.M_Warehouse_ID)"
+				+ " WHERE s.M_Product_ID=?";
+			if (M_Warehouse_ID != 0)
+				sql += " AND l.M_Warehouse_ID=?";
 			if (m_M_AttributeSetInstance_ID > 0)
-				pstmt.setInt(3, m_M_AttributeSetInstance_ID);
-			rs = pstmt.executeQuery();
-			while (rs.next())
+				sql += " AND s.M_AttributeSetInstance_ID=?";
+			if (!showDetail)
 			{
-				Vector<Object> line = new Vector<Object>(9);
-				line.add(null);							//  Date
-				double qtyOnHand = rs.getDouble(1);
-				qty += qtyOnHand;
-				line.add(new Double(qtyOnHand));  		//  Qty
-				line.add(null);							//  BPartner
-				line.add(new Double(rs.getDouble(3)));  //  QtyOrdered
-				line.add(new Double(rs.getDouble(2)));  //  QtyReserved
-				line.add(rs.getString(7));      		//  Locator
-				String asi = rs.getString(4);
-				if (showDetail && (asi == null || asi.length() == 0))
-					asi = "{" + rs.getInt(5) + "}";
-				line.add(asi);							//  ASI
-				line.add(null);							//  DocumentNo
-				line.add(rs.getString(6));  			//	Warehouse
-				data.add(line);
+				sql += " AND (s.QtyOnHand<>0)";
+				sql += " GROUP BY s.M_Product_ID, w.Name, l.value, s.M_Locator_ID, PASI ";
+			}
+			else
+			    sql += " AND (s.QtyOnHand<>0 OR s.QtyReserved<>0 OR s.QtyOrdered<>0) ";
+
+			
+			sql += "UNION ALL ";
+	
+			//	Orders
+			sql += "SELECT ol.M_Product_ID, w.Name as warehouse, null as locator, ol.M_AttributeSetInstance_ID as ID, o.DatePromised as date,"
+				+ " null as AvailQty,"
+				+ " CASE WHEN dt.DocBaseType = 'POO' THEN ol.QtyOrdered ELSE -ol.QtyReserved END as DeltaQty,"
+				+ " CASE WHEN dt.DocBaseType = 'POO' THEN ol.QtyOrdered ELSE null END as QtyOrdered,"
+				+ " CASE WHEN dt.DocBaseType = 'POO' THEN null ELSE ol.QtyReserved END as QtyReserved,"
+				+ " productAttribute(ol.M_AttributeSetInstance_ID) as PASI," 
+				+ " ol.M_AttributeSetInstance_ID as ASI,"
+				+ " bp.Name as BP_Name, dt.PrintName || ' ' || o.DocumentNo As DocumentNo, 20 as SeqNo "
+				+ "FROM C_Order o"
+				+ " INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID)"
+				+ " INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID)"
+				+ " INNER JOIN M_Warehouse w ON (ol.M_Warehouse_ID=w.M_Warehouse_ID)"
+				+ " INNER JOIN C_BPartner bp  ON (o.C_BPartner_ID=bp.C_BPartner_ID) "
+				+ "WHERE ol.QtyReserved<>0"
+				+ " AND ol.M_Product_ID=?";
+			if (M_Warehouse_ID != 0)
+				sql += " AND ol.M_Warehouse_ID=?";
+			if (m_M_AttributeSetInstance_ID > 0)
+				sql += " AND ol.M_AttributeSetInstance_ID=?";
+			sql += " ORDER BY M_Product_ID, SeqNo, ID, date, locator)";
+	
+			double qty = 0;
+			PreparedStatement pstmt = null;
+			ResultSet rs = null;
+			try
+			{
+				int index = 1;
+				pstmt = DB.prepareStatement(sql, null);
+				pstmt.setInt(index++, m_M_Product_ID);
+				//  Two queries in union - parameters repeat
+				if (M_Warehouse_ID != 0)
+					pstmt.setInt(index++, M_Warehouse_ID);
+				if (m_M_AttributeSetInstance_ID > 0)
+					pstmt.setInt(index++, m_M_AttributeSetInstance_ID);
+				pstmt.setInt(index++, m_M_Product_ID);
+				if (M_Warehouse_ID != 0)
+					pstmt.setInt(index++, M_Warehouse_ID);
+				if (m_M_AttributeSetInstance_ID > 0)
+					pstmt.setInt(index++, m_M_AttributeSetInstance_ID);
+				rs = pstmt.executeQuery();
+				while (rs.next())
+				{
+					//  The order of data matches the layout, not the query
+					//  M_Product_ID, warehouse, locator, ID, Date, AvailQty, DelataQty, (1..7) 
+					//  QtyOrdered, QtyReserved, (8..9)
+					//  PASI, ASI, (10..11)
+					//  BP_Name, DocumentNo,  SeqNo (12..14)
+					IDColumn mpid = new IDColumn(rs.getInt(1));
+					Vector<Object> line = new Vector<Object>(9);
+					line.add(mpid);							//  M_Product_ID
+					line.add(rs.getString(2));						//  warehouse
+					line.add(rs.getString(3));      				//  Locator
+					line.add(rs.getTimestamp(5));					//  Date
+					double deltaQty = rs.getDouble(7);
+					qty += +rs.getDouble(6) + deltaQty;
+					line.add(new Double(qty));  					//  Qty Available
+					line.add(new Double(rs.getDouble(6)));			//  Qty on hand (this line)
+					line.add(new Double(rs.getDouble(7)));			//  Delta Qty
+					line.add(rs.getString(12));						//  BPartner
+					line.add(new Double(rs.getDouble(8)));  		//  QtyOrdered
+					line.add(new Double(rs.getDouble(9)));  		//  QtyReserved
+					line.add(rs.getString(10));						//  ASI
+					line.add(rs.getString(13));						//  DocumentNo
+					data.add(line);
+				}
+			}
+			catch (SQLException e)
+			{
+				log.log(Level.SEVERE, sql, e);
+			}
+			finally {
+				DB.close(rs, pstmt);
+				rs = null; pstmt = null;
 			}
 		}
-		catch (SQLException e)
-		{
-			log.log(Level.SEVERE, sql, e);
-		}
-		finally {
-			DB.close(rs, pstmt);
-			rs = null; pstmt = null;
-		}
+		
+		//  Update the table
+		
+		//	Header
+		for (int i = 0; i < m_layoutATP.length; i++)
+			m_tableAtp.addColumn(m_layoutATP[i].getColHeader());
 
-		//	Orders
-		sql = "SELECT o.DatePromised, ol.QtyReserved,"
-			+ " productAttribute(ol.M_AttributeSetInstance_ID), ol.M_AttributeSetInstance_ID,"
-			+ " dt.DocBaseType, bp.Name,"
-			+ " dt.PrintName || ' ' || o.DocumentNo As DocumentNo, w.Name "
-			+ "FROM C_Order o"
-			+ " INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID)"
-			+ " INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID)"
-			+ " INNER JOIN M_Warehouse w ON (ol.M_Warehouse_ID=w.M_Warehouse_ID)"
-			+ " INNER JOIN C_BPartner bp  ON (o.C_BPartner_ID=bp.C_BPartner_ID) "
-			+ "WHERE ol.QtyReserved<>0"
-			+ " AND ol.M_Product_ID=?";
-		if (m_M_Warehouse_ID != 0)
-			sql += " AND ol.M_Warehouse_ID=?";
-		if (m_M_AttributeSetInstance_ID > 0)
-			sql += " AND ol.M_AttributeSetInstance_ID=?";
-		sql += " ORDER BY o.DatePromised";
-		try
-		{
-			pstmt = DB.prepareStatement(sql, null);
-			pstmt.setInt(1, m_M_Product_ID);
-			if (m_M_Warehouse_ID != 0)
-				pstmt.setInt(2, m_M_Warehouse_ID);
-			if (m_M_AttributeSetInstance_ID > 0)
-				pstmt.setInt(3, m_M_AttributeSetInstance_ID);
-			rs = pstmt.executeQuery();
-			while (rs.next())
-			{
-				Vector<Object> line = new Vector<Object>(9);
-				line.add(rs.getTimestamp(1));			//  Date
-				double oq = rs.getDouble(2);
-				String DocBaseType = rs.getString(5);
-				Double qtyReserved = null;
-				Double qtyOrdered = null;
-				if (MDocType.DOCBASETYPE_PurchaseOrder.equals(DocBaseType))
-				{
-					qtyOrdered = new Double(oq);
-					qty += oq;
-				}
-				else
-				{
-					qtyReserved = new Double(oq);
-					qty -= oq;
-				}
-				line.add(new Double(qty)); 		 		//  Qty
-				line.add(rs.getString(6));				//  BPartner
-				line.add(qtyOrdered);					//  QtyOrdered
-				line.add(qtyReserved);					//  QtyReserved
-				line.add(null);				      		//  Locator
-				String asi = rs.getString(3);
-				if (showDetail && (asi == null || asi.length() == 0))
-					asi = "{" + rs.getInt(4) + "}";
-				line.add(asi);							//  ASI
-				line.add(rs.getString(7));				//  DocumentNo
-				line.add(rs.getString(8));  			//	Warehouse
-				data.add(line);
-			}
-		}
-		catch (SQLException e)
-		{
-			log.log(Level.SEVERE, sql, e);
-		}
-		finally {
-			DB.close(rs, pstmt);
-			rs = null; pstmt = null;
-		}
+		m_modelAtp = new ListModelTable(data);
 
-		//  Table
-		ListModelTable model = new ListModelTable(data);
-		m_tableAtp.setData(model, columnNames);
-		//
-		m_tableAtp.setColumnClass(0, Timestamp.class, true);   //  Date
-		m_tableAtp.setColumnClass(1, Double.class, true);      //  Quantity
-		m_tableAtp.setColumnClass(2, String.class, true);      //  Partner
-		m_tableAtp.setColumnClass(3, Double.class, true);      //  Quantity
-		m_tableAtp.setColumnClass(4, Double.class, true);      //  Quantity
-		m_tableAtp.setColumnClass(5, String.class, true);   	  //  Locator
-		m_tableAtp.setColumnClass(6, String.class, true);   	  //  ASI
-		m_tableAtp.setColumnClass(7, String.class, true);      //  DocNo
-		m_tableAtp.setColumnClass(8, String.class, true);   	  //  Warehouse
-		//
-		m_tableAtp.autoSize();
-	}	//	initAtpTab
-	//
+		//  Avoid an exception
+		//SwingUtilities.invokeLater(new Runnable(){public void run(){
+			m_tableAtp.setModel(m_modelAtp);
+			//  set editors (two steps)
+			for (int i = 0; i < m_layoutATP.length; i++)
+				m_tableAtp.setColumnClass(i, m_layoutATP[i].getColClass(), m_layoutATP[i].isReadOnly(), m_layoutATP[i].getColHeader());
+			m_tableAtp.autoSize();
+			m_tableAtp.repaint();
+		//}});
 
-    // Elaine 2008/11/21
+
+	}	//	refreshAtpTab
+	// Elaine 2008/11/21
     public int getM_Product_Category_ID()
     {
 		int M_Product_Category_ID = 0;
 
-		ListItem pickPC = (ListItem)pickProductCategory.getSelectedItem();
-		if (pickPC!=null)
-			M_Product_Category_ID = Integer.parseInt(pickPC.getValue().toString());
+		if (fProductCategory_ID.getValue()!=null)
+			M_Product_Category_ID = (Integer) fProductCategory_ID.getValue();
 
 		return M_Product_Category_ID;
 	}
@@ -1440,12 +1939,99 @@
     public int getM_AttributeSet_ID()
     {
 		int M_AttributeSet_ID = 0;
-
-		ListItem itemAS = (ListItem)pickAS.getSelectedItem();
-		if (itemAS!=null)
-			M_AttributeSet_ID = Integer.parseInt(itemAS.getValue().toString());
-
+		if (fAS_ID.getValue() != null && ((Integer) fAS_ID.getValue()).intValue() != 0)
+			M_AttributeSet_ID = ((Integer) fAS_ID.getValue()).intValue();
+		
 		return M_AttributeSet_ID;
 	}
-    
+	/**
+	 * Does the parameter panel have outstanding changes that have not been
+	 * used in a query?
+	 * @return true if there are outstanding changes.
+	 */
+	protected boolean hasOutstandingChanges()
+	{
+		//  All the tracked fields
+		return(
+			fieldValue.hasChanged()	||
+			fieldName.hasChanged() ||
+			fieldUPC.hasChanged() ||
+			fieldSKU.hasChanged() ||
+			fPriceList_ID.hasChanged() ||
+			fWarehouse_ID.hasChanged() ||
+			fVendor_ID.hasChanged() ||
+			fProductCategory_ID.hasChanged() ||
+			fAS_ID.hasChanged() ||
+			fASI_ID.hasChanged() ||
+			checkOnlyStock.hasChanged() ||
+			checkAND.hasChanged()
+			);
+			
+	}
+	/**
+	 * Record outstanding changes by copying the current
+	 * value to the oldValue on all fields
+	 */
+	protected void setFieldOldValues()
+	{
+		fieldValue.set_oldValue();
+		fieldName.set_oldValue();
+		fieldUPC.set_oldValue();
+		fieldSKU.set_oldValue();
+		fPriceList_ID.set_oldValue();
+		fWarehouse_ID.set_oldValue();
+		fVendor_ID.set_oldValue();
+		fProductCategory_ID.set_oldValue();
+		fAS_ID.set_oldValue();
+		fASI_ID.set_oldValue();
+		checkOnlyStock.set_oldValue();
+		checkAND.set_oldValue();
+		return;
+	}
+	
+    /**
+	 *  Clear all fields and set default values in check boxes
+	 */
+	private void clearParameters()
+	{
+		//  Clear fields and set defaults
+		fieldValue.setText("");
+		fieldName.setText("");
+		fieldUPC.setText("");
+		fieldSKU.setText("");
+    	fWarehouse_ID.setValue(null);
+    	fPriceList_ID.setValue(null);
+    	fProductCategory_ID.setValue(null);
+    	fVendor_ID.setValue(null);
+    	fAS_ID.setValue(null);
+    	fASI_ID.setValue(null);
+    	checkOnlyStock.setSelected(false);  	//  Show everything
+		checkAND.setSelected(true); 		//  Use AND
+	}
+
+	/**
+	 * A record was selected - take action to sync subordinate tables if any
+	 */
+	protected void recordSelected(int key)
+	{
+		//  Found and selected the same record or selected the first record
+    	if (m_M_Product_ID != key)
+    	{
+    		refresh();
+    	}
+    	p_centerSouth.setOpen(p_table.getSelectedCount()>0);
+		return;
+	}
+	/**
+	 * No record was selected - take action to sync subordinate tables if any
+	 */
+	protected void noRecordSelected()
+	{
+		//  Nothing was selected, or the query is empty
+		//  - close the panel
+		m_M_Product_ID = 0;
+		p_centerLayout.getSouth().setOpen(false);
+		return;
+	}
+
 }	//	InfoProduct
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/panel/UserPanel.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/panel/UserPanel.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/panel/UserPanel.java	Mon Feb 10 21:08:53 2014 -0500
@@ -20,10 +20,12 @@
 import java.util.Properties;
 
 import org.adempiere.webui.LayoutUtils;
+import org.adempiere.webui.apps.AEnv;
 import org.adempiere.webui.component.Label;
 import org.adempiere.webui.component.Messagebox;
 import org.adempiere.webui.component.ToolBarButton;
 import org.adempiere.webui.session.SessionManager;
+import org.adempiere.webui.window.WContext;
 import org.adempiere.webui.window.WPreference;
 import org.compiere.model.MClient;
 import org.compiere.model.MOrg;
@@ -43,6 +45,9 @@
  * @author  <a href="mailto:agramdass@gmail.com">Ashley G Ramdass</a>
  * @date    Feb 25, 2007
  * @version $Revision: 0.10 $
+ * 
+ * @author Michael Mckay
+ * Add context viewer.  Configurable.
  */
 public class UserPanel extends Vbox  implements EventListener
 {
@@ -54,9 +59,11 @@
     private ToolBarButton logout = new ToolBarButton();
     private ToolBarButton role = new ToolBarButton();
     private ToolBarButton preference = new ToolBarButton();
+    private ToolBarButton context = new ToolBarButton();
 
     private Label lblUserNameValue = new Label();
 	private WPreference preferencePopup;
+	private WContext contextPopup;
 
     public UserPanel()
     {
@@ -79,6 +86,13 @@
     	this.appendChild(lblUserNameValue);
 
     	Hbox hbox = new Hbox();
+    	
+    	// TODO - make configurable
+    	context.setLabel(Msg.getMsg(Env.getCtx(), "Context"));
+    	context.addEventListener(Events.ON_CLICK, this);
+    	context.setStyle("text-align:right");
+    	LayoutUtils.addSclass("desktop-header-font", context);
+    	context.setParent(hbox);    	
 
     	preference.setLabel(Msg.getMsg(Env.getCtx(), "Preference"));
     	preference.addEventListener(Events.ON_CLICK, this);
@@ -165,6 +179,15 @@
 			preferencePopup.setPage(this.getPage());
 			preferencePopup.open(preference);
 		}
+		else if (context == event.getTarget())
+		{
+			if (contextPopup != null)
+			{
+				contextPopup.detach();
+			}
+			contextPopup = new WContext();
+			AEnv.showWindow(contextPopup);
+		}
 
 	}
 }
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/window/FindWindow.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/window/FindWindow.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/window/FindWindow.java	Mon Feb 10 21:08:53 2014 -0500
@@ -13,6 +13,14 @@
  * For the text or an alternative of this public license, you may reach us    *
  * Posterita Ltd., 3, Draper Avenue, Quatre Bornes, Mauritius                 *
  * or via info@posterita.org or http://www.posterita.org/                     *
+ *                                                                            *
+ * @author Posterita                                                          *
+ *                                                                            *
+ * @Author Michael McKay (mjmckay)                                            *
+ *		<li>BF3431195 Advanced Lookup not working in ZK                       *
+ *      See https://sourceforge.net/tracker/                                  *
+ *      ?func=detail&aid=3431195&group_id=176962&atid=955896                  *
+ *                                                                            *
  *****************************************************************************/
 
 package org.adempiere.webui.window;
@@ -95,6 +103,11 @@
  *
  *  @author     Sendy Yagambrum
  *  @date       June 27, 2007
+ *
+ *  @Author Michael McKay (mjmckay)
+ *  @date	December 21, 2011                                            
+ *		<li>BF3431195 Advanced Lookup not working in ZK                       
+ *      See https://sourceforge.net/tracker/?func=detail&aid=3431195&group_id=176962&atid=955896                  
  */
 public class FindWindow extends Window implements EventListener,ValueChangeListener
 {
@@ -168,6 +181,7 @@
 	private Row pnlName;
 	private boolean m_createNew = false;
 
+	/** Indexes for fields in the user query - compatible with but not the same as Find.java
 	/** Index ColumnName = 0		*/
 	public static final int		INDEX_COLUMNNAME = 0;
 	/** Index Operator = 1			*/
@@ -176,7 +190,17 @@
 	public static final int		INDEX_VALUE = 2;
 	/** Index Value2 = 3			*/
 	public static final int		INDEX_VALUE2 = 3;
+	/** Index AndOr = 4		*/
+	public static final int		INDEX_ANDOR = 4;
+	/** Index LeftBracket = 5		*/
+	public static final int		INDEX_LEFTBRACKET = 5;
+	/** Index RightBracket = 6		*/
+	public static final int		INDEX_RIGHTBRACKET = 6;
 
+	/** Search messages using translation */
+	private String				m_sLast;
+	private String				m_sNew;
+	
 	private static final String FIELD_SEPARATOR = "<^>";
 	private static final String SEGMENT_SEPARATOR = "<~>";
 
@@ -200,6 +224,8 @@
         m_tableName = tableName;
         m_whereExtended = whereExtended;
         m_findFields = findFields;
+		m_sLast = "** ".concat(Msg.getMsg(Env.getCtx(), "Last Query")).concat(" **");
+		m_sNew = "** ".concat(Msg.getMsg(Env.getCtx(), "New Query")).concat(" **");
         m_AD_Tab_ID = adTabId;
         //
         m_query = new MQuery (m_tableName);
@@ -368,14 +394,6 @@
         fQueryName.setTooltiptext(Msg.getMsg(Env.getCtx(),"QueryName"));
 		fQueryName.setReadonly(false);
 
-		//user query
-		userQueries = MUserQuery.get(Env.getCtx(), m_AD_Tab_ID);
-		for (int i = 0; i < userQueries.length; i++)
-			fQueryName.appendItem(userQueries[i].getName());
-		fQueryName.setValue("");
-
-		fQueryName.addEventListener(Events.ON_SELECT, this);
-
         Button btnOk = new Button();
         btnOk.setName("btnOkAdv");
         btnOk.setImage("/images/Ok24.png");
@@ -400,6 +418,8 @@
         toolBar.appendChild(btnSave);
         toolBar.setWidth("100%");
         fQueryName.setStyle("margin-left: 3px; margin-right: 3px; position: relative; top: 5px;");
+        fQueryName.addEventListener(Events.ON_SELECT, this);
+        
 
         btnSave.setDisabled(m_AD_Tab_ID <= 0);
 
@@ -411,6 +431,14 @@
         ListHead listhead = new ListHead();
         listhead.setSizable(true);
 
+        ListHeader lstHAndOr = new ListHeader();
+        lstHAndOr.setLabel(Msg.getMsg(Env.getCtx(), "And/Or"));
+        lstHAndOr.setWidth("40px");
+
+        ListHeader lstHLeftBracket = new ListHeader();
+        lstHLeftBracket.setLabel("(");
+        lstHLeftBracket.setWidth("20px");
+
         ListHeader lstHColumn = new ListHeader();
         lstHColumn.setLabel(Msg.translate(Env.getCtx(), "AD_Column_ID"));
         lstHColumn.setWidth("100px");
@@ -420,16 +448,23 @@
 
         ListHeader lstHQueryValue = new ListHeader();
         lstHQueryValue.setLabel(Msg.getMsg(Env.getCtx(), "QueryValue"));
-        lstHQueryValue.setWidth("210px");
+        lstHQueryValue.setWidth("170px");
 
         ListHeader lstHQueryTo = new ListHeader();
         lstHQueryTo.setLabel(Msg.getMsg(Env.getCtx(), "QueryValue2"));
-        lstHQueryTo.setWidth("210px");
+        lstHQueryTo.setWidth("170px");
 
+        ListHeader lstHRightBracket = new ListHeader();
+        lstHRightBracket.setLabel(")");
+        lstHRightBracket.setWidth("20px");
+
+        listhead.appendChild(lstHAndOr);
+        listhead.appendChild(lstHLeftBracket);
         listhead.appendChild(lstHColumn);
         listhead.appendChild(lstHOperator);
         listhead.appendChild(lstHQueryValue);
         listhead.appendChild(lstHQueryTo);
+        listhead.appendChild(lstHRightBracket);
         advancedPanel.appendChild(listhead);
         advancedPanel.setVflex(true);
 
@@ -492,7 +527,6 @@
         for (int i = 0; i < m_findFields.length; i++)
         {
             GridField mField = m_findFields[i];
-            String columnName = mField.getColumnName();
 
 			// Make Yes-No searchable as list
 			if (mField.getVO().displayType == DisplayType.YesNo)
@@ -584,7 +618,8 @@
     private void initFindAdvanced()
     {
         log.config("");
-        createFields();
+		//user query
+		refreshUserQueries(); //Initializes and sets fQueryName		
 
     }   //  initFindAdvanced
 
@@ -594,6 +629,17 @@
     **/
     private void createFields()
     {
+        List<?> rowList = advancedPanel.getChildren();
+        int row = rowList.size()-1;
+    	createFields(null,row);
+    }
+    
+    /**
+     * create respective fields in the advanced window tab
+     *
+    **/
+    private void createFields(String[] fields, int row)
+    {
         ListItem listItem = new ListItem();
         listItem.setWidth("100%");
 
@@ -610,9 +656,71 @@
         listOperator.setMold("select");
         listOperator.setRows(0);
         listOperator.addEventListener(Events.ON_SELECT,this);
+        
+        Listbox listAndOr = new Listbox();
+        listAndOr.setId("listAndOr"+listItem.getId());
+        listAndOr.setName("listAndOr");
+        listAndOr.setMold("select");
+        listAndOr.setRows(0);
+        listAndOr.addEventListener(Events.ON_SELECT,this);
 
-        setValues(listColumn, listOperator);
+        Listbox listLeftBracket = new Listbox();
+        listLeftBracket.setId("listLeftBracket"+listItem.getId());
+        listLeftBracket.setName("listLeftBracket");
+        listLeftBracket.setMold("select");
+        listLeftBracket.setRows(0);
+        listLeftBracket.addEventListener(Events.ON_SELECT,this);
 
+        Listbox listRightBracket = new Listbox();
+        listRightBracket.setId("listRightBracket"+listItem.getId());
+        listRightBracket.setName("listRightBracket");
+        listRightBracket.setMold("select");
+        listRightBracket.setRows(0);
+        listRightBracket.addEventListener(Events.ON_SELECT,this);
+
+        setValues(listColumn, listOperator, fields);
+
+        // And Or
+    	ValueNamePair[]	andOr = new ValueNamePair[] {
+    		new ValueNamePair ("",			""),	
+    		new ValueNamePair ("AND",		Msg.getMsg(Env.getCtx(),"AND")),
+    		new ValueNamePair ("OR",		Msg.getMsg(Env.getCtx(),"OR"))	
+    	};
+        
+    	for (ValueNamePair item: andOr)
+            listAndOr.appendItem(item.getName(), item.getValue());
+    	if (row<=0){ // don't show item on the first row.
+        	listAndOr.setSelectedIndex(0);
+    		listAndOr.setVisible(false);
+    	} else {
+    		listAndOr.setSelectedIndex(1); //And - default
+    		listAndOr.setVisible(true);
+    	}
+
+        // Left Bracket
+    	ValueNamePair[]	leftBracket = new ValueNamePair[] {
+    		new ValueNamePair ("",			""),	
+    		new ValueNamePair ("(",			"("),
+    		new ValueNamePair ("((",		"(("),	
+    		new ValueNamePair ("(((",		"(((")	
+    	};
+        
+    	for (ValueNamePair item: leftBracket)
+            listLeftBracket.appendItem(item.getName(), item.getValue());
+    	listLeftBracket.setSelectedIndex(0);
+        
+        // Right Bracket
+    	ValueNamePair[]	rightBracket = new ValueNamePair[] {
+    		new ValueNamePair ("",			""),	
+    		new ValueNamePair (")",			")"),
+    		new ValueNamePair ("))",		"))"),	
+    		new ValueNamePair (")))",		")))")	
+    	};
+        
+    	for (ValueNamePair item: rightBracket)
+            listRightBracket.appendItem(item.getName(), item.getValue());
+    	listRightBracket.setSelectedIndex(0);
+        
         ListCell cellColumn = new ListCell();
         cellColumn.appendChild(listColumn);
         cellColumn.setId("cellColumn"+listItem.getId());
@@ -627,24 +735,92 @@
         ListCell cellQueryTo = new ListCell();
         cellQueryTo.setId("cellQueryTo"+listItem.getId());
 
+        ListCell cellAndOr = new ListCell();
+        cellAndOr.appendChild(listAndOr);
+        cellAndOr.setId("cellAndOr"+listItem.getId());
+
+        ListCell cellLeftBracket = new ListCell();
+        cellLeftBracket.appendChild(listLeftBracket);
+        cellLeftBracket.setId("cellLeftBracket"+listItem.getId());
+
+        ListCell cellRightBracket = new ListCell();
+        cellRightBracket.appendChild(listRightBracket);
+        cellRightBracket.setId("cellRightBracket"+listItem.getId());
+
+        listItem.appendChild(cellAndOr);
+        listItem.appendChild(cellLeftBracket);
         listItem.appendChild(cellColumn);
         listItem.appendChild(cellOperator);
         listItem.appendChild(cellQueryFrom);
         listItem.appendChild(cellQueryTo);
+        listItem.appendChild(cellRightBracket);
 
         advancedPanel.appendChild(listItem);
         advancedPanel.setSelectedItem(listItem);
+
+        if (fields != null){
+        	// QueryFrom
+	        String columnName = listColumn.getSelectedItem().getValue().toString();
+	        if (columnName == null || columnName == "")
+	        	return;
+	    	String value = fields.length > INDEX_VALUE ? fields[INDEX_VALUE] : "";
+	    	if(value.length() > 0)
+	    	{
+	    		cellQueryFrom.setAttribute("value", value); // Elaine 2009/03/16 - set attribute value
+		        cellQueryFrom.appendChild(parseString(getTargetMField(columnName), value, listItem, false));
+	    	}
+	    	// QueryTo
+	    	String value2 = fields.length > INDEX_VALUE2 ? fields[INDEX_VALUE2] : "";
+	    	if(value2.length() > 0)
+	    	{
+	    		cellQueryTo.setAttribute("value", value); // Elaine 2009/03/16 - set attribute value
+	    		cellQueryTo.appendChild(parseString(getTargetMField(columnName), value2, listItem, true));
+	    	}
+	    	
+	    	// AndOr
+	    	String sandOr = fields.length > INDEX_ANDOR ? fields[INDEX_ANDOR] : "";
+	    	if(sandOr.length() > 0)
+	    	{
+	        	for (int i=0; i< listAndOr.getItems().size(); i++) {
+	        		if (listAndOr.getItemAtIndex(i).getValue().equals(sandOr)){
+	                	listAndOr.setSelectedIndex(i);
+	                	break;
+	        		}
+	        	}
+	    	}
+
+	    	// Left Bracket
+	    	String sLeftBracket = fields.length > INDEX_LEFTBRACKET ? fields[INDEX_LEFTBRACKET] : "";
+	    	if(sLeftBracket.length() > 0)
+	    	{
+	        	for (int i=0; i < listLeftBracket.getItems().size(); i++) {
+	        		if (listLeftBracket.getItemAtIndex(i).getValue().equals(sLeftBracket)){
+	        			listLeftBracket.setSelectedIndex(i);
+	                	break;
+	        		}
+	        	}
+	    	}
+
+	    	// Right Bracket
+	    	String sRightBracket = fields.length > INDEX_RIGHTBRACKET ? fields[INDEX_RIGHTBRACKET] : "";
+	    	if(sRightBracket.length() > 0)
+	    	{
+	        	for (int i=0; i < listRightBracket.getItems().size(); i++) {
+	        		if (listRightBracket.getItemAtIndex(i).getValue().equals(sRightBracket)){
+	        			listRightBracket.setSelectedIndex(i);
+	                	break;
+	        		}
+	        	}
+	    	}
+
+        }
+        
    }    // createFields
     /**
      * sets the list of values of column and operator listboxes
      * @param listColumn column
      * @param listOperator operator
     **/
-    private void setValues(Listbox listColumn, Listbox listOperator)
-    {
-    	setValues(listColumn, listOperator, null);
-    }
-
     private void setValues(Listbox listColumn, Listbox listOperator, String[] fields)
     {
         //  0 = Columns
@@ -685,8 +861,10 @@
         }
         else
         {
-        	String columnName = fields.length > INDEX_COLUMNNAME ? fields[INDEX_COLUMNNAME] : "";
-        	String operator = fields.length > INDEX_OPERATOR ? fields[INDEX_OPERATOR] : "";
+        	// 0 - column
+        	String columnName = fields.length > 0 ? fields[0] : "";
+        	// 1 - operator
+        	String operator = fields.length > 1 ? fields[1] : "";
 
             boolean selected = false;
             listColumn.appendItem("","");
@@ -715,6 +893,7 @@
             }
             if(!selected) listOperator.setSelectedIndex(0);
         }
+                
     }   // setValues
 
     /**
@@ -766,25 +945,33 @@
                 Listbox listColumn = (Listbox)row.getFellow("listColumn"+row.getId());
                 Listbox listOperator = (Listbox)row.getFellow("listOperator"+row.getId());
 
-                if (listbox.getId().equals(listColumn.getId()))
-                {
-                    ListItem column = listColumn.getSelectedItem();
-                    if (column != null)
-                    {
-                        addOperators(column, listOperator);
-                    }
+                if (listbox.getId().equals(listColumn.getId()) || listbox.getId().equals(listOperator.getId())){
+	                if (listbox.getId().equals(listColumn.getId()))
+	                {
+	                    ListItem column = listColumn.getSelectedItem();
+	                    if (column != null)
+	                    {
+	                        addOperators(column, listOperator);
+	                    }
+	                }
+	                Component componentFrom = getEditorCompQueryFrom(row);
+	                Component componentTo = getEditorCompQueryTo(row);
+	
+	                addRowEditor(componentFrom, (ListCell)row.getFellow("cellQueryFrom"+row.getId()));
+	                addRowEditor(componentTo,(ListCell)row.getFellow("cellQueryTo"+row.getId()));
                 }
-                Component componentFrom = getEditorCompQueryFrom(row);
-                Component componentTo = getEditorCompQueryTo(row);
-
-                addRowEditor(componentFrom, (ListCell)row.getFellow("cellQueryFrom"+row.getId()));
-                addRowEditor(componentTo,(ListCell)row.getFellow("cellQueryTo"+row.getId()));
             }
     		else if (event.getTarget() == fQueryName)
     		{
     			int index = fQueryName.getSelectedIndex();
     			if(index < 0) return;
-    			parseUserQuery(userQueries[index]);
+    			if(index == 0) { // no query - wipe and start over.
+    		        List<?> rowList = advancedPanel.getChildren();
+    		        for (int rowIndex = rowList.size() - 1; rowIndex >= 1; rowIndex--)
+    		        	rowList.remove(rowIndex);
+    				createFields();  
+    			}
+    			else parseUserQuery(userQueries[index-1]);
     		}
         }   //
         else if (Events.ON_CLICK.equals(event.getName()))
@@ -796,7 +983,7 @@
 
                 if ("btnNewAdv".equals(button.getAttribute("name").toString()))
                 {
-                    initFindAdvanced();
+                    createFields();
                 }
 
                 else if ("btnDeleteAdv".equals(button.getAttribute("name").toString()))
@@ -878,59 +1065,7 @@
 		{
 			String[] fields = segments[i].split(Pattern.quote(FIELD_SEPARATOR));
 
-	        ListItem listItem = new ListItem();
-	        listItem.setWidth("100%");
-	        advancedPanel.appendChild(listItem);
-
-	        Listbox listColumn = new Listbox();
-	        listColumn.setId("listColumn"+listItem.getId());
-	        listColumn.setName("listColumn");
-	        listColumn.setMold("select");
-	        listColumn.setRows(0);
-	        listColumn.addEventListener(Events.ON_SELECT,this);
-
-	        Listbox listOperator = new Listbox();
-	        listOperator.setId("listOperator"+listItem.getId());
-	        listOperator.setName("listOperator");
-	        listOperator.setMold("select");
-	        listOperator.setRows(0);
-	        listOperator.addEventListener(Events.ON_SELECT,this);
-
-	        setValues(listColumn, listOperator, fields);
-
-	        ListCell cellColumn = new ListCell();
-	        cellColumn.appendChild(listColumn);
-	        cellColumn.setId("cellColumn"+listItem.getId());
-
-	        ListCell cellOperator = new ListCell();
-	        cellOperator.appendChild(listOperator);
-	        cellOperator.setId("cellOperator"+listItem.getId());
-
-	        ListCell cellQueryFrom = new ListCell();
-	        cellQueryFrom.setId("cellQueryFrom"+listItem.getId());
-
-	        ListCell cellQueryTo = new ListCell();
-	        cellQueryTo.setId("cellQueryTo"+listItem.getId());
-
-	        listItem.appendChild(cellColumn);
-	        listItem.appendChild(cellOperator);
-	        listItem.appendChild(cellQueryFrom);
-	        listItem.appendChild(cellQueryTo);
-
-	        String columnName = listColumn.getSelectedItem().getValue().toString();
-        	String value = fields.length > INDEX_VALUE ? fields[INDEX_VALUE] : "";
-        	if(value.length() > 0)
-        	{
-        		cellQueryFrom.setAttribute("value", value); // Elaine 2009/03/16 - set attribute value
-    	        cellQueryFrom.appendChild(parseString(getTargetMField(columnName), value, listItem, false));
-        	}
-
-        	String value2 = fields.length > INDEX_VALUE2 ? fields[INDEX_VALUE2] : "";
-        	if(value2.length() > 0)
-        	{
-        		cellQueryTo.setAttribute("value", value); // Elaine 2009/03/16 - set attribute value
-        		cellQueryTo.appendChild(parseString(getTargetMField(columnName), value2, listItem, true));
-        	}
+			createFields(fields, i);
 		}
 
 		advancedPanel.invalidate();
@@ -1025,6 +1160,8 @@
 		m_query = new MQuery(m_tableName);
 		StringBuffer code = new StringBuffer();
 
+		int openBrackets = 0;
+
         List<?> rowList = advancedPanel.getChildren();
 
         for (int rowIndex = 1; rowIndex < rowList.size() ; rowIndex++)
@@ -1038,9 +1175,27 @@
             String infoName = column.toString();
             //
             GridField field = getTargetMField(ColumnName);
-            if(field == null) continue; // Elaine 2008/07/29
+            if(field == null) 
+            	continue; // Elaine 2008/07/29
             boolean isProductCategoryField = isProductCategoryField(field.getAD_Column_ID());
             String ColumnSQL = field.getColumnSQL(false);
+            // Left brackets
+            Listbox listLeftBracket = (Listbox)row.getFellow("listLeftBracket"+row.getId());
+            String lBrackets = listLeftBracket.getSelectedItem().getValue().toString();
+			if ( lBrackets != null )
+				openBrackets += lBrackets.length();
+			// Right brackets
+            Listbox listRightBracket = (Listbox)row.getFellow("listRightBracket"+row.getId());
+            String rBrackets = listRightBracket.getSelectedItem().getValue().toString();
+			if ( rBrackets != null )
+				openBrackets -= rBrackets.length();
+			// And Or
+            Listbox listAndOr = (Listbox)row.getFellow("listAndOr"+row.getId());
+            String andOr = listAndOr.getSelectedItem().getValue().toString();
+			boolean and = true;
+			if ( rowIndex > 1 ) {
+				and = !"OR".equals(andOr);
+			}            
             //  Op
             Listbox op = (Listbox)row.getFellow("listOperator"+row.getId());
             if (op == null)
@@ -1050,44 +1205,59 @@
             //  Value   ******
             ListCell cellQueryFrom = (ListCell)row.getFellow("cellQueryFrom"+row.getId());
             Object value = cellQueryFrom.getAttribute("value");
-            if (value == null)
-                continue;
-            Object parsedValue = parseValue(field, value);
-            if (parsedValue == null)
-                continue;
-            String infoDisplay = value.toString();
-            if (field.isLookup())
-                infoDisplay = field.getLookup().getDisplay(value);
-            else if (field.getDisplayType() == DisplayType.YesNo)
-                infoDisplay = Msg.getMsg(Env.getCtx(), infoDisplay);
-            //  Value2  ******
-            Object value2 = null;
-            if (MQuery.OPERATORS[MQuery.BETWEEN_INDEX].equals(op))
-            {
-                ListCell cellQueryTo = (ListCell)row.getFellow("cellQueryTo"+row.getId());
-                value2 = cellQueryTo.getAttribute("value");
-                if (value2 == null)
-                    continue;
-                Object parsedValue2 = parseValue(field, value2);
-                String infoDisplay_to = value2.toString();
-                if (parsedValue2 == null)
-                    continue;
-                m_query.addRangeRestriction(ColumnSQL, parsedValue, parsedValue2,
-                    infoName, infoDisplay, infoDisplay_to);
-            }
-            else if (isProductCategoryField && MQuery.OPERATORS[MQuery.EQUAL_INDEX].equals(op)) {
-                if (!(parsedValue instanceof Integer)) {
-                    continue;
-                }
-                m_query
-
-                .addRestriction(getSubCategoryWhereClause(((Integer) parsedValue).intValue()));
-            }
-            else
-                m_query.addRestriction(ColumnSQL, Operator, parsedValue,
-                    infoName, infoDisplay);
-
-			if (code.length() > 0)
+            ListCell cellQueryTo = (ListCell)row.getFellow("cellQueryTo"+row.getId());
+            Object value2 = cellQueryTo.getAttribute("value");
+            if (value == null){  // Capture the case "is null" ?
+				if ( MQuery.OPERATORS[MQuery.EQUAL_INDEX].equals(op) 
+						||  MQuery.OPERATORS[MQuery.NOT_EQUAL_INDEX].equals(op) )
+				{
+					m_query.addRestriction(ColumnSQL, Operator, null,
+							infoName, null, and, openBrackets);
+	            } else {
+	            	continue;
+	            }
+            } else {  // Value has a value - check for range too.
+	            Object parsedValue = parseValue(field, value);
+	            if (parsedValue == null)
+	                continue;
+	            //encrypt the value if we are searching an encrypted column.
+	            //TODO - verify compatibility with find.java
+	            if (field.isEncryptedColumn()) {
+	            	value = SecureEngine.encrypt(value);
+	            }
+	            String infoDisplay = value.toString();
+	            if (field.isLookup())
+	                infoDisplay = field.getLookup().getDisplay(value);
+	            else if (field.getDisplayType() == DisplayType.YesNo)
+	                infoDisplay = Msg.getMsg(Env.getCtx(), infoDisplay);
+	            //  Value2  ******
+	            if (MQuery.OPERATORS[MQuery.BETWEEN_INDEX].equals(op.getSelectedItem().toValueNamePair()))
+	            {
+	                if (value2 == null)
+	                    continue;
+	                Object parsedValue2 = parseValue(field, value2);
+	                String infoDisplay_to = value2.toString();
+	                if (parsedValue2 == null)
+	                    continue;
+	                //encrypt the value if we are searching an encrypted column.
+	                if (field.isEncryptedColumn()) {
+	                	value2 = SecureEngine.encrypt(value2);
+	                }
+	                m_query.addRangeRestriction(ColumnSQL, parsedValue, parsedValue2,
+	                			infoName, infoDisplay, infoDisplay_to, and, openBrackets);
+	            }
+	            else if (isProductCategoryField && MQuery.OPERATORS[MQuery.EQUAL_INDEX].equals(op)) {
+	                if (!(parsedValue instanceof Integer)) {
+	                    continue;
+	                }
+	                m_query.addRestriction(getSubCategoryWhereClause(((Integer) parsedValue).intValue()), 
+	                		and, openBrackets);
+	            }
+	            else
+	                m_query.addRestriction(ColumnSQL, Operator, parsedValue,
+	                    infoName, infoDisplay, and, openBrackets);
+	        }
+        	if (code.length() > 0)
 				code.append(SEGMENT_SEPARATOR);
 			code.append(ColumnName)
 				.append(FIELD_SEPARATOR)
@@ -1095,62 +1265,101 @@
 				.append(FIELD_SEPARATOR)
 				.append(value.toString())
 				.append(FIELD_SEPARATOR)
-				.append(value2 != null ? value2.toString() : "");
+				.append(value2 != null ? value2.toString() : "")
+				.append(FIELD_SEPARATOR)
+				.append(andOr)
+				.append(FIELD_SEPARATOR)
+				.append(lBrackets != null ? lBrackets : "")
+				.append(FIELD_SEPARATOR)
+				.append(rBrackets != null ? rBrackets : "");
 		}
+		
 		String selected = fQueryName.getValue();
-		if (selected != null && saveQuery) {
+		if (selected != null) {
 			String name = selected;
-			MUserQuery uq = MUserQuery.get(Env.getCtx(), m_AD_Tab_ID, name);
-			if (uq == null && code.length() > 0)
-			{
-				uq = new MUserQuery (Env.getCtx(), 0, null);
-				uq.setName (name);
-				uq.setAD_Tab_ID(m_AD_Tab_ID); //red1 UserQuery [ 1798539 ] taking in new field from Compiere
-				uq.setAD_User_ID(Env.getAD_User_ID(Env.getCtx())); //red1 - [ 1798539 ] missing in Compiere delayed source :-)
+			if ((fQueryName.getSelectedIndex() == 0 || name.equals(m_sLast)) && saveQuery){ // New query - needs a name
+
+				FDialog.warn (m_targetWindowNo, this, "NeedsName", name);
+				return;
 			}
-			else if (uq != null && code.length() == 0)
-			{
-				if (uq.delete(true))
+			if (saveQuery){
+				MUserQuery uq = MUserQuery.get(Env.getCtx(), m_AD_Tab_ID, name);
+				if (code.length() > 0) { // New or updated
+					if (uq == null) // Create a new record
+					{
+						uq = new MUserQuery (Env.getCtx(), 0, null);
+						uq.setName (name);
+						uq.setAD_Table_ID(m_AD_Table_ID);
+						uq.setAD_Tab_ID(m_AD_Tab_ID); //red1 UserQuery [ 1798539 ] taking in new field from Compiere
+						uq.setAD_User_ID(Env.getAD_User_ID(Env.getCtx())); //red1 - [ 1798539 ] missing in Compiere delayed source :-)
+					}
+					uq.setCode (code.toString());  // Update the query code
+					
+				} else	if (code.length() <= 0){ // Delete the query
+					if (uq.delete(true))
+					{
+						FDialog.info (m_targetWindowNo, this, "Deleted", name);
+						refreshUserQueries();
+					}
+					else
+						FDialog.warn (m_targetWindowNo, this, "DeleteError", name);
+					return;
+				}
+				//
+				if (uq.save())
 				{
-					FDialog.info (m_targetWindowNo, this, "Deleted", name);
+					FDialog.info (m_targetWindowNo, this, "Saved", name);
 					refreshUserQueries();
 				}
 				else
+					FDialog.warn (m_targetWindowNo, this, "SaveError", name);
+			}
+			//
+			MUserQuery last = MUserQuery.get(Env.getCtx(), m_AD_Tab_ID, m_sLast);
+			if (code.length() > 0) { // New or update				
+				if (last == null) // Create a new record
+				{
+					last = new MUserQuery (Env.getCtx(), 0, null);
+					last.setName (m_sLast);
+					last.setAD_Table_ID (m_AD_Table_ID);
+					last.setAD_Tab_ID(m_AD_Tab_ID); 
+					last.setAD_User_ID(Env.getAD_User_ID(Env.getCtx())); 
+				}
+				last.setCode (code.toString());  // Update the query code
+			} else	if (code.length() <= 0){ // Delete the query
+				if (!last.delete(true))
 					FDialog.warn (m_targetWindowNo, this, "DeleteError", name);
 				return;
 			}
-			else
-				return;
-			uq.setCode (code.toString());
-			uq.setAD_Table_ID (m_AD_Table_ID);
-			//
-			if (uq.save())
-			{
-				FDialog.info (m_targetWindowNo, this, "Saved", name);
-				refreshUserQueries();
-			}
-			else
+
+			if (!last.save())
 				FDialog.warn (m_targetWindowNo, this, "SaveError", name);
 		}
 	}	//	cmd_save
 
 	private void refreshUserQueries()
 	{
-		String value = fQueryName.getValue();
+		String value = m_sLast;
+		if (fQueryName.getItemCount()>0){ // The list is initialized
+			value = fQueryName.getValue();
+		}
 		userQueries = MUserQuery.get(Env.getCtx(), m_AD_Tab_ID);
 		fQueryName.getItems().clear();
 		boolean selected = false;
+		fQueryName.appendItem(m_sNew);  
 		for (int i = 0; i < userQueries.length; i++)
 		{
 			Comboitem ci = fQueryName.appendItem(userQueries[i].getName());
 			if(value.equals(userQueries[i].getName()))
 			{
 				fQueryName.setSelectedItem(ci);
+				parseUserQuery(userQueries[i]);
 				selected = true;
 			}
 		}
 
-		if(!selected) fQueryName.setValue("");
+		if(!selected) fQueryName.setSelectedIndex(0);
+		
 	}
 
     /**
@@ -1422,87 +1631,12 @@
     {
         m_isCancel = false; // teo_sarca [ 1708717 ]
         //  save pending
-        cmd_save();
+        cmd_save(false);
         if (getNoOfRecords(m_query, true) != 0)
           dispose();
     }   //  cmd_ok_Advanced
 
     /**
-     *  Save (Advanced)
-     */
-    private void cmd_save()
-    {
-        log.info("");
-        //
-        m_query = new MQuery(m_tableName);
-        List<?> rowList = advancedPanel.getChildren();
-
-        for (int rowIndex = 1; rowIndex < rowList.size() ; rowIndex++)
-        {
-            //  Column
-            ListItem row = (ListItem)rowList.get(rowIndex);
-            Listbox column = (Listbox)row.getFellow("listColumn"+row.getId());
-            if (column == null)
-                continue;
-            String ColumnName = column.getSelectedItem().getValue().toString();
-            String infoName = column.toString();
-            //
-            GridField field = getTargetMField(ColumnName);
-            if(field == null) continue; // Elaine 2008/07/29
-            boolean isProductCategoryField = isProductCategoryField(field.getAD_Column_ID());
-            String ColumnSQL = field.getColumnSQL(false);
-            //  Op
-            Listbox op = (Listbox)row.getFellow("listOperator"+row.getId());
-            if (op == null)
-                continue;
-            String Operator = op.getSelectedItem().getValue().toString();
-
-            //  Value   ******
-            ListCell cellQueryFrom = (ListCell)row.getFellow("cellQueryFrom"+row.getId());
-            Object value = cellQueryFrom.getAttribute("value");
-            if (value == null)
-                continue;
-            Object parsedValue = parseValue(field, value);
-            if (parsedValue == null)
-                continue;
-            //encrypt the value if we are searching an encrypted column.
-            if (field.isEncryptedColumn()) {
-            	value = SecureEngine.encrypt(value);
-            }
-            String infoDisplay = value.toString();
-            if (field.isLookup())
-                infoDisplay = field.getLookup().getDisplay(value);
-            else if (field.getDisplayType() == DisplayType.YesNo)
-                infoDisplay = Msg.getMsg(Env.getCtx(), infoDisplay);
-            //  Value2  ******
-            if (MQuery.OPERATORS[MQuery.BETWEEN_INDEX].equals(op.getSelectedItem().toValueNamePair()))
-            {
-                ListCell cellQueryTo = (ListCell)row.getFellow("cellQueryTo"+row.getId());
-                Object value2 = cellQueryTo.getAttribute("value");
-                if (value2 == null)
-                    continue;
-                Object parsedValue2 = parseValue(field, value2);
-                String infoDisplay_to = value2.toString();
-                if (parsedValue2 == null)
-                    continue;
-                m_query.addRangeRestriction(ColumnSQL, parsedValue, parsedValue2,
-                    infoName, infoDisplay, infoDisplay_to);
-            }
-            else if (isProductCategoryField && MQuery.OPERATORS[MQuery.EQUAL_INDEX].equals(op)) {
-                if (!(parsedValue instanceof Integer)) {
-                    continue;
-                }
-                m_query
-
-                .addRestriction(getSubCategoryWhereClause(((Integer) parsedValue).intValue()));
-            }
-            else
-                m_query.addRestriction(ColumnSQL, Operator, parsedValue,
-                    infoName, infoDisplay);
-        }
-    }   //  cmd_save
-
-    /**
      *  Get the number of records of target tab
      *  @param query where clause for target tab
      *  @param alertZeroRecords show dialog if there are no records
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/window/WContext.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/window/WContext.java	Mon Feb 10 21:08:53 2014 -0500
@@ -0,0 +1,112 @@
+/******************************************************************************
+ * Copyright (C) 2009 Low Heng Sin                                            *
+ * Copyright (C) 2009 Idalica Corporation                                     *
+ * Copyright (C) 2012 Michael McKay                                           *
+ * This program is free software; you can redistribute it and/or modify it    *
+ * under the terms version 2 of the GNU General Public License as published   *
+ * by the Free Software Foundation. This program is distributed in the hope   *
+ * that it will be useful, but WITHOUT ANY WARRANTY; without even the implied *
+ * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.           *
+ * See the GNU General Public License for more details.                       *
+ * You should have received a copy of the GNU General Public License along    *
+ * with this program; if not, write to the Free Software Foundation, Inc.,    *
+ * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.                     *
+ *****************************************************************************/
+package org.adempiere.webui.window;
+
+import java.util.Arrays;
+
+import org.adempiere.webui.component.ConfirmPanel;
+import org.adempiere.webui.component.Textbox;
+import org.adempiere.webui.component.ToolBar;
+import org.adempiere.webui.component.ToolBarButton;
+import org.adempiere.webui.component.Window;
+import org.adempiere.webui.session.SessionManager;
+import org.compiere.util.Env;
+import org.compiere.util.Msg;
+import org.zkoss.zk.ui.event.Event;
+import org.zkoss.zk.ui.event.EventListener;
+import org.zkoss.zk.ui.event.Events;
+import org.zkoss.zkex.zul.Borderlayout;
+import org.zkoss.zkex.zul.Center;
+import org.zkoss.zkex.zul.North;
+import org.zkoss.zkex.zul.South;
+import org.zkoss.zul.Div;
+
+/**
+ * Based on WPreference.java and Info.java
+ * @author Michael McKay
+ *
+ */
+public class WContext extends Window implements EventListener {
+
+	
+	// TODO - assign serial version ID
+	private static final long serialVersionUID = 0;
+	private ConfirmPanel confirmPanel;
+	
+	public WContext() {
+		super();
+		init();
+	}
+
+	private void init() {
+		
+		setAttribute(Window.MODE_KEY, Window.MODE_MODAL);
+		setBorder("normal");
+		setClosable(true);
+		int height = SessionManager.getAppDesktop().getClientInfo().desktopHeight * 85 / 100;
+		int width = SessionManager.getAppDesktop().getClientInfo().desktopWidth * 50 / 100;
+		this.setWidth(width + "px");
+		this.setHeight(height + "px");
+		this.setContentStyle("overflow: auto");
+        this.setSizable(true);      
+        this.setMaximizable(true);
+		this.setTitle(Msg.getMsg(Env.getCtx(), "Context"));
+
+		Textbox contextText = new Textbox();
+		contextText.setMultiline(true);
+		contextText.setReadonly(true);
+		contextText.setWidth("100%");
+		contextText.setHeight("100%");
+
+        confirmPanel = new ConfirmPanel(false, false, false, false, false, false);
+        confirmPanel.addActionListener(Events.ON_CLICK, this);
+        confirmPanel.setStyle("border-top: 2px groove #444; padding-top: 4px");
+		
+        Borderlayout mainPanel = new Borderlayout();
+        //mainPanel.setWidth("100%");
+        mainPanel.setHeight("100%");
+        Center center = new Center();
+        mainPanel.appendChild(center);
+        center.appendChild(contextText);
+        South south = new South();
+        mainPanel.appendChild(south);
+        south.appendChild(confirmPanel);
+
+		this.appendChild(mainPanel);
+
+		// Get the context
+		String[] contextArray = Env.getEntireContext(Env.getCtx());
+		Arrays.sort(contextArray);
+		contextText.setText("");
+		
+		// 	Need a specific format to add the eol character.
+		//  Otherwise, could use Arrays.toString(contextArray) 
+		StringBuffer sb = new StringBuffer("");
+		if (contextArray.length > 0) {
+			String eol = System.getProperty("line.separator"); 
+			for (int i=0; i < contextArray.length; i++ ) {
+				sb.append(contextArray[i] + eol);				
+			}
+		}
+		contextText.setText(sb.toString());
+	}
+
+	public void onEvent(Event event) throws Exception {
+		if (event.getTarget().equals(confirmPanel.getButton(ConfirmPanel.A_OK))) {
+			this.detach();
+		}
+	}
+
+}
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/window/WPAttributeDialog.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/window/WPAttributeDialog.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/window/WPAttributeDialog.java	Mon Feb 10 21:08:53 2014 -0500
@@ -39,6 +39,7 @@
 import org.adempiere.webui.component.Rows;
 import org.adempiere.webui.component.Textbox;
 import org.adempiere.webui.component.Window;
+import org.adempiere.webui.panel.InfoPAttributeInstancePanel;
 import org.adempiere.webui.session.SessionManager;
 import org.compiere.model.MAttribute;
 import org.compiere.model.MAttributeInstance;
@@ -48,9 +49,11 @@
 import org.compiere.model.MDocType;
 import org.compiere.model.MLot;
 import org.compiere.model.MLotCtl;
+import org.compiere.model.MProduct;
 import org.compiere.model.MQuery;
 import org.compiere.model.MRole;
 import org.compiere.model.MSerNoCtl;
+import org.compiere.model.MWindow;
 import org.compiere.model.X_M_MovementLine;
 import org.compiere.util.CLogger;
 import org.compiere.util.DB;
@@ -151,6 +154,7 @@
 	private int						m_C_BPartner_ID;
 	private int						m_AD_Column_ID;
 	private int						m_WindowNoParent;
+
 	/**	Enter Product Attributes		*/
 	private boolean					m_productWindow = false;
 	/**	Change							*/
@@ -188,6 +192,8 @@
 	private ConfirmPanel confirmPanel = new ConfirmPanel (true);
 	
 	private String m_columnName = null;
+	private MProduct m_product;
+	private boolean m_productASI;
 
 	/**
 	 *	Layout
@@ -231,6 +237,16 @@
 		if (m_M_Product_ID != 0)
 		{
 			//	Get Model
+			m_product = MProduct.get(Env.getCtx(), m_M_Product_ID);
+			if (m_product.getM_AttributeSetInstance_ID() > 0)
+			{
+				m_productASI = true;
+				//  The product has an instance associated with it.
+				if (m_M_AttributeSetInstance_ID != m_product.getM_AttributeSetInstance_ID())
+				{
+					log.fine("Different ASI than what is specified on Product!");
+				}
+			}
 			m_masi = MAttributeSetInstance.get(Env.getCtx(), m_M_AttributeSetInstance_ID, m_M_Product_ID);
 			if (m_masi == null)
 			{
@@ -255,47 +271,46 @@
 			FDialog.error(m_WindowNo, this, "PAttributeNoAttributeSet");
 			return false;
 		}
-		//	Product has no Instance Attributes
-		if (!m_productWindow && !as.isInstanceAttribute())
+
+		//	BF3468823 Show Product Attributes
+		//  Product attributes can be shown in any window but are read/write only in the product
+		//  window.  Instance attributes are shown in any window but the product window and are
+		//  always read/write.  The two are exclusive and can't co-exists.  
+		if (!m_productWindow || !m_productASI)	//	Set Instance Attributes and dialog controls
 		{
-			FDialog.error(m_WindowNo, this, "PAttributeNoInstanceAttribute");
-			return false;
-		}
-
-		//	Show Product Attributes
-		if (m_productWindow)
-		{
-			MAttribute[] attributes = as.getMAttributes (false);
-			log.fine ("Product Attributes=" + attributes.length);
-			for (int i = 0; i < attributes.length; i++)
-				addAttributeLine (rows, attributes[i], true, !m_productWindow);
-		}
-		else	//	Set Instance Attributes
-		{
-			Row row = new Row();
-			
-			//	New/Edit - Selection
-			if (m_M_AttributeSetInstance_ID == 0)		//	new
-				cbNewEdit.setLabel(Msg.getMsg(Env.getCtx(), "NewRecord"));
-			else
-				cbNewEdit.setLabel(Msg.getMsg(Env.getCtx(), "EditRecord"));
-			cbNewEdit.addEventListener(Events.ON_CHECK, this);
-			row.appendChild(cbNewEdit);
-			bSelect.setLabel(Msg.getMsg(Env.getCtx(), "SelectExisting"));
-			bSelect.setImage("images/PAttribute16.png");
-			bSelect.addEventListener(Events.ON_CLICK, this);
-			row.appendChild(bSelect);
-			rows.appendChild(row);
-			
-			//	All Attributes
+			if (!m_productASI)  // Instance attributes possible.  Set up controls.
+			{
+				Row row = new Row();
+				
+				//	New/Edit - Selection
+				if (m_M_AttributeSetInstance_ID == 0)		//	new
+					cbNewEdit.setLabel(Msg.getMsg(Env.getCtx(), "NewRecord"));
+				else
+					cbNewEdit.setLabel(Msg.getMsg(Env.getCtx(), "EditRecord"));
+				cbNewEdit.addEventListener(Events.ON_CHECK, this);
+				row.appendChild(cbNewEdit);
+				bSelect.setLabel(Msg.getMsg(Env.getCtx(), "SelectExisting"));
+				bSelect.setImage("images/PAttribute16.png");
+				bSelect.addEventListener(Events.ON_CLICK, this);
+				row.appendChild(bSelect);
+				rows.appendChild(row);
+			}
+			//	Add the Instance Attributes if any.  If its a product attribute set
+			//  this will do nothing.
 			MAttribute[] attributes = as.getMAttributes (true);
 			log.fine ("Instance Attributes=" + attributes.length);
 			for (int i = 0; i < attributes.length; i++)
 				addAttributeLine (rows, attributes[i], false, false);
 		}
+		//  Product attributes can be shown in any window but are read/write in the Product window only.
+		//  This will do nothing if it is an instance attribute set. 
+		MAttribute[] attributes = as.getMAttributes (false);
+		log.fine ("Product Attributes=" + attributes.length);
+		for (int i = 0; i < attributes.length; i++)
+			addAttributeLine (rows, attributes[i], true, !m_productWindow);
 
 		//	Lot
-		if (!m_productWindow && as.isLot())
+		if ((!m_productWindow || !m_productASI) && as.isLot())
 		{
 			Row row = new Row();
 			row.setParent(rows);
@@ -363,7 +378,7 @@
 		}	//	Lot
 
 		//	SerNo
-		if (!m_productWindow && as.isSerNo())
+		if ((!m_productWindow || !m_productASI) && as.isSerNo())
 		{
 			Row row = new Row();
 			row.setParent(rows);
@@ -389,7 +404,7 @@
 		}	//	SerNo
 
 		//	GuaranteeDate
-		if (!m_productWindow && as.isGuaranteeDate())
+		if ((!m_productWindow || !m_productASI) && as.isGuaranteeDate())
 		{
 			Row row = new Row();
 			row.setParent(rows);
@@ -488,8 +503,6 @@
 		}
 		else if (MAttribute.ATTRIBUTEVALUETYPE_Number.equals(attribute.getAttributeValueType()))
 		{
-//			VNumber editor = new VNumber(attribute.getName(), attribute.isMandatory(), 
-//				false, true, DisplayType.Number, attribute.getName());
 			NumberBox editor = new NumberBox(false);
 			if (instance != null)
 				editor.setValue(instance.getValueNumber());
@@ -503,8 +516,6 @@
 		}
 		else	//	Text Field
 		{
-//			VString editor = new VString (attribute.getName(), attribute.isMandatory(), 
-//				false, true, 20, INSTANCE_VALUE_LENGTH, null, null);
 			Textbox editor = new Textbox();
 			if (instance != null)
 				editor.setText(instance.getValue());
@@ -588,9 +599,14 @@
 		//	Cancel
 		else if (e.getTarget().getId().equals("Cancel"))
 		{
-			m_changed = false;
-			m_M_AttributeSetInstance_ID = 0;
-			m_M_Locator_ID = 0;
+			//  Don't try to delete product ASIs.  They can only be cleared 
+			//  in the product window.
+			if (!m_productASI) 
+			{
+				m_changed = m_M_AttributeSetInstance_ID != 0;
+				m_M_AttributeSetInstance_ID = 0;
+				m_M_Locator_ID = 0;
+			}
 			dispose();
 		}
 		//	Zoom M_Lot
@@ -621,10 +637,9 @@
 		}
 		
 		// teo_sarca [ 1564520 ] Inventory Move: can't select existing attributes
+		// Trifon - Always read Locator from Context. There are too many windows to read explicitly one by one.
 		int M_Locator_ID = 0;
-		if (m_AD_Column_ID == 8551) { // TODO: hardcoded: M_MovementLine[324].M_AttributeSetInstance_ID[8551]
-			M_Locator_ID = Env.getContextAsInt(Env.getCtx(), m_WindowNoParent, X_M_MovementLine.COLUMNNAME_M_Locator_ID, true); // only window
-		}
+		M_Locator_ID = Env.getContextAsInt(Env.getCtx(), m_WindowNoParent, X_M_MovementLine.COLUMNNAME_M_Locator_ID, true); // only window
 		
 		String title = "";
 		//	Get Text
@@ -640,7 +655,7 @@
 			pstmt.setInt(2, M_Locator_ID <= 0 ? M_Warehouse_ID : M_Locator_ID);
 			rs = pstmt.executeQuery();
 			if (rs.next()) {
-				title = rs.getString(1) + " - " + rs.getString(2);
+				title = ": " + rs.getString(1) + " - " + rs.getString(2);
 				M_Warehouse_ID = rs.getInt(3); // fetch the actual warehouse - teo_sarca [ 1564520 ]
 			}
 		}
@@ -654,17 +669,28 @@
 			rs = null; pstmt = null;
 		}
 		//		
-		WPAttributeInstance pai = new WPAttributeInstance(title, 
+		InfoPAttributeInstancePanel pai = new InfoPAttributeInstancePanel(this, title, 
 			M_Warehouse_ID, M_Locator_ID, m_M_Product_ID, m_C_BPartner_ID);
-		if (pai.getM_AttributeSetInstance_ID() != -1)
+		//
+		if (m_M_AttributeSetInstance_ID != pai.getM_AttributeSetInstance_ID() ||
+				!(m_M_AttributeSetInstance_ID == 0 && pai.getM_AttributeSetInstance_ID() == -1))
 		{
-			m_M_AttributeSetInstance_ID = pai.getM_AttributeSetInstance_ID();
-			m_M_AttributeSetInstanceName = pai.getM_AttributeSetInstanceName();
-			m_M_Locator_ID = pai.getM_Locator_ID();
 			m_changed = true;
-			return true;
+			//
+			if (pai.getM_AttributeSetInstance_ID() != -1)
+			{
+				m_M_AttributeSetInstance_ID = pai.getM_AttributeSetInstance_ID();
+				m_M_AttributeSetInstanceName = pai.getM_AttributeSetInstanceName();
+				m_M_Locator_ID = pai.getM_Locator_ID();
+			}
+			else
+			{
+				m_M_AttributeSetInstance_ID = 0;
+				m_M_AttributeSetInstanceName = "";
+				// Leave the locator alone
+			}
 		}
-		return false;
+		return m_changed;
 	}	//	cmd_select
 
 	/**
@@ -708,18 +734,8 @@
 		zoomQuery.addRestriction("M_Lot_ID", MQuery.EQUAL, M_Lot_ID);
 		log.info(zoomQuery.toString());
 		//
-		//TODO: to port
-		/*
-		int AD_Window_ID = 257;		//	Lot
-		AWindow frame = new AWindow();
-		if (frame.initWindow(AD_Window_ID, zoomQuery))
-		{
-			this.setVisible(false);
-			this.setModal (false);	//	otherwise blocked
-			this.setVisible(true);
-			AEnv.addToWindowManager(frame);
-			AEnv.showScreen(frame, SwingConstants.EAST);
-		}*/
+		int AD_Window_ID = MWindow.getWindow_ID("Lot");		//	Lot
+		AEnv.zoom (AD_Window_ID, zoomQuery);
 	}	//	cmd_zoom
 
 	/**
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/window/WPAttributeInstance.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/window/WPAttributeInstance.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/window/WPAttributeInstance.java	Mon Feb 10 21:08:53 2014 -0500
@@ -49,6 +49,8 @@
  *
  *  @author     Jorg Janke
  *  @version    $Id: PAttributeInstance.java,v 1.3 2006/07/30 00:51:27 jjanke Exp $
+ *  
+ *  Possible duplicate of InfoPAttributeInstancePanel.java?
  */
 public class WPAttributeInstance extends Window implements EventListener 
 {
diff -r 09ae44c5cfa6 -r 26ba5a018866 zkwebui/WEB-INF/src/org/adempiere/webui/window/ZkReportViewer.java
--- a/zkwebui/WEB-INF/src/org/adempiere/webui/window/ZkReportViewer.java	Mon Feb 03 23:37:35 2014 -0500
+++ b/zkwebui/WEB-INF/src/org/adempiere/webui/window/ZkReportViewer.java	Mon Feb 10 21:08:53 2014 -0500
@@ -39,6 +39,7 @@
 import org.adempiere.webui.event.ZoomEvent;
 import org.adempiere.webui.panel.StatusBarPanel;
 import org.adempiere.webui.report.HTMLExtension;
+import org.adempiere.webui.session.SessionManager;
 import org.compiere.model.GridField;
 import org.compiere.model.MArchive;
 import org.compiere.model.MClient;
@@ -145,6 +146,8 @@
 		super();
 		
 		log.info("");
+		m_WindowNo = SessionManager.getAppDesktop().registerWindow(this);
+		Env.setContext(re.getCtx(), m_WindowNo, "_WinInfo_IsReportViewer", "Y");
 		m_reportEngine = re;
 		m_AD_Table_ID = re.getPrintFormat().getAD_Table_ID();
 		if (!MRole.getDefault().isCanReport(m_AD_Table_ID))
@@ -512,7 +515,7 @@
 	 */
 	public void onClose()
 	{
-		Env.clearWinContext(m_WindowNo);
+		SessionManager.getAppDesktop().unregisterWindow(m_WindowNo);
 		m_reportEngine = null;
 		m_ctx = null;
 		super.onClose();
